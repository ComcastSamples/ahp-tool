(function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	var chartist = createCommonjsModule(function (module) {
	(function (root, factory) {
	  if (module.exports) {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    root['Chartist'] = factory();
	  }
	}(commonjsGlobal, function () {

	/* Chartist.js 0.11.0
	 * Copyright Â© 2017 Gion Kunz
	 * Free to use under either the WTFPL license or the MIT license.
	 * https://raw.githubusercontent.com/gionkunz/chartist-js/master/LICENSE-WTFPL
	 * https://raw.githubusercontent.com/gionkunz/chartist-js/master/LICENSE-MIT
	 */
	/**
	 * The core module of Chartist that is mainly providing static functions and higher level functions for chart modules.
	 *
	 * @module Chartist.Core
	 */
	var Chartist = {
	  version: '0.11.0'
	};

	(function (window, document, Chartist) {

	  /**
	   * This object contains all namespaces used within Chartist.
	   *
	   * @memberof Chartist.Core
	   * @type {{svg: string, xmlns: string, xhtml: string, xlink: string, ct: string}}
	   */
	  Chartist.namespaces = {
	    svg: 'http://www.w3.org/2000/svg',
	    xmlns: 'http://www.w3.org/2000/xmlns/',
	    xhtml: 'http://www.w3.org/1999/xhtml',
	    xlink: 'http://www.w3.org/1999/xlink',
	    ct: 'http://gionkunz.github.com/chartist-js/ct'
	  };

	  /**
	   * Helps to simplify functional style code
	   *
	   * @memberof Chartist.Core
	   * @param {*} n This exact value will be returned by the noop function
	   * @return {*} The same value that was provided to the n parameter
	   */
	  Chartist.noop = function (n) {
	    return n;
	  };

	  /**
	   * Generates a-z from a number 0 to 26
	   *
	   * @memberof Chartist.Core
	   * @param {Number} n A number from 0 to 26 that will result in a letter a-z
	   * @return {String} A character from a-z based on the input number n
	   */
	  Chartist.alphaNumerate = function (n) {
	    // Limit to a-z
	    return String.fromCharCode(97 + n % 26);
	  };

	  /**
	   * Simple recursive object extend
	   *
	   * @memberof Chartist.Core
	   * @param {Object} target Target object where the source will be merged into
	   * @param {Object...} sources This object (objects) will be merged into target and then target is returned
	   * @return {Object} An object that has the same reference as target but is extended and merged with the properties of source
	   */
	  Chartist.extend = function (target) {
	    var i, source, sourceProp;
	    target = target || {};

	    for (i = 1; i < arguments.length; i++) {
	      source = arguments[i];
	      for (var prop in source) {
	        sourceProp = source[prop];
	        if (typeof sourceProp === 'object' && sourceProp !== null && !(sourceProp instanceof Array)) {
	          target[prop] = Chartist.extend(target[prop], sourceProp);
	        } else {
	          target[prop] = sourceProp;
	        }
	      }
	    }

	    return target;
	  };

	  /**
	   * Replaces all occurrences of subStr in str with newSubStr and returns a new string.
	   *
	   * @memberof Chartist.Core
	   * @param {String} str
	   * @param {String} subStr
	   * @param {String} newSubStr
	   * @return {String}
	   */
	  Chartist.replaceAll = function(str, subStr, newSubStr) {
	    return str.replace(new RegExp(subStr, 'g'), newSubStr);
	  };

	  /**
	   * Converts a number to a string with a unit. If a string is passed then this will be returned unmodified.
	   *
	   * @memberof Chartist.Core
	   * @param {Number} value
	   * @param {String} unit
	   * @return {String} Returns the passed number value with unit.
	   */
	  Chartist.ensureUnit = function(value, unit) {
	    if(typeof value === 'number') {
	      value = value + unit;
	    }

	    return value;
	  };

	  /**
	   * Converts a number or string to a quantity object.
	   *
	   * @memberof Chartist.Core
	   * @param {String|Number} input
	   * @return {Object} Returns an object containing the value as number and the unit as string.
	   */
	  Chartist.quantity = function(input) {
	    if (typeof input === 'string') {
	      var match = (/^(\d+)\s*(.*)$/g).exec(input);
	      return {
	        value : +match[1],
	        unit: match[2] || undefined
	      };
	    }
	    return { value: input };
	  };

	  /**
	   * This is a wrapper around document.querySelector that will return the query if it's already of type Node
	   *
	   * @memberof Chartist.Core
	   * @param {String|Node} query The query to use for selecting a Node or a DOM node that will be returned directly
	   * @return {Node}
	   */
	  Chartist.querySelector = function(query) {
	    return query instanceof Node ? query : document.querySelector(query);
	  };

	  /**
	   * Functional style helper to produce array with given length initialized with undefined values
	   *
	   * @memberof Chartist.Core
	   * @param length
	   * @return {Array}
	   */
	  Chartist.times = function(length) {
	    return Array.apply(null, new Array(length));
	  };

	  /**
	   * Sum helper to be used in reduce functions
	   *
	   * @memberof Chartist.Core
	   * @param previous
	   * @param current
	   * @return {*}
	   */
	  Chartist.sum = function(previous, current) {
	    return previous + (current ? current : 0);
	  };

	  /**
	   * Multiply helper to be used in `Array.map` for multiplying each value of an array with a factor.
	   *
	   * @memberof Chartist.Core
	   * @param {Number} factor
	   * @returns {Function} Function that can be used in `Array.map` to multiply each value in an array
	   */
	  Chartist.mapMultiply = function(factor) {
	    return function(num) {
	      return num * factor;
	    };
	  };

	  /**
	   * Add helper to be used in `Array.map` for adding a addend to each value of an array.
	   *
	   * @memberof Chartist.Core
	   * @param {Number} addend
	   * @returns {Function} Function that can be used in `Array.map` to add a addend to each value in an array
	   */
	  Chartist.mapAdd = function(addend) {
	    return function(num) {
	      return num + addend;
	    };
	  };

	  /**
	   * Map for multi dimensional arrays where their nested arrays will be mapped in serial. The output array will have the length of the largest nested array. The callback function is called with variable arguments where each argument is the nested array value (or undefined if there are no more values).
	   *
	   * @memberof Chartist.Core
	   * @param arr
	   * @param cb
	   * @return {Array}
	   */
	  Chartist.serialMap = function(arr, cb) {
	    var result = [],
	        length = Math.max.apply(null, arr.map(function(e) {
	          return e.length;
	        }));

	    Chartist.times(length).forEach(function(e, index) {
	      var args = arr.map(function(e) {
	        return e[index];
	      });

	      result[index] = cb.apply(null, args);
	    });

	    return result;
	  };

	  /**
	   * This helper function can be used to round values with certain precision level after decimal. This is used to prevent rounding errors near float point precision limit.
	   *
	   * @memberof Chartist.Core
	   * @param {Number} value The value that should be rounded with precision
	   * @param {Number} [digits] The number of digits after decimal used to do the rounding
	   * @returns {number} Rounded value
	   */
	  Chartist.roundWithPrecision = function(value, digits) {
	    var precision = Math.pow(10, digits || Chartist.precision);
	    return Math.round(value * precision) / precision;
	  };

	  /**
	   * Precision level used internally in Chartist for rounding. If you require more decimal places you can increase this number.
	   *
	   * @memberof Chartist.Core
	   * @type {number}
	   */
	  Chartist.precision = 8;

	  /**
	   * A map with characters to escape for strings to be safely used as attribute values.
	   *
	   * @memberof Chartist.Core
	   * @type {Object}
	   */
	  Chartist.escapingMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    '\'': '&#039;'
	  };

	  /**
	   * This function serializes arbitrary data to a string. In case of data that can't be easily converted to a string, this function will create a wrapper object and serialize the data using JSON.stringify. The outcoming string will always be escaped using Chartist.escapingMap.
	   * If called with null or undefined the function will return immediately with null or undefined.
	   *
	   * @memberof Chartist.Core
	   * @param {Number|String|Object} data
	   * @return {String}
	   */
	  Chartist.serialize = function(data) {
	    if(data === null || data === undefined) {
	      return data;
	    } else if(typeof data === 'number') {
	      data = ''+data;
	    } else if(typeof data === 'object') {
	      data = JSON.stringify({data: data});
	    }

	    return Object.keys(Chartist.escapingMap).reduce(function(result, key) {
	      return Chartist.replaceAll(result, key, Chartist.escapingMap[key]);
	    }, data);
	  };

	  /**
	   * This function de-serializes a string previously serialized with Chartist.serialize. The string will always be unescaped using Chartist.escapingMap before it's returned. Based on the input value the return type can be Number, String or Object. JSON.parse is used with try / catch to see if the unescaped string can be parsed into an Object and this Object will be returned on success.
	   *
	   * @memberof Chartist.Core
	   * @param {String} data
	   * @return {String|Number|Object}
	   */
	  Chartist.deserialize = function(data) {
	    if(typeof data !== 'string') {
	      return data;
	    }

	    data = Object.keys(Chartist.escapingMap).reduce(function(result, key) {
	      return Chartist.replaceAll(result, Chartist.escapingMap[key], key);
	    }, data);

	    try {
	      data = JSON.parse(data);
	      data = data.data !== undefined ? data.data : data;
	    } catch(e) {}

	    return data;
	  };

	  /**
	   * Create or reinitialize the SVG element for the chart
	   *
	   * @memberof Chartist.Core
	   * @param {Node} container The containing DOM Node object that will be used to plant the SVG element
	   * @param {String} width Set the width of the SVG element. Default is 100%
	   * @param {String} height Set the height of the SVG element. Default is 100%
	   * @param {String} className Specify a class to be added to the SVG element
	   * @return {Object} The created/reinitialized SVG element
	   */
	  Chartist.createSvg = function (container, width, height, className) {
	    var svg;

	    width = width || '100%';
	    height = height || '100%';

	    // Check if there is a previous SVG element in the container that contains the Chartist XML namespace and remove it
	    // Since the DOM API does not support namespaces we need to manually search the returned list http://www.w3.org/TR/selectors-api/
	    Array.prototype.slice.call(container.querySelectorAll('svg')).filter(function filterChartistSvgObjects(svg) {
	      return svg.getAttributeNS(Chartist.namespaces.xmlns, 'ct');
	    }).forEach(function removePreviousElement(svg) {
	      container.removeChild(svg);
	    });

	    // Create svg object with width and height or use 100% as default
	    svg = new Chartist.Svg('svg').attr({
	      width: width,
	      height: height
	    }).addClass(className);

	    svg._node.style.width = width;
	    svg._node.style.height = height;

	    // Add the DOM node to our container
	    container.appendChild(svg._node);

	    return svg;
	  };

	  /**
	   * Ensures that the data object passed as second argument to the charts is present and correctly initialized.
	   *
	   * @param  {Object} data The data object that is passed as second argument to the charts
	   * @return {Object} The normalized data object
	   */
	  Chartist.normalizeData = function(data, reverse, multi) {
	    var labelCount;
	    var output = {
	      raw: data,
	      normalized: {}
	    };

	    // Check if we should generate some labels based on existing series data
	    output.normalized.series = Chartist.getDataArray({
	      series: data.series || []
	    }, reverse, multi);

	    // If all elements of the normalized data array are arrays we're dealing with
	    // multi series data and we need to find the largest series if they are un-even
	    if (output.normalized.series.every(function(value) {
	        return value instanceof Array;
	      })) {
	      // Getting the series with the the most elements
	      labelCount = Math.max.apply(null, output.normalized.series.map(function(series) {
	        return series.length;
	      }));
	    } else {
	      // We're dealing with Pie data so we just take the normalized array length
	      labelCount = output.normalized.series.length;
	    }

	    output.normalized.labels = (data.labels || []).slice();
	    // Padding the labels to labelCount with empty strings
	    Array.prototype.push.apply(
	      output.normalized.labels,
	      Chartist.times(Math.max(0, labelCount - output.normalized.labels.length)).map(function() {
	        return '';
	      })
	    );

	    if(reverse) {
	      Chartist.reverseData(output.normalized);
	    }

	    return output;
	  };

	  /**
	   * This function safely checks if an objects has an owned property.
	   *
	   * @param {Object} object The object where to check for a property
	   * @param {string} property The property name
	   * @returns {boolean} Returns true if the object owns the specified property
	   */
	  Chartist.safeHasProperty = function(object, property) {
	    return object !== null &&
	      typeof object === 'object' &&
	      object.hasOwnProperty(property);
	  };

	  /**
	   * Checks if a value is considered a hole in the data series.
	   *
	   * @param {*} value
	   * @returns {boolean} True if the value is considered a data hole
	   */
	  Chartist.isDataHoleValue = function(value) {
	    return value === null ||
	      value === undefined ||
	      (typeof value === 'number' && isNaN(value));
	  };

	  /**
	   * Reverses the series, labels and series data arrays.
	   *
	   * @memberof Chartist.Core
	   * @param data
	   */
	  Chartist.reverseData = function(data) {
	    data.labels.reverse();
	    data.series.reverse();
	    for (var i = 0; i < data.series.length; i++) {
	      if(typeof(data.series[i]) === 'object' && data.series[i].data !== undefined) {
	        data.series[i].data.reverse();
	      } else if(data.series[i] instanceof Array) {
	        data.series[i].reverse();
	      }
	    }
	  };

	  /**
	   * Convert data series into plain array
	   *
	   * @memberof Chartist.Core
	   * @param {Object} data The series object that contains the data to be visualized in the chart
	   * @param {Boolean} [reverse] If true the whole data is reversed by the getDataArray call. This will modify the data object passed as first parameter. The labels as well as the series order is reversed. The whole series data arrays are reversed too.
	   * @param {Boolean} [multi] Create a multi dimensional array from a series data array where a value object with `x` and `y` values will be created.
	   * @return {Array} A plain array that contains the data to be visualized in the chart
	   */
	  Chartist.getDataArray = function(data, reverse, multi) {
	    // Recursively walks through nested arrays and convert string values to numbers and objects with value properties
	    // to values. Check the tests in data core -> data normalization for a detailed specification of expected values
	    function recursiveConvert(value) {
	      if(Chartist.safeHasProperty(value, 'value')) {
	        // We are dealing with value object notation so we need to recurse on value property
	        return recursiveConvert(value.value);
	      } else if(Chartist.safeHasProperty(value, 'data')) {
	        // We are dealing with series object notation so we need to recurse on data property
	        return recursiveConvert(value.data);
	      } else if(value instanceof Array) {
	        // Data is of type array so we need to recurse on the series
	        return value.map(recursiveConvert);
	      } else if(Chartist.isDataHoleValue(value)) {
	        // We're dealing with a hole in the data and therefore need to return undefined
	        // We're also returning undefined for multi value output
	        return undefined;
	      } else {
	        // We need to prepare multi value output (x and y data)
	        if(multi) {
	          var multiValue = {};

	          // Single series value arrays are assumed to specify the Y-Axis value
	          // For example: [1, 2] => [{x: undefined, y: 1}, {x: undefined, y: 2}]
	          // If multi is a string then it's assumed that it specified which dimension should be filled as default
	          if(typeof multi === 'string') {
	            multiValue[multi] = Chartist.getNumberOrUndefined(value);
	          } else {
	            multiValue.y = Chartist.getNumberOrUndefined(value);
	          }

	          multiValue.x = value.hasOwnProperty('x') ? Chartist.getNumberOrUndefined(value.x) : multiValue.x;
	          multiValue.y = value.hasOwnProperty('y') ? Chartist.getNumberOrUndefined(value.y) : multiValue.y;

	          return multiValue;

	        } else {
	          // We can return simple data
	          return Chartist.getNumberOrUndefined(value);
	        }
	      }
	    }

	    return data.series.map(recursiveConvert);
	  };

	  /**
	   * Converts a number into a padding object.
	   *
	   * @memberof Chartist.Core
	   * @param {Object|Number} padding
	   * @param {Number} [fallback] This value is used to fill missing values if a incomplete padding object was passed
	   * @returns {Object} Returns a padding object containing top, right, bottom, left properties filled with the padding number passed in as argument. If the argument is something else than a number (presumably already a correct padding object) then this argument is directly returned.
	   */
	  Chartist.normalizePadding = function(padding, fallback) {
	    fallback = fallback || 0;

	    return typeof padding === 'number' ? {
	      top: padding,
	      right: padding,
	      bottom: padding,
	      left: padding
	    } : {
	      top: typeof padding.top === 'number' ? padding.top : fallback,
	      right: typeof padding.right === 'number' ? padding.right : fallback,
	      bottom: typeof padding.bottom === 'number' ? padding.bottom : fallback,
	      left: typeof padding.left === 'number' ? padding.left : fallback
	    };
	  };

	  Chartist.getMetaData = function(series, index) {
	    var value = series.data ? series.data[index] : series[index];
	    return value ? value.meta : undefined;
	  };

	  /**
	   * Calculate the order of magnitude for the chart scale
	   *
	   * @memberof Chartist.Core
	   * @param {Number} value The value Range of the chart
	   * @return {Number} The order of magnitude
	   */
	  Chartist.orderOfMagnitude = function (value) {
	    return Math.floor(Math.log(Math.abs(value)) / Math.LN10);
	  };

	  /**
	   * Project a data length into screen coordinates (pixels)
	   *
	   * @memberof Chartist.Core
	   * @param {Object} axisLength The svg element for the chart
	   * @param {Number} length Single data value from a series array
	   * @param {Object} bounds All the values to set the bounds of the chart
	   * @return {Number} The projected data length in pixels
	   */
	  Chartist.projectLength = function (axisLength, length, bounds) {
	    return length / bounds.range * axisLength;
	  };

	  /**
	   * Get the height of the area in the chart for the data series
	   *
	   * @memberof Chartist.Core
	   * @param {Object} svg The svg element for the chart
	   * @param {Object} options The Object that contains all the optional values for the chart
	   * @return {Number} The height of the area in the chart for the data series
	   */
	  Chartist.getAvailableHeight = function (svg, options) {
	    return Math.max((Chartist.quantity(options.height).value || svg.height()) - (options.chartPadding.top +  options.chartPadding.bottom) - options.axisX.offset, 0);
	  };

	  /**
	   * Get highest and lowest value of data array. This Array contains the data that will be visualized in the chart.
	   *
	   * @memberof Chartist.Core
	   * @param {Array} data The array that contains the data to be visualized in the chart
	   * @param {Object} options The Object that contains the chart options
	   * @param {String} dimension Axis dimension 'x' or 'y' used to access the correct value and high / low configuration
	   * @return {Object} An object that contains the highest and lowest value that will be visualized on the chart.
	   */
	  Chartist.getHighLow = function (data, options, dimension) {
	    // TODO: Remove workaround for deprecated global high / low config. Axis high / low configuration is preferred
	    options = Chartist.extend({}, options, dimension ? options['axis' + dimension.toUpperCase()] : {});

	    var highLow = {
	        high: options.high === undefined ? -Number.MAX_VALUE : +options.high,
	        low: options.low === undefined ? Number.MAX_VALUE : +options.low
	      };
	    var findHigh = options.high === undefined;
	    var findLow = options.low === undefined;

	    // Function to recursively walk through arrays and find highest and lowest number
	    function recursiveHighLow(data) {
	      if(data === undefined) {
	        return undefined;
	      } else if(data instanceof Array) {
	        for (var i = 0; i < data.length; i++) {
	          recursiveHighLow(data[i]);
	        }
	      } else {
	        var value = dimension ? +data[dimension] : +data;

	        if (findHigh && value > highLow.high) {
	          highLow.high = value;
	        }

	        if (findLow && value < highLow.low) {
	          highLow.low = value;
	        }
	      }
	    }

	    // Start to find highest and lowest number recursively
	    if(findHigh || findLow) {
	      recursiveHighLow(data);
	    }

	    // Overrides of high / low based on reference value, it will make sure that the invisible reference value is
	    // used to generate the chart. This is useful when the chart always needs to contain the position of the
	    // invisible reference value in the view i.e. for bipolar scales.
	    if (options.referenceValue || options.referenceValue === 0) {
	      highLow.high = Math.max(options.referenceValue, highLow.high);
	      highLow.low = Math.min(options.referenceValue, highLow.low);
	    }

	    // If high and low are the same because of misconfiguration or flat data (only the same value) we need
	    // to set the high or low to 0 depending on the polarity
	    if (highLow.high <= highLow.low) {
	      // If both values are 0 we set high to 1
	      if (highLow.low === 0) {
	        highLow.high = 1;
	      } else if (highLow.low < 0) {
	        // If we have the same negative value for the bounds we set bounds.high to 0
	        highLow.high = 0;
	      } else if (highLow.high > 0) {
	        // If we have the same positive value for the bounds we set bounds.low to 0
	        highLow.low = 0;
	      } else {
	        // If data array was empty, values are Number.MAX_VALUE and -Number.MAX_VALUE. Set bounds to prevent errors
	        highLow.high = 1;
	        highLow.low = 0;
	      }
	    }

	    return highLow;
	  };

	  /**
	   * Checks if a value can be safely coerced to a number. This includes all values except null which result in finite numbers when coerced. This excludes NaN, since it's not finite.
	   *
	   * @memberof Chartist.Core
	   * @param value
	   * @returns {Boolean}
	   */
	  Chartist.isNumeric = function(value) {
	    return value === null ? false : isFinite(value);
	  };

	  /**
	   * Returns true on all falsey values except the numeric value 0.
	   *
	   * @memberof Chartist.Core
	   * @param value
	   * @returns {boolean}
	   */
	  Chartist.isFalseyButZero = function(value) {
	    return !value && value !== 0;
	  };

	  /**
	   * Returns a number if the passed parameter is a valid number or the function will return undefined. On all other values than a valid number, this function will return undefined.
	   *
	   * @memberof Chartist.Core
	   * @param value
	   * @returns {*}
	   */
	  Chartist.getNumberOrUndefined = function(value) {
	    return Chartist.isNumeric(value) ? +value : undefined;
	  };

	  /**
	   * Checks if provided value object is multi value (contains x or y properties)
	   *
	   * @memberof Chartist.Core
	   * @param value
	   */
	  Chartist.isMultiValue = function(value) {
	    return typeof value === 'object' && ('x' in value || 'y' in value);
	  };

	  /**
	   * Gets a value from a dimension `value.x` or `value.y` while returning value directly if it's a valid numeric value. If the value is not numeric and it's falsey this function will return `defaultValue`.
	   *
	   * @memberof Chartist.Core
	   * @param value
	   * @param dimension
	   * @param defaultValue
	   * @returns {*}
	   */
	  Chartist.getMultiValue = function(value, dimension) {
	    if(Chartist.isMultiValue(value)) {
	      return Chartist.getNumberOrUndefined(value[dimension || 'y']);
	    } else {
	      return Chartist.getNumberOrUndefined(value);
	    }
	  };

	  /**
	   * Pollard Rho Algorithm to find smallest factor of an integer value. There are more efficient algorithms for factorization, but this one is quite efficient and not so complex.
	   *
	   * @memberof Chartist.Core
	   * @param {Number} num An integer number where the smallest factor should be searched for
	   * @returns {Number} The smallest integer factor of the parameter num.
	   */
	  Chartist.rho = function(num) {
	    if(num === 1) {
	      return num;
	    }

	    function gcd(p, q) {
	      if (p % q === 0) {
	        return q;
	      } else {
	        return gcd(q, p % q);
	      }
	    }

	    function f(x) {
	      return x * x + 1;
	    }

	    var x1 = 2, x2 = 2, divisor;
	    if (num % 2 === 0) {
	      return 2;
	    }

	    do {
	      x1 = f(x1) % num;
	      x2 = f(f(x2)) % num;
	      divisor = gcd(Math.abs(x1 - x2), num);
	    } while (divisor === 1);

	    return divisor;
	  };

	  /**
	   * Calculate and retrieve all the bounds for the chart and return them in one array
	   *
	   * @memberof Chartist.Core
	   * @param {Number} axisLength The length of the Axis used for
	   * @param {Object} highLow An object containing a high and low property indicating the value range of the chart.
	   * @param {Number} scaleMinSpace The minimum projected length a step should result in
	   * @param {Boolean} onlyInteger
	   * @return {Object} All the values to set the bounds of the chart
	   */
	  Chartist.getBounds = function (axisLength, highLow, scaleMinSpace, onlyInteger) {
	    var i,
	      optimizationCounter = 0,
	      newMin,
	      newMax,
	      bounds = {
	        high: highLow.high,
	        low: highLow.low
	      };

	    bounds.valueRange = bounds.high - bounds.low;
	    bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange);
	    bounds.step = Math.pow(10, bounds.oom);
	    bounds.min = Math.floor(bounds.low / bounds.step) * bounds.step;
	    bounds.max = Math.ceil(bounds.high / bounds.step) * bounds.step;
	    bounds.range = bounds.max - bounds.min;
	    bounds.numberOfSteps = Math.round(bounds.range / bounds.step);

	    // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace
	    // If we are already below the scaleMinSpace value we will scale up
	    var length = Chartist.projectLength(axisLength, bounds.step, bounds);
	    var scaleUp = length < scaleMinSpace;
	    var smallestFactor = onlyInteger ? Chartist.rho(bounds.range) : 0;

	    // First check if we should only use integer steps and if step 1 is still larger than scaleMinSpace so we can use 1
	    if(onlyInteger && Chartist.projectLength(axisLength, 1, bounds) >= scaleMinSpace) {
	      bounds.step = 1;
	    } else if(onlyInteger && smallestFactor < bounds.step && Chartist.projectLength(axisLength, smallestFactor, bounds) >= scaleMinSpace) {
	      // If step 1 was too small, we can try the smallest factor of range
	      // If the smallest factor is smaller than the current bounds.step and the projected length of smallest factor
	      // is larger than the scaleMinSpace we should go for it.
	      bounds.step = smallestFactor;
	    } else {
	      // Trying to divide or multiply by 2 and find the best step value
	      while (true) {
	        if (scaleUp && Chartist.projectLength(axisLength, bounds.step, bounds) <= scaleMinSpace) {
	          bounds.step *= 2;
	        } else if (!scaleUp && Chartist.projectLength(axisLength, bounds.step / 2, bounds) >= scaleMinSpace) {
	          bounds.step /= 2;
	          if(onlyInteger && bounds.step % 1 !== 0) {
	            bounds.step *= 2;
	            break;
	          }
	        } else {
	          break;
	        }

	        if(optimizationCounter++ > 1000) {
	          throw new Error('Exceeded maximum number of iterations while optimizing scale step!');
	        }
	      }
	    }

	    var EPSILON = 2.221E-16;
	    bounds.step = Math.max(bounds.step, EPSILON);
	    function safeIncrement(value, increment) {
	      // If increment is too small use *= (1+EPSILON) as a simple nextafter
	      if (value === (value += increment)) {
	      	value *= (1 + (increment > 0 ? EPSILON : -EPSILON));
	      }
	      return value;
	    }

	    // Narrow min and max based on new step
	    newMin = bounds.min;
	    newMax = bounds.max;
	    while (newMin + bounds.step <= bounds.low) {
	    	newMin = safeIncrement(newMin, bounds.step);
	    }
	    while (newMax - bounds.step >= bounds.high) {
	    	newMax = safeIncrement(newMax, -bounds.step);
	    }
	    bounds.min = newMin;
	    bounds.max = newMax;
	    bounds.range = bounds.max - bounds.min;

	    var values = [];
	    for (i = bounds.min; i <= bounds.max; i = safeIncrement(i, bounds.step)) {
	      var value = Chartist.roundWithPrecision(i);
	      if (value !== values[values.length - 1]) {
	        values.push(value);
	      }
	    }
	    bounds.values = values;
	    return bounds;
	  };

	  /**
	   * Calculate cartesian coordinates of polar coordinates
	   *
	   * @memberof Chartist.Core
	   * @param {Number} centerX X-axis coordinates of center point of circle segment
	   * @param {Number} centerY X-axis coordinates of center point of circle segment
	   * @param {Number} radius Radius of circle segment
	   * @param {Number} angleInDegrees Angle of circle segment in degrees
	   * @return {{x:Number, y:Number}} Coordinates of point on circumference
	   */
	  Chartist.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {
	    var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;

	    return {
	      x: centerX + (radius * Math.cos(angleInRadians)),
	      y: centerY + (radius * Math.sin(angleInRadians))
	    };
	  };

	  /**
	   * Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right
	   *
	   * @memberof Chartist.Core
	   * @param {Object} svg The svg element for the chart
	   * @param {Object} options The Object that contains all the optional values for the chart
	   * @param {Number} [fallbackPadding] The fallback padding if partial padding objects are used
	   * @return {Object} The chart rectangles coordinates inside the svg element plus the rectangles measurements
	   */
	  Chartist.createChartRect = function (svg, options, fallbackPadding) {
	    var hasAxis = !!(options.axisX || options.axisY);
	    var yAxisOffset = hasAxis ? options.axisY.offset : 0;
	    var xAxisOffset = hasAxis ? options.axisX.offset : 0;
	    // If width or height results in invalid value (including 0) we fallback to the unitless settings or even 0
	    var width = svg.width() || Chartist.quantity(options.width).value || 0;
	    var height = svg.height() || Chartist.quantity(options.height).value || 0;
	    var normalizedPadding = Chartist.normalizePadding(options.chartPadding, fallbackPadding);

	    // If settings were to small to cope with offset (legacy) and padding, we'll adjust
	    width = Math.max(width, yAxisOffset + normalizedPadding.left + normalizedPadding.right);
	    height = Math.max(height, xAxisOffset + normalizedPadding.top + normalizedPadding.bottom);

	    var chartRect = {
	      padding: normalizedPadding,
	      width: function () {
	        return this.x2 - this.x1;
	      },
	      height: function () {
	        return this.y1 - this.y2;
	      }
	    };

	    if(hasAxis) {
	      if (options.axisX.position === 'start') {
	        chartRect.y2 = normalizedPadding.top + xAxisOffset;
	        chartRect.y1 = Math.max(height - normalizedPadding.bottom, chartRect.y2 + 1);
	      } else {
	        chartRect.y2 = normalizedPadding.top;
	        chartRect.y1 = Math.max(height - normalizedPadding.bottom - xAxisOffset, chartRect.y2 + 1);
	      }

	      if (options.axisY.position === 'start') {
	        chartRect.x1 = normalizedPadding.left + yAxisOffset;
	        chartRect.x2 = Math.max(width - normalizedPadding.right, chartRect.x1 + 1);
	      } else {
	        chartRect.x1 = normalizedPadding.left;
	        chartRect.x2 = Math.max(width - normalizedPadding.right - yAxisOffset, chartRect.x1 + 1);
	      }
	    } else {
	      chartRect.x1 = normalizedPadding.left;
	      chartRect.x2 = Math.max(width - normalizedPadding.right, chartRect.x1 + 1);
	      chartRect.y2 = normalizedPadding.top;
	      chartRect.y1 = Math.max(height - normalizedPadding.bottom, chartRect.y2 + 1);
	    }

	    return chartRect;
	  };

	  /**
	   * Creates a grid line based on a projected value.
	   *
	   * @memberof Chartist.Core
	   * @param position
	   * @param index
	   * @param axis
	   * @param offset
	   * @param length
	   * @param group
	   * @param classes
	   * @param eventEmitter
	   */
	  Chartist.createGrid = function(position, index, axis, offset, length, group, classes, eventEmitter) {
	    var positionalData = {};
	    positionalData[axis.units.pos + '1'] = position;
	    positionalData[axis.units.pos + '2'] = position;
	    positionalData[axis.counterUnits.pos + '1'] = offset;
	    positionalData[axis.counterUnits.pos + '2'] = offset + length;

	    var gridElement = group.elem('line', positionalData, classes.join(' '));

	    // Event for grid draw
	    eventEmitter.emit('draw',
	      Chartist.extend({
	        type: 'grid',
	        axis: axis,
	        index: index,
	        group: group,
	        element: gridElement
	      }, positionalData)
	    );
	  };

	  /**
	   * Creates a grid background rect and emits the draw event.
	   *
	   * @memberof Chartist.Core
	   * @param gridGroup
	   * @param chartRect
	   * @param className
	   * @param eventEmitter
	   */
	  Chartist.createGridBackground = function (gridGroup, chartRect, className, eventEmitter) {
	    var gridBackground = gridGroup.elem('rect', {
	        x: chartRect.x1,
	        y: chartRect.y2,
	        width: chartRect.width(),
	        height: chartRect.height(),
	      }, className, true);

	      // Event for grid background draw
	      eventEmitter.emit('draw', {
	        type: 'gridBackground',
	        group: gridGroup,
	        element: gridBackground
	      });
	  };

	  /**
	   * Creates a label based on a projected value and an axis.
	   *
	   * @memberof Chartist.Core
	   * @param position
	   * @param length
	   * @param index
	   * @param labels
	   * @param axis
	   * @param axisOffset
	   * @param labelOffset
	   * @param group
	   * @param classes
	   * @param useForeignObject
	   * @param eventEmitter
	   */
	  Chartist.createLabel = function(position, length, index, labels, axis, axisOffset, labelOffset, group, classes, useForeignObject, eventEmitter) {
	    var labelElement;
	    var positionalData = {};

	    positionalData[axis.units.pos] = position + labelOffset[axis.units.pos];
	    positionalData[axis.counterUnits.pos] = labelOffset[axis.counterUnits.pos];
	    positionalData[axis.units.len] = length;
	    positionalData[axis.counterUnits.len] = Math.max(0, axisOffset - 10);

	    if(useForeignObject) {
	      // We need to set width and height explicitly to px as span will not expand with width and height being
	      // 100% in all browsers
	      var content = document.createElement('span');
	      content.className = classes.join(' ');
	      content.setAttribute('xmlns', Chartist.namespaces.xhtml);
	      content.innerText = labels[index];
	      content.style[axis.units.len] = Math.round(positionalData[axis.units.len]) + 'px';
	      content.style[axis.counterUnits.len] = Math.round(positionalData[axis.counterUnits.len]) + 'px';

	      labelElement = group.foreignObject(content, Chartist.extend({
	        style: 'overflow: visible;'
	      }, positionalData));
	    } else {
	      labelElement = group.elem('text', positionalData, classes.join(' ')).text(labels[index]);
	    }

	    eventEmitter.emit('draw', Chartist.extend({
	      type: 'label',
	      axis: axis,
	      index: index,
	      group: group,
	      element: labelElement,
	      text: labels[index]
	    }, positionalData));
	  };

	  /**
	   * Helper to read series specific options from options object. It automatically falls back to the global option if
	   * there is no option in the series options.
	   *
	   * @param {Object} series Series object
	   * @param {Object} options Chartist options object
	   * @param {string} key The options key that should be used to obtain the options
	   * @returns {*}
	   */
	  Chartist.getSeriesOption = function(series, options, key) {
	    if(series.name && options.series && options.series[series.name]) {
	      var seriesOptions = options.series[series.name];
	      return seriesOptions.hasOwnProperty(key) ? seriesOptions[key] : options[key];
	    } else {
	      return options[key];
	    }
	  };

	  /**
	   * Provides options handling functionality with callback for options changes triggered by responsive options and media query matches
	   *
	   * @memberof Chartist.Core
	   * @param {Object} options Options set by user
	   * @param {Array} responsiveOptions Optional functions to add responsive behavior to chart
	   * @param {Object} eventEmitter The event emitter that will be used to emit the options changed events
	   * @return {Object} The consolidated options object from the defaults, base and matching responsive options
	   */
	  Chartist.optionsProvider = function (options, responsiveOptions, eventEmitter) {
	    var baseOptions = Chartist.extend({}, options),
	      currentOptions,
	      mediaQueryListeners = [],
	      i;

	    function updateCurrentOptions(mediaEvent) {
	      var previousOptions = currentOptions;
	      currentOptions = Chartist.extend({}, baseOptions);

	      if (responsiveOptions) {
	        for (i = 0; i < responsiveOptions.length; i++) {
	          var mql = window.matchMedia(responsiveOptions[i][0]);
	          if (mql.matches) {
	            currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]);
	          }
	        }
	      }

	      if(eventEmitter && mediaEvent) {
	        eventEmitter.emit('optionsChanged', {
	          previousOptions: previousOptions,
	          currentOptions: currentOptions
	        });
	      }
	    }

	    function removeMediaQueryListeners() {
	      mediaQueryListeners.forEach(function(mql) {
	        mql.removeListener(updateCurrentOptions);
	      });
	    }

	    if (!window.matchMedia) {
	      throw 'window.matchMedia not found! Make sure you\'re using a polyfill.';
	    } else if (responsiveOptions) {

	      for (i = 0; i < responsiveOptions.length; i++) {
	        var mql = window.matchMedia(responsiveOptions[i][0]);
	        mql.addListener(updateCurrentOptions);
	        mediaQueryListeners.push(mql);
	      }
	    }
	    // Execute initially without an event argument so we get the correct options
	    updateCurrentOptions();

	    return {
	      removeMediaQueryListeners: removeMediaQueryListeners,
	      getCurrentOptions: function getCurrentOptions() {
	        return Chartist.extend({}, currentOptions);
	      }
	    };
	  };


	  /**
	   * Splits a list of coordinates and associated values into segments. Each returned segment contains a pathCoordinates
	   * valueData property describing the segment.
	   *
	   * With the default options, segments consist of contiguous sets of points that do not have an undefined value. Any
	   * points with undefined values are discarded.
	   *
	   * **Options**
	   * The following options are used to determine how segments are formed
	   * ```javascript
	   * var options = {
	   *   // If fillHoles is true, undefined values are simply discarded without creating a new segment. Assuming other options are default, this returns single segment.
	   *   fillHoles: false,
	   *   // If increasingX is true, the coordinates in all segments have strictly increasing x-values.
	   *   increasingX: false
	   * };
	   * ```
	   *
	   * @memberof Chartist.Core
	   * @param {Array} pathCoordinates List of point coordinates to be split in the form [x1, y1, x2, y2 ... xn, yn]
	   * @param {Array} values List of associated point values in the form [v1, v2 .. vn]
	   * @param {Object} options Options set by user
	   * @return {Array} List of segments, each containing a pathCoordinates and valueData property.
	   */
	  Chartist.splitIntoSegments = function(pathCoordinates, valueData, options) {
	    var defaultOptions = {
	      increasingX: false,
	      fillHoles: false
	    };

	    options = Chartist.extend({}, defaultOptions, options);

	    var segments = [];
	    var hole = true;

	    for(var i = 0; i < pathCoordinates.length; i += 2) {
	      // If this value is a "hole" we set the hole flag
	      if(Chartist.getMultiValue(valueData[i / 2].value) === undefined) {
	      // if(valueData[i / 2].value === undefined) {
	        if(!options.fillHoles) {
	          hole = true;
	        }
	      } else {
	        if(options.increasingX && i >= 2 && pathCoordinates[i] <= pathCoordinates[i-2]) {
	          // X is not increasing, so we need to make sure we start a new segment
	          hole = true;
	        }


	        // If it's a valid value we need to check if we're coming out of a hole and create a new empty segment
	        if(hole) {
	          segments.push({
	            pathCoordinates: [],
	            valueData: []
	          });
	          // As we have a valid value now, we are not in a "hole" anymore
	          hole = false;
	        }

	        // Add to the segment pathCoordinates and valueData
	        segments[segments.length - 1].pathCoordinates.push(pathCoordinates[i], pathCoordinates[i + 1]);
	        segments[segments.length - 1].valueData.push(valueData[i / 2]);
	      }
	    }

	    return segments;
	  };
	}(window, document, Chartist));
	/* global Chartist */
	(function(window, document, Chartist) {

	  Chartist.Interpolation = {};

	  /**
	   * This interpolation function does not smooth the path and the result is only containing lines and no curves.
	   *
	   * @example
	   * var chart = new Chartist.Line('.ct-chart', {
	   *   labels: [1, 2, 3, 4, 5],
	   *   series: [[1, 2, 8, 1, 7]]
	   * }, {
	   *   lineSmooth: Chartist.Interpolation.none({
	   *     fillHoles: false
	   *   })
	   * });
	   *
	   *
	   * @memberof Chartist.Interpolation
	   * @return {Function}
	   */
	  Chartist.Interpolation.none = function(options) {
	    var defaultOptions = {
	      fillHoles: false
	    };
	    options = Chartist.extend({}, defaultOptions, options);
	    return function none(pathCoordinates, valueData) {
	      var path = new Chartist.Svg.Path();
	      var hole = true;

	      for(var i = 0; i < pathCoordinates.length; i += 2) {
	        var currX = pathCoordinates[i];
	        var currY = pathCoordinates[i + 1];
	        var currData = valueData[i / 2];

	        if(Chartist.getMultiValue(currData.value) !== undefined) {

	          if(hole) {
	            path.move(currX, currY, false, currData);
	          } else {
	            path.line(currX, currY, false, currData);
	          }

	          hole = false;
	        } else if(!options.fillHoles) {
	          hole = true;
	        }
	      }

	      return path;
	    };
	  };

	  /**
	   * Simple smoothing creates horizontal handles that are positioned with a fraction of the length between two data points. You can use the divisor option to specify the amount of smoothing.
	   *
	   * Simple smoothing can be used instead of `Chartist.Smoothing.cardinal` if you'd like to get rid of the artifacts it produces sometimes. Simple smoothing produces less flowing lines but is accurate by hitting the points and it also doesn't swing below or above the given data point.
	   *
	   * All smoothing functions within Chartist are factory functions that accept an options parameter. The simple interpolation function accepts one configuration parameter `divisor`, between 1 and â, which controls the smoothing characteristics.
	   *
	   * @example
	   * var chart = new Chartist.Line('.ct-chart', {
	   *   labels: [1, 2, 3, 4, 5],
	   *   series: [[1, 2, 8, 1, 7]]
	   * }, {
	   *   lineSmooth: Chartist.Interpolation.simple({
	   *     divisor: 2,
	   *     fillHoles: false
	   *   })
	   * });
	   *
	   *
	   * @memberof Chartist.Interpolation
	   * @param {Object} options The options of the simple interpolation factory function.
	   * @return {Function}
	   */
	  Chartist.Interpolation.simple = function(options) {
	    var defaultOptions = {
	      divisor: 2,
	      fillHoles: false
	    };
	    options = Chartist.extend({}, defaultOptions, options);

	    var d = 1 / Math.max(1, options.divisor);

	    return function simple(pathCoordinates, valueData) {
	      var path = new Chartist.Svg.Path();
	      var prevX, prevY, prevData;

	      for(var i = 0; i < pathCoordinates.length; i += 2) {
	        var currX = pathCoordinates[i];
	        var currY = pathCoordinates[i + 1];
	        var length = (currX - prevX) * d;
	        var currData = valueData[i / 2];

	        if(currData.value !== undefined) {

	          if(prevData === undefined) {
	            path.move(currX, currY, false, currData);
	          } else {
	            path.curve(
	              prevX + length,
	              prevY,
	              currX - length,
	              currY,
	              currX,
	              currY,
	              false,
	              currData
	            );
	          }

	          prevX = currX;
	          prevY = currY;
	          prevData = currData;
	        } else if(!options.fillHoles) {
	          prevX = currX = prevData = undefined;
	        }
	      }

	      return path;
	    };
	  };

	  /**
	   * Cardinal / Catmull-Rome spline interpolation is the default smoothing function in Chartist. It produces nice results where the splines will always meet the points. It produces some artifacts though when data values are increased or decreased rapidly. The line may not follow a very accurate path and if the line should be accurate this smoothing function does not produce the best results.
	   *
	   * Cardinal splines can only be created if there are more than two data points. If this is not the case this smoothing will fallback to `Chartist.Smoothing.none`.
	   *
	   * All smoothing functions within Chartist are factory functions that accept an options parameter. The cardinal interpolation function accepts one configuration parameter `tension`, between 0 and 1, which controls the smoothing intensity.
	   *
	   * @example
	   * var chart = new Chartist.Line('.ct-chart', {
	   *   labels: [1, 2, 3, 4, 5],
	   *   series: [[1, 2, 8, 1, 7]]
	   * }, {
	   *   lineSmooth: Chartist.Interpolation.cardinal({
	   *     tension: 1,
	   *     fillHoles: false
	   *   })
	   * });
	   *
	   * @memberof Chartist.Interpolation
	   * @param {Object} options The options of the cardinal factory function.
	   * @return {Function}
	   */
	  Chartist.Interpolation.cardinal = function(options) {
	    var defaultOptions = {
	      tension: 1,
	      fillHoles: false
	    };

	    options = Chartist.extend({}, defaultOptions, options);

	    var t = Math.min(1, Math.max(0, options.tension)),
	      c = 1 - t;

	    return function cardinal(pathCoordinates, valueData) {
	      // First we try to split the coordinates into segments
	      // This is necessary to treat "holes" in line charts
	      var segments = Chartist.splitIntoSegments(pathCoordinates, valueData, {
	        fillHoles: options.fillHoles
	      });

	      if(!segments.length) {
	        // If there were no segments return 'Chartist.Interpolation.none'
	        return Chartist.Interpolation.none()([]);
	      } else if(segments.length > 1) {
	        // If the split resulted in more that one segment we need to interpolate each segment individually and join them
	        // afterwards together into a single path.
	          var paths = [];
	        // For each segment we will recurse the cardinal function
	        segments.forEach(function(segment) {
	          paths.push(cardinal(segment.pathCoordinates, segment.valueData));
	        });
	        // Join the segment path data into a single path and return
	        return Chartist.Svg.Path.join(paths);
	      } else {
	        // If there was only one segment we can proceed regularly by using pathCoordinates and valueData from the first
	        // segment
	        pathCoordinates = segments[0].pathCoordinates;
	        valueData = segments[0].valueData;

	        // If less than two points we need to fallback to no smoothing
	        if(pathCoordinates.length <= 4) {
	          return Chartist.Interpolation.none()(pathCoordinates, valueData);
	        }

	        var path = new Chartist.Svg.Path().move(pathCoordinates[0], pathCoordinates[1], false, valueData[0]),
	          z;

	        for (var i = 0, iLen = pathCoordinates.length; iLen - 2 * !z > i; i += 2) {
	          var p = [
	            {x: +pathCoordinates[i - 2], y: +pathCoordinates[i - 1]},
	            {x: +pathCoordinates[i], y: +pathCoordinates[i + 1]},
	            {x: +pathCoordinates[i + 2], y: +pathCoordinates[i + 3]},
	            {x: +pathCoordinates[i + 4], y: +pathCoordinates[i + 5]}
	          ];
	          if (z) {
	            if (!i) {
	              p[0] = {x: +pathCoordinates[iLen - 2], y: +pathCoordinates[iLen - 1]};
	            } else if (iLen - 4 === i) {
	              p[3] = {x: +pathCoordinates[0], y: +pathCoordinates[1]};
	            } else if (iLen - 2 === i) {
	              p[2] = {x: +pathCoordinates[0], y: +pathCoordinates[1]};
	              p[3] = {x: +pathCoordinates[2], y: +pathCoordinates[3]};
	            }
	          } else {
	            if (iLen - 4 === i) {
	              p[3] = p[2];
	            } else if (!i) {
	              p[0] = {x: +pathCoordinates[i], y: +pathCoordinates[i + 1]};
	            }
	          }

	          path.curve(
	            (t * (-p[0].x + 6 * p[1].x + p[2].x) / 6) + (c * p[2].x),
	            (t * (-p[0].y + 6 * p[1].y + p[2].y) / 6) + (c * p[2].y),
	            (t * (p[1].x + 6 * p[2].x - p[3].x) / 6) + (c * p[2].x),
	            (t * (p[1].y + 6 * p[2].y - p[3].y) / 6) + (c * p[2].y),
	            p[2].x,
	            p[2].y,
	            false,
	            valueData[(i + 2) / 2]
	          );
	        }

	        return path;
	      }
	    };
	  };

	  /**
	   * Monotone Cubic spline interpolation produces a smooth curve which preserves monotonicity. Unlike cardinal splines, the curve will not extend beyond the range of y-values of the original data points.
	   *
	   * Monotone Cubic splines can only be created if there are more than two data points. If this is not the case this smoothing will fallback to `Chartist.Smoothing.none`.
	   *
	   * The x-values of subsequent points must be increasing to fit a Monotone Cubic spline. If this condition is not met for a pair of adjacent points, then there will be a break in the curve between those data points.
	   *
	   * All smoothing functions within Chartist are factory functions that accept an options parameter.
	   *
	   * @example
	   * var chart = new Chartist.Line('.ct-chart', {
	   *   labels: [1, 2, 3, 4, 5],
	   *   series: [[1, 2, 8, 1, 7]]
	   * }, {
	   *   lineSmooth: Chartist.Interpolation.monotoneCubic({
	   *     fillHoles: false
	   *   })
	   * });
	   *
	   * @memberof Chartist.Interpolation
	   * @param {Object} options The options of the monotoneCubic factory function.
	   * @return {Function}
	   */
	  Chartist.Interpolation.monotoneCubic = function(options) {
	    var defaultOptions = {
	      fillHoles: false
	    };

	    options = Chartist.extend({}, defaultOptions, options);

	    return function monotoneCubic(pathCoordinates, valueData) {
	      // First we try to split the coordinates into segments
	      // This is necessary to treat "holes" in line charts
	      var segments = Chartist.splitIntoSegments(pathCoordinates, valueData, {
	        fillHoles: options.fillHoles,
	        increasingX: true
	      });

	      if(!segments.length) {
	        // If there were no segments return 'Chartist.Interpolation.none'
	        return Chartist.Interpolation.none()([]);
	      } else if(segments.length > 1) {
	        // If the split resulted in more that one segment we need to interpolate each segment individually and join them
	        // afterwards together into a single path.
	          var paths = [];
	        // For each segment we will recurse the monotoneCubic fn function
	        segments.forEach(function(segment) {
	          paths.push(monotoneCubic(segment.pathCoordinates, segment.valueData));
	        });
	        // Join the segment path data into a single path and return
	        return Chartist.Svg.Path.join(paths);
	      } else {
	        // If there was only one segment we can proceed regularly by using pathCoordinates and valueData from the first
	        // segment
	        pathCoordinates = segments[0].pathCoordinates;
	        valueData = segments[0].valueData;

	        // If less than three points we need to fallback to no smoothing
	        if(pathCoordinates.length <= 4) {
	          return Chartist.Interpolation.none()(pathCoordinates, valueData);
	        }

	        var xs = [],
	          ys = [],
	          i,
	          n = pathCoordinates.length / 2,
	          ms = [],
	          ds = [], dys = [], dxs = [],
	          path;

	        // Populate x and y coordinates into separate arrays, for readability

	        for(i = 0; i < n; i++) {
	          xs[i] = pathCoordinates[i * 2];
	          ys[i] = pathCoordinates[i * 2 + 1];
	        }

	        // Calculate deltas and derivative

	        for(i = 0; i < n - 1; i++) {
	          dys[i] = ys[i + 1] - ys[i];
	          dxs[i] = xs[i + 1] - xs[i];
	          ds[i] = dys[i] / dxs[i];
	        }

	        // Determine desired slope (m) at each point using Fritsch-Carlson method
	        // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation

	        ms[0] = ds[0];
	        ms[n - 1] = ds[n - 2];

	        for(i = 1; i < n - 1; i++) {
	          if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {
	            ms[i] = 0;
	          } else {
	            ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (
	              (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +
	              (dxs[i] + 2 * dxs[i - 1]) / ds[i]);

	            if(!isFinite(ms[i])) {
	              ms[i] = 0;
	            }
	          }
	        }

	        // Now build a path from the slopes

	        path = new Chartist.Svg.Path().move(xs[0], ys[0], false, valueData[0]);

	        for(i = 0; i < n - 1; i++) {
	          path.curve(
	            // First control point
	            xs[i] + dxs[i] / 3,
	            ys[i] + ms[i] * dxs[i] / 3,
	            // Second control point
	            xs[i + 1] - dxs[i] / 3,
	            ys[i + 1] - ms[i + 1] * dxs[i] / 3,
	            // End point
	            xs[i + 1],
	            ys[i + 1],

	            false,
	            valueData[i + 1]
	          );
	        }

	        return path;
	      }
	    };
	  };

	  /**
	   * Step interpolation will cause the line chart to move in steps rather than diagonal or smoothed lines. This interpolation will create additional points that will also be drawn when the `showPoint` option is enabled.
	   *
	   * All smoothing functions within Chartist are factory functions that accept an options parameter. The step interpolation function accepts one configuration parameter `postpone`, that can be `true` or `false`. The default value is `true` and will cause the step to occur where the value actually changes. If a different behaviour is needed where the step is shifted to the left and happens before the actual value, this option can be set to `false`.
	   *
	   * @example
	   * var chart = new Chartist.Line('.ct-chart', {
	   *   labels: [1, 2, 3, 4, 5],
	   *   series: [[1, 2, 8, 1, 7]]
	   * }, {
	   *   lineSmooth: Chartist.Interpolation.step({
	   *     postpone: true,
	   *     fillHoles: false
	   *   })
	   * });
	   *
	   * @memberof Chartist.Interpolation
	   * @param options
	   * @returns {Function}
	   */
	  Chartist.Interpolation.step = function(options) {
	    var defaultOptions = {
	      postpone: true,
	      fillHoles: false
	    };

	    options = Chartist.extend({}, defaultOptions, options);

	    return function step(pathCoordinates, valueData) {
	      var path = new Chartist.Svg.Path();

	      var prevX, prevY, prevData;

	      for (var i = 0; i < pathCoordinates.length; i += 2) {
	        var currX = pathCoordinates[i];
	        var currY = pathCoordinates[i + 1];
	        var currData = valueData[i / 2];

	        // If the current point is also not a hole we can draw the step lines
	        if(currData.value !== undefined) {
	          if(prevData === undefined) {
	            path.move(currX, currY, false, currData);
	          } else {
	            if(options.postpone) {
	              // If postponed we should draw the step line with the value of the previous value
	              path.line(currX, prevY, false, prevData);
	            } else {
	              // If not postponed we should draw the step line with the value of the current value
	              path.line(prevX, currY, false, currData);
	            }
	            // Line to the actual point (this should only be a Y-Axis movement
	            path.line(currX, currY, false, currData);
	          }

	          prevX = currX;
	          prevY = currY;
	          prevData = currData;
	        } else if(!options.fillHoles) {
	          prevX = prevY = prevData = undefined;
	        }
	      }

	      return path;
	    };
	  };

	}(window, document, Chartist));
	/* global Chartist */
	(function (window, document, Chartist) {

	  Chartist.EventEmitter = function () {
	    var handlers = [];

	    /**
	     * Add an event handler for a specific event
	     *
	     * @memberof Chartist.Event
	     * @param {String} event The event name
	     * @param {Function} handler A event handler function
	     */
	    function addEventHandler(event, handler) {
	      handlers[event] = handlers[event] || [];
	      handlers[event].push(handler);
	    }

	    /**
	     * Remove an event handler of a specific event name or remove all event handlers for a specific event.
	     *
	     * @memberof Chartist.Event
	     * @param {String} event The event name where a specific or all handlers should be removed
	     * @param {Function} [handler] An optional event handler function. If specified only this specific handler will be removed and otherwise all handlers are removed.
	     */
	    function removeEventHandler(event, handler) {
	      // Only do something if there are event handlers with this name existing
	      if(handlers[event]) {
	        // If handler is set we will look for a specific handler and only remove this
	        if(handler) {
	          handlers[event].splice(handlers[event].indexOf(handler), 1);
	          if(handlers[event].length === 0) {
	            delete handlers[event];
	          }
	        } else {
	          // If no handler is specified we remove all handlers for this event
	          delete handlers[event];
	        }
	      }
	    }

	    /**
	     * Use this function to emit an event. All handlers that are listening for this event will be triggered with the data parameter.
	     *
	     * @memberof Chartist.Event
	     * @param {String} event The event name that should be triggered
	     * @param {*} data Arbitrary data that will be passed to the event handler callback functions
	     */
	    function emit(event, data) {
	      // Only do something if there are event handlers with this name existing
	      if(handlers[event]) {
	        handlers[event].forEach(function(handler) {
	          handler(data);
	        });
	      }

	      // Emit event to star event handlers
	      if(handlers['*']) {
	        handlers['*'].forEach(function(starHandler) {
	          starHandler(event, data);
	        });
	      }
	    }

	    return {
	      addEventHandler: addEventHandler,
	      removeEventHandler: removeEventHandler,
	      emit: emit
	    };
	  };

	}(window, document, Chartist));
	/* global Chartist */
	(function(window, document, Chartist) {

	  function listToArray(list) {
	    var arr = [];
	    if (list.length) {
	      for (var i = 0; i < list.length; i++) {
	        arr.push(list[i]);
	      }
	    }
	    return arr;
	  }

	  /**
	   * Method to extend from current prototype.
	   *
	   * @memberof Chartist.Class
	   * @param {Object} properties The object that serves as definition for the prototype that gets created for the new class. This object should always contain a constructor property that is the desired constructor for the newly created class.
	   * @param {Object} [superProtoOverride] By default extens will use the current class prototype or Chartist.class. With this parameter you can specify any super prototype that will be used.
	   * @return {Function} Constructor function of the new class
	   *
	   * @example
	   * var Fruit = Class.extend({
	     * color: undefined,
	     *   sugar: undefined,
	     *
	     *   constructor: function(color, sugar) {
	     *     this.color = color;
	     *     this.sugar = sugar;
	     *   },
	     *
	     *   eat: function() {
	     *     this.sugar = 0;
	     *     return this;
	     *   }
	     * });
	   *
	   * var Banana = Fruit.extend({
	     *   length: undefined,
	     *
	     *   constructor: function(length, sugar) {
	     *     Banana.super.constructor.call(this, 'Yellow', sugar);
	     *     this.length = length;
	     *   }
	     * });
	   *
	   * var banana = new Banana(20, 40);
	   * console.log('banana instanceof Fruit', banana instanceof Fruit);
	   * console.log('Fruit is prototype of banana', Fruit.prototype.isPrototypeOf(banana));
	   * console.log('bananas prototype is Fruit', Object.getPrototypeOf(banana) === Fruit.prototype);
	   * console.log(banana.sugar);
	   * console.log(banana.eat().sugar);
	   * console.log(banana.color);
	   */
	  function extend(properties, superProtoOverride) {
	    var superProto = superProtoOverride || this.prototype || Chartist.Class;
	    var proto = Object.create(superProto);

	    Chartist.Class.cloneDefinitions(proto, properties);

	    var constr = function() {
	      var fn = proto.constructor || function () {},
	        instance;

	      // If this is linked to the Chartist namespace the constructor was not called with new
	      // To provide a fallback we will instantiate here and return the instance
	      instance = this === Chartist ? Object.create(proto) : this;
	      fn.apply(instance, Array.prototype.slice.call(arguments, 0));

	      // If this constructor was not called with new we need to return the instance
	      // This will not harm when the constructor has been called with new as the returned value is ignored
	      return instance;
	    };

	    constr.prototype = proto;
	    constr.super = superProto;
	    constr.extend = this.extend;

	    return constr;
	  }

	  // Variable argument list clones args > 0 into args[0] and retruns modified args[0]
	  function cloneDefinitions() {
	    var args = listToArray(arguments);
	    var target = args[0];

	    args.splice(1, args.length - 1).forEach(function (source) {
	      Object.getOwnPropertyNames(source).forEach(function (propName) {
	        // If this property already exist in target we delete it first
	        delete target[propName];
	        // Define the property with the descriptor from source
	        Object.defineProperty(target, propName,
	          Object.getOwnPropertyDescriptor(source, propName));
	      });
	    });

	    return target;
	  }

	  Chartist.Class = {
	    extend: extend,
	    cloneDefinitions: cloneDefinitions
	  };

	}(window, document, Chartist));
	/* global Chartist */
	(function(window, document, Chartist) {

	  // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.
	  // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not
	  // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.
	  // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html
	  // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj
	  // The problem is with the label offsets that can't be converted into percentage and affecting the chart container
	  /**
	   * Updates the chart which currently does a full reconstruction of the SVG DOM
	   *
	   * @param {Object} [data] Optional data you'd like to set for the chart before it will update. If not specified the update method will use the data that is already configured with the chart.
	   * @param {Object} [options] Optional options you'd like to add to the previous options for the chart before it will update. If not specified the update method will use the options that have been already configured with the chart.
	   * @param {Boolean} [override] If set to true, the passed options will be used to extend the options that have been configured already. Otherwise the chart default options will be used as the base
	   * @memberof Chartist.Base
	   */
	  function update(data, options, override) {
	    if(data) {
	      this.data = data || {};
	      this.data.labels = this.data.labels || [];
	      this.data.series = this.data.series || [];
	      // Event for data transformation that allows to manipulate the data before it gets rendered in the charts
	      this.eventEmitter.emit('data', {
	        type: 'update',
	        data: this.data
	      });
	    }

	    if(options) {
	      this.options = Chartist.extend({}, override ? this.options : this.defaultOptions, options);

	      // If chartist was not initialized yet, we just set the options and leave the rest to the initialization
	      // Otherwise we re-create the optionsProvider at this point
	      if(!this.initializeTimeoutId) {
	        this.optionsProvider.removeMediaQueryListeners();
	        this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);
	      }
	    }

	    // Only re-created the chart if it has been initialized yet
	    if(!this.initializeTimeoutId) {
	      this.createChart(this.optionsProvider.getCurrentOptions());
	    }

	    // Return a reference to the chart object to chain up calls
	    return this;
	  }

	  /**
	   * This method can be called on the API object of each chart and will un-register all event listeners that were added to other components. This currently includes a window.resize listener as well as media query listeners if any responsive options have been provided. Use this function if you need to destroy and recreate Chartist charts dynamically.
	   *
	   * @memberof Chartist.Base
	   */
	  function detach() {
	    // Only detach if initialization already occurred on this chart. If this chart still hasn't initialized (therefore
	    // the initializationTimeoutId is still a valid timeout reference, we will clear the timeout
	    if(!this.initializeTimeoutId) {
	      window.removeEventListener('resize', this.resizeListener);
	      this.optionsProvider.removeMediaQueryListeners();
	    } else {
	      window.clearTimeout(this.initializeTimeoutId);
	    }

	    return this;
	  }

	  /**
	   * Use this function to register event handlers. The handler callbacks are synchronous and will run in the main thread rather than the event loop.
	   *
	   * @memberof Chartist.Base
	   * @param {String} event Name of the event. Check the examples for supported events.
	   * @param {Function} handler The handler function that will be called when an event with the given name was emitted. This function will receive a data argument which contains event data. See the example for more details.
	   */
	  function on(event, handler) {
	    this.eventEmitter.addEventHandler(event, handler);
	    return this;
	  }

	  /**
	   * Use this function to un-register event handlers. If the handler function parameter is omitted all handlers for the given event will be un-registered.
	   *
	   * @memberof Chartist.Base
	   * @param {String} event Name of the event for which a handler should be removed
	   * @param {Function} [handler] The handler function that that was previously used to register a new event handler. This handler will be removed from the event handler list. If this parameter is omitted then all event handlers for the given event are removed from the list.
	   */
	  function off(event, handler) {
	    this.eventEmitter.removeEventHandler(event, handler);
	    return this;
	  }

	  function initialize() {
	    // Add window resize listener that re-creates the chart
	    window.addEventListener('resize', this.resizeListener);

	    // Obtain current options based on matching media queries (if responsive options are given)
	    // This will also register a listener that is re-creating the chart based on media changes
	    this.optionsProvider = Chartist.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter);
	    // Register options change listener that will trigger a chart update
	    this.eventEmitter.addEventHandler('optionsChanged', function() {
	      this.update();
	    }.bind(this));

	    // Before the first chart creation we need to register us with all plugins that are configured
	    // Initialize all relevant plugins with our chart object and the plugin options specified in the config
	    if(this.options.plugins) {
	      this.options.plugins.forEach(function(plugin) {
	        if(plugin instanceof Array) {
	          plugin[0](this, plugin[1]);
	        } else {
	          plugin(this);
	        }
	      }.bind(this));
	    }

	    // Event for data transformation that allows to manipulate the data before it gets rendered in the charts
	    this.eventEmitter.emit('data', {
	      type: 'initial',
	      data: this.data
	    });

	    // Create the first chart
	    this.createChart(this.optionsProvider.getCurrentOptions());

	    // As chart is initialized from the event loop now we can reset our timeout reference
	    // This is important if the chart gets initialized on the same element twice
	    this.initializeTimeoutId = undefined;
	  }

	  /**
	   * Constructor of chart base class.
	   *
	   * @param query
	   * @param data
	   * @param defaultOptions
	   * @param options
	   * @param responsiveOptions
	   * @constructor
	   */
	  function Base(query, data, defaultOptions, options, responsiveOptions) {
	    this.container = Chartist.querySelector(query);
	    this.data = data || {};
	    this.data.labels = this.data.labels || [];
	    this.data.series = this.data.series || [];
	    this.defaultOptions = defaultOptions;
	    this.options = options;
	    this.responsiveOptions = responsiveOptions;
	    this.eventEmitter = Chartist.EventEmitter();
	    this.supportsForeignObject = Chartist.Svg.isSupported('Extensibility');
	    this.supportsAnimations = Chartist.Svg.isSupported('AnimationEventsAttribute');
	    this.resizeListener = function resizeListener(){
	      this.update();
	    }.bind(this);

	    if(this.container) {
	      // If chartist was already initialized in this container we are detaching all event listeners first
	      if(this.container.__chartist__) {
	        this.container.__chartist__.detach();
	      }

	      this.container.__chartist__ = this;
	    }

	    // Using event loop for first draw to make it possible to register event listeners in the same call stack where
	    // the chart was created.
	    this.initializeTimeoutId = setTimeout(initialize.bind(this), 0);
	  }

	  // Creating the chart base class
	  Chartist.Base = Chartist.Class.extend({
	    constructor: Base,
	    optionsProvider: undefined,
	    container: undefined,
	    svg: undefined,
	    eventEmitter: undefined,
	    createChart: function() {
	      throw new Error('Base chart type can\'t be instantiated!');
	    },
	    update: update,
	    detach: detach,
	    on: on,
	    off: off,
	    version: Chartist.version,
	    supportsForeignObject: false
	  });

	}(window, document, Chartist));
	/* global Chartist */
	(function(window, document, Chartist) {

	  /**
	   * Chartist.Svg creates a new SVG object wrapper with a starting element. You can use the wrapper to fluently create sub-elements and modify them.
	   *
	   * @memberof Chartist.Svg
	   * @constructor
	   * @param {String|Element} name The name of the SVG element to create or an SVG dom element which should be wrapped into Chartist.Svg
	   * @param {Object} attributes An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added.
	   * @param {String} className This class or class list will be added to the SVG element
	   * @param {Object} parent The parent SVG wrapper object where this newly created wrapper and it's element will be attached to as child
	   * @param {Boolean} insertFirst If this param is set to true in conjunction with a parent element the newly created element will be added as first child element in the parent element
	   */
	  function Svg(name, attributes, className, parent, insertFirst) {
	    // If Svg is getting called with an SVG element we just return the wrapper
	    if(name instanceof Element) {
	      this._node = name;
	    } else {
	      this._node = document.createElementNS(Chartist.namespaces.svg, name);

	      // If this is an SVG element created then custom namespace
	      if(name === 'svg') {
	        this.attr({
	          'xmlns:ct': Chartist.namespaces.ct
	        });
	      }
	    }

	    if(attributes) {
	      this.attr(attributes);
	    }

	    if(className) {
	      this.addClass(className);
	    }

	    if(parent) {
	      if (insertFirst && parent._node.firstChild) {
	        parent._node.insertBefore(this._node, parent._node.firstChild);
	      } else {
	        parent._node.appendChild(this._node);
	      }
	    }
	  }

	  /**
	   * Set attributes on the current SVG element of the wrapper you're currently working on.
	   *
	   * @memberof Chartist.Svg
	   * @param {Object|String} attributes An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added. If this parameter is a String then the function is used as a getter and will return the attribute value.
	   * @param {String} [ns] If specified, the attribute will be obtained using getAttributeNs. In order to write namepsaced attributes you can use the namespace:attribute notation within the attributes object.
	   * @return {Object|String} The current wrapper object will be returned so it can be used for chaining or the attribute value if used as getter function.
	   */
	  function attr(attributes, ns) {
	    if(typeof attributes === 'string') {
	      if(ns) {
	        return this._node.getAttributeNS(ns, attributes);
	      } else {
	        return this._node.getAttribute(attributes);
	      }
	    }

	    Object.keys(attributes).forEach(function(key) {
	      // If the attribute value is undefined we can skip this one
	      if(attributes[key] === undefined) {
	        return;
	      }

	      if (key.indexOf(':') !== -1) {
	        var namespacedAttribute = key.split(':');
	        this._node.setAttributeNS(Chartist.namespaces[namespacedAttribute[0]], key, attributes[key]);
	      } else {
	        this._node.setAttribute(key, attributes[key]);
	      }
	    }.bind(this));

	    return this;
	  }

	  /**
	   * Create a new SVG element whose wrapper object will be selected for further operations. This way you can also create nested groups easily.
	   *
	   * @memberof Chartist.Svg
	   * @param {String} name The name of the SVG element that should be created as child element of the currently selected element wrapper
	   * @param {Object} [attributes] An object with properties that will be added as attributes to the SVG element that is created. Attributes with undefined values will not be added.
	   * @param {String} [className] This class or class list will be added to the SVG element
	   * @param {Boolean} [insertFirst] If this param is set to true in conjunction with a parent element the newly created element will be added as first child element in the parent element
	   * @return {Chartist.Svg} Returns a Chartist.Svg wrapper object that can be used to modify the containing SVG data
	   */
	  function elem(name, attributes, className, insertFirst) {
	    return new Chartist.Svg(name, attributes, className, this, insertFirst);
	  }

	  /**
	   * Returns the parent Chartist.SVG wrapper object
	   *
	   * @memberof Chartist.Svg
	   * @return {Chartist.Svg} Returns a Chartist.Svg wrapper around the parent node of the current node. If the parent node is not existing or it's not an SVG node then this function will return null.
	   */
	  function parent() {
	    return this._node.parentNode instanceof SVGElement ? new Chartist.Svg(this._node.parentNode) : null;
	  }

	  /**
	   * This method returns a Chartist.Svg wrapper around the root SVG element of the current tree.
	   *
	   * @memberof Chartist.Svg
	   * @return {Chartist.Svg} The root SVG element wrapped in a Chartist.Svg element
	   */
	  function root() {
	    var node = this._node;
	    while(node.nodeName !== 'svg') {
	      node = node.parentNode;
	    }
	    return new Chartist.Svg(node);
	  }

	  /**
	   * Find the first child SVG element of the current element that matches a CSS selector. The returned object is a Chartist.Svg wrapper.
	   *
	   * @memberof Chartist.Svg
	   * @param {String} selector A CSS selector that is used to query for child SVG elements
	   * @return {Chartist.Svg} The SVG wrapper for the element found or null if no element was found
	   */
	  function querySelector(selector) {
	    var foundNode = this._node.querySelector(selector);
	    return foundNode ? new Chartist.Svg(foundNode) : null;
	  }

	  /**
	   * Find the all child SVG elements of the current element that match a CSS selector. The returned object is a Chartist.Svg.List wrapper.
	   *
	   * @memberof Chartist.Svg
	   * @param {String} selector A CSS selector that is used to query for child SVG elements
	   * @return {Chartist.Svg.List} The SVG wrapper list for the element found or null if no element was found
	   */
	  function querySelectorAll(selector) {
	    var foundNodes = this._node.querySelectorAll(selector);
	    return foundNodes.length ? new Chartist.Svg.List(foundNodes) : null;
	  }

	  /**
	   * Returns the underlying SVG node for the current element.
	   *
	   * @memberof Chartist.Svg
	   * @returns {Node}
	   */
	  function getNode() {
	    return this._node;
	  }

	  /**
	   * This method creates a foreignObject (see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject) that allows to embed HTML content into a SVG graphic. With the help of foreignObjects you can enable the usage of regular HTML elements inside of SVG where they are subject for SVG positioning and transformation but the Browser will use the HTML rendering capabilities for the containing DOM.
	   *
	   * @memberof Chartist.Svg
	   * @param {Node|String} content The DOM Node, or HTML string that will be converted to a DOM Node, that is then placed into and wrapped by the foreignObject
	   * @param {String} [attributes] An object with properties that will be added as attributes to the foreignObject element that is created. Attributes with undefined values will not be added.
	   * @param {String} [className] This class or class list will be added to the SVG element
	   * @param {Boolean} [insertFirst] Specifies if the foreignObject should be inserted as first child
	   * @return {Chartist.Svg} New wrapper object that wraps the foreignObject element
	   */
	  function foreignObject(content, attributes, className, insertFirst) {
	    // If content is string then we convert it to DOM
	    // TODO: Handle case where content is not a string nor a DOM Node
	    if(typeof content === 'string') {
	      var container = document.createElement('div');
	      container.innerHTML = content;
	      content = container.firstChild;
	    }

	    // Adding namespace to content element
	    content.setAttribute('xmlns', Chartist.namespaces.xmlns);

	    // Creating the foreignObject without required extension attribute (as described here
	    // http://www.w3.org/TR/SVG/extend.html#ForeignObjectElement)
	    var fnObj = this.elem('foreignObject', attributes, className, insertFirst);

	    // Add content to foreignObjectElement
	    fnObj._node.appendChild(content);

	    return fnObj;
	  }

	  /**
	   * This method adds a new text element to the current Chartist.Svg wrapper.
	   *
	   * @memberof Chartist.Svg
	   * @param {String} t The text that should be added to the text element that is created
	   * @return {Chartist.Svg} The same wrapper object that was used to add the newly created element
	   */
	  function text(t) {
	    this._node.appendChild(document.createTextNode(t));
	    return this;
	  }

	  /**
	   * This method will clear all child nodes of the current wrapper object.
	   *
	   * @memberof Chartist.Svg
	   * @return {Chartist.Svg} The same wrapper object that got emptied
	   */
	  function empty() {
	    while (this._node.firstChild) {
	      this._node.removeChild(this._node.firstChild);
	    }

	    return this;
	  }

	  /**
	   * This method will cause the current wrapper to remove itself from its parent wrapper. Use this method if you'd like to get rid of an element in a given DOM structure.
	   *
	   * @memberof Chartist.Svg
	   * @return {Chartist.Svg} The parent wrapper object of the element that got removed
	   */
	  function remove() {
	    this._node.parentNode.removeChild(this._node);
	    return this.parent();
	  }

	  /**
	   * This method will replace the element with a new element that can be created outside of the current DOM.
	   *
	   * @memberof Chartist.Svg
	   * @param {Chartist.Svg} newElement The new Chartist.Svg object that will be used to replace the current wrapper object
	   * @return {Chartist.Svg} The wrapper of the new element
	   */
	  function replace(newElement) {
	    this._node.parentNode.replaceChild(newElement._node, this._node);
	    return newElement;
	  }

	  /**
	   * This method will append an element to the current element as a child.
	   *
	   * @memberof Chartist.Svg
	   * @param {Chartist.Svg} element The Chartist.Svg element that should be added as a child
	   * @param {Boolean} [insertFirst] Specifies if the element should be inserted as first child
	   * @return {Chartist.Svg} The wrapper of the appended object
	   */
	  function append(element, insertFirst) {
	    if(insertFirst && this._node.firstChild) {
	      this._node.insertBefore(element._node, this._node.firstChild);
	    } else {
	      this._node.appendChild(element._node);
	    }

	    return this;
	  }

	  /**
	   * Returns an array of class names that are attached to the current wrapper element. This method can not be chained further.
	   *
	   * @memberof Chartist.Svg
	   * @return {Array} A list of classes or an empty array if there are no classes on the current element
	   */
	  function classes() {
	    return this._node.getAttribute('class') ? this._node.getAttribute('class').trim().split(/\s+/) : [];
	  }

	  /**
	   * Adds one or a space separated list of classes to the current element and ensures the classes are only existing once.
	   *
	   * @memberof Chartist.Svg
	   * @param {String} names A white space separated list of class names
	   * @return {Chartist.Svg} The wrapper of the current element
	   */
	  function addClass(names) {
	    this._node.setAttribute('class',
	      this.classes(this._node)
	        .concat(names.trim().split(/\s+/))
	        .filter(function(elem, pos, self) {
	          return self.indexOf(elem) === pos;
	        }).join(' ')
	    );

	    return this;
	  }

	  /**
	   * Removes one or a space separated list of classes from the current element.
	   *
	   * @memberof Chartist.Svg
	   * @param {String} names A white space separated list of class names
	   * @return {Chartist.Svg} The wrapper of the current element
	   */
	  function removeClass(names) {
	    var removedClasses = names.trim().split(/\s+/);

	    this._node.setAttribute('class', this.classes(this._node).filter(function(name) {
	      return removedClasses.indexOf(name) === -1;
	    }).join(' '));

	    return this;
	  }

	  /**
	   * Removes all classes from the current element.
	   *
	   * @memberof Chartist.Svg
	   * @return {Chartist.Svg} The wrapper of the current element
	   */
	  function removeAllClasses() {
	    this._node.setAttribute('class', '');

	    return this;
	  }

	  /**
	   * Get element height using `getBoundingClientRect`
	   *
	   * @memberof Chartist.Svg
	   * @return {Number} The elements height in pixels
	   */
	  function height() {
	    return this._node.getBoundingClientRect().height;
	  }

	  /**
	   * Get element width using `getBoundingClientRect`
	   *
	   * @memberof Chartist.Core
	   * @return {Number} The elements width in pixels
	   */
	  function width() {
	    return this._node.getBoundingClientRect().width;
	  }

	  /**
	   * The animate function lets you animate the current element with SMIL animations. You can add animations for multiple attributes at the same time by using an animation definition object. This object should contain SMIL animation attributes. Please refer to http://www.w3.org/TR/SVG/animate.html for a detailed specification about the available animation attributes. Additionally an easing property can be passed in the animation definition object. This can be a string with a name of an easing function in `Chartist.Svg.Easing` or an array with four numbers specifying a cubic BÃ©zier curve.
	   * **An animations object could look like this:**
	   * ```javascript
	   * element.animate({
	   *   opacity: {
	   *     dur: 1000,
	   *     from: 0,
	   *     to: 1
	   *   },
	   *   x1: {
	   *     dur: '1000ms',
	   *     from: 100,
	   *     to: 200,
	   *     easing: 'easeOutQuart'
	   *   },
	   *   y1: {
	   *     dur: '2s',
	   *     from: 0,
	   *     to: 100
	   *   }
	   * });
	   * ```
	   * **Automatic unit conversion**
	   * For the `dur` and the `begin` animate attribute you can also omit a unit by passing a number. The number will automatically be converted to milli seconds.
	   * **Guided mode**
	   * The default behavior of SMIL animations with offset using the `begin` attribute is that the attribute will keep it's original value until the animation starts. Mostly this behavior is not desired as you'd like to have your element attributes already initialized with the animation `from` value even before the animation starts. Also if you don't specify `fill="freeze"` on an animate element or if you delete the animation after it's done (which is done in guided mode) the attribute will switch back to the initial value. This behavior is also not desired when performing simple one-time animations. For one-time animations you'd want to trigger animations immediately instead of relative to the document begin time. That's why in guided mode Chartist.Svg will also use the `begin` property to schedule a timeout and manually start the animation after the timeout. If you're using multiple SMIL definition objects for an attribute (in an array), guided mode will be disabled for this attribute, even if you explicitly enabled it.
	   * If guided mode is enabled the following behavior is added:
	   * - Before the animation starts (even when delayed with `begin`) the animated attribute will be set already to the `from` value of the animation
	   * - `begin` is explicitly set to `indefinite` so it can be started manually without relying on document begin time (creation)
	   * - The animate element will be forced to use `fill="freeze"`
	   * - The animation will be triggered with `beginElement()` in a timeout where `begin` of the definition object is interpreted in milli seconds. If no `begin` was specified the timeout is triggered immediately.
	   * - After the animation the element attribute value will be set to the `to` value of the animation
	   * - The animate element is deleted from the DOM
	   *
	   * @memberof Chartist.Svg
	   * @param {Object} animations An animations object where the property keys are the attributes you'd like to animate. The properties should be objects again that contain the SMIL animation attributes (usually begin, dur, from, and to). The property begin and dur is auto converted (see Automatic unit conversion). You can also schedule multiple animations for the same attribute by passing an Array of SMIL definition objects. Attributes that contain an array of SMIL definition objects will not be executed in guided mode.
	   * @param {Boolean} guided Specify if guided mode should be activated for this animation (see Guided mode). If not otherwise specified, guided mode will be activated.
	   * @param {Object} eventEmitter If specified, this event emitter will be notified when an animation starts or ends.
	   * @return {Chartist.Svg} The current element where the animation was added
	   */
	  function animate(animations, guided, eventEmitter) {
	    if(guided === undefined) {
	      guided = true;
	    }

	    Object.keys(animations).forEach(function createAnimateForAttributes(attribute) {

	      function createAnimate(animationDefinition, guided) {
	        var attributeProperties = {},
	          animate,
	          timeout,
	          easing;

	        // Check if an easing is specified in the definition object and delete it from the object as it will not
	        // be part of the animate element attributes.
	        if(animationDefinition.easing) {
	          // If already an easing BÃ©zier curve array we take it or we lookup a easing array in the Easing object
	          easing = animationDefinition.easing instanceof Array ?
	            animationDefinition.easing :
	            Chartist.Svg.Easing[animationDefinition.easing];
	          delete animationDefinition.easing;
	        }

	        // If numeric dur or begin was provided we assume milli seconds
	        animationDefinition.begin = Chartist.ensureUnit(animationDefinition.begin, 'ms');
	        animationDefinition.dur = Chartist.ensureUnit(animationDefinition.dur, 'ms');

	        if(easing) {
	          animationDefinition.calcMode = 'spline';
	          animationDefinition.keySplines = easing.join(' ');
	          animationDefinition.keyTimes = '0;1';
	        }

	        // Adding "fill: freeze" if we are in guided mode and set initial attribute values
	        if(guided) {
	          animationDefinition.fill = 'freeze';
	          // Animated property on our element should already be set to the animation from value in guided mode
	          attributeProperties[attribute] = animationDefinition.from;
	          this.attr(attributeProperties);

	          // In guided mode we also set begin to indefinite so we can trigger the start manually and put the begin
	          // which needs to be in ms aside
	          timeout = Chartist.quantity(animationDefinition.begin || 0).value;
	          animationDefinition.begin = 'indefinite';
	        }

	        animate = this.elem('animate', Chartist.extend({
	          attributeName: attribute
	        }, animationDefinition));

	        if(guided) {
	          // If guided we take the value that was put aside in timeout and trigger the animation manually with a timeout
	          setTimeout(function() {
	            // If beginElement fails we set the animated attribute to the end position and remove the animate element
	            // This happens if the SMIL ElementTimeControl interface is not supported or any other problems occured in
	            // the browser. (Currently FF 34 does not support animate elements in foreignObjects)
	            try {
	              animate._node.beginElement();
	            } catch(err) {
	              // Set animated attribute to current animated value
	              attributeProperties[attribute] = animationDefinition.to;
	              this.attr(attributeProperties);
	              // Remove the animate element as it's no longer required
	              animate.remove();
	            }
	          }.bind(this), timeout);
	        }

	        if(eventEmitter) {
	          animate._node.addEventListener('beginEvent', function handleBeginEvent() {
	            eventEmitter.emit('animationBegin', {
	              element: this,
	              animate: animate._node,
	              params: animationDefinition
	            });
	          }.bind(this));
	        }

	        animate._node.addEventListener('endEvent', function handleEndEvent() {
	          if(eventEmitter) {
	            eventEmitter.emit('animationEnd', {
	              element: this,
	              animate: animate._node,
	              params: animationDefinition
	            });
	          }

	          if(guided) {
	            // Set animated attribute to current animated value
	            attributeProperties[attribute] = animationDefinition.to;
	            this.attr(attributeProperties);
	            // Remove the animate element as it's no longer required
	            animate.remove();
	          }
	        }.bind(this));
	      }

	      // If current attribute is an array of definition objects we create an animate for each and disable guided mode
	      if(animations[attribute] instanceof Array) {
	        animations[attribute].forEach(function(animationDefinition) {
	          createAnimate.bind(this)(animationDefinition, false);
	        }.bind(this));
	      } else {
	        createAnimate.bind(this)(animations[attribute], guided);
	      }

	    }.bind(this));

	    return this;
	  }

	  Chartist.Svg = Chartist.Class.extend({
	    constructor: Svg,
	    attr: attr,
	    elem: elem,
	    parent: parent,
	    root: root,
	    querySelector: querySelector,
	    querySelectorAll: querySelectorAll,
	    getNode: getNode,
	    foreignObject: foreignObject,
	    text: text,
	    empty: empty,
	    remove: remove,
	    replace: replace,
	    append: append,
	    classes: classes,
	    addClass: addClass,
	    removeClass: removeClass,
	    removeAllClasses: removeAllClasses,
	    height: height,
	    width: width,
	    animate: animate
	  });

	  /**
	   * This method checks for support of a given SVG feature like Extensibility, SVG-animation or the like. Check http://www.w3.org/TR/SVG11/feature for a detailed list.
	   *
	   * @memberof Chartist.Svg
	   * @param {String} feature The SVG 1.1 feature that should be checked for support.
	   * @return {Boolean} True of false if the feature is supported or not
	   */
	  Chartist.Svg.isSupported = function(feature) {
	    return document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#' + feature, '1.1');
	  };

	  /**
	   * This Object contains some standard easing cubic bezier curves. Then can be used with their name in the `Chartist.Svg.animate`. You can also extend the list and use your own name in the `animate` function. Click the show code button to see the available bezier functions.
	   *
	   * @memberof Chartist.Svg
	   */
	  var easingCubicBeziers = {
	    easeInSine: [0.47, 0, 0.745, 0.715],
	    easeOutSine: [0.39, 0.575, 0.565, 1],
	    easeInOutSine: [0.445, 0.05, 0.55, 0.95],
	    easeInQuad: [0.55, 0.085, 0.68, 0.53],
	    easeOutQuad: [0.25, 0.46, 0.45, 0.94],
	    easeInOutQuad: [0.455, 0.03, 0.515, 0.955],
	    easeInCubic: [0.55, 0.055, 0.675, 0.19],
	    easeOutCubic: [0.215, 0.61, 0.355, 1],
	    easeInOutCubic: [0.645, 0.045, 0.355, 1],
	    easeInQuart: [0.895, 0.03, 0.685, 0.22],
	    easeOutQuart: [0.165, 0.84, 0.44, 1],
	    easeInOutQuart: [0.77, 0, 0.175, 1],
	    easeInQuint: [0.755, 0.05, 0.855, 0.06],
	    easeOutQuint: [0.23, 1, 0.32, 1],
	    easeInOutQuint: [0.86, 0, 0.07, 1],
	    easeInExpo: [0.95, 0.05, 0.795, 0.035],
	    easeOutExpo: [0.19, 1, 0.22, 1],
	    easeInOutExpo: [1, 0, 0, 1],
	    easeInCirc: [0.6, 0.04, 0.98, 0.335],
	    easeOutCirc: [0.075, 0.82, 0.165, 1],
	    easeInOutCirc: [0.785, 0.135, 0.15, 0.86],
	    easeInBack: [0.6, -0.28, 0.735, 0.045],
	    easeOutBack: [0.175, 0.885, 0.32, 1.275],
	    easeInOutBack: [0.68, -0.55, 0.265, 1.55]
	  };

	  Chartist.Svg.Easing = easingCubicBeziers;

	  /**
	   * This helper class is to wrap multiple `Chartist.Svg` elements into a list where you can call the `Chartist.Svg` functions on all elements in the list with one call. This is helpful when you'd like to perform calls with `Chartist.Svg` on multiple elements.
	   * An instance of this class is also returned by `Chartist.Svg.querySelectorAll`.
	   *
	   * @memberof Chartist.Svg
	   * @param {Array<Node>|NodeList} nodeList An Array of SVG DOM nodes or a SVG DOM NodeList (as returned by document.querySelectorAll)
	   * @constructor
	   */
	  function SvgList(nodeList) {
	    var list = this;

	    this.svgElements = [];
	    for(var i = 0; i < nodeList.length; i++) {
	      this.svgElements.push(new Chartist.Svg(nodeList[i]));
	    }

	    // Add delegation methods for Chartist.Svg
	    Object.keys(Chartist.Svg.prototype).filter(function(prototypeProperty) {
	      return ['constructor',
	          'parent',
	          'querySelector',
	          'querySelectorAll',
	          'replace',
	          'append',
	          'classes',
	          'height',
	          'width'].indexOf(prototypeProperty) === -1;
	    }).forEach(function(prototypeProperty) {
	      list[prototypeProperty] = function() {
	        var args = Array.prototype.slice.call(arguments, 0);
	        list.svgElements.forEach(function(element) {
	          Chartist.Svg.prototype[prototypeProperty].apply(element, args);
	        });
	        return list;
	      };
	    });
	  }

	  Chartist.Svg.List = Chartist.Class.extend({
	    constructor: SvgList
	  });
	}(window, document, Chartist));
	/* global Chartist */
	(function(window, document, Chartist) {

	  /**
	   * Contains the descriptors of supported element types in a SVG path. Currently only move, line and curve are supported.
	   *
	   * @memberof Chartist.Svg.Path
	   * @type {Object}
	   */
	  var elementDescriptions = {
	    m: ['x', 'y'],
	    l: ['x', 'y'],
	    c: ['x1', 'y1', 'x2', 'y2', 'x', 'y'],
	    a: ['rx', 'ry', 'xAr', 'lAf', 'sf', 'x', 'y']
	  };

	  /**
	   * Default options for newly created SVG path objects.
	   *
	   * @memberof Chartist.Svg.Path
	   * @type {Object}
	   */
	  var defaultOptions = {
	    // The accuracy in digit count after the decimal point. This will be used to round numbers in the SVG path. If this option is set to false then no rounding will be performed.
	    accuracy: 3
	  };

	  function element(command, params, pathElements, pos, relative, data) {
	    var pathElement = Chartist.extend({
	      command: relative ? command.toLowerCase() : command.toUpperCase()
	    }, params, data ? { data: data } : {} );

	    pathElements.splice(pos, 0, pathElement);
	  }

	  function forEachParam(pathElements, cb) {
	    pathElements.forEach(function(pathElement, pathElementIndex) {
	      elementDescriptions[pathElement.command.toLowerCase()].forEach(function(paramName, paramIndex) {
	        cb(pathElement, paramName, pathElementIndex, paramIndex, pathElements);
	      });
	    });
	  }

	  /**
	   * Used to construct a new path object.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Boolean} close If set to true then this path will be closed when stringified (with a Z at the end)
	   * @param {Object} options Options object that overrides the default objects. See default options for more details.
	   * @constructor
	   */
	  function SvgPath(close, options) {
	    this.pathElements = [];
	    this.pos = 0;
	    this.close = close;
	    this.options = Chartist.extend({}, defaultOptions, options);
	  }

	  /**
	   * Gets or sets the current position (cursor) inside of the path. You can move around the cursor freely but limited to 0 or the count of existing elements. All modifications with element functions will insert new elements at the position of this cursor.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Number} [pos] If a number is passed then the cursor is set to this position in the path element array.
	   * @return {Chartist.Svg.Path|Number} If the position parameter was passed then the return value will be the path object for easy call chaining. If no position parameter was passed then the current position is returned.
	   */
	  function position(pos) {
	    if(pos !== undefined) {
	      this.pos = Math.max(0, Math.min(this.pathElements.length, pos));
	      return this;
	    } else {
	      return this.pos;
	    }
	  }

	  /**
	   * Removes elements from the path starting at the current position.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Number} count Number of path elements that should be removed from the current position.
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function remove(count) {
	    this.pathElements.splice(this.pos, count);
	    return this;
	  }

	  /**
	   * Use this function to add a new move SVG path element.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Number} x The x coordinate for the move element.
	   * @param {Number} y The y coordinate for the move element.
	   * @param {Boolean} [relative] If set to true the move element will be created with relative coordinates (lowercase letter)
	   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function move(x, y, relative, data) {
	    element('M', {
	      x: +x,
	      y: +y
	    }, this.pathElements, this.pos++, relative, data);
	    return this;
	  }

	  /**
	   * Use this function to add a new line SVG path element.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Number} x The x coordinate for the line element.
	   * @param {Number} y The y coordinate for the line element.
	   * @param {Boolean} [relative] If set to true the line element will be created with relative coordinates (lowercase letter)
	   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function line(x, y, relative, data) {
	    element('L', {
	      x: +x,
	      y: +y
	    }, this.pathElements, this.pos++, relative, data);
	    return this;
	  }

	  /**
	   * Use this function to add a new curve SVG path element.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Number} x1 The x coordinate for the first control point of the bezier curve.
	   * @param {Number} y1 The y coordinate for the first control point of the bezier curve.
	   * @param {Number} x2 The x coordinate for the second control point of the bezier curve.
	   * @param {Number} y2 The y coordinate for the second control point of the bezier curve.
	   * @param {Number} x The x coordinate for the target point of the curve element.
	   * @param {Number} y The y coordinate for the target point of the curve element.
	   * @param {Boolean} [relative] If set to true the curve element will be created with relative coordinates (lowercase letter)
	   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function curve(x1, y1, x2, y2, x, y, relative, data) {
	    element('C', {
	      x1: +x1,
	      y1: +y1,
	      x2: +x2,
	      y2: +y2,
	      x: +x,
	      y: +y
	    }, this.pathElements, this.pos++, relative, data);
	    return this;
	  }

	  /**
	   * Use this function to add a new non-bezier curve SVG path element.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Number} rx The radius to be used for the x-axis of the arc.
	   * @param {Number} ry The radius to be used for the y-axis of the arc.
	   * @param {Number} xAr Defines the orientation of the arc
	   * @param {Number} lAf Large arc flag
	   * @param {Number} sf Sweep flag
	   * @param {Number} x The x coordinate for the target point of the curve element.
	   * @param {Number} y The y coordinate for the target point of the curve element.
	   * @param {Boolean} [relative] If set to true the curve element will be created with relative coordinates (lowercase letter)
	   * @param {*} [data] Any data that should be stored with the element object that will be accessible in pathElement
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function arc(rx, ry, xAr, lAf, sf, x, y, relative, data) {
	    element('A', {
	      rx: +rx,
	      ry: +ry,
	      xAr: +xAr,
	      lAf: +lAf,
	      sf: +sf,
	      x: +x,
	      y: +y
	    }, this.pathElements, this.pos++, relative, data);
	    return this;
	  }

	  /**
	   * Parses an SVG path seen in the d attribute of path elements, and inserts the parsed elements into the existing path object at the current cursor position. Any closing path indicators (Z at the end of the path) will be ignored by the parser as this is provided by the close option in the options of the path object.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {String} path Any SVG path that contains move (m), line (l) or curve (c) components.
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function parse(path) {
	    // Parsing the SVG path string into an array of arrays [['M', '10', '10'], ['L', '100', '100']]
	    var chunks = path.replace(/([A-Za-z])([0-9])/g, '$1 $2')
	      .replace(/([0-9])([A-Za-z])/g, '$1 $2')
	      .split(/[\s,]+/)
	      .reduce(function(result, element) {
	        if(element.match(/[A-Za-z]/)) {
	          result.push([]);
	        }

	        result[result.length - 1].push(element);
	        return result;
	      }, []);

	    // If this is a closed path we remove the Z at the end because this is determined by the close option
	    if(chunks[chunks.length - 1][0].toUpperCase() === 'Z') {
	      chunks.pop();
	    }

	    // Using svgPathElementDescriptions to map raw path arrays into objects that contain the command and the parameters
	    // For example {command: 'M', x: '10', y: '10'}
	    var elements = chunks.map(function(chunk) {
	        var command = chunk.shift(),
	          description = elementDescriptions[command.toLowerCase()];

	        return Chartist.extend({
	          command: command
	        }, description.reduce(function(result, paramName, index) {
	          result[paramName] = +chunk[index];
	          return result;
	        }, {}));
	      });

	    // Preparing a splice call with the elements array as var arg params and insert the parsed elements at the current position
	    var spliceArgs = [this.pos, 0];
	    Array.prototype.push.apply(spliceArgs, elements);
	    Array.prototype.splice.apply(this.pathElements, spliceArgs);
	    // Increase the internal position by the element count
	    this.pos += elements.length;

	    return this;
	  }

	  /**
	   * This function renders to current SVG path object into a final SVG string that can be used in the d attribute of SVG path elements. It uses the accuracy option to round big decimals. If the close parameter was set in the constructor of this path object then a path closing Z will be appended to the output string.
	   *
	   * @memberof Chartist.Svg.Path
	   * @return {String}
	   */
	  function stringify() {
	    var accuracyMultiplier = Math.pow(10, this.options.accuracy);

	    return this.pathElements.reduce(function(path, pathElement) {
	        var params = elementDescriptions[pathElement.command.toLowerCase()].map(function(paramName) {
	          return this.options.accuracy ?
	            (Math.round(pathElement[paramName] * accuracyMultiplier) / accuracyMultiplier) :
	            pathElement[paramName];
	        }.bind(this));

	        return path + pathElement.command + params.join(',');
	      }.bind(this), '') + (this.close ? 'Z' : '');
	  }

	  /**
	   * Scales all elements in the current SVG path object. There is an individual parameter for each coordinate. Scaling will also be done for control points of curves, affecting the given coordinate.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Number} x The number which will be used to scale the x, x1 and x2 of all path elements.
	   * @param {Number} y The number which will be used to scale the y, y1 and y2 of all path elements.
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function scale(x, y) {
	    forEachParam(this.pathElements, function(pathElement, paramName) {
	      pathElement[paramName] *= paramName[0] === 'x' ? x : y;
	    });
	    return this;
	  }

	  /**
	   * Translates all elements in the current SVG path object. The translation is relative and there is an individual parameter for each coordinate. Translation will also be done for control points of curves, affecting the given coordinate.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Number} x The number which will be used to translate the x, x1 and x2 of all path elements.
	   * @param {Number} y The number which will be used to translate the y, y1 and y2 of all path elements.
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function translate(x, y) {
	    forEachParam(this.pathElements, function(pathElement, paramName) {
	      pathElement[paramName] += paramName[0] === 'x' ? x : y;
	    });
	    return this;
	  }

	  /**
	   * This function will run over all existing path elements and then loop over their attributes. The callback function will be called for every path element attribute that exists in the current path.
	   * The method signature of the callback function looks like this:
	   * ```javascript
	   * function(pathElement, paramName, pathElementIndex, paramIndex, pathElements)
	   * ```
	   * If something else than undefined is returned by the callback function, this value will be used to replace the old value. This allows you to build custom transformations of path objects that can't be achieved using the basic transformation functions scale and translate.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Function} transformFnc The callback function for the transformation. Check the signature in the function description.
	   * @return {Chartist.Svg.Path} The current path object for easy call chaining.
	   */
	  function transform(transformFnc) {
	    forEachParam(this.pathElements, function(pathElement, paramName, pathElementIndex, paramIndex, pathElements) {
	      var transformed = transformFnc(pathElement, paramName, pathElementIndex, paramIndex, pathElements);
	      if(transformed || transformed === 0) {
	        pathElement[paramName] = transformed;
	      }
	    });
	    return this;
	  }

	  /**
	   * This function clones a whole path object with all its properties. This is a deep clone and path element objects will also be cloned.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Boolean} [close] Optional option to set the new cloned path to closed. If not specified or false, the original path close option will be used.
	   * @return {Chartist.Svg.Path}
	   */
	  function clone(close) {
	    var c = new Chartist.Svg.Path(close || this.close);
	    c.pos = this.pos;
	    c.pathElements = this.pathElements.slice().map(function cloneElements(pathElement) {
	      return Chartist.extend({}, pathElement);
	    });
	    c.options = Chartist.extend({}, this.options);
	    return c;
	  }

	  /**
	   * Split a Svg.Path object by a specific command in the path chain. The path chain will be split and an array of newly created paths objects will be returned. This is useful if you'd like to split an SVG path by it's move commands, for example, in order to isolate chunks of drawings.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {String} command The command you'd like to use to split the path
	   * @return {Array<Chartist.Svg.Path>}
	   */
	  function splitByCommand(command) {
	    var split = [
	      new Chartist.Svg.Path()
	    ];

	    this.pathElements.forEach(function(pathElement) {
	      if(pathElement.command === command.toUpperCase() && split[split.length - 1].pathElements.length !== 0) {
	        split.push(new Chartist.Svg.Path());
	      }

	      split[split.length - 1].pathElements.push(pathElement);
	    });

	    return split;
	  }

	  /**
	   * This static function on `Chartist.Svg.Path` is joining multiple paths together into one paths.
	   *
	   * @memberof Chartist.Svg.Path
	   * @param {Array<Chartist.Svg.Path>} paths A list of paths to be joined together. The order is important.
	   * @param {boolean} close If the newly created path should be a closed path
	   * @param {Object} options Path options for the newly created path.
	   * @return {Chartist.Svg.Path}
	   */

	  function join(paths, close, options) {
	    var joinedPath = new Chartist.Svg.Path(close, options);
	    for(var i = 0; i < paths.length; i++) {
	      var path = paths[i];
	      for(var j = 0; j < path.pathElements.length; j++) {
	        joinedPath.pathElements.push(path.pathElements[j]);
	      }
	    }
	    return joinedPath;
	  }

	  Chartist.Svg.Path = Chartist.Class.extend({
	    constructor: SvgPath,
	    position: position,
	    remove: remove,
	    move: move,
	    line: line,
	    curve: curve,
	    arc: arc,
	    scale: scale,
	    translate: translate,
	    transform: transform,
	    parse: parse,
	    stringify: stringify,
	    clone: clone,
	    splitByCommand: splitByCommand
	  });

	  Chartist.Svg.Path.elementDescriptions = elementDescriptions;
	  Chartist.Svg.Path.join = join;
	}(window, document, Chartist));
	(function (window, document, Chartist) {

	  var axisUnits = {
	    x: {
	      pos: 'x',
	      len: 'width',
	      dir: 'horizontal',
	      rectStart: 'x1',
	      rectEnd: 'x2',
	      rectOffset: 'y2'
	    },
	    y: {
	      pos: 'y',
	      len: 'height',
	      dir: 'vertical',
	      rectStart: 'y2',
	      rectEnd: 'y1',
	      rectOffset: 'x1'
	    }
	  };

	  function Axis(units, chartRect, ticks, options) {
	    this.units = units;
	    this.counterUnits = units === axisUnits.x ? axisUnits.y : axisUnits.x;
	    this.chartRect = chartRect;
	    this.axisLength = chartRect[units.rectEnd] - chartRect[units.rectStart];
	    this.gridOffset = chartRect[units.rectOffset];
	    this.ticks = ticks;
	    this.options = options;
	  }

	  function createGridAndLabels(gridGroup, labelGroup, useForeignObject, chartOptions, eventEmitter) {
	    var axisOptions = chartOptions['axis' + this.units.pos.toUpperCase()];
	    var projectedValues = this.ticks.map(this.projectValue.bind(this));
	    var labelValues = this.ticks.map(axisOptions.labelInterpolationFnc);

	    projectedValues.forEach(function(projectedValue, index) {
	      var labelOffset = {
	        x: 0,
	        y: 0
	      };

	      // TODO: Find better solution for solving this problem
	      // Calculate how much space we have available for the label
	      var labelLength;
	      if(projectedValues[index + 1]) {
	        // If we still have one label ahead, we can calculate the distance to the next tick / label
	        labelLength = projectedValues[index + 1] - projectedValue;
	      } else {
	        // If we don't have a label ahead and we have only two labels in total, we just take the remaining distance to
	        // on the whole axis length. We limit that to a minimum of 30 pixel, so that labels close to the border will
	        // still be visible inside of the chart padding.
	        labelLength = Math.max(this.axisLength - projectedValue, 30);
	      }

	      // Skip grid lines and labels where interpolated label values are falsey (execpt for 0)
	      if(Chartist.isFalseyButZero(labelValues[index]) && labelValues[index] !== '') {
	        return;
	      }

	      // Transform to global coordinates using the chartRect
	      // We also need to set the label offset for the createLabel function
	      if(this.units.pos === 'x') {
	        projectedValue = this.chartRect.x1 + projectedValue;
	        labelOffset.x = chartOptions.axisX.labelOffset.x;

	        // If the labels should be positioned in start position (top side for vertical axis) we need to set a
	        // different offset as for positioned with end (bottom)
	        if(chartOptions.axisX.position === 'start') {
	          labelOffset.y = this.chartRect.padding.top + chartOptions.axisX.labelOffset.y + (useForeignObject ? 5 : 20);
	        } else {
	          labelOffset.y = this.chartRect.y1 + chartOptions.axisX.labelOffset.y + (useForeignObject ? 5 : 20);
	        }
	      } else {
	        projectedValue = this.chartRect.y1 - projectedValue;
	        labelOffset.y = chartOptions.axisY.labelOffset.y - (useForeignObject ? labelLength : 0);

	        // If the labels should be positioned in start position (left side for horizontal axis) we need to set a
	        // different offset as for positioned with end (right side)
	        if(chartOptions.axisY.position === 'start') {
	          labelOffset.x = useForeignObject ? this.chartRect.padding.left + chartOptions.axisY.labelOffset.x : this.chartRect.x1 - 10;
	        } else {
	          labelOffset.x = this.chartRect.x2 + chartOptions.axisY.labelOffset.x + 10;
	        }
	      }

	      if(axisOptions.showGrid) {
	        Chartist.createGrid(projectedValue, index, this, this.gridOffset, this.chartRect[this.counterUnits.len](), gridGroup, [
	          chartOptions.classNames.grid,
	          chartOptions.classNames[this.units.dir]
	        ], eventEmitter);
	      }

	      if(axisOptions.showLabel) {
	        Chartist.createLabel(projectedValue, labelLength, index, labelValues, this, axisOptions.offset, labelOffset, labelGroup, [
	          chartOptions.classNames.label,
	          chartOptions.classNames[this.units.dir],
	          (axisOptions.position === 'start' ? chartOptions.classNames[axisOptions.position] : chartOptions.classNames['end'])
	        ], useForeignObject, eventEmitter);
	      }
	    }.bind(this));
	  }

	  Chartist.Axis = Chartist.Class.extend({
	    constructor: Axis,
	    createGridAndLabels: createGridAndLabels,
	    projectValue: function(value, index, data) {
	      throw new Error('Base axis can\'t be instantiated!');
	    }
	  });

	  Chartist.Axis.units = axisUnits;

	}(window, document, Chartist));
	/* global Chartist */
	(function (window, document, Chartist) {

	  function AutoScaleAxis(axisUnit, data, chartRect, options) {
	    // Usually we calculate highLow based on the data but this can be overriden by a highLow object in the options
	    var highLow = options.highLow || Chartist.getHighLow(data, options, axisUnit.pos);
	    this.bounds = Chartist.getBounds(chartRect[axisUnit.rectEnd] - chartRect[axisUnit.rectStart], highLow, options.scaleMinSpace || 20, options.onlyInteger);
	    this.range = {
	      min: this.bounds.min,
	      max: this.bounds.max
	    };

	    Chartist.AutoScaleAxis.super.constructor.call(this,
	      axisUnit,
	      chartRect,
	      this.bounds.values,
	      options);
	  }

	  function projectValue(value) {
	    return this.axisLength * (+Chartist.getMultiValue(value, this.units.pos) - this.bounds.min) / this.bounds.range;
	  }

	  Chartist.AutoScaleAxis = Chartist.Axis.extend({
	    constructor: AutoScaleAxis,
	    projectValue: projectValue
	  });

	}(window, document, Chartist));
	/* global Chartist */
	(function (window, document, Chartist) {

	  function FixedScaleAxis(axisUnit, data, chartRect, options) {
	    var highLow = options.highLow || Chartist.getHighLow(data, options, axisUnit.pos);
	    this.divisor = options.divisor || 1;
	    this.ticks = options.ticks || Chartist.times(this.divisor).map(function(value, index) {
	      return highLow.low + (highLow.high - highLow.low) / this.divisor * index;
	    }.bind(this));
	    this.ticks.sort(function(a, b) {
	      return a - b;
	    });
	    this.range = {
	      min: highLow.low,
	      max: highLow.high
	    };

	    Chartist.FixedScaleAxis.super.constructor.call(this,
	      axisUnit,
	      chartRect,
	      this.ticks,
	      options);

	    this.stepLength = this.axisLength / this.divisor;
	  }

	  function projectValue(value) {
	    return this.axisLength * (+Chartist.getMultiValue(value, this.units.pos) - this.range.min) / (this.range.max - this.range.min);
	  }

	  Chartist.FixedScaleAxis = Chartist.Axis.extend({
	    constructor: FixedScaleAxis,
	    projectValue: projectValue
	  });

	}(window, document, Chartist));
	/* global Chartist */
	(function (window, document, Chartist) {

	  function StepAxis(axisUnit, data, chartRect, options) {
	    Chartist.StepAxis.super.constructor.call(this,
	      axisUnit,
	      chartRect,
	      options.ticks,
	      options);

	    var calc = Math.max(1, options.ticks.length - (options.stretch ? 1 : 0));
	    this.stepLength = this.axisLength / calc;
	  }

	  function projectValue(value, index) {
	    return this.stepLength * index;
	  }

	  Chartist.StepAxis = Chartist.Axis.extend({
	    constructor: StepAxis,
	    projectValue: projectValue
	  });

	}(window, document, Chartist));
	/* global Chartist */
	(function(window, document, Chartist){

	  /**
	   * Default options in line charts. Expand the code view to see a detailed list of options with comments.
	   *
	   * @memberof Chartist.Line
	   */
	  var defaultOptions = {
	    // Options for X-Axis
	    axisX: {
	      // The offset of the labels to the chart area
	      offset: 30,
	      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
	      position: 'end',
	      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
	      labelOffset: {
	        x: 0,
	        y: 0
	      },
	      // If labels should be shown or not
	      showLabel: true,
	      // If the axis grid should be drawn or not
	      showGrid: true,
	      // Interpolation function that allows you to intercept the value from the axis label
	      labelInterpolationFnc: Chartist.noop,
	      // Set the axis type to be used to project values on this axis. If not defined, Chartist.StepAxis will be used for the X-Axis, where the ticks option will be set to the labels in the data and the stretch option will be set to the global fullWidth option. This type can be changed to any axis constructor available (e.g. Chartist.FixedScaleAxis), where all axis options should be present here.
	      type: undefined
	    },
	    // Options for Y-Axis
	    axisY: {
	      // The offset of the labels to the chart area
	      offset: 40,
	      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
	      position: 'start',
	      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
	      labelOffset: {
	        x: 0,
	        y: 0
	      },
	      // If labels should be shown or not
	      showLabel: true,
	      // If the axis grid should be drawn or not
	      showGrid: true,
	      // Interpolation function that allows you to intercept the value from the axis label
	      labelInterpolationFnc: Chartist.noop,
	      // Set the axis type to be used to project values on this axis. If not defined, Chartist.AutoScaleAxis will be used for the Y-Axis, where the high and low options will be set to the global high and low options. This type can be changed to any axis constructor available (e.g. Chartist.FixedScaleAxis), where all axis options should be present here.
	      type: undefined,
	      // This value specifies the minimum height in pixel of the scale steps
	      scaleMinSpace: 20,
	      // Use only integer values (whole numbers) for the scale steps
	      onlyInteger: false
	    },
	    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
	    width: undefined,
	    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
	    height: undefined,
	    // If the line should be drawn or not
	    showLine: true,
	    // If dots should be drawn or not
	    showPoint: true,
	    // If the line chart should draw an area
	    showArea: false,
	    // The base for the area chart that will be used to close the area shape (is normally 0)
	    areaBase: 0,
	    // Specify if the lines should be smoothed. This value can be true or false where true will result in smoothing using the default smoothing interpolation function Chartist.Interpolation.cardinal and false results in Chartist.Interpolation.none. You can also choose other smoothing / interpolation functions available in the Chartist.Interpolation module, or write your own interpolation function. Check the examples for a brief description.
	    lineSmooth: true,
	    // If the line chart should add a background fill to the .ct-grids group.
	    showGridBackground: false,
	    // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value
	    low: undefined,
	    // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value
	    high: undefined,
	    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
	    chartPadding: {
	      top: 15,
	      right: 15,
	      bottom: 5,
	      left: 10
	    },
	    // When set to true, the last grid line on the x-axis is not drawn and the chart elements will expand to the full available width of the chart. For the last label to be drawn correctly you might need to add chart padding or offset the last label with a draw event handler.
	    fullWidth: false,
	    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
	    reverseData: false,
	    // Override the class names that get used to generate the SVG structure of the chart
	    classNames: {
	      chart: 'ct-chart-line',
	      label: 'ct-label',
	      labelGroup: 'ct-labels',
	      series: 'ct-series',
	      line: 'ct-line',
	      point: 'ct-point',
	      area: 'ct-area',
	      grid: 'ct-grid',
	      gridGroup: 'ct-grids',
	      gridBackground: 'ct-grid-background',
	      vertical: 'ct-vertical',
	      horizontal: 'ct-horizontal',
	      start: 'ct-start',
	      end: 'ct-end'
	    }
	  };

	  /**
	   * Creates a new chart
	   *
	   */
	  function createChart(options) {
	    var data = Chartist.normalizeData(this.data, options.reverseData, true);

	    // Create new svg object
	    this.svg = Chartist.createSvg(this.container, options.width, options.height, options.classNames.chart);
	    // Create groups for labels, grid and series
	    var gridGroup = this.svg.elem('g').addClass(options.classNames.gridGroup);
	    var seriesGroup = this.svg.elem('g');
	    var labelGroup = this.svg.elem('g').addClass(options.classNames.labelGroup);

	    var chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);
	    var axisX, axisY;

	    if(options.axisX.type === undefined) {
	      axisX = new Chartist.StepAxis(Chartist.Axis.units.x, data.normalized.series, chartRect, Chartist.extend({}, options.axisX, {
	        ticks: data.normalized.labels,
	        stretch: options.fullWidth
	      }));
	    } else {
	      axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data.normalized.series, chartRect, options.axisX);
	    }

	    if(options.axisY.type === undefined) {
	      axisY = new Chartist.AutoScaleAxis(Chartist.Axis.units.y, data.normalized.series, chartRect, Chartist.extend({}, options.axisY, {
	        high: Chartist.isNumeric(options.high) ? options.high : options.axisY.high,
	        low: Chartist.isNumeric(options.low) ? options.low : options.axisY.low
	      }));
	    } else {
	      axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data.normalized.series, chartRect, options.axisY);
	    }

	    axisX.createGridAndLabels(gridGroup, labelGroup, this.supportsForeignObject, options, this.eventEmitter);
	    axisY.createGridAndLabels(gridGroup, labelGroup, this.supportsForeignObject, options, this.eventEmitter);

	    if (options.showGridBackground) {
	      Chartist.createGridBackground(gridGroup, chartRect, options.classNames.gridBackground, this.eventEmitter);
	    }

	    // Draw the series
	    data.raw.series.forEach(function(series, seriesIndex) {
	      var seriesElement = seriesGroup.elem('g');

	      // Write attributes to series group element. If series name or meta is undefined the attributes will not be written
	      seriesElement.attr({
	        'ct:series-name': series.name,
	        'ct:meta': Chartist.serialize(series.meta)
	      });

	      // Use series class from series data or if not set generate one
	      seriesElement.addClass([
	        options.classNames.series,
	        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(seriesIndex))
	      ].join(' '));

	      var pathCoordinates = [],
	        pathData = [];

	      data.normalized.series[seriesIndex].forEach(function(value, valueIndex) {
	        var p = {
	          x: chartRect.x1 + axisX.projectValue(value, valueIndex, data.normalized.series[seriesIndex]),
	          y: chartRect.y1 - axisY.projectValue(value, valueIndex, data.normalized.series[seriesIndex])
	        };
	        pathCoordinates.push(p.x, p.y);
	        pathData.push({
	          value: value,
	          valueIndex: valueIndex,
	          meta: Chartist.getMetaData(series, valueIndex)
	        });
	      }.bind(this));

	      var seriesOptions = {
	        lineSmooth: Chartist.getSeriesOption(series, options, 'lineSmooth'),
	        showPoint: Chartist.getSeriesOption(series, options, 'showPoint'),
	        showLine: Chartist.getSeriesOption(series, options, 'showLine'),
	        showArea: Chartist.getSeriesOption(series, options, 'showArea'),
	        areaBase: Chartist.getSeriesOption(series, options, 'areaBase')
	      };

	      var smoothing = typeof seriesOptions.lineSmooth === 'function' ?
	        seriesOptions.lineSmooth : (seriesOptions.lineSmooth ? Chartist.Interpolation.monotoneCubic() : Chartist.Interpolation.none());
	      // Interpolating path where pathData will be used to annotate each path element so we can trace back the original
	      // index, value and meta data
	      var path = smoothing(pathCoordinates, pathData);

	      // If we should show points we need to create them now to avoid secondary loop
	      // Points are drawn from the pathElements returned by the interpolation function
	      // Small offset for Firefox to render squares correctly
	      if (seriesOptions.showPoint) {

	        path.pathElements.forEach(function(pathElement) {
	          var point = seriesElement.elem('line', {
	            x1: pathElement.x,
	            y1: pathElement.y,
	            x2: pathElement.x + 0.01,
	            y2: pathElement.y
	          }, options.classNames.point).attr({
	            'ct:value': [pathElement.data.value.x, pathElement.data.value.y].filter(Chartist.isNumeric).join(','),
	            'ct:meta': Chartist.serialize(pathElement.data.meta)
	          });

	          this.eventEmitter.emit('draw', {
	            type: 'point',
	            value: pathElement.data.value,
	            index: pathElement.data.valueIndex,
	            meta: pathElement.data.meta,
	            series: series,
	            seriesIndex: seriesIndex,
	            axisX: axisX,
	            axisY: axisY,
	            group: seriesElement,
	            element: point,
	            x: pathElement.x,
	            y: pathElement.y
	          });
	        }.bind(this));
	      }

	      if(seriesOptions.showLine) {
	        var line = seriesElement.elem('path', {
	          d: path.stringify()
	        }, options.classNames.line, true);

	        this.eventEmitter.emit('draw', {
	          type: 'line',
	          values: data.normalized.series[seriesIndex],
	          path: path.clone(),
	          chartRect: chartRect,
	          index: seriesIndex,
	          series: series,
	          seriesIndex: seriesIndex,
	          seriesMeta: series.meta,
	          axisX: axisX,
	          axisY: axisY,
	          group: seriesElement,
	          element: line
	        });
	      }

	      // Area currently only works with axes that support a range!
	      if(seriesOptions.showArea && axisY.range) {
	        // If areaBase is outside the chart area (< min or > max) we need to set it respectively so that
	        // the area is not drawn outside the chart area.
	        var areaBase = Math.max(Math.min(seriesOptions.areaBase, axisY.range.max), axisY.range.min);

	        // We project the areaBase value into screen coordinates
	        var areaBaseProjected = chartRect.y1 - axisY.projectValue(areaBase);

	        // In order to form the area we'll first split the path by move commands so we can chunk it up into segments
	        path.splitByCommand('M').filter(function onlySolidSegments(pathSegment) {
	          // We filter only "solid" segments that contain more than one point. Otherwise there's no need for an area
	          return pathSegment.pathElements.length > 1;
	        }).map(function convertToArea(solidPathSegments) {
	          // Receiving the filtered solid path segments we can now convert those segments into fill areas
	          var firstElement = solidPathSegments.pathElements[0];
	          var lastElement = solidPathSegments.pathElements[solidPathSegments.pathElements.length - 1];

	          // Cloning the solid path segment with closing option and removing the first move command from the clone
	          // We then insert a new move that should start at the area base and draw a straight line up or down
	          // at the end of the path we add an additional straight line to the projected area base value
	          // As the closing option is set our path will be automatically closed
	          return solidPathSegments.clone(true)
	            .position(0)
	            .remove(1)
	            .move(firstElement.x, areaBaseProjected)
	            .line(firstElement.x, firstElement.y)
	            .position(solidPathSegments.pathElements.length + 1)
	            .line(lastElement.x, areaBaseProjected);

	        }).forEach(function createArea(areaPath) {
	          // For each of our newly created area paths, we'll now create path elements by stringifying our path objects
	          // and adding the created DOM elements to the correct series group
	          var area = seriesElement.elem('path', {
	            d: areaPath.stringify()
	          }, options.classNames.area, true);

	          // Emit an event for each area that was drawn
	          this.eventEmitter.emit('draw', {
	            type: 'area',
	            values: data.normalized.series[seriesIndex],
	            path: areaPath.clone(),
	            series: series,
	            seriesIndex: seriesIndex,
	            axisX: axisX,
	            axisY: axisY,
	            chartRect: chartRect,
	            index: seriesIndex,
	            group: seriesElement,
	            element: area
	          });
	        }.bind(this));
	      }
	    }.bind(this));

	    this.eventEmitter.emit('created', {
	      bounds: axisY.bounds,
	      chartRect: chartRect,
	      axisX: axisX,
	      axisY: axisY,
	      svg: this.svg,
	      options: options
	    });
	  }

	  /**
	   * This method creates a new line chart.
	   *
	   * @memberof Chartist.Line
	   * @param {String|Node} query A selector query string or directly a DOM element
	   * @param {Object} data The data object that needs to consist of a labels and a series array
	   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
	   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
	   * @return {Object} An object which exposes the API for the created chart
	   *
	   * @example
	   * // Create a simple line chart
	   * var data = {
	   *   // A labels array that can contain any sort of values
	   *   labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
	   *   // Our series array that contains series objects or in this case series data arrays
	   *   series: [
	   *     [5, 2, 4, 2, 0]
	   *   ]
	   * };
	   *
	   * // As options we currently only set a static size of 300x200 px
	   * var options = {
	   *   width: '300px',
	   *   height: '200px'
	   * };
	   *
	   * // In the global name space Chartist we call the Line function to initialize a line chart. As a first parameter we pass in a selector where we would like to get our chart created. Second parameter is the actual data object and as a third parameter we pass in our options
	   * new Chartist.Line('.ct-chart', data, options);
	   *
	   * @example
	   * // Use specific interpolation function with configuration from the Chartist.Interpolation module
	   *
	   * var chart = new Chartist.Line('.ct-chart', {
	   *   labels: [1, 2, 3, 4, 5],
	   *   series: [
	   *     [1, 1, 8, 1, 7]
	   *   ]
	   * }, {
	   *   lineSmooth: Chartist.Interpolation.cardinal({
	   *     tension: 0.2
	   *   })
	   * });
	   *
	   * @example
	   * // Create a line chart with responsive options
	   *
	   * var data = {
	   *   // A labels array that can contain any sort of values
	   *   labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
	   *   // Our series array that contains series objects or in this case series data arrays
	   *   series: [
	   *     [5, 2, 4, 2, 0]
	   *   ]
	   * };
	   *
	   * // In addition to the regular options we specify responsive option overrides that will override the default configutation based on the matching media queries.
	   * var responsiveOptions = [
	   *   ['screen and (min-width: 641px) and (max-width: 1024px)', {
	   *     showPoint: false,
	   *     axisX: {
	   *       labelInterpolationFnc: function(value) {
	   *         // Will return Mon, Tue, Wed etc. on medium screens
	   *         return value.slice(0, 3);
	   *       }
	   *     }
	   *   }],
	   *   ['screen and (max-width: 640px)', {
	   *     showLine: false,
	   *     axisX: {
	   *       labelInterpolationFnc: function(value) {
	   *         // Will return M, T, W etc. on small screens
	   *         return value[0];
	   *       }
	   *     }
	   *   }]
	   * ];
	   *
	   * new Chartist.Line('.ct-chart', data, null, responsiveOptions);
	   *
	   */
	  function Line(query, data, options, responsiveOptions) {
	    Chartist.Line.super.constructor.call(this,
	      query,
	      data,
	      defaultOptions,
	      Chartist.extend({}, defaultOptions, options),
	      responsiveOptions);
	  }

	  // Creating line chart type in Chartist namespace
	  Chartist.Line = Chartist.Base.extend({
	    constructor: Line,
	    createChart: createChart
	  });

	}(window, document, Chartist));
	/* global Chartist */
	(function(window, document, Chartist){

	  /**
	   * Default options in bar charts. Expand the code view to see a detailed list of options with comments.
	   *
	   * @memberof Chartist.Bar
	   */
	  var defaultOptions = {
	    // Options for X-Axis
	    axisX: {
	      // The offset of the chart drawing area to the border of the container
	      offset: 30,
	      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
	      position: 'end',
	      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
	      labelOffset: {
	        x: 0,
	        y: 0
	      },
	      // If labels should be shown or not
	      showLabel: true,
	      // If the axis grid should be drawn or not
	      showGrid: true,
	      // Interpolation function that allows you to intercept the value from the axis label
	      labelInterpolationFnc: Chartist.noop,
	      // This value specifies the minimum width in pixel of the scale steps
	      scaleMinSpace: 30,
	      // Use only integer values (whole numbers) for the scale steps
	      onlyInteger: false
	    },
	    // Options for Y-Axis
	    axisY: {
	      // The offset of the chart drawing area to the border of the container
	      offset: 40,
	      // Position where labels are placed. Can be set to `start` or `end` where `start` is equivalent to left or top on vertical axis and `end` is equivalent to right or bottom on horizontal axis.
	      position: 'start',
	      // Allows you to correct label positioning on this axis by positive or negative x and y offset.
	      labelOffset: {
	        x: 0,
	        y: 0
	      },
	      // If labels should be shown or not
	      showLabel: true,
	      // If the axis grid should be drawn or not
	      showGrid: true,
	      // Interpolation function that allows you to intercept the value from the axis label
	      labelInterpolationFnc: Chartist.noop,
	      // This value specifies the minimum height in pixel of the scale steps
	      scaleMinSpace: 20,
	      // Use only integer values (whole numbers) for the scale steps
	      onlyInteger: false
	    },
	    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
	    width: undefined,
	    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
	    height: undefined,
	    // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value
	    high: undefined,
	    // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value
	    low: undefined,
	    // Unless low/high are explicitly set, bar chart will be centered at zero by default. Set referenceValue to null to auto scale.
	    referenceValue: 0,
	    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
	    chartPadding: {
	      top: 15,
	      right: 15,
	      bottom: 5,
	      left: 10
	    },
	    // Specify the distance in pixel of bars in a group
	    seriesBarDistance: 15,
	    // If set to true this property will cause the series bars to be stacked. Check the `stackMode` option for further stacking options.
	    stackBars: false,
	    // If set to 'overlap' this property will force the stacked bars to draw from the zero line.
	    // If set to 'accumulate' this property will form a total for each series point. This will also influence the y-axis and the overall bounds of the chart. In stacked mode the seriesBarDistance property will have no effect.
	    stackMode: 'accumulate',
	    // Inverts the axes of the bar chart in order to draw a horizontal bar chart. Be aware that you also need to invert your axis settings as the Y Axis will now display the labels and the X Axis the values.
	    horizontalBars: false,
	    // If set to true then each bar will represent a series and the data array is expected to be a one dimensional array of data values rather than a series array of series. This is useful if the bar chart should represent a profile rather than some data over time.
	    distributeSeries: false,
	    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
	    reverseData: false,
	    // If the bar chart should add a background fill to the .ct-grids group.
	    showGridBackground: false,
	    // Override the class names that get used to generate the SVG structure of the chart
	    classNames: {
	      chart: 'ct-chart-bar',
	      horizontalBars: 'ct-horizontal-bars',
	      label: 'ct-label',
	      labelGroup: 'ct-labels',
	      series: 'ct-series',
	      bar: 'ct-bar',
	      grid: 'ct-grid',
	      gridGroup: 'ct-grids',
	      gridBackground: 'ct-grid-background',
	      vertical: 'ct-vertical',
	      horizontal: 'ct-horizontal',
	      start: 'ct-start',
	      end: 'ct-end'
	    }
	  };

	  /**
	   * Creates a new chart
	   *
	   */
	  function createChart(options) {
	    var data;
	    var highLow;

	    if(options.distributeSeries) {
	      data = Chartist.normalizeData(this.data, options.reverseData, options.horizontalBars ? 'x' : 'y');
	      data.normalized.series = data.normalized.series.map(function(value) {
	        return [value];
	      });
	    } else {
	      data = Chartist.normalizeData(this.data, options.reverseData, options.horizontalBars ? 'x' : 'y');
	    }

	    // Create new svg element
	    this.svg = Chartist.createSvg(
	      this.container,
	      options.width,
	      options.height,
	      options.classNames.chart + (options.horizontalBars ? ' ' + options.classNames.horizontalBars : '')
	    );

	    // Drawing groups in correct order
	    var gridGroup = this.svg.elem('g').addClass(options.classNames.gridGroup);
	    var seriesGroup = this.svg.elem('g');
	    var labelGroup = this.svg.elem('g').addClass(options.classNames.labelGroup);

	    if(options.stackBars && data.normalized.series.length !== 0) {

	      // If stacked bars we need to calculate the high low from stacked values from each series
	      var serialSums = Chartist.serialMap(data.normalized.series, function serialSums() {
	        return Array.prototype.slice.call(arguments).map(function(value) {
	          return value;
	        }).reduce(function(prev, curr) {
	          return {
	            x: prev.x + (curr && curr.x) || 0,
	            y: prev.y + (curr && curr.y) || 0
	          };
	        }, {x: 0, y: 0});
	      });

	      highLow = Chartist.getHighLow([serialSums], options, options.horizontalBars ? 'x' : 'y');

	    } else {

	      highLow = Chartist.getHighLow(data.normalized.series, options, options.horizontalBars ? 'x' : 'y');
	    }

	    // Overrides of high / low from settings
	    highLow.high = +options.high || (options.high === 0 ? 0 : highLow.high);
	    highLow.low = +options.low || (options.low === 0 ? 0 : highLow.low);

	    var chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);

	    var valueAxis,
	      labelAxisTicks,
	      labelAxis,
	      axisX,
	      axisY;

	    // We need to set step count based on some options combinations
	    if(options.distributeSeries && options.stackBars) {
	      // If distributed series are enabled and bars need to be stacked, we'll only have one bar and therefore should
	      // use only the first label for the step axis
	      labelAxisTicks = data.normalized.labels.slice(0, 1);
	    } else {
	      // If distributed series are enabled but stacked bars aren't, we should use the series labels
	      // If we are drawing a regular bar chart with two dimensional series data, we just use the labels array
	      // as the bars are normalized
	      labelAxisTicks = data.normalized.labels;
	    }

	    // Set labelAxis and valueAxis based on the horizontalBars setting. This setting will flip the axes if necessary.
	    if(options.horizontalBars) {
	      if(options.axisX.type === undefined) {
	        valueAxis = axisX = new Chartist.AutoScaleAxis(Chartist.Axis.units.x, data.normalized.series, chartRect, Chartist.extend({}, options.axisX, {
	          highLow: highLow,
	          referenceValue: 0
	        }));
	      } else {
	        valueAxis = axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data.normalized.series, chartRect, Chartist.extend({}, options.axisX, {
	          highLow: highLow,
	          referenceValue: 0
	        }));
	      }

	      if(options.axisY.type === undefined) {
	        labelAxis = axisY = new Chartist.StepAxis(Chartist.Axis.units.y, data.normalized.series, chartRect, {
	          ticks: labelAxisTicks
	        });
	      } else {
	        labelAxis = axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data.normalized.series, chartRect, options.axisY);
	      }
	    } else {
	      if(options.axisX.type === undefined) {
	        labelAxis = axisX = new Chartist.StepAxis(Chartist.Axis.units.x, data.normalized.series, chartRect, {
	          ticks: labelAxisTicks
	        });
	      } else {
	        labelAxis = axisX = options.axisX.type.call(Chartist, Chartist.Axis.units.x, data.normalized.series, chartRect, options.axisX);
	      }

	      if(options.axisY.type === undefined) {
	        valueAxis = axisY = new Chartist.AutoScaleAxis(Chartist.Axis.units.y, data.normalized.series, chartRect, Chartist.extend({}, options.axisY, {
	          highLow: highLow,
	          referenceValue: 0
	        }));
	      } else {
	        valueAxis = axisY = options.axisY.type.call(Chartist, Chartist.Axis.units.y, data.normalized.series, chartRect, Chartist.extend({}, options.axisY, {
	          highLow: highLow,
	          referenceValue: 0
	        }));
	      }
	    }

	    // Projected 0 point
	    var zeroPoint = options.horizontalBars ? (chartRect.x1 + valueAxis.projectValue(0)) : (chartRect.y1 - valueAxis.projectValue(0));
	    // Used to track the screen coordinates of stacked bars
	    var stackedBarValues = [];

	    labelAxis.createGridAndLabels(gridGroup, labelGroup, this.supportsForeignObject, options, this.eventEmitter);
	    valueAxis.createGridAndLabels(gridGroup, labelGroup, this.supportsForeignObject, options, this.eventEmitter);

	    if (options.showGridBackground) {
	      Chartist.createGridBackground(gridGroup, chartRect, options.classNames.gridBackground, this.eventEmitter);
	    }

	    // Draw the series
	    data.raw.series.forEach(function(series, seriesIndex) {
	      // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc.
	      var biPol = seriesIndex - (data.raw.series.length - 1) / 2;
	      // Half of the period width between vertical grid lines used to position bars
	      var periodHalfLength;
	      // Current series SVG element
	      var seriesElement;

	      // We need to set periodHalfLength based on some options combinations
	      if(options.distributeSeries && !options.stackBars) {
	        // If distributed series are enabled but stacked bars aren't, we need to use the length of the normaizedData array
	        // which is the series count and divide by 2
	        periodHalfLength = labelAxis.axisLength / data.normalized.series.length / 2;
	      } else if(options.distributeSeries && options.stackBars) {
	        // If distributed series and stacked bars are enabled we'll only get one bar so we should just divide the axis
	        // length by 2
	        periodHalfLength = labelAxis.axisLength / 2;
	      } else {
	        // On regular bar charts we should just use the series length
	        periodHalfLength = labelAxis.axisLength / data.normalized.series[seriesIndex].length / 2;
	      }

	      // Adding the series group to the series element
	      seriesElement = seriesGroup.elem('g');

	      // Write attributes to series group element. If series name or meta is undefined the attributes will not be written
	      seriesElement.attr({
	        'ct:series-name': series.name,
	        'ct:meta': Chartist.serialize(series.meta)
	      });

	      // Use series class from series data or if not set generate one
	      seriesElement.addClass([
	        options.classNames.series,
	        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(seriesIndex))
	      ].join(' '));

	      data.normalized.series[seriesIndex].forEach(function(value, valueIndex) {
	        var projected,
	          bar,
	          previousStack,
	          labelAxisValueIndex;

	        // We need to set labelAxisValueIndex based on some options combinations
	        if(options.distributeSeries && !options.stackBars) {
	          // If distributed series are enabled but stacked bars aren't, we can use the seriesIndex for later projection
	          // on the step axis for label positioning
	          labelAxisValueIndex = seriesIndex;
	        } else if(options.distributeSeries && options.stackBars) {
	          // If distributed series and stacked bars are enabled, we will only get one bar and therefore always use
	          // 0 for projection on the label step axis
	          labelAxisValueIndex = 0;
	        } else {
	          // On regular bar charts we just use the value index to project on the label step axis
	          labelAxisValueIndex = valueIndex;
	        }

	        // We need to transform coordinates differently based on the chart layout
	        if(options.horizontalBars) {
	          projected = {
	            x: chartRect.x1 + valueAxis.projectValue(value && value.x ? value.x : 0, valueIndex, data.normalized.series[seriesIndex]),
	            y: chartRect.y1 - labelAxis.projectValue(value && value.y ? value.y : 0, labelAxisValueIndex, data.normalized.series[seriesIndex])
	          };
	        } else {
	          projected = {
	            x: chartRect.x1 + labelAxis.projectValue(value && value.x ? value.x : 0, labelAxisValueIndex, data.normalized.series[seriesIndex]),
	            y: chartRect.y1 - valueAxis.projectValue(value && value.y ? value.y : 0, valueIndex, data.normalized.series[seriesIndex])
	          };
	        }

	        // If the label axis is a step based axis we will offset the bar into the middle of between two steps using
	        // the periodHalfLength value. Also we do arrange the different series so that they align up to each other using
	        // the seriesBarDistance. If we don't have a step axis, the bar positions can be chosen freely so we should not
	        // add any automated positioning.
	        if(labelAxis instanceof Chartist.StepAxis) {
	          // Offset to center bar between grid lines, but only if the step axis is not stretched
	          if(!labelAxis.options.stretch) {
	            projected[labelAxis.units.pos] += periodHalfLength * (options.horizontalBars ? -1 : 1);
	          }
	          // Using bi-polar offset for multiple series if no stacked bars or series distribution is used
	          projected[labelAxis.units.pos] += (options.stackBars || options.distributeSeries) ? 0 : biPol * options.seriesBarDistance * (options.horizontalBars ? -1 : 1);
	        }

	        // Enter value in stacked bar values used to remember previous screen value for stacking up bars
	        previousStack = stackedBarValues[valueIndex] || zeroPoint;
	        stackedBarValues[valueIndex] = previousStack - (zeroPoint - projected[labelAxis.counterUnits.pos]);

	        // Skip if value is undefined
	        if(value === undefined) {
	          return;
	        }

	        var positions = {};
	        positions[labelAxis.units.pos + '1'] = projected[labelAxis.units.pos];
	        positions[labelAxis.units.pos + '2'] = projected[labelAxis.units.pos];

	        if(options.stackBars && (options.stackMode === 'accumulate' || !options.stackMode)) {
	          // Stack mode: accumulate (default)
	          // If bars are stacked we use the stackedBarValues reference and otherwise base all bars off the zero line
	          // We want backwards compatibility, so the expected fallback without the 'stackMode' option
	          // to be the original behaviour (accumulate)
	          positions[labelAxis.counterUnits.pos + '1'] = previousStack;
	          positions[labelAxis.counterUnits.pos + '2'] = stackedBarValues[valueIndex];
	        } else {
	          // Draw from the zero line normally
	          // This is also the same code for Stack mode: overlap
	          positions[labelAxis.counterUnits.pos + '1'] = zeroPoint;
	          positions[labelAxis.counterUnits.pos + '2'] = projected[labelAxis.counterUnits.pos];
	        }

	        // Limit x and y so that they are within the chart rect
	        positions.x1 = Math.min(Math.max(positions.x1, chartRect.x1), chartRect.x2);
	        positions.x2 = Math.min(Math.max(positions.x2, chartRect.x1), chartRect.x2);
	        positions.y1 = Math.min(Math.max(positions.y1, chartRect.y2), chartRect.y1);
	        positions.y2 = Math.min(Math.max(positions.y2, chartRect.y2), chartRect.y1);

	        var metaData = Chartist.getMetaData(series, valueIndex);

	        // Create bar element
	        bar = seriesElement.elem('line', positions, options.classNames.bar).attr({
	          'ct:value': [value.x, value.y].filter(Chartist.isNumeric).join(','),
	          'ct:meta': Chartist.serialize(metaData)
	        });

	        this.eventEmitter.emit('draw', Chartist.extend({
	          type: 'bar',
	          value: value,
	          index: valueIndex,
	          meta: metaData,
	          series: series,
	          seriesIndex: seriesIndex,
	          axisX: axisX,
	          axisY: axisY,
	          chartRect: chartRect,
	          group: seriesElement,
	          element: bar
	        }, positions));
	      }.bind(this));
	    }.bind(this));

	    this.eventEmitter.emit('created', {
	      bounds: valueAxis.bounds,
	      chartRect: chartRect,
	      axisX: axisX,
	      axisY: axisY,
	      svg: this.svg,
	      options: options
	    });
	  }

	  /**
	   * This method creates a new bar chart and returns API object that you can use for later changes.
	   *
	   * @memberof Chartist.Bar
	   * @param {String|Node} query A selector query string or directly a DOM element
	   * @param {Object} data The data object that needs to consist of a labels and a series array
	   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
	   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
	   * @return {Object} An object which exposes the API for the created chart
	   *
	   * @example
	   * // Create a simple bar chart
	   * var data = {
	   *   labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
	   *   series: [
	   *     [5, 2, 4, 2, 0]
	   *   ]
	   * };
	   *
	   * // In the global name space Chartist we call the Bar function to initialize a bar chart. As a first parameter we pass in a selector where we would like to get our chart created and as a second parameter we pass our data object.
	   * new Chartist.Bar('.ct-chart', data);
	   *
	   * @example
	   * // This example creates a bipolar grouped bar chart where the boundaries are limitted to -10 and 10
	   * new Chartist.Bar('.ct-chart', {
	   *   labels: [1, 2, 3, 4, 5, 6, 7],
	   *   series: [
	   *     [1, 3, 2, -5, -3, 1, -6],
	   *     [-5, -2, -4, -1, 2, -3, 1]
	   *   ]
	   * }, {
	   *   seriesBarDistance: 12,
	   *   low: -10,
	   *   high: 10
	   * });
	   *
	   */
	  function Bar(query, data, options, responsiveOptions) {
	    Chartist.Bar.super.constructor.call(this,
	      query,
	      data,
	      defaultOptions,
	      Chartist.extend({}, defaultOptions, options),
	      responsiveOptions);
	  }

	  // Creating bar chart type in Chartist namespace
	  Chartist.Bar = Chartist.Base.extend({
	    constructor: Bar,
	    createChart: createChart
	  });

	}(window, document, Chartist));
	/* global Chartist */
	(function(window, document, Chartist) {

	  /**
	   * Default options in line charts. Expand the code view to see a detailed list of options with comments.
	   *
	   * @memberof Chartist.Pie
	   */
	  var defaultOptions = {
	    // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')
	    width: undefined,
	    // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')
	    height: undefined,
	    // Padding of the chart drawing area to the container element and labels as a number or padding object {top: 5, right: 5, bottom: 5, left: 5}
	    chartPadding: 5,
	    // Override the class names that are used to generate the SVG structure of the chart
	    classNames: {
	      chartPie: 'ct-chart-pie',
	      chartDonut: 'ct-chart-donut',
	      series: 'ct-series',
	      slicePie: 'ct-slice-pie',
	      sliceDonut: 'ct-slice-donut',
	      sliceDonutSolid: 'ct-slice-donut-solid',
	      label: 'ct-label'
	    },
	    // The start angle of the pie chart in degrees where 0 points north. A higher value offsets the start angle clockwise.
	    startAngle: 0,
	    // An optional total you can specify. By specifying a total value, the sum of the values in the series must be this total in order to draw a full pie. You can use this parameter to draw only parts of a pie or gauge charts.
	    total: undefined,
	    // If specified the donut CSS classes will be used and strokes will be drawn instead of pie slices.
	    donut: false,
	    // If specified the donut segments will be drawn as shapes instead of strokes.
	    donutSolid: false,
	    // Specify the donut stroke width, currently done in javascript for convenience. May move to CSS styles in the future.
	    // This option can be set as number or string to specify a relative width (i.e. 100 or '30%').
	    donutWidth: 60,
	    // If a label should be shown or not
	    showLabel: true,
	    // Label position offset from the standard position which is half distance of the radius. This value can be either positive or negative. Positive values will position the label away from the center.
	    labelOffset: 0,
	    // This option can be set to 'inside', 'outside' or 'center'. Positioned with 'inside' the labels will be placed on half the distance of the radius to the border of the Pie by respecting the 'labelOffset'. The 'outside' option will place the labels at the border of the pie and 'center' will place the labels in the absolute center point of the chart. The 'center' option only makes sense in conjunction with the 'labelOffset' option.
	    labelPosition: 'inside',
	    // An interpolation function for the label value
	    labelInterpolationFnc: Chartist.noop,
	    // Label direction can be 'neutral', 'explode' or 'implode'. The labels anchor will be positioned based on those settings as well as the fact if the labels are on the right or left side of the center of the chart. Usually explode is useful when labels are positioned far away from the center.
	    labelDirection: 'neutral',
	    // If true the whole data is reversed including labels, the series order as well as the whole series data arrays.
	    reverseData: false,
	    // If true empty values will be ignored to avoid drawing unncessary slices and labels
	    ignoreEmptyValues: false
	  };

	  /**
	   * Determines SVG anchor position based on direction and center parameter
	   *
	   * @param center
	   * @param label
	   * @param direction
	   * @return {string}
	   */
	  function determineAnchorPosition(center, label, direction) {
	    var toTheRight = label.x > center.x;

	    if(toTheRight && direction === 'explode' ||
	      !toTheRight && direction === 'implode') {
	      return 'start';
	    } else if(toTheRight && direction === 'implode' ||
	      !toTheRight && direction === 'explode') {
	      return 'end';
	    } else {
	      return 'middle';
	    }
	  }

	  /**
	   * Creates the pie chart
	   *
	   * @param options
	   */
	  function createChart(options) {
	    var data = Chartist.normalizeData(this.data);
	    var seriesGroups = [],
	      labelsGroup,
	      chartRect,
	      radius,
	      labelRadius,
	      totalDataSum,
	      startAngle = options.startAngle;

	    // Create SVG.js draw
	    this.svg = Chartist.createSvg(this.container, options.width, options.height,options.donut ? options.classNames.chartDonut : options.classNames.chartPie);
	    // Calculate charting rect
	    chartRect = Chartist.createChartRect(this.svg, options, defaultOptions.padding);
	    // Get biggest circle radius possible within chartRect
	    radius = Math.min(chartRect.width() / 2, chartRect.height() / 2);
	    // Calculate total of all series to get reference value or use total reference from optional options
	    totalDataSum = options.total || data.normalized.series.reduce(function(previousValue, currentValue) {
	      return previousValue + currentValue;
	    }, 0);

	    var donutWidth = Chartist.quantity(options.donutWidth);
	    if (donutWidth.unit === '%') {
	      donutWidth.value *= radius / 100;
	    }

	    // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside
	    // Unfortunately this is not possible with the current SVG Spec
	    // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html
	    radius -= options.donut && !options.donutSolid ? donutWidth.value / 2  : 0;

	    // If labelPosition is set to `outside` or a donut chart is drawn then the label position is at the radius,
	    // if regular pie chart it's half of the radius
	    if(options.labelPosition === 'outside' || options.donut && !options.donutSolid) {
	      labelRadius = radius;
	    } else if(options.labelPosition === 'center') {
	      // If labelPosition is center we start with 0 and will later wait for the labelOffset
	      labelRadius = 0;
	    } else if(options.donutSolid) {
	      labelRadius = radius - donutWidth.value / 2;
	    } else {
	      // Default option is 'inside' where we use half the radius so the label will be placed in the center of the pie
	      // slice
	      labelRadius = radius / 2;
	    }
	    // Add the offset to the labelRadius where a negative offset means closed to the center of the chart
	    labelRadius += options.labelOffset;

	    // Calculate end angle based on total sum and current data value and offset with padding
	    var center = {
	      x: chartRect.x1 + chartRect.width() / 2,
	      y: chartRect.y2 + chartRect.height() / 2
	    };

	    // Check if there is only one non-zero value in the series array.
	    var hasSingleValInSeries = data.raw.series.filter(function(val) {
	      return val.hasOwnProperty('value') ? val.value !== 0 : val !== 0;
	    }).length === 1;

	    // Creating the series groups
	    data.raw.series.forEach(function(series, index) {
	      seriesGroups[index] = this.svg.elem('g', null, null);
	    }.bind(this));
	    //if we need to show labels we create the label group now
	    if(options.showLabel) {
	      labelsGroup = this.svg.elem('g', null, null);
	    }

	    // Draw the series
	    // initialize series groups
	    data.raw.series.forEach(function(series, index) {
	      // If current value is zero and we are ignoring empty values then skip to next value
	      if (data.normalized.series[index] === 0 && options.ignoreEmptyValues) return;

	      // If the series is an object and contains a name or meta data we add a custom attribute
	      seriesGroups[index].attr({
	        'ct:series-name': series.name
	      });

	      // Use series class from series data or if not set generate one
	      seriesGroups[index].addClass([
	        options.classNames.series,
	        (series.className || options.classNames.series + '-' + Chartist.alphaNumerate(index))
	      ].join(' '));

	      // If the whole dataset is 0 endAngle should be zero. Can't divide by 0.
	      var endAngle = (totalDataSum > 0 ? startAngle + data.normalized.series[index] / totalDataSum * 360 : 0);

	      // Use slight offset so there are no transparent hairline issues
	      var overlappigStartAngle = Math.max(0, startAngle - (index === 0 || hasSingleValInSeries ? 0 : 0.2));

	      // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle
	      // with Z and use 359.99 degrees
	      if(endAngle - overlappigStartAngle >= 359.99) {
	        endAngle = overlappigStartAngle + 359.99;
	      }

	      var start = Chartist.polarToCartesian(center.x, center.y, radius, overlappigStartAngle),
	        end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle);

	      var innerStart,
	        innerEnd,
	        donutSolidRadius;

	      // Create a new path element for the pie chart. If this isn't a donut chart we should close the path for a correct stroke
	      var path = new Chartist.Svg.Path(!options.donut || options.donutSolid)
	        .move(end.x, end.y)
	        .arc(radius, radius, 0, endAngle - startAngle > 180, 0, start.x, start.y);

	      // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie
	      if(!options.donut) {
	        path.line(center.x, center.y);
	      } else if (options.donutSolid) {
	        donutSolidRadius = radius - donutWidth.value;
	        innerStart = Chartist.polarToCartesian(center.x, center.y, donutSolidRadius, startAngle - (index === 0 || hasSingleValInSeries ? 0 : 0.2));
	        innerEnd = Chartist.polarToCartesian(center.x, center.y, donutSolidRadius, endAngle);
	        path.line(innerStart.x, innerStart.y);
	        path.arc(donutSolidRadius, donutSolidRadius, 0, endAngle - startAngle  > 180, 1, innerEnd.x, innerEnd.y);
	      }

	      // Create the SVG path
	      // If this is a donut chart we add the donut class, otherwise just a regular slice
	      var pathClassName = options.classNames.slicePie;
	      if (options.donut) {
	        pathClassName = options.classNames.sliceDonut;
	        if (options.donutSolid) {
	          pathClassName = options.classNames.sliceDonutSolid;
	        }
	      }
	      var pathElement = seriesGroups[index].elem('path', {
	        d: path.stringify()
	      }, pathClassName);

	      // Adding the pie series value to the path
	      pathElement.attr({
	        'ct:value': data.normalized.series[index],
	        'ct:meta': Chartist.serialize(series.meta)
	      });

	      // If this is a donut, we add the stroke-width as style attribute
	      if(options.donut && !options.donutSolid) {
	        pathElement._node.style.strokeWidth = donutWidth.value + 'px';
	      }

	      // Fire off draw event
	      this.eventEmitter.emit('draw', {
	        type: 'slice',
	        value: data.normalized.series[index],
	        totalDataSum: totalDataSum,
	        index: index,
	        meta: series.meta,
	        series: series,
	        group: seriesGroups[index],
	        element: pathElement,
	        path: path.clone(),
	        center: center,
	        radius: radius,
	        startAngle: startAngle,
	        endAngle: endAngle
	      });

	      // If we need to show labels we need to add the label for this slice now
	      if(options.showLabel) {
	        var labelPosition;
	        if(data.raw.series.length === 1) {
	          // If we have only 1 series, we can position the label in the center of the pie
	          labelPosition = {
	            x: center.x,
	            y: center.y
	          };
	        } else {
	          // Position at the labelRadius distance from center and between start and end angle
	          labelPosition = Chartist.polarToCartesian(
	            center.x,
	            center.y,
	            labelRadius,
	            startAngle + (endAngle - startAngle) / 2
	          );
	        }

	        var rawValue;
	        if(data.normalized.labels && !Chartist.isFalseyButZero(data.normalized.labels[index])) {
	          rawValue = data.normalized.labels[index];
	        } else {
	          rawValue = data.normalized.series[index];
	        }

	        var interpolatedValue = options.labelInterpolationFnc(rawValue, index);

	        if(interpolatedValue || interpolatedValue === 0) {
	          var labelElement = labelsGroup.elem('text', {
	            dx: labelPosition.x,
	            dy: labelPosition.y,
	            'text-anchor': determineAnchorPosition(center, labelPosition, options.labelDirection)
	          }, options.classNames.label).text('' + interpolatedValue);

	          // Fire off draw event
	          this.eventEmitter.emit('draw', {
	            type: 'label',
	            index: index,
	            group: labelsGroup,
	            element: labelElement,
	            text: '' + interpolatedValue,
	            x: labelPosition.x,
	            y: labelPosition.y
	          });
	        }
	      }

	      // Set next startAngle to current endAngle.
	      // (except for last slice)
	      startAngle = endAngle;
	    }.bind(this));

	    this.eventEmitter.emit('created', {
	      chartRect: chartRect,
	      svg: this.svg,
	      options: options
	    });
	  }

	  /**
	   * This method creates a new pie chart and returns an object that can be used to redraw the chart.
	   *
	   * @memberof Chartist.Pie
	   * @param {String|Node} query A selector query string or directly a DOM element
	   * @param {Object} data The data object in the pie chart needs to have a series property with a one dimensional data array. The values will be normalized against each other and don't necessarily need to be in percentage. The series property can also be an array of value objects that contain a value property and a className property to override the CSS class name for the series group.
	   * @param {Object} [options] The options object with options that override the default options. Check the examples for a detailed list.
	   * @param {Array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]
	   * @return {Object} An object with a version and an update method to manually redraw the chart
	   *
	   * @example
	   * // Simple pie chart example with four series
	   * new Chartist.Pie('.ct-chart', {
	   *   series: [10, 2, 4, 3]
	   * });
	   *
	   * @example
	   * // Drawing a donut chart
	   * new Chartist.Pie('.ct-chart', {
	   *   series: [10, 2, 4, 3]
	   * }, {
	   *   donut: true
	   * });
	   *
	   * @example
	   * // Using donut, startAngle and total to draw a gauge chart
	   * new Chartist.Pie('.ct-chart', {
	   *   series: [20, 10, 30, 40]
	   * }, {
	   *   donut: true,
	   *   donutWidth: 20,
	   *   startAngle: 270,
	   *   total: 200
	   * });
	   *
	   * @example
	   * // Drawing a pie chart with padding and labels that are outside the pie
	   * new Chartist.Pie('.ct-chart', {
	   *   series: [20, 10, 30, 40]
	   * }, {
	   *   chartPadding: 30,
	   *   labelOffset: 50,
	   *   labelDirection: 'explode'
	   * });
	   *
	   * @example
	   * // Overriding the class names for individual series as well as a name and meta data.
	   * // The name will be written as ct:series-name attribute and the meta data will be serialized and written
	   * // to a ct:meta attribute.
	   * new Chartist.Pie('.ct-chart', {
	   *   series: [{
	   *     value: 20,
	   *     name: 'Series 1',
	   *     className: 'my-custom-class-one',
	   *     meta: 'Meta One'
	   *   }, {
	   *     value: 10,
	   *     name: 'Series 2',
	   *     className: 'my-custom-class-two',
	   *     meta: 'Meta Two'
	   *   }, {
	   *     value: 70,
	   *     name: 'Series 3',
	   *     className: 'my-custom-class-three',
	   *     meta: 'Meta Three'
	   *   }]
	   * });
	   */
	  function Pie(query, data, options, responsiveOptions) {
	    Chartist.Pie.super.constructor.call(this,
	      query,
	      data,
	      defaultOptions,
	      Chartist.extend({}, defaultOptions, options),
	      responsiveOptions);
	  }

	  // Creating pie chart type in Chartist namespace
	  Chartist.Pie = Chartist.Base.extend({
	    constructor: Pie,
	    createChart: createChart,
	    determineAnchorPosition: determineAnchorPosition
	  });

	}(window, document, Chartist));

	return Chartist;

	}));
	});

	// TODO: remove these polyfills as soon as we have a build process that transpiles the code to ES5
	// Polyfill for IE 11 (Number.isFinite is used in `complex.js`)
	// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
	Number.isFinite = Number.isFinite || function (value) {
	  return typeof value === 'number' && isFinite(value);
	}; // Polyfill for IE 11
	// source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN


	Number.isNaN = Number.isNaN || function (value) {
	  return value !== value; // eslint-disable-line no-self-compare
	};

	/**
	 * Test whether a value is a BigNumber
	 * @param {*} x
	 * @return {boolean}
	 */

	var isBigNumber = function isBigNumber(x) {
	  return x && x.constructor.prototype.isBigNumber || false;
	};

	var object = createCommonjsModule(function (module, exports) {

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }


	/**
	 * Clone an object
	 *
	 *     clone(x)
	 *
	 * Can clone any primitive type, array, and object.
	 * If x has a function clone, this function will be invoked to clone the object.
	 *
	 * @param {*} x
	 * @return {*} clone
	 */


	exports.clone = function clone(x) {
	  var type = _typeof(x); // immutable primitive types


	  if (type === 'number' || type === 'string' || type === 'boolean' || x === null || x === undefined) {
	    return x;
	  } // use clone function of the object when available


	  if (typeof x.clone === 'function') {
	    return x.clone();
	  } // array


	  if (Array.isArray(x)) {
	    return x.map(function (value) {
	      return clone(value);
	    });
	  }

	  if (x instanceof Date) return new Date(x.valueOf());
	  if (isBigNumber(x)) return x; // bignumbers are immutable

	  if (x instanceof RegExp) throw new TypeError('Cannot clone ' + x); // TODO: clone a RegExp
	  // object

	  return exports.map(x, clone);
	};
	/**
	 * Apply map to all properties of an object
	 * @param {Object} object
	 * @param {function} callback
	 * @return {Object} Returns a copy of the object with mapped properties
	 */


	exports.map = function (object, callback) {
	  var clone = {};

	  for (var key in object) {
	    if (exports.hasOwnProperty(object, key)) {
	      clone[key] = callback(object[key]);
	    }
	  }

	  return clone;
	};
	/**
	 * Extend object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */


	exports.extend = function (a, b) {
	  for (var prop in b) {
	    if (exports.hasOwnProperty(b, prop)) {
	      a[prop] = b[prop];
	    }
	  }

	  return a;
	};
	/**
	 * Deep extend an object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @returns {Object}
	 */


	exports.deepExtend = function deepExtend(a, b) {
	  // TODO: add support for Arrays to deepExtend
	  if (Array.isArray(b)) {
	    throw new TypeError('Arrays are not supported by deepExtend');
	  }

	  for (var prop in b) {
	    if (exports.hasOwnProperty(b, prop)) {
	      if (b[prop] && b[prop].constructor === Object) {
	        if (a[prop] === undefined) {
	          a[prop] = {};
	        }

	        if (a[prop].constructor === Object) {
	          deepExtend(a[prop], b[prop]);
	        } else {
	          a[prop] = b[prop];
	        }
	      } else if (Array.isArray(b[prop])) {
	        throw new TypeError('Arrays are not supported by deepExtend');
	      } else {
	        a[prop] = b[prop];
	      }
	    }
	  }

	  return a;
	};
	/**
	 * Deep test equality of all fields in two pairs of arrays or objects.
	 * @param {Array | Object} a
	 * @param {Array | Object} b
	 * @returns {boolean}
	 */


	exports.deepEqual = function deepEqual(a, b) {
	  var prop, i, len;

	  if (Array.isArray(a)) {
	    if (!Array.isArray(b)) {
	      return false;
	    }

	    if (a.length !== b.length) {
	      return false;
	    }

	    for (i = 0, len = a.length; i < len; i++) {
	      if (!exports.deepEqual(a[i], b[i])) {
	        return false;
	      }
	    }

	    return true;
	  } else if (a instanceof Object) {
	    if (Array.isArray(b) || !(b instanceof Object)) {
	      return false;
	    }

	    for (prop in a) {
	      // noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }

	    for (prop in b) {
	      // noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }

	    return true;
	  } else {
	    return a === b;
	  }
	};
	/**
	 * Test whether the current JavaScript engine supports Object.defineProperty
	 * @returns {boolean} returns true if supported
	 */


	exports.canDefineProperty = function () {
	  // test needed for broken IE8 implementation
	  try {
	    if (Object.defineProperty) {
	      Object.defineProperty({}, 'x', {
	        get: function get() {}
	      });
	      return true;
	    }
	  } catch (e) {}

	  return false;
	};
	/**
	 * Attach a lazy loading property to a constant.
	 * The given function `fn` is called once when the property is first requested.
	 * On older browsers (<IE8), the function will fall back to direct evaluation
	 * of the properties value.
	 * @param {Object} object   Object where to add the property
	 * @param {string} prop     Property name
	 * @param {Function} fn     Function returning the property value. Called
	 *                          without arguments.
	 */


	exports.lazy = function (object, prop, fn) {
	  if (exports.canDefineProperty()) {
	    var _uninitialized = true;

	    var _value;

	    Object.defineProperty(object, prop, {
	      get: function get() {
	        if (_uninitialized) {
	          _value = fn();
	          _uninitialized = false;
	        }

	        return _value;
	      },
	      set: function set(value) {
	        _value = value;
	        _uninitialized = false;
	      },
	      configurable: true,
	      enumerable: true
	    });
	  } else {
	    // fall back to immediate evaluation
	    object[prop] = fn();
	  }
	};
	/**
	 * Traverse a path into an object.
	 * When a namespace is missing, it will be created
	 * @param {Object} object
	 * @param {string} path   A dot separated string like 'name.space'
	 * @return {Object} Returns the object at the end of the path
	 */


	exports.traverse = function (object, path) {
	  var obj = object;

	  if (path) {
	    var names = path.split('.');

	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];

	      if (!(name in obj)) {
	        obj[name] = {};
	      }

	      obj = obj[name];
	    }
	  }

	  return obj;
	};
	/**
	 * A safe hasOwnProperty
	 * @param {Object} object
	 * @param {string} property
	 */


	exports.hasOwnProperty = function (object, property) {
	  return object && Object.hasOwnProperty.call(object, property);
	};
	/**
	 * Test whether an object is a factory. a factory has fields:
	 *
	 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
	 * - name: string (optional)
	 * - path: string    A dot separated path (optional)
	 * - math: boolean   If true (false by default), the math namespace is passed
	 *                   as fifth argument of the factory function
	 *
	 * @param {*} object
	 * @returns {boolean}
	 */


	exports.isFactory = function (object) {
	  return object && typeof object.factory === 'function';
	};
	});
	var object_1 = object.clone;
	var object_2 = object.map;
	var object_3 = object.extend;
	var object_4 = object.deepExtend;
	var object_5 = object.deepEqual;
	var object_6 = object.canDefineProperty;
	var object_7 = object.lazy;
	var object_8 = object.traverse;
	var object_9 = object.isFactory;

	var typedFunction = createCommonjsModule(function (module, exports) {

	(function (root, factory) {
	  {
	    // OldNode. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like OldNode.
	    module.exports = factory();
	  }
	}(commonjsGlobal, function () {

	  function ok () {
	    return true;
	  }

	  function notOk () {
	    return false;
	  }

	  function undef () {
	    return undefined;
	  }

	  /**
	   * @typedef {{
	   *   params: Param[],
	   *   fn: function
	   * }} Signature
	   *
	   * @typedef {{
	   *   types: Type[],
	   *   restParam: boolean
	   * }} Param
	   *
	   * @typedef {{
	   *   name: string,
	   *   typeIndex: number,
	   *   test: function,
	   *   conversion?: ConversionDef,
	   *   conversionIndex: number,
	   * }} Type
	   *
	   * @typedef {{
	   *   from: string,
	   *   to: string,
	   *   convert: function (*) : *
	   * }} ConversionDef
	   *
	   * @typedef {{
	   *   name: string,
	   *   test: function(*) : boolean
	   * }} TypeDef
	   */

	  // create a new instance of typed-function
	  function create () {
	    // data type tests
	    var _types = [
	      { name: 'number',    test: function (x) { return typeof x === 'number' } },
	      { name: 'string',    test: function (x) { return typeof x === 'string' } },
	      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
	      { name: 'Function',  test: function (x) { return typeof x === 'function'} },
	      { name: 'Array',     test: Array.isArray },
	      { name: 'Date',      test: function (x) { return x instanceof Date } },
	      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
	      { name: 'Object',    test: function (x) {
	        return typeof x === 'object' && x.constructor === Object
	      }},
	      { name: 'null',      test: function (x) { return x === null } },
	      { name: 'undefined', test: function (x) { return x === undefined } }
	    ];

	    var anyType = {
	      name: 'any',
	      test: ok
	    };

	    // types which need to be ignored
	    var _ignore = [];

	    // type conversions
	    var _conversions = [];

	    // This is a temporary object, will be replaced with a typed function at the end
	    var typed = {
	      types: _types,
	      conversions: _conversions,
	      ignore: _ignore
	    };

	    /**
	     * Find the test function for a type
	     * @param {String} typeName
	     * @return {TypeDef} Returns the type definition when found,
	     *                    Throws a TypeError otherwise
	     */
	    function findTypeByName (typeName) {
	      var entry = findInArray(typed.types, function (entry) {
	        return entry.name === typeName;
	      });

	      if (entry) {
	        return entry;
	      }

	      if (typeName === 'any') { // special baked-in case 'any'
	        return anyType;
	      }

	      var hint = findInArray(typed.types, function (entry) {
	        return entry.name.toLowerCase() === typeName.toLowerCase();
	      });

	      throw new TypeError('Unknown type "' + typeName + '"' +
	          (hint ? ('. Did you mean "' + hint.name + '"?') : ''));
	    }

	    /**
	     * Find the index of a type definition. Handles special case 'any'
	     * @param {TypeDef} type
	     * @return {number}
	     */
	    function findTypeIndex(type) {
	      if (type === anyType) {
	        return 999;
	      }

	      return typed.types.indexOf(type);
	    }

	    /**
	     * Find a type that matches a value.
	     * @param {*} value
	     * @return {string} Returns the name of the first type for which
	     *                  the type test matches the value.
	     */
	    function findTypeName(value) {
	      var entry = findInArray(typed.types, function (entry) {
	        return entry.test(value);
	      });

	      if (entry) {
	        return entry.name;
	      }

	      throw new TypeError('Value has unknown type. Value: ' + value);
	    }

	    /**
	     * Find a specific signature from a (composed) typed function, for example:
	     *
	     *   typed.find(fn, ['number', 'string'])
	     *   typed.find(fn, 'number, string')
	     *
	     * Function find only only works for exact matches.
	     *
	     * @param {Function} fn                   A typed-function
	     * @param {string | string[]} signature   Signature to be found, can be
	     *                                        an array or a comma separated string.
	     * @return {Function}                     Returns the matching signature, or
	     *                                        throws an error when no signature
	     *                                        is found.
	     */
	    function find (fn, signature) {
	      if (!fn.signatures) {
	        throw new TypeError('Function is no typed-function');
	      }

	      // normalize input
	      var arr;
	      if (typeof signature === 'string') {
	        arr = signature.split(',');
	        for (var i = 0; i < arr.length; i++) {
	          arr[i] = arr[i].trim();
	        }
	      }
	      else if (Array.isArray(signature)) {
	        arr = signature;
	      }
	      else {
	        throw new TypeError('String array or a comma separated string expected');
	      }

	      var str = arr.join(',');

	      // find an exact match
	      var match = fn.signatures[str];
	      if (match) {
	        return match;
	      }

	      // TODO: extend find to match non-exact signatures

	      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
	    }

	    /**
	     * Convert a given value to another data type.
	     * @param {*} value
	     * @param {string} type
	     */
	    function convert (value, type) {
	      var from = findTypeName(value);

	      // check conversion is needed
	      if (type === from) {
	        return value;
	      }

	      for (var i = 0; i < typed.conversions.length; i++) {
	        var conversion = typed.conversions[i];
	        if (conversion.from === from && conversion.to === type) {
	          return conversion.convert(value);
	        }
	      }

	      throw new Error('Cannot convert from ' + from + ' to ' + type);
	    }
	    
	    /**
	     * Stringify parameters in a normalized way
	     * @param {Param[]} params
	     * @return {string}
	     */
	    function stringifyParams (params) {
	      return params
	          .map(function (param) {
	            var typeNames = param.types.map(getTypeName);

	            return (param.restParam ? '...' : '') + typeNames.join('|');
	          })
	          .join(',');
	    }

	    /**
	     * Parse a parameter, like "...number | boolean"
	     * @param {string} param
	     * @param {ConversionDef[]} conversions
	     * @return {Param} param
	     */
	    function parseParam (param, conversions) {
	      var restParam = param.indexOf('...') === 0;
	      var types = (!restParam)
	          ? param
	          : (param.length > 3)
	              ? param.slice(3)
	              : 'any';

	      var typeNames = types.split('|').map(trim)
	          .filter(notEmpty)
	          .filter(notIgnore);

	      var matchingConversions = filterConversions(conversions, typeNames);

	      var exactTypes = typeNames.map(function (typeName) {
	        var type = findTypeByName(typeName);

	        return {
	          name: typeName,
	          typeIndex: findTypeIndex(type),
	          test: type.test,
	          conversion: null,
	          conversionIndex: -1
	        };
	      });

	      var convertibleTypes = matchingConversions.map(function (conversion) {
	        var type = findTypeByName(conversion.from);

	        return {
	          name: conversion.from,
	          typeIndex: findTypeIndex(type),
	          test: type.test,
	          conversion: conversion,
	          conversionIndex: conversions.indexOf(conversion)
	        };
	      });

	      return {
	        types: exactTypes.concat(convertibleTypes),
	        restParam: restParam
	      };
	    }

	    /**
	     * Parse a signature with comma separated parameters,
	     * like "number | boolean, ...string"
	     * @param {string} signature
	     * @param {function} fn
	     * @param {ConversionDef[]} conversions
	     * @return {Signature | null} signature
	     */
	    function parseSignature (signature, fn, conversions) {
	      var params = [];

	      if (signature.trim() !== '') {
	        params = signature
	            .split(',')
	            .map(trim)
	            .map(function (param, index, array) {
	              var parsedParam = parseParam(param, conversions);

	              if (parsedParam.restParam && (index !== array.length - 1)) {
	                throw new SyntaxError('Unexpected rest parameter "' + param + '": ' +
	                    'only allowed for the last parameter');
	              }

	              return parsedParam;
	          });
	      }

	      if (params.some(isInvalidParam)) {
	        // invalid signature: at least one parameter has no types
	        // (they may have been filtered)
	        return null;
	      }

	      return {
	        params: params,
	        fn: fn
	      };
	    }

	    /**
	     * Test whether a set of params contains a restParam
	     * @param {Param[]} params
	     * @return {boolean} Returns true when the last parameter is a restParam
	     */
	    function hasRestParam(params) {
	      var param = last(params);
	      return param ? param.restParam : false;
	    }

	    /**
	     * Test whether a parameter contains conversions
	     * @param {Param} param
	     * @return {boolean} Returns true when at least one of the parameters
	     *                   contains a conversion.
	     */
	    function hasConversions(param) {
	      return param.types.some(function (type) {
	        return type.conversion != null;
	      });
	    }

	    /**
	     * Create a type test for a single parameter, which can have one or multiple
	     * types.
	     * @param {Param} param
	     * @return {function(x: *) : boolean} Returns a test function
	     */
	    function compileTest(param) {
	      if (!param || param.types.length === 0) {
	        // nothing to do
	        return ok;
	      }
	      else if (param.types.length === 1) {
	        return findTypeByName(param.types[0].name).test;
	      }
	      else if (param.types.length === 2) {
	        var test0 = findTypeByName(param.types[0].name).test;
	        var test1 = findTypeByName(param.types[1].name).test;
	        return function or(x) {
	          return test0(x) || test1(x);
	        }
	      }
	      else { // param.types.length > 2
	        var tests = param.types.map(function (type) {
	          return findTypeByName(type.name).test;
	        });
	        return function or(x) {
	          for (var i = 0; i < tests.length; i++) {
	            if (tests[i](x)) {
	              return true;
	            }
	          }
	          return false;
	        }
	      }
	    }

	    /**
	     * Create a test for all parameters of a signature
	     * @param {Param[]} params
	     * @return {function(args: Array<*>) : boolean}
	     */
	    function compileTests(params) {
	      var tests, test0, test1;

	      if (hasRestParam(params)) {
	        // variable arguments like '...number'
	        tests = initial(params).map(compileTest);
	        var varIndex = tests.length;
	        var lastTest = compileTest(last(params));
	        var testRestParam = function (args) {
	          for (var i = varIndex; i < args.length; i++) {
	            if (!lastTest(args[i])) {
	              return false;
	            }
	          }
	          return true;
	        };

	        return function testArgs(args) {
	          for (var i = 0; i < tests.length; i++) {
	            if (!tests[i](args[i])) {
	              return false;
	            }
	          }
	          return testRestParam(args) && (args.length >= varIndex + 1);
	        };
	      }
	      else {
	        // no variable arguments
	        if (params.length === 0) {
	          return function testArgs(args) {
	            return args.length === 0;
	          };
	        }
	        else if (params.length === 1) {
	          test0 = compileTest(params[0]);
	          return function testArgs(args) {
	            return test0(args[0]) && args.length === 1;
	          };
	        }
	        else if (params.length === 2) {
	          test0 = compileTest(params[0]);
	          test1 = compileTest(params[1]);
	          return function testArgs(args) {
	            return test0(args[0]) && test1(args[1]) && args.length === 2;
	          };
	        }
	        else { // arguments.length > 2
	          tests = params.map(compileTest);
	          return function testArgs(args) {
	            for (var i = 0; i < tests.length; i++) {
	              if (!tests[i](args[i])) {
	                return false;
	              }
	            }
	            return args.length === tests.length;
	          };
	        }
	      }
	    }

	    /**
	     * Find the parameter at a specific index of a signature.
	     * Handles rest parameters.
	     * @param {Signature} signature
	     * @param {number} index
	     * @return {Param | null} Returns the matching parameter when found,
	     *                        null otherwise.
	     */
	    function getParamAtIndex(signature, index) {
	      return index < signature.params.length
	          ? signature.params[index]
	          : hasRestParam(signature.params)
	              ? last(signature.params)
	              : null
	    }

	    /**
	     * Get all type names of a parameter
	     * @param {Signature} signature
	     * @param {number} index
	     * @param {boolean} excludeConversions
	     * @return {string[]} Returns an array with type names
	     */
	    function getExpectedTypeNames (signature, index, excludeConversions) {
	      var param = getParamAtIndex(signature, index);
	      var types = param
	          ? excludeConversions
	                  ? param.types.filter(isExactType)
	                  : param.types
	          : [];

	      return types.map(getTypeName);
	    }

	    /**
	     * Returns the name of a type
	     * @param {Type} type
	     * @return {string} Returns the type name
	     */
	    function getTypeName(type) {
	      return type.name;
	    }

	    /**
	     * Test whether a type is an exact type or conversion
	     * @param {Type} type
	     * @return {boolean} Returns true when
	     */
	    function isExactType(type) {
	      return type.conversion === null || type.conversion === undefined;
	    }

	    /**
	     * Helper function for creating error messages: create an array with
	     * all available types on a specific argument index.
	     * @param {Signature[]} signatures
	     * @param {number} index
	     * @return {string[]} Returns an array with available types
	     */
	    function mergeExpectedParams(signatures, index) {
	      var typeNames = uniq(flatMap(signatures, function (signature) {
	        return getExpectedTypeNames(signature, index, false);
	      }));

	      return (typeNames.indexOf('any') !== -1) ? ['any'] : typeNames;
	    }

	    /**
	     * Create
	     * @param {string} name             The name of the function
	     * @param {array.<*>} args          The actual arguments passed to the function
	     * @param {Signature[]} signatures  A list with available signatures
	     * @return {TypeError} Returns a type error with additional data
	     *                     attached to it in the property `data`
	     */
	    function createError(name, args, signatures) {
	      var err, expected;
	      var _name = name || 'unnamed';

	      // test for wrong type at some index
	      var matchingSignatures = signatures;
	      var index;
	      for (index = 0; index < args.length; index++) {
	        var nextMatchingDefs = matchingSignatures.filter(function (signature) {
	          var test = compileTest(getParamAtIndex(signature, index));
	          return (index < signature.params.length || hasRestParam(signature.params)) &&
	              test(args[index]);
	        });

	        if (nextMatchingDefs.length === 0) {
	          // no matching signatures anymore, throw error "wrong type"
	          expected = mergeExpectedParams(matchingSignatures, index);
	          if (expected.length > 0) {
	            var actualType = findTypeName(args[index]);

	            err = new TypeError('Unexpected type of argument in function ' + _name +
	                ' (expected: ' + expected.join(' or ') +
	                ', actual: ' + actualType + ', index: ' + index + ')');
	            err.data = {
	              category: 'wrongType',
	              fn: _name,
	              index: index,
	              actual: actualType,
	              expected: expected
	            };
	            return err;
	          }
	        }
	        else {
	          matchingSignatures = nextMatchingDefs;
	        }
	      }

	      // test for too few arguments
	      var lengths = matchingSignatures.map(function (signature) {
	        return hasRestParam(signature.params) ? Infinity : signature.params.length;
	      });
	      if (args.length < Math.min.apply(null, lengths)) {
	        expected = mergeExpectedParams(matchingSignatures, index);
	        err = new TypeError('Too few arguments in function ' + _name +
	            ' (expected: ' + expected.join(' or ') +
	            ', index: ' + args.length + ')');
	        err.data = {
	          category: 'tooFewArgs',
	          fn: _name,
	          index: args.length,
	          expected: expected
	        };
	        return err;
	      }

	      // test for too many arguments
	      var maxLength = Math.max.apply(null, lengths);
	      if (args.length > maxLength) {
	        err = new TypeError('Too many arguments in function ' + _name +
	            ' (expected: ' + maxLength + ', actual: ' + args.length + ')');
	        err.data = {
	          category: 'tooManyArgs',
	          fn: _name,
	          index: args.length,
	          expectedLength: maxLength
	        };
	        return err;
	      }

	      err = new TypeError('Arguments of type "' + args.join(', ') +
	          '" do not match any of the defined signatures of function ' + _name + '.');
	      err.data = {
	        category: 'mismatch',
	        actual: args.map(findTypeName)
	      };
	      return err;
	    }

	    /**
	     * Find the lowest index of all exact types of a parameter (no conversions)
	     * @param {Param} param
	     * @return {number} Returns the index of the lowest type in typed.types
	     */
	    function getLowestTypeIndex (param) {
	      var min = 999;

	      for (var i = 0; i < param.types.length; i++) {
	        if (isExactType(param.types[i])) {
	          min = Math.min(min, param.types[i].typeIndex);
	        }
	      }

	      return min;
	    }

	    /**
	     * Find the lowest index of the conversion of all types of the parameter
	     * having a conversion
	     * @param {Param} param
	     * @return {number} Returns the lowest index of the conversions of this type
	     */
	    function getLowestConversionIndex (param) {
	      var min = 999;

	      for (var i = 0; i < param.types.length; i++) {
	        if (!isExactType(param.types[i])) {
	          min = Math.min(min, param.types[i].conversionIndex);
	        }
	      }

	      return min;
	    }

	    /**
	     * Compare two params
	     * @param {Param} param1
	     * @param {Param} param2
	     * @return {number} returns a negative number when param1 must get a lower
	     *                  index than param2, a positive number when the opposite,
	     *                  or zero when both are equal
	     */
	    function compareParams (param1, param2) {
	      var c;

	      // compare having a rest parameter or not
	      c = param1.restParam - param2.restParam;
	      if (c !== 0) {
	        return c;
	      }

	      // compare having conversions or not
	      c = hasConversions(param1) - hasConversions(param2);
	      if (c !== 0) {
	        return c;
	      }

	      // compare the index of the types
	      c = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);
	      if (c !== 0) {
	        return c;
	      }

	      // compare the index of any conversion
	      return getLowestConversionIndex(param1) - getLowestConversionIndex(param2);
	    }

	    /**
	     * Compare two signatures
	     * @param {Signature} signature1
	     * @param {Signature} signature2
	     * @return {number} returns a negative number when param1 must get a lower
	     *                  index than param2, a positive number when the opposite,
	     *                  or zero when both are equal
	     */
	    function compareSignatures (signature1, signature2) {
	      var len = Math.min(signature1.params.length, signature2.params.length);
	      var i;
	      var c;

	      // compare whether the params have conversions at all or not
	      c = signature1.params.some(hasConversions) - signature2.params.some(hasConversions);
	      if (c !== 0) {
	        return c;
	      }

	      // next compare whether the params have conversions one by one
	      for (i = 0; i < len; i++) {
	        c = hasConversions(signature1.params[i]) - hasConversions(signature2.params[i]);
	        if (c !== 0) {
	          return c;
	        }
	      }

	      // compare the types of the params one by one
	      for (i = 0; i < len; i++) {
	        c = compareParams(signature1.params[i], signature2.params[i]);
	        if (c !== 0) {
	          return c;
	        }
	      }

	      // compare the number of params
	      return signature1.params.length - signature2.params.length;
	    }

	    /**
	     * Get params containing all types that can be converted to the defined types.
	     *
	     * @param {ConversionDef[]} conversions
	     * @param {string[]} typeNames
	     * @return {ConversionDef[]} Returns the conversions that are available
	     *                        for every type (if any)
	     */
	    function filterConversions(conversions, typeNames) {
	      var matches = {};

	      conversions.forEach(function (conversion) {
	        if (typeNames.indexOf(conversion.from) === -1 &&
	            typeNames.indexOf(conversion.to) !== -1 &&
	            !matches[conversion.from]) {
	          matches[conversion.from] = conversion;
	        }
	      });

	      return Object.keys(matches).map(function (from) {
	        return matches[from];
	      });
	    }

	    /**
	     * Preprocess arguments before calling the original function:
	     * - if needed convert the parameters
	     * - in case of rest parameters, move the rest parameters into an Array
	     * @param {Param[]} params
	     * @param {function} fn
	     * @return {function} Returns a wrapped function
	     */
	    function compileArgsPreprocessing(params, fn) {
	      var fnConvert = fn;

	      // TODO: can we make this wrapper function smarter/simpler?

	      if (params.some(hasConversions)) {
	        var restParam = hasRestParam(params);
	        var compiledConversions = params.map(compileArgConversion);

	        fnConvert = function convertArgs() {
	          var args = [];
	          var last = restParam ? arguments.length - 1 : arguments.length;
	          for (var i = 0; i < last; i++) {
	            args[i] = compiledConversions[i](arguments[i]);
	          }
	          if (restParam) {
	            args[last] = arguments[last].map(compiledConversions[last]);
	          }

	          return fn.apply(null, args);
	        };
	      }

	      var fnPreprocess = fnConvert;
	      if (hasRestParam(params)) {
	        var offset = params.length - 1;

	        fnPreprocess = function preprocessRestParams () {
	          return fnConvert.apply(null,
	              slice(arguments, 0, offset).concat([slice(arguments, offset)]));
	        };
	      }

	      return fnPreprocess;
	    }

	    /**
	     * Compile conversion for a parameter to the right type
	     * @param {Param} param
	     * @return {function} Returns the wrapped function that will convert arguments
	     *
	     */
	    function compileArgConversion(param) {
	      var test0, test1, conversion0, conversion1;
	      var tests = [];
	      var conversions = [];

	      param.types.forEach(function (type) {
	        if (type.conversion) {
	          tests.push(findTypeByName(type.conversion.from).test);
	          conversions.push(type.conversion.convert);
	        }
	      });

	      // create optimized conversion functions depending on the number of conversions
	      switch (conversions.length) {
	        case 0:
	          return function convertArg(arg) {
	            return arg;
	          }

	        case 1:
	          test0 = tests[0];
	          conversion0 = conversions[0];
	          return function convertArg(arg) {
	            if (test0(arg)) {
	              return conversion0(arg)
	            }
	            return arg;
	          }

	        case 2:
	          test0 = tests[0];
	          test1 = tests[1];
	          conversion0 = conversions[0];
	          conversion1 = conversions[1];
	          return function convertArg(arg) {
	            if (test0(arg)) {
	              return conversion0(arg)
	            }
	            if (test1(arg)) {
	              return conversion1(arg)
	            }
	            return arg;
	          }

	        default:
	          return function convertArg(arg) {
	            for (var i = 0; i < conversions.length; i++) {
	              if (tests[i](arg)) {
	                return conversions[i](arg);
	              }
	            }
	            return arg;
	          }
	      }
	    }

	    /**
	     * Convert an array with signatures into a map with signatures,
	     * where signatures with union types are split into separate signatures
	     *
	     * Throws an error when there are conflicting types
	     *
	     * @param {Signature[]} signatures
	     * @return {Object.<string, function>}  Returns a map with signatures
	     *                                      as key and the original function
	     *                                      of this signature as value.
	     */
	    function createSignaturesMap(signatures) {
	      var signaturesMap = {};
	      signatures.forEach(function (signature) {
	        if (!signature.params.some(hasConversions)) {
	          splitParams(signature.params, true).forEach(function (params) {
	            signaturesMap[stringifyParams(params)] = signature.fn;
	          });
	        }
	      });

	      return signaturesMap;
	    }

	    /**
	     * Split params with union types in to separate params.
	     *
	     * For example:
	     *
	     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])
	     *     // returns:
	     *     // [
	     *     //   ['Array', 'string'],
	     *     //   ['Array', 'RegExp'],
	     *     //   ['Object', 'string'],
	     *     //   ['Object', 'RegExp']
	     *     // ]
	     *
	     * @param {Param[]} params
	     * @param {boolean} ignoreConversionTypes
	     * @return {Param[]}
	     */
	    function splitParams(params, ignoreConversionTypes) {
	      function _splitParams(params, index, types) {
	        if (index < params.length) {
	          var param = params[index];
	          var filteredTypes = ignoreConversionTypes
	              ? param.types.filter(isExactType)
	              : param.types;
	          var typeGroups;

	          if (param.restParam) {
	            // split the types of a rest parameter in two:
	            // one with only exact types, and one with exact types and conversions
	            var exactTypes = filteredTypes.filter(isExactType);
	            typeGroups = exactTypes.length < filteredTypes.length
	                ? [exactTypes, filteredTypes]
	                : [filteredTypes];

	          }
	          else {
	            // split all the types of a regular parameter into one type per group
	            typeGroups = filteredTypes.map(function (type) {
	              return [type]
	            });
	          }

	          // recurse over the groups with types
	          return flatMap(typeGroups, function (typeGroup) {
	            return _splitParams(params, index + 1, types.concat([typeGroup]));
	          });

	        }
	        else {
	          // we've reached the end of the parameters. Now build a new Param
	          var splittedParams = types.map(function (type, typeIndex) {
	            return {
	              types: type,
	              restParam: (typeIndex === params.length - 1) && hasRestParam(params)
	            }
	          });

	          return [splittedParams];
	        }
	      }

	      return _splitParams(params, 0, []);
	    }

	    /**
	     * Test whether two signatures have a conflicting signature
	     * @param {Signature} signature1
	     * @param {Signature} signature2
	     * @return {boolean} Returns true when the signatures conflict, false otherwise.
	     */
	    function hasConflictingParams(signature1, signature2) {
	      var ii = Math.max(signature1.params.length, signature2.params.length);

	      for (var i = 0; i < ii; i++) {
	        var typesNames1 = getExpectedTypeNames(signature1, i, true);
	        var typesNames2 = getExpectedTypeNames(signature2, i, true);

	        if (!hasOverlap(typesNames1, typesNames2)) {
	          return false;
	        }
	      }

	      var len1 = signature1.params.length;
	      var len2 = signature2.params.length;
	      var restParam1 = hasRestParam(signature1.params);
	      var restParam2 = hasRestParam(signature2.params);

	      return restParam1
	          ? restParam2 ? (len1 === len2) : (len2 >= len1)
	          : restParam2 ? (len1 >= len2)  : (len1 === len2)
	    }

	    /**
	     * Create a typed function
	     * @param {String} name               The name for the typed function
	     * @param {Object.<string, function>} signaturesMap
	     *                                    An object with one or
	     *                                    multiple signatures as key, and the
	     *                                    function corresponding to the
	     *                                    signature as value.
	     * @return {function}  Returns the created typed function.
	     */
	    function createTypedFunction(name, signaturesMap) {
	      if (Object.keys(signaturesMap).length === 0) {
	        throw new SyntaxError('No signatures provided');
	      }

	      // parse the signatures, and check for conflicts
	      var parsedSignatures = [];
	      Object.keys(signaturesMap)
	          .map(function (signature) {
	            return parseSignature(signature, signaturesMap[signature], typed.conversions);
	          })
	          .filter(notNull)
	          .forEach(function (parsedSignature) {
	            // check whether this parameter conflicts with already parsed signatures
	            var conflictingSignature = findInArray(parsedSignatures, function (s) {
	              return hasConflictingParams(s, parsedSignature)
	            });
	            if (conflictingSignature) {
	              throw new TypeError('Conflicting signatures "' +
	                  stringifyParams(conflictingSignature.params) + '" and "' +
	                  stringifyParams(parsedSignature.params) + '".');
	            }

	            parsedSignatures.push(parsedSignature);
	          });

	      // split and filter the types of the signatures, and then order them
	      var signatures = flatMap(parsedSignatures, function (parsedSignature) {
	        var params = parsedSignature ? splitParams(parsedSignature.params, false) : [];

	        return params.map(function (params) {
	          return {
	            params: params,
	            fn: parsedSignature.fn
	          };
	        });
	      }).filter(notNull);

	      signatures.sort(compareSignatures);

	      // we create a highly optimized checks for the first couple of signatures with max 2 arguments
	      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);
	      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);
	      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);
	      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);
	      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);
	      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);
	      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5;

	      // compile the tests
	      var tests = signatures.map(function (signature) {
	        return compileTests(signature.params);
	      });

	      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;
	      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;
	      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;
	      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;
	      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;
	      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;

	      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;
	      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;
	      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;
	      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;
	      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;
	      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk;

	      // compile the functions
	      var fns = signatures.map(function(signature) {
	        return compileArgsPreprocessing(signature.params, signature.fn)
	      });

	      var fn0 = ok0 ? fns[0] : undef;
	      var fn1 = ok1 ? fns[1] : undef;
	      var fn2 = ok2 ? fns[2] : undef;
	      var fn3 = ok3 ? fns[3] : undef;
	      var fn4 = ok4 ? fns[4] : undef;
	      var fn5 = ok5 ? fns[5] : undef;

	      var len0 = ok0 ? signatures[0].params.length : -1;
	      var len1 = ok1 ? signatures[1].params.length : -1;
	      var len2 = ok2 ? signatures[2].params.length : -1;
	      var len3 = ok3 ? signatures[3].params.length : -1;
	      var len4 = ok4 ? signatures[4].params.length : -1;
	      var len5 = ok5 ? signatures[5].params.length : -1;

	      // simple and generic, but also slow
	      var iStart = allOk ? 6 : 0;
	      var iEnd = signatures.length;
	      var generic = function generic() {

	        for (var i = iStart; i < iEnd; i++) {
	          if (tests[i](arguments)) {
	            return fns[i].apply(null, arguments);
	          }
	        }

	        throw createError(name, arguments, signatures);
	      };

	      // create the typed function
	      // fast, specialized version. Falls back to the slower, generic one if needed
	      var fn = function fn(arg0, arg1) {

	        if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(null, arguments); }
	        if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(null, arguments); }
	        if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(null, arguments); }
	        if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(null, arguments); }
	        if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(null, arguments); }
	        if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(null, arguments); }

	        return generic.apply(null, arguments);
	      };

	      // attach name the typed function
	      try {
	        Object.defineProperty(fn, 'name', {value: name});
	      }
	      catch (err) {
	        // old browsers do not support Object.defineProperty and some don't support setting the name property
	        // the function name is not essential for the functioning, it's mostly useful for debugging,
	        // so it's fine to have unnamed functions.
	      }

	      // attach signatures to the function
	      fn.signatures = createSignaturesMap(signatures);

	      return fn;
	    }

	    /**
	     * Test whether a type should be NOT be ignored
	     * @param {string} typeName
	     * @return {boolean}
	     */
	    function notIgnore(typeName) {
	      return typed.ignore.indexOf(typeName) === -1;
	    }

	    /**
	     * trim a string
	     * @param {string} str
	     * @return {string}
	     */
	    function trim(str) {
	      return str.trim();
	    }

	    /**
	     * Test whether a string is not empty
	     * @param {string} str
	     * @return {boolean}
	     */
	    function notEmpty(str) {
	      return !!str;
	    }

	    /**
	     * test whether a value is not strict equal to null
	     * @param {*} value
	     * @return {boolean}
	     */
	    function notNull(value) {
	      return value !== null;
	    }

	    /**
	     * Test whether a parameter has no types defined
	     * @param {Param} param
	     * @return {boolean}
	     */
	    function isInvalidParam (param) {
	      return param.types.length === 0;
	    }

	    /**
	     * Return all but the last items of an array
	     * @param {Array} arr
	     * @return {Array}
	     */
	    function initial(arr) {
	      return arr.slice(0, arr.length - 1);
	    }

	    /**
	     * return the last item of an array
	     * @param {Array} arr
	     * @return {*}
	     */
	    function last(arr) {
	      return arr[arr.length - 1];
	    }

	    /**
	     * Slice an array or function Arguments
	     * @param {Array | Arguments | IArguments} arr
	     * @param {number} start
	     * @param {number} [end]
	     * @return {Array}
	     */
	    function slice(arr, start, end) {
	      return Array.prototype.slice.call(arr, start, end);
	    }

	    /**
	     * Test whether an array contains some item
	     * @param {Array} array
	     * @param {*} item
	     * @return {boolean} Returns true if array contains item, false if not.
	     */
	    function contains(array, item) {
	      return array.indexOf(item) !== -1;
	    }

	    /**
	     * Test whether two arrays have overlapping items
	     * @param {Array} array1
	     * @param {Array} array2
	     * @return {boolean} Returns true when at least one item exists in both arrays
	     */
	    function hasOverlap(array1, array2) {
	      for (var i = 0; i < array1.length; i++) {
	        if (contains(array2, array1[i])) {
	          return true;
	        }
	      }

	      return false;
	    }

	    /**
	     * Return the first item from an array for which test(arr[i]) returns true
	     * @param {Array} arr
	     * @param {function} test
	     * @return {* | undefined} Returns the first matching item
	     *                         or undefined when there is no match
	     */
	    function findInArray(arr, test) {
	      for (var i = 0; i < arr.length; i++) {
	        if (test(arr[i])) {
	          return arr[i];
	        }
	      }
	      return undefined;
	    }

	    /**
	     * Filter unique items of an array with strings
	     * @param {string[]} arr
	     * @return {string[]}
	     */
	    function uniq(arr) {
	      var entries = {};
	      for (var i = 0; i < arr.length; i++) {
	        entries[arr[i]] = true;
	      }
	      return Object.keys(entries);
	    }

	    /**
	     * Flat map the result invoking a callback for every item in an array.
	     * https://gist.github.com/samgiles/762ee337dff48623e729
	     * @param {Array} arr
	     * @param {function} callback
	     * @return {Array}
	     */
	    function flatMap(arr, callback) {
	      return Array.prototype.concat.apply([], arr.map(callback));
	    }

	    /**
	     * Retrieve the function name from a set of typed functions,
	     * and check whether the name of all functions match (if given)
	     * @param {function[]} fns
	     */
	    function getName (fns) {
	      var name = '';

	      for (var i = 0; i < fns.length; i++) {
	        var fn = fns[i];

	        // check whether the names are the same when defined
	        if ((typeof fn.signatures === 'object' || typeof fn.signature === 'string') && fn.name !== '') {
	          if (name === '') {
	            name = fn.name;
	          }
	          else if (name !== fn.name) {
	            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
	            err.data = {
	              actual: fn.name,
	              expected: name
	            };
	            throw err;
	          }
	        }
	      }

	      return name;
	    }

	    // extract and merge all signatures of a list with typed functions
	    function extractSignatures(fns) {
	      var err;
	      var signaturesMap = {};

	      function validateUnique(_signature, _fn) {
	        if (signaturesMap.hasOwnProperty(_signature) && _fn !== signaturesMap[_signature]) {
	          err = new Error('Signature "' + _signature + '" is defined twice');
	          err.data = {signature: _signature};
	          throw err;
	          // else: both signatures point to the same function, that's fine
	        }
	      }

	      for (var i = 0; i < fns.length; i++) {
	        var fn = fns[i];

	        // test whether this is a typed-function
	        if (typeof fn.signatures === 'object') {
	          // merge the signatures
	          for (var signature in fn.signatures) {
	            if (fn.signatures.hasOwnProperty(signature)) {
	              validateUnique(signature, fn.signatures[signature]);
	              signaturesMap[signature] = fn.signatures[signature];
	            }
	          }
	        }
	        else if (typeof fn.signature === 'string') {
	          validateUnique(fn.signature, fn);
	          signaturesMap[fn.signature] = fn;
	        }
	        else {
	          err = new TypeError('Function is no typed-function (index: ' + i + ')');
	          err.data = {index: i};
	          throw err;
	        }
	      }

	      return signaturesMap;
	    }

	    typed = createTypedFunction('typed', {
	      'string, Object': createTypedFunction,
	      'Object': function (signaturesMap) {
	        // find existing name
	        var fns = [];
	        for (var signature in signaturesMap) {
	          if (signaturesMap.hasOwnProperty(signature)) {
	            fns.push(signaturesMap[signature]);
	          }
	        }
	        var name = getName(fns);
	        return createTypedFunction(name, signaturesMap);
	      },
	      '...Function': function (fns) {
	        return createTypedFunction(getName(fns), extractSignatures(fns));
	      },
	      'string, ...Function': function (name, fns) {
	        return createTypedFunction(name, extractSignatures(fns));
	      }
	    });

	    typed.create = create;
	    typed.types = _types;
	    typed.conversions = _conversions;
	    typed.ignore = _ignore;
	    typed.convert = convert;
	    typed.find = find;

	    /**
	     * add a type
	     * @param {{name: string, test: function}} type
	     * @param {boolean} [beforeObjectTest=true]
	     *                          If true, the new test will be inserted before
	     *                          the test with name 'Object' (if any), since
	     *                          tests for Object match Array and classes too.
	     */
	    typed.addType = function (type, beforeObjectTest) {
	      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
	        throw new TypeError('Object with properties {name: string, test: function} expected');
	      }

	      if (beforeObjectTest !== false) {
	        for (var i = 0; i < typed.types.length; i++) {
	          if (typed.types[i].name === 'Object') {
	            typed.types.splice(i, 0, type);
	            return
	          }
	        }
	      }

	      typed.types.push(type);
	    };

	    // add a conversion
	    typed.addConversion = function (conversion) {
	      if (!conversion
	          || typeof conversion.from !== 'string'
	          || typeof conversion.to !== 'string'
	          || typeof conversion.convert !== 'function') {
	        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
	      }

	      typed.conversions.push(conversion);
	    };

	    return typed;
	  }

	  return create();
	}));
	});

	var number = createCommonjsModule(function (module, exports) {


	/**
	 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
	 */

	/**
	 * Test whether value is a number
	 * @param {*} value
	 * @return {boolean} isNumber
	 */


	exports.isNumber = function (value) {
	  return typeof value === 'number';
	};
	/**
	 * Check if a number is integer
	 * @param {number | boolean} value
	 * @return {boolean} isInteger
	 */


	exports.isInteger = function (value) {
	  if (typeof value === 'boolean') {
	    return true;
	  }

	  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well
	};
	/**
	 * Calculate the sign of a number
	 * @param {number} x
	 * @returns {*}
	 */


	exports.sign = Math.sign || function (x) {
	  if (x > 0) {
	    return 1;
	  } else if (x < 0) {
	    return -1;
	  } else {
	    return 0;
	  }
	};
	/**
	 * Convert a number to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'engineering'    Always use engineering notation.
	 *                                          For example '123.4e+0' and '14.0e+6'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lowerExp` and `upperExp` bounds, and
	 *                                          uses exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential',
	 *                                          'engineering', and 'auto',
	 *                                          `precision` defines the total
	 *                                          number of significant digits returned.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point.
	 *                                          `precision` is undefined by default,
	 *                                          not rounding any digits.
	 *                     {number} lowerExp    Exponent determining the lower boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `-3`.
	 *                     {number} upperExp    Exponent determining the upper boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `5`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4)                                        // '6.4'
	 *    format(1240000)                                    // '1.24e6'
	 *    format(1/3)                                        // '0.3333333333333333'
	 *    format(1/3, 3)                                     // '0.333'
	 *    format(21385, 2)                                   // '21000'
	 *    format(12.071, {notation: 'fixed'})                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'
	 *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'
	 *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'
	 *
	 * @param {number} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */


	exports.format = function (value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  } // handle special cases


	  if (value === Infinity) {
	    return 'Infinity';
	  } else if (value === -Infinity) {
	    return '-Infinity';
	  } else if (isNaN(value)) {
	    return 'NaN';
	  } // default values for options


	  var notation = 'auto';
	  var precision;

	  if (options) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    } // determine precision from options


	    if (exports.isNumber(options)) {
	      precision = options;
	    } else if (exports.isNumber(options.precision)) {
	      precision = options.precision;
	    }
	  } // handle the various notations


	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);

	    case 'exponential':
	      return exports.toExponential(value, precision);

	    case 'engineering':
	      return exports.toEngineering(value, precision);

	    case 'auto':
	      // TODO: clean up some day. Deprecated since: 2018-01-24
	      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
	      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
	        var fixedOptions = object.map(options, function (x) {
	          return x;
	        });
	        fixedOptions.exponential = undefined;

	        if (options.exponential.lower !== undefined) {
	          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
	        }

	        if (options.exponential.upper !== undefined) {
	          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
	        }

	        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));
	        return exports.toPrecision(value, precision, fixedOptions);
	      }

	      return exports.toPrecision(value, precision, options && options) // remove trailing zeros after the decimal point
	      .replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return digits !== '.' ? digits + e : e;
	      });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
	  }
	};
	/**
	 * Split a number into sign, coefficients, and exponent
	 * @param {number | string} value
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 */


	exports.splitNumber = function (value) {
	  // parse the input value
	  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);

	  if (!match) {
	    throw new SyntaxError('Invalid number ' + value);
	  }

	  var sign = match[1];
	  var digits = match[2];
	  var exponent = parseFloat(match[4] || '0');
	  var dot = digits.indexOf('.');
	  exponent += dot !== -1 ? dot - 1 : digits.length - 1;
	  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)
	  .replace(/^0*/, function (zeros) {
	    // remove leading zeros, add their count to the exponent
	    exponent -= zeros.length;
	    return '';
	  }).replace(/0*$/, '') // remove trailing zeros
	  .split('').map(function (d) {
	    return parseInt(d);
	  });

	  if (coefficients.length === 0) {
	    coefficients.push(0);
	    exponent++;
	  }

	  return {
	    sign: sign,
	    coefficients: coefficients,
	    exponent: exponent
	  };
	};
	/**
	 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]        Optional number of significant figures to return.
	 */


	exports.toEngineering = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  var rounded = exports.roundDigits(exports.splitNumber(value), precision);
	  var e = rounded.exponent;
	  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent

	  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;

	  if (exports.isNumber(precision)) {
	    // add zeroes to give correct sig figs
	    if (precision > c.length) c = c.concat(zeros(precision - c.length));
	  } else {
	    // concatenate coefficients with necessary zeros
	    var significandsDiff = e >= 0 ? e : Math.abs(newExp); // add zeros if necessary (for ex: 1e+8)

	    if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));
	  } // find difference in exponents


	  var expDiff = Math.abs(e - newExp);
	  var decimalIdx = 1; // push decimal index over by expDiff times

	  while (--expDiff >= 0) {
	    decimalIdx++;
	  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.
	  // otherwise concat with the rest of the coefficients


	  var decimals = c.slice(decimalIdx).join('');
	  var decimalVal = exports.isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';
	  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();
	  return rounded.sign + str;
	};
	/**
	 * Format a number with fixed notation.
	 * @param {number | string} value
	 * @param {number} [precision=undefined]  Optional number of decimals after the
	 *                                        decimal point. null by default.
	 */


	exports.toFixed = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }

	  var splitValue = exports.splitNumber(value);
	  var rounded = typeof precision === 'number' ? exports.roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;
	  var c = rounded.coefficients;
	  var p = rounded.exponent + 1; // exponent may have changed
	  // append zeros if needed

	  var pp = p + (precision || 0);

	  if (c.length < pp) {
	    c = c.concat(zeros(pp - c.length));
	  } // prepend zeros if needed


	  if (p < 0) {
	    c = zeros(-p + 1).concat(c);
	    p = 1;
	  } // insert a dot if needed


	  if (p < c.length) {
	    c.splice(p, 0, p === 0 ? '0.' : '.');
	  }

	  return rounded.sign + c.join('');
	};
	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 */


	exports.toExponential = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  } // round if needed, else create a clone


	  var split = exports.splitNumber(value);
	  var rounded = precision ? exports.roundDigits(split, precision) : split;
	  var c = rounded.coefficients;
	  var e = rounded.exponent; // append zeros if needed

	  if (c.length < precision) {
	    c = c.concat(zeros(precision - c.length));
	  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`


	  var first = c.shift();
	  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;
	};
	/**
	 * Format a number with a certain precision
	 * @param {number | string} value
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]
	 *                                       By default:
	 *                                         lowerExp = -3 (incl)
	 *                                         upper = +5 (excl)
	 * @return {string}
	 */


	exports.toPrecision = function (value, precision, options) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  } // determine lower and upper bound for exponential notation.


	  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
	  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;
	  var split = exports.splitNumber(value);

	  if (split.exponent < lowerExp || split.exponent >= upperExp) {
	    // exponential notation
	    return exports.toExponential(value, precision);
	  } else {
	    var rounded = precision ? exports.roundDigits(split, precision) : split;
	    var c = rounded.coefficients;
	    var e = rounded.exponent; // append trailing zeros

	    if (c.length < precision) {
	      c = c.concat(zeros(precision - c.length));
	    } // append trailing zeros
	    // TODO: simplify the next statement


	    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros

	    c = zeros(-e).concat(c);
	    var dot = e > 0 ? e : 0;

	    if (dot < c.length - 1) {
	      c.splice(dot + 1, 0, '.');
	    }

	    return rounded.sign + c.join('');
	  }
	};
	/**
	 * Round the number of digits of a number *
	 * @param {SplitValue} split       A value split with .splitNumber(value)
	 * @param {number} precision  A positive integer
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 *              with rounded digits
	 */


	exports.roundDigits = function (split, precision) {
	  // create a clone
	  var rounded = {
	    sign: split.sign,
	    coefficients: split.coefficients,
	    exponent: split.exponent
	  };
	  var c = rounded.coefficients; // prepend zeros if needed

	  while (precision <= 0) {
	    c.unshift(0);
	    rounded.exponent++;
	    precision++;
	  }

	  if (c.length > precision) {
	    var removed = c.splice(precision, c.length - precision);

	    if (removed[0] >= 5) {
	      var i = precision - 1;
	      c[i]++;

	      while (c[i] === 10) {
	        c.pop();

	        if (i === 0) {
	          c.unshift(0);
	          rounded.exponent++;
	          i++;
	        }

	        i--;
	        c[i]++;
	      }
	    }
	  }

	  return rounded;
	};
	/**
	 * Create an array filled with zeros.
	 * @param {number} length
	 * @return {Array}
	 */


	function zeros(length) {
	  var arr = [];

	  for (var i = 0; i < length; i++) {
	    arr.push(0);
	  }

	  return arr;
	}
	/**
	 * Count the number of significant digits of a number.
	 *
	 * For example:
	 *   2.34 returns 3
	 *   0.0034 returns 2
	 *   120.5e+30 returns 4
	 *
	 * @param {number} value
	 * @return {number} digits   Number of significant digits
	 */


	exports.digits = function (value) {
	  return value.toExponential().replace(/e.*$/, '') // remove exponential notation
	  .replace(/^0\.?0*|\./, '') // remove decimal point and leading zeros
	  .length;
	};
	/**
	 * Minimum number added to one that makes the result different than one
	 */


	exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
	/**
	 * Compares two floating point numbers.
	 * @param {number} x          First value to compare
	 * @param {number} y          Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	*/

	exports.nearlyEqual = function (x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon === null || epsilon === undefined) {
	    return x === y;
	  }

	  if (x === y) {
	    return true;
	  } // NaN


	  if (isNaN(x) || isNaN(y)) {
	    return false;
	  } // at this point x and y should be finite


	  if (isFinite(x) && isFinite(y)) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = Math.abs(x - y);

	    if (diff < exports.DBL_EPSILON) {
	      return true;
	    } else {
	      // use relative error
	      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
	    }
	  } // Infinite and Number or negative Infinite and positive Infinite cases


	  return false;
	};
	});
	var number_1 = number.isNumber;
	var number_2 = number.isInteger;
	var number_3 = number.sign;
	var number_4 = number.format;
	var number_5 = number.splitNumber;
	var number_6 = number.toEngineering;
	var number_7 = number.toFixed;
	var number_8 = number.toExponential;
	var number_9 = number.toPrecision;
	var number_10 = number.roundDigits;
	var number_11 = number.digits;
	var number_12 = number.DBL_EPSILON;
	var number_13 = number.nearlyEqual;

	/**
	 * Test whether a value is a Matrix
	 * @param {*} x
	 * @returns {boolean} returns true with input is a Matrix
	 *                    (like a DenseMatrix or SparseMatrix)
	 */

	var isMatrix = function isMatrix(x) {
	  return x && x.constructor.prototype.isMatrix || false;
	};

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



	var digits = number.digits;



	 // returns a new instance of typed-function


	var _createTyped = function createTyped() {
	  // initially, return the original instance of typed-function
	  // consecutively, return a new instance from typed.create.
	  _createTyped = typedFunction.create;
	  return typedFunction;
	};
	/**
	 * Factory function for creating a new typed instance
	 * @param {Object} type   Object with data types like Complex and BigNumber
	 * @returns {Function}
	 */


	var create = function create(type) {
	  // TODO: typed-function must be able to silently ignore signatures with unknown data types
	  // type checks for all known types
	  //
	  // note that:
	  //
	  // - check by duck-typing on a property like `isUnit`, instead of checking instanceof.
	  //   instanceof cannot be used because that would not allow to pass data from
	  //   one instance of math.js to another since each has it's own instance of Unit.
	  // - check the `isUnit` property via the constructor, so there will be no
	  //   matches for "fake" instances like plain objects with a property `isUnit`.
	  //   That is important for security reasons.
	  // - It must not be possible to override the type checks used internally,
	  //   for security reasons, so these functions are not exposed in the expression
	  //   parser.
	  type.isNumber = function (x) {
	    return typeof x === 'number';
	  };

	  type.isComplex = function (x) {
	    return type.Complex && x instanceof type.Complex || false;
	  };

	  type.isBigNumber = isBigNumber;

	  type.isFraction = function (x) {
	    return type.Fraction && x instanceof type.Fraction || false;
	  };

	  type.isUnit = function (x) {
	    return x && x.constructor.prototype.isUnit || false;
	  };

	  type.isString = function (x) {
	    return typeof x === 'string';
	  };

	  type.isArray = Array.isArray;
	  type.isMatrix = isMatrix;

	  type.isDenseMatrix = function (x) {
	    return x && x.isDenseMatrix && x.constructor.prototype.isMatrix || false;
	  };

	  type.isSparseMatrix = function (x) {
	    return x && x.isSparseMatrix && x.constructor.prototype.isMatrix || false;
	  };

	  type.isRange = function (x) {
	    return x && x.constructor.prototype.isRange || false;
	  };

	  type.isIndex = function (x) {
	    return x && x.constructor.prototype.isIndex || false;
	  };

	  type.isBoolean = function (x) {
	    return typeof x === 'boolean';
	  };

	  type.isResultSet = function (x) {
	    return x && x.constructor.prototype.isResultSet || false;
	  };

	  type.isHelp = function (x) {
	    return x && x.constructor.prototype.isHelp || false;
	  };

	  type.isFunction = function (x) {
	    return typeof x === 'function';
	  };

	  type.isDate = function (x) {
	    return x instanceof Date;
	  };

	  type.isRegExp = function (x) {
	    return x instanceof RegExp;
	  };

	  type.isObject = function (x) {
	    return _typeof(x) === 'object' && x.constructor === Object && !type.isComplex(x) && !type.isFraction(x);
	  };

	  type.isNull = function (x) {
	    return x === null;
	  };

	  type.isUndefined = function (x) {
	    return x === undefined;
	  };

	  type.isAccessorNode = function (x) {
	    return x && x.isAccessorNode && x.constructor.prototype.isNode || false;
	  };

	  type.isArrayNode = function (x) {
	    return x && x.isArrayNode && x.constructor.prototype.isNode || false;
	  };

	  type.isAssignmentNode = function (x) {
	    return x && x.isAssignmentNode && x.constructor.prototype.isNode || false;
	  };

	  type.isBlockNode = function (x) {
	    return x && x.isBlockNode && x.constructor.prototype.isNode || false;
	  };

	  type.isConditionalNode = function (x) {
	    return x && x.isConditionalNode && x.constructor.prototype.isNode || false;
	  };

	  type.isConstantNode = function (x) {
	    return x && x.isConstantNode && x.constructor.prototype.isNode || false;
	  };

	  type.isFunctionAssignmentNode = function (x) {
	    return x && x.isFunctionAssignmentNode && x.constructor.prototype.isNode || false;
	  };

	  type.isFunctionNode = function (x) {
	    return x && x.isFunctionNode && x.constructor.prototype.isNode || false;
	  };

	  type.isIndexNode = function (x) {
	    return x && x.isIndexNode && x.constructor.prototype.isNode || false;
	  };

	  type.isNode = function (x) {
	    return x && x.isNode && x.constructor.prototype.isNode || false;
	  };

	  type.isObjectNode = function (x) {
	    return x && x.isObjectNode && x.constructor.prototype.isNode || false;
	  };

	  type.isOperatorNode = function (x) {
	    return x && x.isOperatorNode && x.constructor.prototype.isNode || false;
	  };

	  type.isParenthesisNode = function (x) {
	    return x && x.isParenthesisNode && x.constructor.prototype.isNode || false;
	  };

	  type.isRangeNode = function (x) {
	    return x && x.isRangeNode && x.constructor.prototype.isNode || false;
	  };

	  type.isSymbolNode = function (x) {
	    return x && x.isSymbolNode && x.constructor.prototype.isNode || false;
	  };

	  type.isChain = function (x) {
	    return x && x.constructor.prototype.isChain || false;
	  }; // get a new instance of typed-function


	  var typed = _createTyped(); // define all types. The order of the types determines in which order function
	  // arguments are type-checked (so for performance it's important to put the
	  // most used types first).


	  typed.types = [{
	    name: 'number',
	    test: type.isNumber
	  }, {
	    name: 'Complex',
	    test: type.isComplex
	  }, {
	    name: 'BigNumber',
	    test: type.isBigNumber
	  }, {
	    name: 'Fraction',
	    test: type.isFraction
	  }, {
	    name: 'Unit',
	    test: type.isUnit
	  }, {
	    name: 'string',
	    test: type.isString
	  }, {
	    name: 'Array',
	    test: type.isArray
	  }, {
	    name: 'Matrix',
	    test: type.isMatrix
	  }, {
	    name: 'DenseMatrix',
	    test: type.isDenseMatrix
	  }, {
	    name: 'SparseMatrix',
	    test: type.isSparseMatrix
	  }, {
	    name: 'Range',
	    test: type.isRange
	  }, {
	    name: 'Index',
	    test: type.isIndex
	  }, {
	    name: 'boolean',
	    test: type.isBoolean
	  }, {
	    name: 'ResultSet',
	    test: type.isResultSet
	  }, {
	    name: 'Help',
	    test: type.isHelp
	  }, {
	    name: 'function',
	    test: type.isFunction
	  }, {
	    name: 'Date',
	    test: type.isDate
	  }, {
	    name: 'RegExp',
	    test: type.isRegExp
	  }, {
	    name: 'null',
	    test: type.isNull
	  }, {
	    name: 'undefined',
	    test: type.isUndefined
	  }, {
	    name: 'OperatorNode',
	    test: type.isOperatorNode
	  }, {
	    name: 'ConstantNode',
	    test: type.isConstantNode
	  }, {
	    name: 'SymbolNode',
	    test: type.isSymbolNode
	  }, {
	    name: 'ParenthesisNode',
	    test: type.isParenthesisNode
	  }, {
	    name: 'FunctionNode',
	    test: type.isFunctionNode
	  }, {
	    name: 'FunctionAssignmentNode',
	    test: type.isFunctionAssignmentNode
	  }, {
	    name: 'ArrayNode',
	    test: type.isArrayNode
	  }, {
	    name: 'AssignmentNode',
	    test: type.isAssignmentNode
	  }, {
	    name: 'BlockNode',
	    test: type.isBlockNode
	  }, {
	    name: 'ConditionalNode',
	    test: type.isConditionalNode
	  }, {
	    name: 'IndexNode',
	    test: type.isIndexNode
	  }, {
	    name: 'RangeNode',
	    test: type.isRangeNode
	  }, {
	    name: 'Node',
	    test: type.isNode
	  }, {
	    name: 'Object',
	    test: type.isObject // order 'Object' last, it matches on other classes too

	  }]; // TODO: add conversion from BigNumber to number?

	  typed.conversions = [{
	    from: 'number',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      // note: conversion from number to BigNumber can fail if x has >15 digits
	      if (digits(x) > 15) {
	        throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' + '(value: ' + x + '). ' + 'Use function bignumber(x) to convert to BigNumber.');
	      }

	      return new type.BigNumber(x);
	    }
	  }, {
	    from: 'number',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x, 0);
	    }
	  }, {
	    from: 'number',
	    to: 'string',
	    convert: function convert(x) {
	      return x + '';
	    }
	  }, {
	    from: 'BigNumber',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x.toNumber(), 0);
	    }
	  }, {
	    from: 'Fraction',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' + 'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
	    }
	  }, {
	    from: 'Fraction',
	    to: 'Complex',
	    convert: function convert(x) {
	      return new type.Complex(x.valueOf(), 0);
	    }
	  }, {
	    from: 'number',
	    to: 'Fraction',
	    convert: function convert(x) {
	      var f = new type.Fraction(x);

	      if (f.valueOf() !== x) {
	        throw new TypeError('Cannot implicitly convert a number to a Fraction when there will be a loss of precision ' + '(value: ' + x + '). ' + 'Use function fraction(x) to convert to Fraction.');
	      }

	      return new type.Fraction(x);
	    }
	  }, {
	    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
	    //  from: 'Fraction',
	    //  to: 'number',
	    //  convert: function (x) {
	    //    return x.valueOf()
	    //  }
	    // }, {
	    from: 'string',
	    to: 'number',
	    convert: function convert(x) {
	      var n = Number(x);

	      if (isNaN(n)) {
	        throw new Error('Cannot convert "' + x + '" to a number');
	      }

	      return n;
	    }
	  }, {
	    from: 'string',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      try {
	        return new type.BigNumber(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to BigNumber');
	      }
	    }
	  }, {
	    from: 'string',
	    to: 'Fraction',
	    convert: function convert(x) {
	      try {
	        return new type.Fraction(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to Fraction');
	      }
	    }
	  }, {
	    from: 'string',
	    to: 'Complex',
	    convert: function convert(x) {
	      try {
	        return new type.Complex(x);
	      } catch (err) {
	        throw new Error('Cannot convert "' + x + '" to Complex');
	      }
	    }
	  }, {
	    from: 'boolean',
	    to: 'number',
	    convert: function convert(x) {
	      return +x;
	    }
	  }, {
	    from: 'boolean',
	    to: 'BigNumber',
	    convert: function convert(x) {
	      return new type.BigNumber(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'Fraction',
	    convert: function convert(x) {
	      return new type.Fraction(+x);
	    }
	  }, {
	    from: 'boolean',
	    to: 'string',
	    convert: function convert(x) {
	      return +x;
	    }
	  }, {
	    from: 'Array',
	    to: 'Matrix',
	    convert: function convert(array) {
	      return new type.DenseMatrix(array);
	    }
	  }, {
	    from: 'Matrix',
	    to: 'Array',
	    convert: function convert(matrix) {
	      return matrix.valueOf();
	    }
	  }];
	  return typed;
	};

	var typed = {
		create: create
	};

	function E () {
	  // Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}

	E.prototype = {
	  on: function (name, callback, ctx) {
	    var e = this.e || (this.e = {});

	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });

	    return this;
	  },

	  once: function (name, callback, ctx) {
	    var self = this;
	    function listener () {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    }
	    listener._ = callback;
	    return this.on(name, listener, ctx);
	  },

	  emit: function (name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;

	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }

	    return this;
	  },

	  off: function (name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];

	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
	          liveEvents.push(evts[i]);
	      }
	    }

	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

	    (liveEvents.length)
	      ? e[name] = liveEvents
	      : delete e[name];

	    return this;
	  }
	};

	var tinyEmitter = E;

	/**
	 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
	 * @param {Object} obj
	 * @return {Object} obj
	 */


	var mixin = function (obj) {
	  // create event emitter
	  var emitter = new tinyEmitter(); // bind methods to obj (we don't want to expose the emitter.e Array...)

	  obj.on = emitter.on.bind(emitter);
	  obj.off = emitter.off.bind(emitter);
	  obj.once = emitter.once.bind(emitter);
	  obj.emit = emitter.emit.bind(emitter);
	  return obj;
	};

	var emitter = {
		mixin: mixin
	};

	/**
	 * Create a syntax error with the message:
	 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
	 * @param {string} fn     Function name
	 * @param {number} count  Actual argument count
	 * @param {number} min    Minimum required argument count
	 * @param {number} [max]  Maximum required argument count
	 * @extends Error
	 */

	function ArgumentsError(fn, count, min, max) {
	  if (!(this instanceof ArgumentsError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.fn = fn;
	  this.count = count;
	  this.min = min;
	  this.max = max;
	  this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
	  this.stack = new Error().stack;
	}

	ArgumentsError.prototype = new Error();
	ArgumentsError.prototype.constructor = Error;
	ArgumentsError.prototype.name = 'ArgumentsError';
	ArgumentsError.prototype.isArgumentsError = true;
	var ArgumentsError_1 = ArgumentsError;

	function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }

	var lazy = object.lazy;

	var isFactory = object.isFactory;

	var traverse = object.traverse;



	function factory(type, config, load, typed, math) {
	  /**
	   * Import functions from an object or a module
	   *
	   * Syntax:
	   *
	   *    math.import(object)
	   *    math.import(object, options)
	   *
	   * Where:
	   *
	   * - `object: Object`
	   *   An object with functions to be imported.
	   * - `options: Object` An object with import options. Available options:
	   *   - `override: boolean`
	   *     If true, existing functions will be overwritten. False by default.
	   *   - `silent: boolean`
	   *     If true, the function will not throw errors on duplicates or invalid
	   *     types. False by default.
	   *   - `wrap: boolean`
	   *     If true, the functions will be wrapped in a wrapper function
	   *     which converts data types like Matrix to primitive data types like Array.
	   *     The wrapper is needed when extending math.js with libraries which do not
	   *     support these data type. False by default.
	   *
	   * Examples:
	   *
	   *    // define new functions and variables
	   *    math.import({
	   *      myvalue: 42,
	   *      hello: function (name) {
	   *        return 'hello, ' + name + '!'
	   *      }
	   *    })
	   *
	   *    // use the imported function and variable
	   *    math.myvalue * 2               // 84
	   *    math.hello('user')             // 'hello, user!'
	   *
	   *    // import the npm module 'numbers'
	   *    // (must be installed first with `npm install numbers`)
	   *    math.import(require('numbers'), {wrap: true})
	   *
	   *    math.fibonacci(7) // returns 13
	   *
	   * @param {Object | Array} object   Object with functions to be imported.
	   * @param {Object} [options]        Import options.
	   */
	  function mathImport(object, options) {
	    var num = arguments.length;

	    if (num !== 1 && num !== 2) {
	      throw new ArgumentsError_1('import', num, 1, 2);
	    }

	    if (!options) {
	      options = {};
	    } // TODO: allow a typed-function with name too


	    if (isFactory(object)) {
	      _importFactory(object, options);
	    } else if (Array.isArray(object)) {
	      object.forEach(function (entry) {
	        mathImport(entry, options);
	      });
	    } else if (_typeof$1(object) === 'object') {
	      // a map with functions
	      for (var name in object) {
	        if (object.hasOwnProperty(name)) {
	          var value = object[name];

	          if (isSupportedType(value)) {
	            _import(name, value, options);
	          } else if (isFactory(object)) {
	            _importFactory(object, options);
	          } else {
	            mathImport(value, options);
	          }
	        }
	      }
	    } else {
	      if (!options.silent) {
	        throw new TypeError('Factory, Object, or Array expected');
	      }
	    }
	  }
	  /**
	   * Add a property to the math namespace and create a chain proxy for it.
	   * @param {string} name
	   * @param {*} value
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */


	  function _import(name, value, options) {
	    // TODO: refactor this function, it's to complicated and contains duplicate code
	    if (options.wrap && typeof value === 'function') {
	      // create a wrapper around the function
	      value = _wrap(value);
	    }

	    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
	      if (options.override) {
	        // give the typed function the right name
	        value = typed(name, value.signatures);
	      } else {
	        // merge the existing and typed function
	        value = typed(math[name], value);
	      }

	      math[name] = value;

	      _importTransform(name, value);

	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }

	    if (math[name] === undefined || options.override) {
	      math[name] = value;

	      _importTransform(name, value);

	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }

	    if (!options.silent) {
	      throw new Error('Cannot import "' + name + '": already exists');
	    }
	  }

	  function _importTransform(name, value) {
	    if (value && typeof value.transform === 'function') {
	      math.expression.transform[name] = value.transform;

	      if (allowedInExpressions(name)) {
	        math.expression.mathWithTransform[name] = value.transform;
	      }
	    } else {
	      // remove existing transform
	      delete math.expression.transform[name];

	      if (allowedInExpressions(name)) {
	        math.expression.mathWithTransform[name] = value;
	      }
	    }
	  }

	  function _deleteTransform(name) {
	    delete math.expression.transform[name];

	    if (allowedInExpressions(name)) {
	      math.expression.mathWithTransform[name] = math[name];
	    } else {
	      delete math.expression.mathWithTransform[name];
	    }
	  }
	  /**
	   * Create a wrapper a round an function which converts the arguments
	   * to their primitive values (like convert a Matrix to Array)
	   * @param {Function} fn
	   * @return {Function} Returns the wrapped function
	   * @private
	   */


	  function _wrap(fn) {
	    var wrapper = function wrapper() {
	      var args = [];

	      for (var i = 0, len = arguments.length; i < len; i++) {
	        var arg = arguments[i];
	        args[i] = arg && arg.valueOf();
	      }

	      return fn.apply(math, args);
	    };

	    if (fn.transform) {
	      wrapper.transform = fn.transform;
	    }

	    return wrapper;
	  }
	  /**
	   * Import an instance of a factory into math.js
	   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */


	  function _importFactory(factory, options) {
	    if (typeof factory.name === 'string') {
	      var name = factory.name;
	      var existingTransform = name in math.expression.transform;
	      var namespace = factory.path ? traverse(math, factory.path) : math;
	      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;

	      var resolver = function resolver() {
	        var instance = load(factory);

	        if (instance && typeof instance.transform === 'function') {
	          throw new Error('Transforms cannot be attached to factory functions. ' + 'Please create a separate function for it with exports.path="expression.transform"');
	        }

	        if (isTypedFunction(existing) && isTypedFunction(instance)) {
	          if (options.override) ; else {
	            // merge the existing and new typed function
	            instance = typed(existing, instance);
	          }

	          return instance;
	        }

	        if (existing === undefined || options.override) {
	          return instance;
	        }

	        if (!options.silent) {
	          throw new Error('Cannot import "' + name + '": already exists');
	        }
	      };

	      if (factory.lazy !== false) {
	        lazy(namespace, name, resolver);

	        if (existingTransform) {
	          _deleteTransform(name);
	        } else {
	          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
	            lazy(math.expression.mathWithTransform, name, resolver);
	          }
	        }
	      } else {
	        namespace[name] = resolver();

	        if (existingTransform) {
	          _deleteTransform(name);
	        } else {
	          if (factory.path === 'expression.transform' || factoryAllowedInExpressions(factory)) {
	            math.expression.mathWithTransform[name] = resolver();
	          }
	        }
	      }

	      math.emit('import', name, resolver, factory.path);
	    } else {
	      // unnamed factory.
	      // no lazy loading
	      load(factory);
	    }
	  }
	  /**
	   * Check whether given object is a type which can be imported
	   * @param {Function | number | string | boolean | null | Unit | Complex} object
	   * @return {boolean}
	   * @private
	   */


	  function isSupportedType(object) {
	    return typeof object === 'function' || typeof object === 'number' || typeof object === 'string' || typeof object === 'boolean' || object === null || object && type.isUnit(object) || object && type.isComplex(object) || object && type.isBigNumber(object) || object && type.isFraction(object) || object && type.isMatrix(object) || object && Array.isArray(object);
	  }
	  /**
	   * Test whether a given thing is a typed-function
	   * @param {*} fn
	   * @return {boolean} Returns true when `fn` is a typed-function
	   */


	  function isTypedFunction(fn) {
	    return typeof fn === 'function' && _typeof$1(fn.signatures) === 'object';
	  }

	  function allowedInExpressions(name) {
	    return !unsafe.hasOwnProperty(name);
	  }

	  function factoryAllowedInExpressions(factory) {
	    return factory.path === undefined && !unsafe.hasOwnProperty(factory.name);
	  } // namespaces and functions not available in the parser for safety reasons


	  var unsafe = {
	    'expression': true,
	    'type': true,
	    'docs': true,
	    'error': true,
	    'json': true,
	    'chain': true // chain method not supported. Note that there is a unit chain too.

	  };
	  return mathImport;
	}

	var math = true; // request access to the math namespace as 5th argument of the factory function

	var name = 'import';
	var factory_1 = factory;
	var lazy_1 = true;

	var _import = {
		math: math,
		name: name,
		factory: factory_1,
		lazy: lazy_1
	};

	function factory$1(type, config, load, typed, math) {
	  var MATRIX = ['Matrix', 'Array']; // valid values for option matrix

	  var NUMBER = ['number', 'BigNumber', 'Fraction']; // valid values for option number

	  /**
	   * Set configuration options for math.js, and get current options.
	   * Will emit a 'config' event, with arguments (curr, prev, changes).
	   *
	   * Syntax:
	   *
	   *     math.config(config: Object): Object
	   *
	   * Examples:
	   *
	   *     math.config().number                // outputs 'number'
	   *     math.eval('0.4')                    // outputs number 0.4
	   *     math.config({number: 'Fraction'})
	   *     math.eval('0.4')                    // outputs Fraction 2/5
	   *
	   * @param {Object} [options] Available options:
	   *                            {number} epsilon
	   *                              Minimum relative difference between two
	   *                              compared values, used by all comparison functions.
	   *                            {string} matrix
	   *                              A string 'Matrix' (default) or 'Array'.
	   *                            {string} number
	   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
	   *                            {number} precision
	   *                              The number of significant digits for BigNumbers.
	   *                              Not applicable for Numbers.
	   *                            {string} parenthesis
	   *                              How to display parentheses in LaTeX and string
	   *                              output.
	   *                            {string} randomSeed
	   *                              Random seed for seeded pseudo random number generator.
	   *                              Set to null to randomly seed.
	   * @return {Object} Returns the current configuration
	   */

	  function _config(options) {
	    if (options) {
	      var prev = object.map(config, object.clone); // validate some of the options

	      validateOption(options, 'matrix', MATRIX);
	      validateOption(options, 'number', NUMBER); // merge options

	      object.deepExtend(config, options);
	      var curr = object.map(config, object.clone);
	      var changes = object.map(options, object.clone); // emit 'config' event

	      math.emit('config', curr, prev, changes);
	      return curr;
	    } else {
	      return object.map(config, object.clone);
	    }
	  } // attach the valid options to the function so they can be extended


	  _config.MATRIX = MATRIX;
	  _config.NUMBER = NUMBER;
	  return _config;
	}
	/**
	 * Test whether an Array contains a specific item.
	 * @param {Array.<string>} array
	 * @param {string} item
	 * @return {boolean}
	 */


	function contains(array, item) {
	  return array.indexOf(item) !== -1;
	}
	/**
	 * Find a string in an array. Case insensitive search
	 * @param {Array.<string>} array
	 * @param {string} item
	 * @return {number} Returns the index when found. Returns -1 when not found
	 */


	function findIndex(array, item) {
	  return array.map(function (i) {
	    return i.toLowerCase();
	  }).indexOf(item.toLowerCase());
	}
	/**
	 * Validate an option
	 * @param {Object} options         Object with options
	 * @param {string} name            Name of the option to validate
	 * @param {Array.<string>} values  Array with valid values for this option
	 */


	function validateOption(options, name, values) {
	  if (options[name] !== undefined && !contains(values, options[name])) {
	    var index = findIndex(values, options[name]);

	    if (index !== -1) {
	      // right value, wrong casing
	      // TODO: lower case values are deprecated since v3, remove this warning some day.
	      console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
	      options[name] = values[index]; // change the option to the right casing
	    } else {
	      // unknown value
	      console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
	    }
	  }
	}

	var name$1 = 'config';
	var math$1 = true; // request the math namespace as fifth argument

	var factory_1$1 = factory$1;

	var config = {
		name: name$1,
		math: math$1,
		factory: factory_1$1
	};

	var isFactory$1 = object.isFactory;








	/**
	 * Math.js core. Creates a new, empty math.js instance
	 * @param {Object} [options] Available options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'Matrix' (default) or 'Array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-4)`
	 *                              returns `complex('2i')` when predictable is false, and
	 *                              returns `NaN` when true.
	 *                            {string} randomSeed
	 *                              Random seed for seeded pseudo random number generator.
	 *                              Set to null to randomly seed.
	 * @returns {Object} Returns a bare-bone math.js instance containing
	 *                   functions:
	 *                   - `import` to add new functions
	 *                   - `config` to change configuration
	 *                   - `on`, `off`, `once`, `emit` for events
	 */


	var create$1 = function create(options) {
	  // simple test for ES5 support
	  if (typeof Object.create !== 'function') {
	    throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
	  } // cached factories and instances


	  var factories = [];
	  var instances = []; // create a namespace for the mathjs instance, and attach emitter functions

	  var math = emitter.mixin({});
	  math.type = {};
	  math.expression = {
	    transform: {},
	    mathWithTransform: {} // create a new typed instance

	  };
	  math.typed = typed.create(math.type); // create configuration options. These are private

	  var _config = {
	    // minimum relative difference between two compared values,
	    // used by all comparison functions
	    epsilon: 1e-12,
	    // type of default matrix output. Choose 'matrix' (default) or 'array'
	    matrix: 'Matrix',
	    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
	    number: 'number',
	    // number of significant digits in BigNumbers
	    precision: 64,
	    // predictable output type of functions. When true, output type depends only
	    // on the input types. When false (default), output type can vary depending
	    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
	    // predictable is false, and returns `NaN` when true.
	    predictable: false,
	    // random seed for seeded pseudo random number generation
	    // null = randomly seed
	    randomSeed: null
	    /**
	     * Load a function or data type from a factory.
	     * If the function or data type already exists, the existing instance is
	     * returned.
	     * @param {{type: string, name: string, factory: Function}} factory
	     * @returns {*}
	     */

	  };

	  function load(factory) {
	    if (!isFactory$1(factory)) {
	      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
	    }

	    var index = factories.indexOf(factory);
	    var instance;

	    if (index === -1) {
	      // doesn't yet exist
	      if (factory.math === true) {
	        // pass with math namespace
	        instance = factory.factory(math.type, _config, load, math.typed, math);
	      } else {
	        instance = factory.factory(math.type, _config, load, math.typed);
	      } // append to the cache


	      factories.push(factory);
	      instances.push(instance);
	    } else {
	      // already existing function, return the cached instance
	      instance = instances[index];
	    }

	    return instance;
	  } // load the import and config functions


	  math['import'] = load(_import);
	  math['config'] = load(config);
	  math.expression.mathWithTransform['config'] = math['config']; // apply options

	  if (options) {
	    math.config(options);
	  }

	  return math;
	};

	var core = {
		create: create$1
	};

	/*
	 *
	 *  decimal.js v10.0.2
	 *  An arbitrary-precision Decimal type for JavaScript.
	 *  https://github.com/MikeMcl/decimal.js
	 *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>
	 *  MIT Licence
	 *  https://github.com/MikeMcl/decimal.js/LICENCE
	 *
	 */


	// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //


	  // The maximum exponent magnitude.
	  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
	var EXP_LIMIT = 9e15,                      // 0 to 9e15

	  // The limit on the value of `precision`, and on the value of the first argument to
	  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
	  MAX_DIGITS = 1e9,                        // 0 to 1e9

	  // Base conversion alphabet.
	  NUMERALS = '0123456789abcdef',

	  // The natural logarithm of 10 (1025 digits).
	  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',

	  // Pi (1025 digits).
	  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',


	  // The initial configuration properties of the Decimal constructor.
	  DEFAULTS = {

	    // These values must be integers within the stated ranges (inclusive).
	    // Most of these values can be changed at run-time using the `Decimal.config` method.

	    // The maximum number of significant digits of the result of a calculation or base conversion.
	    // E.g. `Decimal.config({ precision: 20 });`
	    precision: 20,                         // 1 to MAX_DIGITS

	    // The rounding mode used when rounding to `precision`.
	    //
	    // ROUND_UP         0 Away from zero.
	    // ROUND_DOWN       1 Towards zero.
	    // ROUND_CEIL       2 Towards +Infinity.
	    // ROUND_FLOOR      3 Towards -Infinity.
	    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	    //
	    // E.g.
	    // `Decimal.rounding = 4;`
	    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
	    rounding: 4,                           // 0 to 8

	    // The modulo mode used when calculating the modulus: a mod n.
	    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	    // The remainder (r) is calculated as: r = a - n * q.
	    //
	    // UP         0 The remainder is positive if the dividend is negative, else is negative.
	    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
	    // FLOOR      3 The remainder has the same sign as the divisor (Python %).
	    // HALF_EVEN  6 The IEEE 754 remainder function.
	    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
	    //
	    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
	    // division (9) are commonly used for the modulus operation. The other rounding modes can also
	    // be used, but they may not give useful results.
	    modulo: 1,                             // 0 to 9

	    // The exponent value at and beneath which `toString` returns exponential notation.
	    // JavaScript numbers: -7
	    toExpNeg: -7,                          // 0 to -EXP_LIMIT

	    // The exponent value at and above which `toString` returns exponential notation.
	    // JavaScript numbers: 21
	    toExpPos:  21,                         // 0 to EXP_LIMIT

	    // The minimum exponent value, beneath which underflow to zero occurs.
	    // JavaScript numbers: -324  (5e-324)
	    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT

	    // The maximum exponent value, above which overflow to Infinity occurs.
	    // JavaScript numbers: 308  (1.7976931348623157e+308)
	    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT

	    // Whether to use cryptographically-secure random number generation, if available.
	    crypto: false                          // true/false
	  },


	// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //


	  inexact, quadrant,
	  external = true,

	  decimalError = '[DecimalError] ',
	  invalidArgument = decimalError + 'Invalid argument: ',
	  precisionLimitExceeded = decimalError + 'Precision limit exceeded',
	  cryptoUnavailable = decimalError + 'crypto unavailable',

	  mathfloor = Math.floor,
	  mathpow = Math.pow,

	  isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
	  isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
	  isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
	  isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,

	  BASE = 1e7,
	  LOG_BASE = 7,
	  MAX_SAFE_INTEGER = 9007199254740991,

	  LN10_PRECISION = LN10.length - 1,
	  PI_PRECISION = PI.length - 1,

	  // Decimal.prototype object
	  P = { name: '[object Decimal]' };


	// Decimal prototype methods


	/*
	 *  absoluteValue             abs
	 *  ceil
	 *  comparedTo                cmp
	 *  cosine                    cos
	 *  cubeRoot                  cbrt
	 *  decimalPlaces             dp
	 *  dividedBy                 div
	 *  dividedToIntegerBy        divToInt
	 *  equals                    eq
	 *  floor
	 *  greaterThan               gt
	 *  greaterThanOrEqualTo      gte
	 *  hyperbolicCosine          cosh
	 *  hyperbolicSine            sinh
	 *  hyperbolicTangent         tanh
	 *  inverseCosine             acos
	 *  inverseHyperbolicCosine   acosh
	 *  inverseHyperbolicSine     asinh
	 *  inverseHyperbolicTangent  atanh
	 *  inverseSine               asin
	 *  inverseTangent            atan
	 *  isFinite
	 *  isInteger                 isInt
	 *  isNaN
	 *  isNegative                isNeg
	 *  isPositive                isPos
	 *  isZero
	 *  lessThan                  lt
	 *  lessThanOrEqualTo         lte
	 *  logarithm                 log
	 *  [maximum]                 [max]
	 *  [minimum]                 [min]
	 *  minus                     sub
	 *  modulo                    mod
	 *  naturalExponential        exp
	 *  naturalLogarithm          ln
	 *  negated                   neg
	 *  plus                      add
	 *  precision                 sd
	 *  round
	 *  sine                      sin
	 *  squareRoot                sqrt
	 *  tangent                   tan
	 *  times                     mul
	 *  toBinary
	 *  toDecimalPlaces           toDP
	 *  toExponential
	 *  toFixed
	 *  toFraction
	 *  toHexadecimal             toHex
	 *  toNearest
	 *  toNumber
	 *  toOctal
	 *  toPower                   pow
	 *  toPrecision
	 *  toSignificantDigits       toSD
	 *  toString
	 *  truncated                 trunc
	 *  valueOf                   toJSON
	 */


	/*
	 * Return a new Decimal whose value is the absolute value of this Decimal.
	 *
	 */
	P.absoluteValue = P.abs = function () {
	  var x = new this.constructor(this);
	  if (x.s < 0) x.s = 1;
	  return finalise(x);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	 * direction of positive Infinity.
	 *
	 */
	P.ceil = function () {
	  return finalise(new this.constructor(this), this.e + 1, 2);
	};


	/*
	 * Return
	 *   1    if the value of this Decimal is greater than the value of `y`,
	 *  -1    if the value of this Decimal is less than the value of `y`,
	 *   0    if they have the same value,
	 *   NaN  if the value of either Decimal is NaN.
	 *
	 */
	P.comparedTo = P.cmp = function (y) {
	  var i, j, xdL, ydL,
	    x = this,
	    xd = x.d,
	    yd = (y = new x.constructor(y)).d,
	    xs = x.s,
	    ys = y.s;

	  // Either NaN or Â±Infinity?
	  if (!xd || !yd) {
	    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
	  }

	  // Either zero?
	  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;

	  // Signs differ?
	  if (xs !== ys) return xs;

	  // Compare exponents.
	  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;

	  xdL = xd.length;
	  ydL = yd.length;

	  // Compare digit by digit.
	  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
	    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
	  }

	  // Compare lengths.
	  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
	};


	/*
	 * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-1, 1]
	 *
	 * cos(0)         = 1
	 * cos(-0)        = 1
	 * cos(Infinity)  = NaN
	 * cos(-Infinity) = NaN
	 * cos(NaN)       = NaN
	 *
	 */
	P.cosine = P.cos = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.d) return new Ctor(NaN);

	  // cos(0) = cos(-0) = 1
	  if (!x.d[0]) return new Ctor(1);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	  Ctor.rounding = 1;

	  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
	};


	/*
	 *
	 * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 *  cbrt(0)  =  0
	 *  cbrt(-0) = -0
	 *  cbrt(1)  =  1
	 *  cbrt(-1) = -1
	 *  cbrt(N)  =  N
	 *  cbrt(-I) = -I
	 *  cbrt(I)  =  I
	 *
	 * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
	 *
	 */
	P.cubeRoot = P.cbrt = function () {
	  var e, m, n, r, rep, s, sd, t, t3, t3plusx,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite() || x.isZero()) return new Ctor(x);
	  external = false;

	  // Initial estimate.
	  s = x.s * Math.pow(x.s * x, 1 / 3);

	   // Math.cbrt underflow/overflow?
	   // Pass x to Math.pow as integer, then adjust the exponent of the result.
	  if (!s || Math.abs(s) == 1 / 0) {
	    n = digitsToString(x.d);
	    e = x.e;

	    // Adjust n exponent so it is a multiple of 3 away from x exponent.
	    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
	    s = Math.pow(n, 1 / 3);

	    // Rarely, e may be one less than the result exponent value.
	    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));

	    if (s == 1 / 0) {
	      n = '5e' + e;
	    } else {
	      n = s.toExponential();
	      n = n.slice(0, n.indexOf('e') + 1) + e;
	    }

	    r = new Ctor(n);
	    r.s = x.s;
	  } else {
	    r = new Ctor(s.toString());
	  }

	  sd = (e = Ctor.precision) + 3;

	  // Halley's method.
	  // TODO? Compare Newton's method.
	  for (;;) {
	    t = r;
	    t3 = t.times(t).times(t);
	    t3plusx = t3.plus(x);
	    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);

	    // TODO? Replace with for-loop and checkRoundingDigits.
	    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	      n = n.slice(sd - 3, sd + 1);

	      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
	      // , i.e. approaching a rounding boundary, continue the iteration.
	      if (n == '9999' || !rep && n == '4999') {

	        // On the first iteration only, check to see if rounding up gives the exact result as the
	        // nines may infinitely repeat.
	        if (!rep) {
	          finalise(t, e + 1, 0);

	          if (t.times(t).times(t).eq(x)) {
	            r = t;
	            break;
	          }
	        }

	        sd += 4;
	        rep = 1;
	      } else {

	        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	        // If not, then there are further digits and m will be truthy.
	        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	          // Truncate to the first rounding digit.
	          finalise(r, e + 1, 1);
	          m = !r.times(r).times(r).eq(x);
	        }

	        break;
	      }
	    }
	  }

	  external = true;

	  return finalise(r, e, Ctor.rounding, m);
	};


	/*
	 * Return the number of decimal places of the value of this Decimal.
	 *
	 */
	P.decimalPlaces = P.dp = function () {
	  var w,
	    d = this.d,
	    n = NaN;

	  if (d) {
	    w = d.length - 1;
	    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;

	    // Subtract the number of trailing zeros of the last word.
	    w = d[w];
	    if (w) for (; w % 10 == 0; w /= 10) n--;
	    if (n < 0) n = 0;
	  }

	  return n;
	};


	/*
	 *  n / 0 = I
	 *  n / N = N
	 *  n / I = 0
	 *  0 / n = 0
	 *  0 / 0 = N
	 *  0 / N = N
	 *  0 / I = 0
	 *  N / n = N
	 *  N / 0 = N
	 *  N / N = N
	 *  N / I = N
	 *  I / n = I
	 *  I / 0 = I
	 *  I / N = N
	 *  I / I = N
	 *
	 * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 */
	P.dividedBy = P.div = function (y) {
	  return divide(this, new this.constructor(y));
	};


	/*
	 * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
	 * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 */
	P.dividedToIntegerBy = P.divToInt = function (y) {
	  var x = this,
	    Ctor = x.constructor;
	  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
	};


	/*
	 * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
	 *
	 */
	P.equals = P.eq = function (y) {
	  return this.cmp(y) === 0;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	 * direction of negative Infinity.
	 *
	 */
	P.floor = function () {
	  return finalise(new this.constructor(this), this.e + 1, 3);
	};


	/*
	 * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
	 * false.
	 *
	 */
	P.greaterThan = P.gt = function (y) {
	  return this.cmp(y) > 0;
	};


	/*
	 * Return true if the value of this Decimal is greater than or equal to the value of `y`,
	 * otherwise return false.
	 *
	 */
	P.greaterThanOrEqualTo = P.gte = function (y) {
	  var k = this.cmp(y);
	  return k == 1 || k === 0;
	};


	/*
	 * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
	 * Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [1, Infinity]
	 *
	 * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
	 *
	 * cosh(0)         = 1
	 * cosh(-0)        = 1
	 * cosh(Infinity)  = Infinity
	 * cosh(-Infinity) = Infinity
	 * cosh(NaN)       = NaN
	 *
	 *  x        time taken (ms)   result
	 * 1000      9                 9.8503555700852349694e+433
	 * 10000     25                4.4034091128314607936e+4342
	 * 100000    171               1.4033316802130615897e+43429
	 * 1000000   3817              1.5166076984010437725e+434294
	 * 10000000  abandoned after 2 minute wait
	 *
	 * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
	 *
	 */
	P.hyperbolicCosine = P.cosh = function () {
	  var k, n, pr, rm, len,
	    x = this,
	    Ctor = x.constructor,
	    one = new Ctor(1);

	  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
	  if (x.isZero()) return one;

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	  Ctor.rounding = 1;
	  len = x.d.length;

	  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
	  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))

	  // Estimate the optimum number of times to use the argument reduction.
	  // TODO? Estimation reused from cosine() and may not be optimal here.
	  if (len < 32) {
	    k = Math.ceil(len / 3);
	    n = Math.pow(4, -k).toString();
	  } else {
	    k = 16;
	    n = '2.3283064365386962890625e-10';
	  }

	  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);

	  // Reverse argument reduction
	  var cosh2_x,
	    i = k,
	    d8 = new Ctor(8);
	  for (; i--;) {
	    cosh2_x = x.times(x);
	    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
	  }

	  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
	};


	/*
	 * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
	 * Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-Infinity, Infinity]
	 *
	 * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
	 *
	 * sinh(0)         = 0
	 * sinh(-0)        = -0
	 * sinh(Infinity)  = Infinity
	 * sinh(-Infinity) = -Infinity
	 * sinh(NaN)       = NaN
	 *
	 * x        time taken (ms)
	 * 10       2 ms
	 * 100      5 ms
	 * 1000     14 ms
	 * 10000    82 ms
	 * 100000   886 ms            1.4033316802130615897e+43429
	 * 200000   2613 ms
	 * 300000   5407 ms
	 * 400000   8824 ms
	 * 500000   13026 ms          8.7080643612718084129e+217146
	 * 1000000  48543 ms
	 *
	 * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
	 *
	 */
	P.hyperbolicSine = P.sinh = function () {
	  var k, pr, rm, len,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite() || x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	  Ctor.rounding = 1;
	  len = x.d.length;

	  if (len < 3) {
	    x = taylorSeries(Ctor, 2, x, x, true);
	  } else {

	    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
	    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
	    // 3 multiplications and 1 addition

	    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
	    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
	    // 4 multiplications and 2 additions

	    // Estimate the optimum number of times to use the argument reduction.
	    k = 1.4 * Math.sqrt(len);
	    k = k > 16 ? 16 : k | 0;

	    x = x.times(Math.pow(5, -k));

	    x = taylorSeries(Ctor, 2, x, x, true);

	    // Reverse argument reduction
	    var sinh2_x,
	      d5 = new Ctor(5),
	      d16 = new Ctor(16),
	      d20 = new Ctor(20);
	    for (; k--;) {
	      sinh2_x = x.times(x);
	      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
	    }
	  }

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return finalise(x, pr, rm, true);
	};


	/*
	 * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
	 * Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-1, 1]
	 *
	 * tanh(x) = sinh(x) / cosh(x)
	 *
	 * tanh(0)         = 0
	 * tanh(-0)        = -0
	 * tanh(Infinity)  = 1
	 * tanh(-Infinity) = -1
	 * tanh(NaN)       = NaN
	 *
	 */
	P.hyperbolicTangent = P.tanh = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite()) return new Ctor(x.s);
	  if (x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + 7;
	  Ctor.rounding = 1;

	  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
	};


	/*
	 * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
	 * this Decimal.
	 *
	 * Domain: [-1, 1]
	 * Range: [0, pi]
	 *
	 * acos(x) = pi/2 - asin(x)
	 *
	 * acos(0)       = pi/2
	 * acos(-0)      = pi/2
	 * acos(1)       = 0
	 * acos(-1)      = pi
	 * acos(1/2)     = pi/3
	 * acos(-1/2)    = 2*pi/3
	 * acos(|x| > 1) = NaN
	 * acos(NaN)     = NaN
	 *
	 */
	P.inverseCosine = P.acos = function () {
	  var halfPi,
	    x = this,
	    Ctor = x.constructor,
	    k = x.abs().cmp(1),
	    pr = Ctor.precision,
	    rm = Ctor.rounding;

	  if (k !== -1) {
	    return k === 0
	      // |x| is 1
	      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
	      // |x| > 1 or x is NaN
	      : new Ctor(NaN);
	  }

	  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);

	  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3

	  Ctor.precision = pr + 6;
	  Ctor.rounding = 1;

	  x = x.asin();
	  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return halfPi.minus(x);
	};


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
	 * value of this Decimal.
	 *
	 * Domain: [1, Infinity]
	 * Range: [0, Infinity]
	 *
	 * acosh(x) = ln(x + sqrt(x^2 - 1))
	 *
	 * acosh(x < 1)     = NaN
	 * acosh(NaN)       = NaN
	 * acosh(Infinity)  = Infinity
	 * acosh(-Infinity) = NaN
	 * acosh(0)         = NaN
	 * acosh(-0)        = NaN
	 * acosh(1)         = 0
	 * acosh(-1)        = NaN
	 *
	 */
	P.inverseHyperbolicCosine = P.acosh = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
	  if (!x.isFinite()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
	  Ctor.rounding = 1;
	  external = false;

	  x = x.times(x).minus(1).sqrt().plus(x);

	  external = true;
	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return x.ln();
	};


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
	 * of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-Infinity, Infinity]
	 *
	 * asinh(x) = ln(x + sqrt(x^2 + 1))
	 *
	 * asinh(NaN)       = NaN
	 * asinh(Infinity)  = Infinity
	 * asinh(-Infinity) = -Infinity
	 * asinh(0)         = 0
	 * asinh(-0)        = -0
	 *
	 */
	P.inverseHyperbolicSine = P.asinh = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite() || x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
	  Ctor.rounding = 1;
	  external = false;

	  x = x.times(x).plus(1).sqrt().plus(x);

	  external = true;
	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return x.ln();
	};


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
	 * value of this Decimal.
	 *
	 * Domain: [-1, 1]
	 * Range: [-Infinity, Infinity]
	 *
	 * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
	 *
	 * atanh(|x| > 1)   = NaN
	 * atanh(NaN)       = NaN
	 * atanh(Infinity)  = NaN
	 * atanh(-Infinity) = NaN
	 * atanh(0)         = 0
	 * atanh(-0)        = -0
	 * atanh(1)         = Infinity
	 * atanh(-1)        = -Infinity
	 *
	 */
	P.inverseHyperbolicTangent = P.atanh = function () {
	  var pr, rm, wpr, xsd,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite()) return new Ctor(NaN);
	  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  xsd = x.sd();

	  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);

	  Ctor.precision = wpr = xsd - x.e;

	  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);

	  Ctor.precision = pr + 4;
	  Ctor.rounding = 1;

	  x = x.ln();

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return x.times(0.5);
	};


	/*
	 * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
	 * Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-pi/2, pi/2]
	 *
	 * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
	 *
	 * asin(0)       = 0
	 * asin(-0)      = -0
	 * asin(1/2)     = pi/6
	 * asin(-1/2)    = -pi/6
	 * asin(1)       = pi/2
	 * asin(-1)      = -pi/2
	 * asin(|x| > 1) = NaN
	 * asin(NaN)     = NaN
	 *
	 * TODO? Compare performance of Taylor series.
	 *
	 */
	P.inverseSine = P.asin = function () {
	  var halfPi, k,
	    pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (x.isZero()) return new Ctor(x);

	  k = x.abs().cmp(1);
	  pr = Ctor.precision;
	  rm = Ctor.rounding;

	  if (k !== -1) {

	    // |x| is 1
	    if (k === 0) {
	      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
	      halfPi.s = x.s;
	      return halfPi;
	    }

	    // |x| > 1 or x is NaN
	    return new Ctor(NaN);
	  }

	  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6

	  Ctor.precision = pr + 6;
	  Ctor.rounding = 1;

	  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return x.times(2);
	};


	/*
	 * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
	 * of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-pi/2, pi/2]
	 *
	 * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	 *
	 * atan(0)         = 0
	 * atan(-0)        = -0
	 * atan(1)         = pi/4
	 * atan(-1)        = -pi/4
	 * atan(Infinity)  = pi/2
	 * atan(-Infinity) = -pi/2
	 * atan(NaN)       = NaN
	 *
	 */
	P.inverseTangent = P.atan = function () {
	  var i, j, k, n, px, t, r, wpr, x2,
	    x = this,
	    Ctor = x.constructor,
	    pr = Ctor.precision,
	    rm = Ctor.rounding;

	  if (!x.isFinite()) {
	    if (!x.s) return new Ctor(NaN);
	    if (pr + 4 <= PI_PRECISION) {
	      r = getPi(Ctor, pr + 4, rm).times(0.5);
	      r.s = x.s;
	      return r;
	    }
	  } else if (x.isZero()) {
	    return new Ctor(x);
	  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
	    r = getPi(Ctor, pr + 4, rm).times(0.25);
	    r.s = x.s;
	    return r;
	  }

	  Ctor.precision = wpr = pr + 10;
	  Ctor.rounding = 1;

	  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);

	  // Argument reduction
	  // Ensure |x| < 0.42
	  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))

	  k = Math.min(28, wpr / LOG_BASE + 2 | 0);

	  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));

	  external = false;

	  j = Math.ceil(wpr / LOG_BASE);
	  n = 1;
	  x2 = x.times(x);
	  r = new Ctor(x);
	  px = x;

	  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	  for (; i !== -1;) {
	    px = px.times(x2);
	    t = r.minus(px.div(n += 2));

	    px = px.times(x2);
	    r = t.plus(px.div(n += 2));

	    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
	  }

	  if (k) r = r.times(2 << (k - 1));

	  external = true;

	  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
	};


	/*
	 * Return true if the value of this Decimal is a finite number, otherwise return false.
	 *
	 */
	P.isFinite = function () {
	  return !!this.d;
	};


	/*
	 * Return true if the value of this Decimal is an integer, otherwise return false.
	 *
	 */
	P.isInteger = P.isInt = function () {
	  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
	};


	/*
	 * Return true if the value of this Decimal is NaN, otherwise return false.
	 *
	 */
	P.isNaN = function () {
	  return !this.s;
	};


	/*
	 * Return true if the value of this Decimal is negative, otherwise return false.
	 *
	 */
	P.isNegative = P.isNeg = function () {
	  return this.s < 0;
	};


	/*
	 * Return true if the value of this Decimal is positive, otherwise return false.
	 *
	 */
	P.isPositive = P.isPos = function () {
	  return this.s > 0;
	};


	/*
	 * Return true if the value of this Decimal is 0 or -0, otherwise return false.
	 *
	 */
	P.isZero = function () {
	  return !!this.d && this.d[0] === 0;
	};


	/*
	 * Return true if the value of this Decimal is less than `y`, otherwise return false.
	 *
	 */
	P.lessThan = P.lt = function (y) {
	  return this.cmp(y) < 0;
	};


	/*
	 * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
	 *
	 */
	P.lessThanOrEqualTo = P.lte = function (y) {
	  return this.cmp(y) < 1;
	};


	/*
	 * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * If no base is specified, return log[10](arg).
	 *
	 * log[base](arg) = ln(arg) / ln(base)
	 *
	 * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
	 * otherwise:
	 *
	 * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
	 * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
	 * between the result and the correctly rounded result will be one ulp (unit in the last place).
	 *
	 * log[-b](a)       = NaN
	 * log[0](a)        = NaN
	 * log[1](a)        = NaN
	 * log[NaN](a)      = NaN
	 * log[Infinity](a) = NaN
	 * log[b](0)        = -Infinity
	 * log[b](-0)       = -Infinity
	 * log[b](-a)       = NaN
	 * log[b](1)        = 0
	 * log[b](Infinity) = Infinity
	 * log[b](NaN)      = NaN
	 *
	 * [base] {number|string|Decimal} The base of the logarithm.
	 *
	 */
	P.logarithm = P.log = function (base) {
	  var isBase10, d, denominator, k, inf, num, sd, r,
	    arg = this,
	    Ctor = arg.constructor,
	    pr = Ctor.precision,
	    rm = Ctor.rounding,
	    guard = 5;

	  // Default base is 10.
	  if (base == null) {
	    base = new Ctor(10);
	    isBase10 = true;
	  } else {
	    base = new Ctor(base);
	    d = base.d;

	    // Return NaN if base is negative, or non-finite, or is 0 or 1.
	    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);

	    isBase10 = base.eq(10);
	  }

	  d = arg.d;

	  // Is arg negative, non-finite, 0 or 1?
	  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
	    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
	  }

	  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
	  // integer power of 10.
	  if (isBase10) {
	    if (d.length > 1) {
	      inf = true;
	    } else {
	      for (k = d[0]; k % 10 === 0;) k /= 10;
	      inf = k !== 1;
	    }
	  }

	  external = false;
	  sd = pr + guard;
	  num = naturalLogarithm(arg, sd);
	  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);

	  // The result will have 5 rounding digits.
	  r = divide(num, denominator, sd, 1);

	  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
	  // calculate 10 further digits.
	  //
	  // If the result is known to have an infinite decimal expansion, repeat this until it is clear
	  // that the result is above or below the boundary. Otherwise, if after calculating the 10
	  // further digits, the last 14 are nines, round up and assume the result is exact.
	  // Also assume the result is exact if the last 14 are zero.
	  //
	  // Example of a result that will be incorrectly rounded:
	  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
	  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
	  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
	  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
	  // place is still 2.6.
	  if (checkRoundingDigits(r.d, k = pr, rm)) {

	    do {
	      sd += 10;
	      num = naturalLogarithm(arg, sd);
	      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
	      r = divide(num, denominator, sd, 1);

	      if (!inf) {

	        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
	        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
	          r = finalise(r, pr + 1, 0);
	        }

	        break;
	      }
	    } while (checkRoundingDigits(r.d, k += 10, rm));
	  }

	  external = true;

	  return finalise(r, pr, rm);
	};


	/*
	 * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
	 *
	 * arguments {number|string|Decimal}
	 *
	P.max = function () {
	  Array.prototype.push.call(arguments, this);
	  return maxOrMin(this.constructor, arguments, 'lt');
	};
	 */


	/*
	 * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
	 *
	 * arguments {number|string|Decimal}
	 *
	P.min = function () {
	  Array.prototype.push.call(arguments, this);
	  return maxOrMin(this.constructor, arguments, 'gt');
	};
	 */


	/*
	 *  n - 0 = n
	 *  n - N = N
	 *  n - I = -I
	 *  0 - n = -n
	 *  0 - 0 = 0
	 *  0 - N = N
	 *  0 - I = -I
	 *  N - n = N
	 *  N - 0 = N
	 *  N - N = N
	 *  N - I = N
	 *  I - n = I
	 *  I - 0 = I
	 *  I - N = N
	 *  I - I = N
	 *
	 * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 */
	P.minus = P.sub = function (y) {
	  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
	    x = this,
	    Ctor = x.constructor;

	  y = new Ctor(y);

	  // If either is not finite...
	  if (!x.d || !y.d) {

	    // Return NaN if either is NaN.
	    if (!x.s || !y.s) y = new Ctor(NaN);

	    // Return y negated if x is finite and y is Â±Infinity.
	    else if (x.d) y.s = -y.s;

	    // Return x if y is finite and x is Â±Infinity.
	    // Return x if both are Â±Infinity with different signs.
	    // Return NaN if both are Â±Infinity with the same sign.
	    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);

	    return y;
	  }

	  // If signs differ...
	  if (x.s != y.s) {
	    y.s = -y.s;
	    return x.plus(y);
	  }

	  xd = x.d;
	  yd = y.d;
	  pr = Ctor.precision;
	  rm = Ctor.rounding;

	  // If either is zero...
	  if (!xd[0] || !yd[0]) {

	    // Return y negated if x is zero and y is non-zero.
	    if (yd[0]) y.s = -y.s;

	    // Return x if y is zero and x is non-zero.
	    else if (xd[0]) y = new Ctor(x);

	    // Return zero if both are zero.
	    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
	    else return new Ctor(rm === 3 ? -0 : 0);

	    return external ? finalise(y, pr, rm) : y;
	  }

	  // x and y are finite, non-zero numbers with the same sign.

	  // Calculate base 1e7 exponents.
	  e = mathfloor(y.e / LOG_BASE);
	  xe = mathfloor(x.e / LOG_BASE);

	  xd = xd.slice();
	  k = xe - e;

	  // If base 1e7 exponents differ...
	  if (k) {
	    xLTy = k < 0;

	    if (xLTy) {
	      d = xd;
	      k = -k;
	      len = yd.length;
	    } else {
	      d = yd;
	      e = xe;
	      len = xd.length;
	    }

	    // Numbers with massively different exponents would result in a very high number of
	    // zeros needing to be prepended, but this can be avoided while still ensuring correct
	    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
	    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

	    if (k > i) {
	      k = i;
	      d.length = 1;
	    }

	    // Prepend zeros to equalise exponents.
	    d.reverse();
	    for (i = k; i--;) d.push(0);
	    d.reverse();

	  // Base 1e7 exponents equal.
	  } else {

	    // Check digits to determine which is the bigger number.

	    i = xd.length;
	    len = yd.length;
	    xLTy = i < len;
	    if (xLTy) len = i;

	    for (i = 0; i < len; i++) {
	      if (xd[i] != yd[i]) {
	        xLTy = xd[i] < yd[i];
	        break;
	      }
	    }

	    k = 0;
	  }

	  if (xLTy) {
	    d = xd;
	    xd = yd;
	    yd = d;
	    y.s = -y.s;
	  }

	  len = xd.length;

	  // Append zeros to `xd` if shorter.
	  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
	  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;

	  // Subtract yd from xd.
	  for (i = yd.length; i > k;) {

	    if (xd[--i] < yd[i]) {
	      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
	      --xd[j];
	      xd[i] += BASE;
	    }

	    xd[i] -= yd[i];
	  }

	  // Remove trailing zeros.
	  for (; xd[--len] === 0;) xd.pop();

	  // Remove leading zeros and adjust exponent accordingly.
	  for (; xd[0] === 0; xd.shift()) --e;

	  // Zero?
	  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);

	  y.d = xd;
	  y.e = getBase10Exponent(xd, e);

	  return external ? finalise(y, pr, rm) : y;
	};


	/*
	 *   n % 0 =  N
	 *   n % N =  N
	 *   n % I =  n
	 *   0 % n =  0
	 *  -0 % n = -0
	 *   0 % 0 =  N
	 *   0 % N =  N
	 *   0 % I =  0
	 *   N % n =  N
	 *   N % 0 =  N
	 *   N % N =  N
	 *   N % I =  N
	 *   I % n =  N
	 *   I % 0 =  N
	 *   I % N =  N
	 *   I % I =  N
	 *
	 * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 * The result depends on the modulo mode.
	 *
	 */
	P.modulo = P.mod = function (y) {
	  var q,
	    x = this,
	    Ctor = x.constructor;

	  y = new Ctor(y);

	  // Return NaN if x is Â±Infinity or NaN, or y is NaN or Â±0.
	  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);

	  // Return x if y is Â±Infinity or x is Â±0.
	  if (!y.d || x.d && !x.d[0]) {
	    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
	  }

	  // Prevent rounding of intermediate calculations.
	  external = false;

	  if (Ctor.modulo == 9) {

	    // Euclidian division: q = sign(y) * floor(x / abs(y))
	    // result = x - q * y    where  0 <= result < abs(y)
	    q = divide(x, y.abs(), 0, 3, 1);
	    q.s *= y.s;
	  } else {
	    q = divide(x, y, 0, Ctor.modulo, 1);
	  }

	  q = q.times(y);

	  external = true;

	  return x.minus(q);
	};


	/*
	 * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
	 * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 */
	P.naturalExponential = P.exp = function () {
	  return naturalExponential(this);
	};


	/*
	 * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
	 * rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 */
	P.naturalLogarithm = P.ln = function () {
	  return naturalLogarithm(this);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
	 * -1.
	 *
	 */
	P.negated = P.neg = function () {
	  var x = new this.constructor(this);
	  x.s = -x.s;
	  return finalise(x);
	};


	/*
	 *  n + 0 = n
	 *  n + N = N
	 *  n + I = I
	 *  0 + n = n
	 *  0 + 0 = 0
	 *  0 + N = N
	 *  0 + I = I
	 *  N + n = N
	 *  N + 0 = N
	 *  N + N = N
	 *  N + I = N
	 *  I + n = I
	 *  I + 0 = I
	 *  I + N = N
	 *  I + I = I
	 *
	 * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 */
	P.plus = P.add = function (y) {
	  var carry, d, e, i, k, len, pr, rm, xd, yd,
	    x = this,
	    Ctor = x.constructor;

	  y = new Ctor(y);

	  // If either is not finite...
	  if (!x.d || !y.d) {

	    // Return NaN if either is NaN.
	    if (!x.s || !y.s) y = new Ctor(NaN);

	    // Return x if y is finite and x is Â±Infinity.
	    // Return x if both are Â±Infinity with the same sign.
	    // Return NaN if both are Â±Infinity with different signs.
	    // Return y if x is finite and y is Â±Infinity.
	    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);

	    return y;
	  }

	   // If signs differ...
	  if (x.s != y.s) {
	    y.s = -y.s;
	    return x.minus(y);
	  }

	  xd = x.d;
	  yd = y.d;
	  pr = Ctor.precision;
	  rm = Ctor.rounding;

	  // If either is zero...
	  if (!xd[0] || !yd[0]) {

	    // Return x if y is zero.
	    // Return y if y is non-zero.
	    if (!yd[0]) y = new Ctor(x);

	    return external ? finalise(y, pr, rm) : y;
	  }

	  // x and y are finite, non-zero numbers with the same sign.

	  // Calculate base 1e7 exponents.
	  k = mathfloor(x.e / LOG_BASE);
	  e = mathfloor(y.e / LOG_BASE);

	  xd = xd.slice();
	  i = k - e;

	  // If base 1e7 exponents differ...
	  if (i) {

	    if (i < 0) {
	      d = xd;
	      i = -i;
	      len = yd.length;
	    } else {
	      d = yd;
	      e = k;
	      len = xd.length;
	    }

	    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
	    k = Math.ceil(pr / LOG_BASE);
	    len = k > len ? k + 1 : len + 1;

	    if (i > len) {
	      i = len;
	      d.length = 1;
	    }

	    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
	    d.reverse();
	    for (; i--;) d.push(0);
	    d.reverse();
	  }

	  len = xd.length;
	  i = yd.length;

	  // If yd is longer than xd, swap xd and yd so xd points to the longer array.
	  if (len - i < 0) {
	    i = len;
	    d = yd;
	    yd = xd;
	    xd = d;
	  }

	  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
	  for (carry = 0; i;) {
	    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
	    xd[i] %= BASE;
	  }

	  if (carry) {
	    xd.unshift(carry);
	    ++e;
	  }

	  // Remove trailing zeros.
	  // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	  for (len = xd.length; xd[--len] == 0;) xd.pop();

	  y.d = xd;
	  y.e = getBase10Exponent(xd, e);

	  return external ? finalise(y, pr, rm) : y;
	};


	/*
	 * Return the number of significant digits of the value of this Decimal.
	 *
	 * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	 *
	 */
	P.precision = P.sd = function (z) {
	  var k,
	    x = this;

	  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);

	  if (x.d) {
	    k = getPrecision(x.d);
	    if (z && x.e + 1 > k) k = x.e + 1;
	  } else {
	    k = NaN;
	  }

	  return k;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
	 * rounding mode `rounding`.
	 *
	 */
	P.round = function () {
	  var x = this,
	    Ctor = x.constructor;

	  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
	};


	/*
	 * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-1, 1]
	 *
	 * sin(x) = x - x^3/3! + x^5/5! - ...
	 *
	 * sin(0)         = 0
	 * sin(-0)        = -0
	 * sin(Infinity)  = NaN
	 * sin(-Infinity) = NaN
	 * sin(NaN)       = NaN
	 *
	 */
	P.sine = P.sin = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite()) return new Ctor(NaN);
	  if (x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	  Ctor.rounding = 1;

	  x = sine(Ctor, toLessThanHalfPi(Ctor, x));

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
	};


	/*
	 * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 *  sqrt(-n) =  N
	 *  sqrt(N)  =  N
	 *  sqrt(-I) =  N
	 *  sqrt(I)  =  I
	 *  sqrt(0)  =  0
	 *  sqrt(-0) = -0
	 *
	 */
	P.squareRoot = P.sqrt = function () {
	  var m, n, sd, r, rep, t,
	    x = this,
	    d = x.d,
	    e = x.e,
	    s = x.s,
	    Ctor = x.constructor;

	  // Negative/NaN/Infinity/zero?
	  if (s !== 1 || !d || !d[0]) {
	    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
	  }

	  external = false;

	  // Initial estimate.
	  s = Math.sqrt(+x);

	  // Math.sqrt underflow/overflow?
	  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	  if (s == 0 || s == 1 / 0) {
	    n = digitsToString(d);

	    if ((n.length + e) % 2 == 0) n += '0';
	    s = Math.sqrt(n);
	    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

	    if (s == 1 / 0) {
	      n = '1e' + e;
	    } else {
	      n = s.toExponential();
	      n = n.slice(0, n.indexOf('e') + 1) + e;
	    }

	    r = new Ctor(n);
	  } else {
	    r = new Ctor(s.toString());
	  }

	  sd = (e = Ctor.precision) + 3;

	  // Newton-Raphson iteration.
	  for (;;) {
	    t = r;
	    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);

	    // TODO? Replace with for-loop and checkRoundingDigits.
	    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	      n = n.slice(sd - 3, sd + 1);

	      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
	      // 4999, i.e. approaching a rounding boundary, continue the iteration.
	      if (n == '9999' || !rep && n == '4999') {

	        // On the first iteration only, check to see if rounding up gives the exact result as the
	        // nines may infinitely repeat.
	        if (!rep) {
	          finalise(t, e + 1, 0);

	          if (t.times(t).eq(x)) {
	            r = t;
	            break;
	          }
	        }

	        sd += 4;
	        rep = 1;
	      } else {

	        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	        // If not, then there are further digits and m will be truthy.
	        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	          // Truncate to the first rounding digit.
	          finalise(r, e + 1, 1);
	          m = !r.times(r).eq(x);
	        }

	        break;
	      }
	    }
	  }

	  external = true;

	  return finalise(r, e, Ctor.rounding, m);
	};


	/*
	 * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-Infinity, Infinity]
	 *
	 * tan(0)         = 0
	 * tan(-0)        = -0
	 * tan(Infinity)  = NaN
	 * tan(-Infinity) = NaN
	 * tan(NaN)       = NaN
	 *
	 */
	P.tangent = P.tan = function () {
	  var pr, rm,
	    x = this,
	    Ctor = x.constructor;

	  if (!x.isFinite()) return new Ctor(NaN);
	  if (x.isZero()) return new Ctor(x);

	  pr = Ctor.precision;
	  rm = Ctor.rounding;
	  Ctor.precision = pr + 10;
	  Ctor.rounding = 1;

	  x = x.sin();
	  x.s = 1;
	  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);

	  Ctor.precision = pr;
	  Ctor.rounding = rm;

	  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
	};


	/*
	 *  n * 0 = 0
	 *  n * N = N
	 *  n * I = I
	 *  0 * n = 0
	 *  0 * 0 = 0
	 *  0 * N = N
	 *  0 * I = N
	 *  N * n = N
	 *  N * 0 = N
	 *  N * N = N
	 *  N * I = N
	 *  I * n = I
	 *  I * 0 = N
	 *  I * N = N
	 *  I * I = I
	 *
	 * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 */
	P.times = P.mul = function (y) {
	  var carry, e, i, k, r, rL, t, xdL, ydL,
	    x = this,
	    Ctor = x.constructor,
	    xd = x.d,
	    yd = (y = new Ctor(y)).d;

	  y.s *= x.s;

	   // If either is NaN, Â±Infinity or Â±0...
	  if (!xd || !xd[0] || !yd || !yd[0]) {

	    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd

	      // Return NaN if either is NaN.
	      // Return NaN if x is Â±0 and y is Â±Infinity, or y is Â±0 and x is Â±Infinity.
	      ? NaN

	      // Return Â±Infinity if either is Â±Infinity.
	      // Return Â±0 if either is Â±0.
	      : !xd || !yd ? y.s / 0 : y.s * 0);
	  }

	  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
	  xdL = xd.length;
	  ydL = yd.length;

	  // Ensure xd points to the longer array.
	  if (xdL < ydL) {
	    r = xd;
	    xd = yd;
	    yd = r;
	    rL = xdL;
	    xdL = ydL;
	    ydL = rL;
	  }

	  // Initialise the result array with zeros.
	  r = [];
	  rL = xdL + ydL;
	  for (i = rL; i--;) r.push(0);

	  // Multiply!
	  for (i = ydL; --i >= 0;) {
	    carry = 0;
	    for (k = xdL + i; k > i;) {
	      t = r[k] + yd[i] * xd[k - i - 1] + carry;
	      r[k--] = t % BASE | 0;
	      carry = t / BASE | 0;
	    }

	    r[k] = (r[k] + carry) % BASE | 0;
	  }

	  // Remove trailing zeros.
	  for (; !r[--rL];) r.pop();

	  if (carry) ++e;
	  else r.shift();

	  y.d = r;
	  y.e = getBase10Exponent(r, e);

	  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
	};


	/*
	 * Return a string representing the value of this Decimal in base 2, round to `sd` significant
	 * digits using rounding mode `rm`.
	 *
	 * If the optional `sd` argument is present then return binary exponential notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toBinary = function (sd, rm) {
	  return toStringBinary(this, 2, sd, rm);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
	 * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
	 *
	 * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toDecimalPlaces = P.toDP = function (dp, rm) {
	  var x = this,
	    Ctor = x.constructor;

	  x = new Ctor(x);
	  if (dp === void 0) return x;

	  checkInt32(dp, 0, MAX_DIGITS);

	  if (rm === void 0) rm = Ctor.rounding;
	  else checkInt32(rm, 0, 8);

	  return finalise(x, dp + x.e + 1, rm);
	};


	/*
	 * Return a string representing the value of this Decimal in exponential notation rounded to
	 * `dp` fixed decimal places using rounding mode `rounding`.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toExponential = function (dp, rm) {
	  var str,
	    x = this,
	    Ctor = x.constructor;

	  if (dp === void 0) {
	    str = finiteToString(x, true);
	  } else {
	    checkInt32(dp, 0, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    x = finalise(new Ctor(x), dp + 1, rm);
	    str = finiteToString(x, true, dp + 1);
	  }

	  return x.isNeg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return a string representing the value of this Decimal in normal (fixed-point) notation to
	 * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
	 * omitted.
	 *
	 * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
	 *
	 * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
	 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	 * (-0).toFixed(3) is '0.000'.
	 * (-0.5).toFixed(0) is '-0'.
	 *
	 */
	P.toFixed = function (dp, rm) {
	  var str, y,
	    x = this,
	    Ctor = x.constructor;

	  if (dp === void 0) {
	    str = finiteToString(x);
	  } else {
	    checkInt32(dp, 0, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    y = finalise(new Ctor(x), dp + x.e + 1, rm);
	    str = finiteToString(y, false, dp + y.e + 1);
	  }

	  // To determine whether to add the minus sign look at the value before it was rounded,
	  // i.e. look at `x` rather than `y`.
	  return x.isNeg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return an array representing the value of this Decimal as a simple fraction with an integer
	 * numerator and an integer denominator.
	 *
	 * The denominator will be a positive non-zero value less than or equal to the specified maximum
	 * denominator. If a maximum denominator is not specified, the denominator will be the lowest
	 * value necessary to represent the number exactly.
	 *
	 * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
	 *
	 */
	P.toFraction = function (maxD) {
	  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
	    x = this,
	    xd = x.d,
	    Ctor = x.constructor;

	  if (!xd) return new Ctor(x);

	  n1 = d0 = new Ctor(1);
	  d1 = n0 = new Ctor(0);

	  d = new Ctor(d1);
	  e = d.e = getPrecision(xd) - x.e - 1;
	  k = e % LOG_BASE;
	  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);

	  if (maxD == null) {

	    // d is 10**e, the minimum max-denominator needed.
	    maxD = e > 0 ? d : n1;
	  } else {
	    n = new Ctor(maxD);
	    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
	    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
	  }

	  external = false;
	  n = new Ctor(digitsToString(xd));
	  pr = Ctor.precision;
	  Ctor.precision = e = xd.length * LOG_BASE * 2;

	  for (;;)  {
	    q = divide(n, d, 0, 1, 1);
	    d2 = d0.plus(q.times(d1));
	    if (d2.cmp(maxD) == 1) break;
	    d0 = d1;
	    d1 = d2;
	    d2 = n1;
	    n1 = n0.plus(q.times(d2));
	    n0 = d2;
	    d2 = d;
	    d = n.minus(q.times(d2));
	    n = d2;
	  }

	  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
	  n0 = n0.plus(d2.times(n1));
	  d0 = d0.plus(d2.times(d1));
	  n0.s = n1.s = x.s;

	  // Determine which fraction is closer to x, n0/d0 or n1/d1?
	  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
	      ? [n1, d1] : [n0, d0];

	  Ctor.precision = pr;
	  external = true;

	  return r;
	};


	/*
	 * Return a string representing the value of this Decimal in base 16, round to `sd` significant
	 * digits using rounding mode `rm`.
	 *
	 * If the optional `sd` argument is present then return binary exponential notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toHexadecimal = P.toHex = function (sd, rm) {
	  return toStringBinary(this, 16, sd, rm);
	};


	/*
	 * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding
	 * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.
	 *
	 * The return value will always have the same sign as this Decimal, unless either this Decimal
	 * or `y` is NaN, in which case the return value will be also be NaN.
	 *
	 * The return value is not affected by the value of `precision`.
	 *
	 * y {number|string|Decimal} The magnitude to round to a multiple of.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 * 'toNearest() rounding mode not an integer: {rm}'
	 * 'toNearest() rounding mode out of range: {rm}'
	 *
	 */
	P.toNearest = function (y, rm) {
	  var x = this,
	    Ctor = x.constructor;

	  x = new Ctor(x);

	  if (y == null) {

	    // If x is not finite, return x.
	    if (!x.d) return x;

	    y = new Ctor(1);
	    rm = Ctor.rounding;
	  } else {
	    y = new Ctor(y);
	    if (rm === void 0) {
	      rm = Ctor.rounding;
	    } else {
	      checkInt32(rm, 0, 8);
	    }

	    // If x is not finite, return x if y is not NaN, else NaN.
	    if (!x.d) return y.s ? x : y;

	    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
	    if (!y.d) {
	      if (y.s) y.s = x.s;
	      return y;
	    }
	  }

	  // If y is not zero, calculate the nearest multiple of y to x.
	  if (y.d[0]) {
	    external = false;
	    x = divide(x, y, 0, rm, 1).times(y);
	    external = true;
	    finalise(x);

	  // If y is zero, return zero with the sign of x.
	  } else {
	    y.s = x.s;
	    x = y;
	  }

	  return x;
	};


	/*
	 * Return the value of this Decimal converted to a number primitive.
	 * Zero keeps its sign.
	 *
	 */
	P.toNumber = function () {
	  return +this;
	};


	/*
	 * Return a string representing the value of this Decimal in base 8, round to `sd` significant
	 * digits using rounding mode `rm`.
	 *
	 * If the optional `sd` argument is present then return binary exponential notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toOctal = function (sd, rm) {
	  return toStringBinary(this, 8, sd, rm);
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
	 * to `precision` significant digits using rounding mode `rounding`.
	 *
	 * ECMAScript compliant.
	 *
	 *   pow(x, NaN)                           = NaN
	 *   pow(x, Â±0)                            = 1

	 *   pow(NaN, non-zero)                    = NaN
	 *   pow(abs(x) > 1, +Infinity)            = +Infinity
	 *   pow(abs(x) > 1, -Infinity)            = +0
	 *   pow(abs(x) == 1, Â±Infinity)           = NaN
	 *   pow(abs(x) < 1, +Infinity)            = +0
	 *   pow(abs(x) < 1, -Infinity)            = +Infinity
	 *   pow(+Infinity, y > 0)                 = +Infinity
	 *   pow(+Infinity, y < 0)                 = +0
	 *   pow(-Infinity, odd integer > 0)       = -Infinity
	 *   pow(-Infinity, even integer > 0)      = +Infinity
	 *   pow(-Infinity, odd integer < 0)       = -0
	 *   pow(-Infinity, even integer < 0)      = +0
	 *   pow(+0, y > 0)                        = +0
	 *   pow(+0, y < 0)                        = +Infinity
	 *   pow(-0, odd integer > 0)              = -0
	 *   pow(-0, even integer > 0)             = +0
	 *   pow(-0, odd integer < 0)              = -Infinity
	 *   pow(-0, even integer < 0)             = +Infinity
	 *   pow(finite x < 0, finite non-integer) = NaN
	 *
	 * For non-integer or very large exponents pow(x, y) is calculated using
	 *
	 *   x^y = exp(y*ln(x))
	 *
	 * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
	 * probability of an incorrectly rounded result
	 * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
	 * i.e. 1 in 250,000,000,000,000
	 *
	 * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
	 *
	 * y {number|string|Decimal} The power to which to raise this Decimal.
	 *
	 */
	P.toPower = P.pow = function (y) {
	  var e, k, pr, r, rm, s,
	    x = this,
	    Ctor = x.constructor,
	    yn = +(y = new Ctor(y));

	  // Either Â±Infinity, NaN or Â±0?
	  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));

	  x = new Ctor(x);

	  if (x.eq(1)) return x;

	  pr = Ctor.precision;
	  rm = Ctor.rounding;

	  if (y.eq(1)) return finalise(x, pr, rm);

	  // y exponent
	  e = mathfloor(y.e / LOG_BASE);

	  // If y is a small integer use the 'exponentiation by squaring' algorithm.
	  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
	    r = intPow(Ctor, x, k, pr);
	    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
	  }

	  s = x.s;

	  // if x is negative
	  if (s < 0) {

	    // if y is not an integer
	    if (e < y.d.length - 1) return new Ctor(NaN);

	    // Result is positive if x is negative and the last digit of integer y is even.
	    if ((y.d[e] & 1) == 0) s = 1;

	    // if x.eq(-1)
	    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
	      x.s = s;
	      return x;
	    }
	  }

	  // Estimate result exponent.
	  // x^y = 10^e,  where e = y * log10(x)
	  // log10(x) = log10(x_significand) + x_exponent
	  // log10(x_significand) = ln(x_significand) / ln(10)
	  k = mathpow(+x, yn);
	  e = k == 0 || !isFinite(k)
	    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
	    : new Ctor(k + '').e;

	  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.

	  // Overflow/underflow?
	  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);

	  external = false;
	  Ctor.rounding = x.s = 1;

	  // Estimate the extra guard digits needed to ensure five correct rounding digits from
	  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
	  // new Decimal(2.32456).pow('2087987436534566.46411')
	  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
	  k = Math.min(12, (e + '').length);

	  // r = x^y = exp(y*ln(x))
	  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);

	  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)
	  if (r.d) {

	    // Truncate to the required precision plus five rounding digits.
	    r = finalise(r, pr + 5, 1);

	    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
	    // the result.
	    if (checkRoundingDigits(r.d, pr, rm)) {
	      e = pr + 10;

	      // Truncate to the increased precision plus five rounding digits.
	      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);

	      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
	      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
	        r = finalise(r, pr + 1, 0);
	      }
	    }
	  }

	  r.s = s;
	  external = true;
	  Ctor.rounding = rm;

	  return finalise(r, pr, rm);
	};


	/*
	 * Return a string representing the value of this Decimal rounded to `sd` significant digits
	 * using rounding mode `rounding`.
	 *
	 * Return exponential notation if `sd` is less than the number of digits necessary to represent
	 * the integer part of the value in normal notation.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 */
	P.toPrecision = function (sd, rm) {
	  var str,
	    x = this,
	    Ctor = x.constructor;

	  if (sd === void 0) {
	    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	  } else {
	    checkInt32(sd, 1, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);

	    x = finalise(new Ctor(x), sd, rm);
	    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
	  }

	  return x.isNeg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
	 * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
	 * omitted.
	 *
	 * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	 * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	 *
	 * 'toSD() digits out of range: {sd}'
	 * 'toSD() digits not an integer: {sd}'
	 * 'toSD() rounding mode not an integer: {rm}'
	 * 'toSD() rounding mode out of range: {rm}'
	 *
	 */
	P.toSignificantDigits = P.toSD = function (sd, rm) {
	  var x = this,
	    Ctor = x.constructor;

	  if (sd === void 0) {
	    sd = Ctor.precision;
	    rm = Ctor.rounding;
	  } else {
	    checkInt32(sd, 1, MAX_DIGITS);

	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);
	  }

	  return finalise(new Ctor(x), sd, rm);
	};


	/*
	 * Return a string representing the value of this Decimal.
	 *
	 * Return exponential notation if this Decimal has a positive exponent equal to or greater than
	 * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
	 *
	 */
	P.toString = function () {
	  var x = this,
	    Ctor = x.constructor,
	    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

	  return x.isNeg() && !x.isZero() ? '-' + str : str;
	};


	/*
	 * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
	 *
	 */
	P.truncated = P.trunc = function () {
	  return finalise(new this.constructor(this), this.e + 1, 1);
	};


	/*
	 * Return a string representing the value of this Decimal.
	 * Unlike `toString`, negative zero will include the minus sign.
	 *
	 */
	P.valueOf = P.toJSON = function () {
	  var x = this,
	    Ctor = x.constructor,
	    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);

	  return x.isNeg() ? '-' + str : str;
	};


	/*
	// Add aliases to match BigDecimal method names.
	// P.add = P.plus;
	P.subtract = P.minus;
	P.multiply = P.times;
	P.divide = P.div;
	P.remainder = P.mod;
	P.compareTo = P.cmp;
	P.negate = P.neg;
	 */


	// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.


	/*
	 *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
	 *                           finiteToString, naturalExponential, naturalLogarithm
	 *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
	 *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
	 *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
	 *  convertBase              toStringBinary, parseOther
	 *  cos                      P.cos
	 *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
	 *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
	 *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
	 *                           taylorSeries, atan2, parseOther
	 *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
	 *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
	 *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
	 *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
	 *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
	 *                           P.truncated, divide, getLn10, getPi, naturalExponential,
	 *                           naturalLogarithm, ceil, floor, round, trunc
	 *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
	 *                           toStringBinary
	 *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
	 *  getLn10                  P.logarithm, naturalLogarithm
	 *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
	 *  getPrecision             P.precision, P.toFraction
	 *  getZeroString            digitsToString, finiteToString
	 *  intPow                   P.toPower, parseOther
	 *  isOdd                    toLessThanHalfPi
	 *  maxOrMin                 max, min
	 *  naturalExponential       P.naturalExponential, P.toPower
	 *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
	 *                           P.toPower, naturalExponential
	 *  nonFiniteToString        finiteToString, toStringBinary
	 *  parseDecimal             Decimal
	 *  parseOther               Decimal
	 *  sin                      P.sin
	 *  taylorSeries             P.cosh, P.sinh, cos, sin
	 *  toLessThanHalfPi         P.cos, P.sin
	 *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
	 *  truncate                 intPow
	 *
	 *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
	 *                           naturalLogarithm, config, parseOther, random, Decimal
	 */


	function digitsToString(d) {
	  var i, k, ws,
	    indexOfLastWord = d.length - 1,
	    str = '',
	    w = d[0];

	  if (indexOfLastWord > 0) {
	    str += w;
	    for (i = 1; i < indexOfLastWord; i++) {
	      ws = d[i] + '';
	      k = LOG_BASE - ws.length;
	      if (k) str += getZeroString(k);
	      str += ws;
	    }

	    w = d[i];
	    ws = w + '';
	    k = LOG_BASE - ws.length;
	    if (k) str += getZeroString(k);
	  } else if (w === 0) {
	    return '0';
	  }

	  // Remove trailing zeros of last w.
	  for (; w % 10 === 0;) w /= 10;

	  return str + w;
	}


	function checkInt32(i, min, max) {
	  if (i !== ~~i || i < min || i > max) {
	    throw Error(invalidArgument + i);
	  }
	}


	/*
	 * Check 5 rounding digits if `repeating` is null, 4 otherwise.
	 * `repeating == null` if caller is `log` or `pow`,
	 * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
	 */
	function checkRoundingDigits(d, i, rm, repeating) {
	  var di, k, r, rd;

	  // Get the length of the first word of the array d.
	  for (k = d[0]; k >= 10; k /= 10) --i;

	  // Is the rounding digit in the first word of d?
	  if (--i < 0) {
	    i += LOG_BASE;
	    di = 0;
	  } else {
	    di = Math.ceil((i + 1) / LOG_BASE);
	    i %= LOG_BASE;
	  }

	  // i is the index (0 - 6) of the rounding digit.
	  // E.g. if within the word 3487563 the first rounding digit is 5,
	  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
	  k = mathpow(10, LOG_BASE - i);
	  rd = d[di] % k | 0;

	  if (repeating == null) {
	    if (i < 3) {
	      if (i == 0) rd = rd / 100 | 0;
	      else if (i == 1) rd = rd / 10 | 0;
	      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
	    } else {
	      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
	        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
	          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
	    }
	  } else {
	    if (i < 4) {
	      if (i == 0) rd = rd / 1000 | 0;
	      else if (i == 1) rd = rd / 100 | 0;
	      else if (i == 2) rd = rd / 10 | 0;
	      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
	    } else {
	      r = ((repeating || rm < 4) && rd + 1 == k ||
	      (!repeating && rm > 3) && rd + 1 == k / 2) &&
	        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
	    }
	  }

	  return r;
	}


	// Convert string of `baseIn` to an array of numbers of `baseOut`.
	// Eg. convertBase('255', 10, 16) returns [15, 15].
	// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	function convertBase(str, baseIn, baseOut) {
	  var j,
	    arr = [0],
	    arrL,
	    i = 0,
	    strL = str.length;

	  for (; i < strL;) {
	    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
	    arr[0] += NUMERALS.indexOf(str.charAt(i++));
	    for (j = 0; j < arr.length; j++) {
	      if (arr[j] > baseOut - 1) {
	        if (arr[j + 1] === void 0) arr[j + 1] = 0;
	        arr[j + 1] += arr[j] / baseOut | 0;
	        arr[j] %= baseOut;
	      }
	    }
	  }

	  return arr.reverse();
	}


	/*
	 * cos(x) = 1 - x^2/2! + x^4/4! - ...
	 * |x| < pi/2
	 *
	 */
	function cosine(Ctor, x) {
	  var k, y,
	    len = x.d.length;

	  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
	  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1

	  // Estimate the optimum number of times to use the argument reduction.
	  if (len < 32) {
	    k = Math.ceil(len / 3);
	    y = Math.pow(4, -k).toString();
	  } else {
	    k = 16;
	    y = '2.3283064365386962890625e-10';
	  }

	  Ctor.precision += k;

	  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));

	  // Reverse argument reduction
	  for (var i = k; i--;) {
	    var cos2x = x.times(x);
	    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
	  }

	  Ctor.precision -= k;

	  return x;
	}


	/*
	 * Perform division in the specified base.
	 */
	var divide = (function () {

	  // Assumes non-zero x and k, and hence non-zero result.
	  function multiplyInteger(x, k, base) {
	    var temp,
	      carry = 0,
	      i = x.length;

	    for (x = x.slice(); i--;) {
	      temp = x[i] * k + carry;
	      x[i] = temp % base | 0;
	      carry = temp / base | 0;
	    }

	    if (carry) x.unshift(carry);

	    return x;
	  }

	  function compare(a, b, aL, bL) {
	    var i, r;

	    if (aL != bL) {
	      r = aL > bL ? 1 : -1;
	    } else {
	      for (i = r = 0; i < aL; i++) {
	        if (a[i] != b[i]) {
	          r = a[i] > b[i] ? 1 : -1;
	          break;
	        }
	      }
	    }

	    return r;
	  }

	  function subtract(a, b, aL, base) {
	    var i = 0;

	    // Subtract b from a.
	    for (; aL--;) {
	      a[aL] -= i;
	      i = a[aL] < b[aL] ? 1 : 0;
	      a[aL] = i * base + a[aL] - b[aL];
	    }

	    // Remove leading zeros.
	    for (; !a[0] && a.length > 1;) a.shift();
	  }

	  return function (x, y, pr, rm, dp, base) {
	    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
	      yL, yz,
	      Ctor = x.constructor,
	      sign = x.s == y.s ? 1 : -1,
	      xd = x.d,
	      yd = y.d;

	    // Either NaN, Infinity or 0?
	    if (!xd || !xd[0] || !yd || !yd[0]) {

	      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
	        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :

	        // Return Â±0 if x is 0 or y is Â±Infinity, or return Â±Infinity as y is 0.
	        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
	    }

	    if (base) {
	      logBase = 1;
	      e = x.e - y.e;
	    } else {
	      base = BASE;
	      logBase = LOG_BASE;
	      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
	    }

	    yL = yd.length;
	    xL = xd.length;
	    q = new Ctor(sign);
	    qd = q.d = [];

	    // Result exponent may be one less than e.
	    // The digit array of a Decimal from toStringBinary may have trailing zeros.
	    for (i = 0; yd[i] == (xd[i] || 0); i++);

	    if (yd[i] > (xd[i] || 0)) e--;

	    if (pr == null) {
	      sd = pr = Ctor.precision;
	      rm = Ctor.rounding;
	    } else if (dp) {
	      sd = pr + (x.e - y.e) + 1;
	    } else {
	      sd = pr;
	    }

	    if (sd < 0) {
	      qd.push(1);
	      more = true;
	    } else {

	      // Convert precision in number of base 10 digits to base 1e7 digits.
	      sd = sd / logBase + 2 | 0;
	      i = 0;

	      // divisor < 1e7
	      if (yL == 1) {
	        k = 0;
	        yd = yd[0];
	        sd++;

	        // k is the carry.
	        for (; (i < xL || k) && sd--; i++) {
	          t = k * base + (xd[i] || 0);
	          qd[i] = t / yd | 0;
	          k = t % yd | 0;
	        }

	        more = k || i < xL;

	      // divisor >= 1e7
	      } else {

	        // Normalise xd and yd so highest order digit of yd is >= base/2
	        k = base / (yd[0] + 1) | 0;

	        if (k > 1) {
	          yd = multiplyInteger(yd, k, base);
	          xd = multiplyInteger(xd, k, base);
	          yL = yd.length;
	          xL = xd.length;
	        }

	        xi = yL;
	        rem = xd.slice(0, yL);
	        remL = rem.length;

	        // Add zeros to make remainder as long as divisor.
	        for (; remL < yL;) rem[remL++] = 0;

	        yz = yd.slice();
	        yz.unshift(0);
	        yd0 = yd[0];

	        if (yd[1] >= base / 2) ++yd0;

	        do {
	          k = 0;

	          // Compare divisor and remainder.
	          cmp = compare(yd, rem, yL, remL);

	          // If divisor < remainder.
	          if (cmp < 0) {

	            // Calculate trial digit, k.
	            rem0 = rem[0];
	            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	            // k will be how many times the divisor goes into the current remainder.
	            k = rem0 / yd0 | 0;

	            //  Algorithm:
	            //  1. product = divisor * trial digit (k)
	            //  2. if product > remainder: product -= divisor, k--
	            //  3. remainder -= product
	            //  4. if product was < remainder at 2:
	            //    5. compare new remainder and divisor
	            //    6. If remainder > divisor: remainder -= divisor, k++

	            if (k > 1) {
	              if (k >= base) k = base - 1;

	              // product = divisor * trial digit.
	              prod = multiplyInteger(yd, k, base);
	              prodL = prod.length;
	              remL = rem.length;

	              // Compare product and remainder.
	              cmp = compare(prod, rem, prodL, remL);

	              // product > remainder.
	              if (cmp == 1) {
	                k--;

	                // Subtract divisor from product.
	                subtract(prod, yL < prodL ? yz : yd, prodL, base);
	              }
	            } else {

	              // cmp is -1.
	              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
	              // to avoid it. If k is 1 there is a need to compare yd and rem again below.
	              if (k == 0) cmp = k = 1;
	              prod = yd.slice();
	            }

	            prodL = prod.length;
	            if (prodL < remL) prod.unshift(0);

	            // Subtract product from remainder.
	            subtract(rem, prod, remL, base);

	            // If product was < previous remainder.
	            if (cmp == -1) {
	              remL = rem.length;

	              // Compare divisor and new remainder.
	              cmp = compare(yd, rem, yL, remL);

	              // If divisor < new remainder, subtract divisor from remainder.
	              if (cmp < 1) {
	                k++;

	                // Subtract divisor from remainder.
	                subtract(rem, yL < remL ? yz : yd, remL, base);
	              }
	            }

	            remL = rem.length;
	          } else if (cmp === 0) {
	            k++;
	            rem = [0];
	          }    // if cmp === 1, k will be 0

	          // Add the next digit, k, to the result array.
	          qd[i++] = k;

	          // Update the remainder.
	          if (cmp && rem[0]) {
	            rem[remL++] = xd[xi] || 0;
	          } else {
	            rem = [xd[xi]];
	            remL = 1;
	          }

	        } while ((xi++ < xL || rem[0] !== void 0) && sd--);

	        more = rem[0] !== void 0;
	      }

	      // Leading zero?
	      if (!qd[0]) qd.shift();
	    }

	    // logBase is 1 when divide is being used for base conversion.
	    if (logBase == 1) {
	      q.e = e;
	      inexact = more;
	    } else {

	      // To calculate q.e, first get the number of digits of qd[0].
	      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
	      q.e = i + e * logBase - 1;

	      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
	    }

	    return q;
	  };
	})();


	/*
	 * Round `x` to `sd` significant digits using rounding mode `rm`.
	 * Check for over/under-flow.
	 */
	 function finalise(x, sd, rm, isTruncated) {
	  var digits, i, j, k, rd, roundUp, w, xd, xdi,
	    Ctor = x.constructor;

	  // Don't round if sd is null or undefined.
	  out: if (sd != null) {
	    xd = x.d;

	    // Infinity/NaN.
	    if (!xd) return x;

	    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
	    // w: the word of xd containing rd, a base 1e7 number.
	    // xdi: the index of w within xd.
	    // digits: the number of digits of w.
	    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
	    // they had leading zeros)
	    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

	    // Get the length of the first word of the digits array xd.
	    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
	    i = sd - digits;

	    // Is the rounding digit in the first word of xd?
	    if (i < 0) {
	      i += LOG_BASE;
	      j = sd;
	      w = xd[xdi = 0];

	      // Get the rounding digit at index j of w.
	      rd = w / mathpow(10, digits - j - 1) % 10 | 0;
	    } else {
	      xdi = Math.ceil((i + 1) / LOG_BASE);
	      k = xd.length;
	      if (xdi >= k) {
	        if (isTruncated) {

	          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
	          for (; k++ <= xdi;) xd.push(0);
	          w = rd = 0;
	          digits = 1;
	          i %= LOG_BASE;
	          j = i - LOG_BASE + 1;
	        } else {
	          break out;
	        }
	      } else {
	        w = k = xd[xdi];

	        // Get the number of digits of w.
	        for (digits = 1; k >= 10; k /= 10) digits++;

	        // Get the index of rd within w.
	        i %= LOG_BASE;

	        // Get the index of rd within w, adjusted for leading zeros.
	        // The number of leading zeros of w is given by LOG_BASE - digits.
	        j = i - LOG_BASE + digits;

	        // Get the rounding digit at index j of w.
	        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
	      }
	    }

	    // Are there any non-zero digits after the rounding digit?
	    isTruncated = isTruncated || sd < 0 ||
	      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));

	    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
	    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
	    // will give 714.

	    roundUp = rm < 4
	      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&

	        // Check whether the digit to the left of the rounding digit is odd.
	        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
	          rm == (x.s < 0 ? 8 : 7));

	    if (sd < 1 || !xd[0]) {
	      xd.length = 0;
	      if (roundUp) {

	        // Convert sd to decimal places.
	        sd -= x.e + 1;

	        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
	        x.e = -sd || 0;
	      } else {

	        // Zero.
	        xd[0] = x.e = 0;
	      }

	      return x;
	    }

	    // Remove excess digits.
	    if (i == 0) {
	      xd.length = xdi;
	      k = 1;
	      xdi--;
	    } else {
	      xd.length = xdi + 1;
	      k = mathpow(10, LOG_BASE - i);

	      // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	      // j > 0 means i > number of leading zeros of w.
	      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
	    }

	    if (roundUp) {
	      for (;;) {

	        // Is the digit to be rounded up in the first word of xd?
	        if (xdi == 0) {

	          // i will be the length of xd[0] before k is added.
	          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
	          j = xd[0] += k;
	          for (k = 1; j >= 10; j /= 10) k++;

	          // if i != k the length has increased.
	          if (i != k) {
	            x.e++;
	            if (xd[0] == BASE) xd[0] = 1;
	          }

	          break;
	        } else {
	          xd[xdi] += k;
	          if (xd[xdi] != BASE) break;
	          xd[xdi--] = 0;
	          k = 1;
	        }
	      }
	    }

	    // Remove trailing zeros.
	    for (i = xd.length; xd[--i] === 0;) xd.pop();
	  }

	  if (external) {

	    // Overflow?
	    if (x.e > Ctor.maxE) {

	      // Infinity.
	      x.d = null;
	      x.e = NaN;

	    // Underflow?
	    } else if (x.e < Ctor.minE) {

	      // Zero.
	      x.e = 0;
	      x.d = [0];
	      // Ctor.underflow = true;
	    } // else Ctor.underflow = false;
	  }

	  return x;
	}


	function finiteToString(x, isExp, sd) {
	  if (!x.isFinite()) return nonFiniteToString(x);
	  var k,
	    e = x.e,
	    str = digitsToString(x.d),
	    len = str.length;

	  if (isExp) {
	    if (sd && (k = sd - len) > 0) {
	      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
	    } else if (len > 1) {
	      str = str.charAt(0) + '.' + str.slice(1);
	    }

	    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
	  } else if (e < 0) {
	    str = '0.' + getZeroString(-e - 1) + str;
	    if (sd && (k = sd - len) > 0) str += getZeroString(k);
	  } else if (e >= len) {
	    str += getZeroString(e + 1 - len);
	    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
	  } else {
	    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
	    if (sd && (k = sd - len) > 0) {
	      if (e + 1 === len) str += '.';
	      str += getZeroString(k);
	    }
	  }

	  return str;
	}


	// Calculate the base 10 exponent from the base 1e7 exponent.
	function getBase10Exponent(digits, e) {
	  var w = digits[0];

	  // Add the number of digits of the first word of the digits array.
	  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
	  return e;
	}


	function getLn10(Ctor, sd, pr) {
	  if (sd > LN10_PRECISION) {

	    // Reset global state in case the exception is caught.
	    external = true;
	    if (pr) Ctor.precision = pr;
	    throw Error(precisionLimitExceeded);
	  }
	  return finalise(new Ctor(LN10), sd, 1, true);
	}


	function getPi(Ctor, sd, rm) {
	  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
	  return finalise(new Ctor(PI), sd, rm, true);
	}


	function getPrecision(digits) {
	  var w = digits.length - 1,
	    len = w * LOG_BASE + 1;

	  w = digits[w];

	  // If non-zero...
	  if (w) {

	    // Subtract the number of trailing zeros of the last word.
	    for (; w % 10 == 0; w /= 10) len--;

	    // Add the number of digits of the first word.
	    for (w = digits[0]; w >= 10; w /= 10) len++;
	  }

	  return len;
	}


	function getZeroString(k) {
	  var zs = '';
	  for (; k--;) zs += '0';
	  return zs;
	}


	/*
	 * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
	 * integer of type number.
	 *
	 * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
	 *
	 */
	function intPow(Ctor, x, n, pr) {
	  var isTruncated,
	    r = new Ctor(1),

	    // Max n of 9007199254740991 takes 53 loop iterations.
	    // Maximum digits array length; leaves [28, 34] guard digits.
	    k = Math.ceil(pr / LOG_BASE + 4);

	  external = false;

	  for (;;) {
	    if (n % 2) {
	      r = r.times(x);
	      if (truncate(r.d, k)) isTruncated = true;
	    }

	    n = mathfloor(n / 2);
	    if (n === 0) {

	      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
	      n = r.d.length - 1;
	      if (isTruncated && r.d[n] === 0) ++r.d[n];
	      break;
	    }

	    x = x.times(x);
	    truncate(x.d, k);
	  }

	  external = true;

	  return r;
	}


	function isOdd(n) {
	  return n.d[n.d.length - 1] & 1;
	}


	/*
	 * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
	 */
	function maxOrMin(Ctor, args, ltgt) {
	  var y,
	    x = new Ctor(args[0]),
	    i = 0;

	  for (; ++i < args.length;) {
	    y = new Ctor(args[i]);
	    if (!y.s) {
	      x = y;
	      break;
	    } else if (x[ltgt](y)) {
	      x = y;
	    }
	  }

	  return x;
	}


	/*
	 * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
	 * digits.
	 *
	 * Taylor/Maclaurin series.
	 *
	 * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
	 *
	 * Argument reduction:
	 *   Repeat x = x / 32, k += 5, until |x| < 0.1
	 *   exp(x) = exp(x / 2^k)^(2^k)
	 *
	 * Previously, the argument was initially reduced by
	 * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
	 * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
	 * found to be slower than just dividing repeatedly by 32 as above.
	 *
	 * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
	 * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
	 * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
	 *
	 *  exp(Infinity)  = Infinity
	 *  exp(-Infinity) = 0
	 *  exp(NaN)       = NaN
	 *  exp(Â±0)        = 1
	 *
	 *  exp(x) is non-terminating for any finite, non-zero x.
	 *
	 *  The result will always be correctly rounded.
	 *
	 */
	function naturalExponential(x, sd) {
	  var denominator, guard, j, pow, sum, t, wpr,
	    rep = 0,
	    i = 0,
	    k = 0,
	    Ctor = x.constructor,
	    rm = Ctor.rounding,
	    pr = Ctor.precision;

	  // 0/NaN/Infinity?
	  if (!x.d || !x.d[0] || x.e > 17) {

	    return new Ctor(x.d
	      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
	      : x.s ? x.s < 0 ? 0 : x : 0 / 0);
	  }

	  if (sd == null) {
	    external = false;
	    wpr = pr;
	  } else {
	    wpr = sd;
	  }

	  t = new Ctor(0.03125);

	  // while abs(x) >= 0.1
	  while (x.e > -2) {

	    // x = x / 2^5
	    x = x.times(t);
	    k += 5;
	  }

	  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
	  // necessary to ensure the first 4 rounding digits are correct.
	  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
	  wpr += guard;
	  denominator = pow = sum = new Ctor(1);
	  Ctor.precision = wpr;

	  for (;;) {
	    pow = finalise(pow.times(x), wpr, 1);
	    denominator = denominator.times(++i);
	    t = sum.plus(divide(pow, denominator, wpr, 1));

	    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	      j = k;
	      while (j--) sum = finalise(sum.times(sum), wpr, 1);

	      // Check to see if the first 4 rounding digits are [49]999.
	      // If so, repeat the summation with a higher precision, otherwise
	      // e.g. with precision: 18, rounding: 1
	      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
	      // `wpr - guard` is the index of first rounding digit.
	      if (sd == null) {

	        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	          Ctor.precision = wpr += 10;
	          denominator = pow = t = new Ctor(1);
	          i = 0;
	          rep++;
	        } else {
	          return finalise(sum, Ctor.precision = pr, rm, external = true);
	        }
	      } else {
	        Ctor.precision = pr;
	        return sum;
	      }
	    }

	    sum = t;
	  }
	}


	/*
	 * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
	 * digits.
	 *
	 *  ln(-n)        = NaN
	 *  ln(0)         = -Infinity
	 *  ln(-0)        = -Infinity
	 *  ln(1)         = 0
	 *  ln(Infinity)  = Infinity
	 *  ln(-Infinity) = NaN
	 *  ln(NaN)       = NaN
	 *
	 *  ln(n) (n != 1) is non-terminating.
	 *
	 */
	function naturalLogarithm(y, sd) {
	  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
	    n = 1,
	    guard = 10,
	    x = y,
	    xd = x.d,
	    Ctor = x.constructor,
	    rm = Ctor.rounding,
	    pr = Ctor.precision;

	  // Is x negative or Infinity, NaN, 0 or 1?
	  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
	    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
	  }

	  if (sd == null) {
	    external = false;
	    wpr = pr;
	  } else {
	    wpr = sd;
	  }

	  Ctor.precision = wpr += guard;
	  c = digitsToString(xd);
	  c0 = c.charAt(0);

	  if (Math.abs(e = x.e) < 1.5e15) {

	    // Argument reduction.
	    // The series converges faster the closer the argument is to 1, so using
	    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
	    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
	    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
	    // later be divided by this number, then separate out the power of 10 using
	    // ln(a*10^b) = ln(a) + b*ln(10).

	    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
	    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
	    // max n is 6 (gives 0.7 - 1.3)
	    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
	      x = x.times(y);
	      c = digitsToString(x.d);
	      c0 = c.charAt(0);
	      n++;
	    }

	    e = x.e;

	    if (c0 > 1) {
	      x = new Ctor('0.' + c);
	      e++;
	    } else {
	      x = new Ctor(c0 + '.' + c.slice(1));
	    }
	  } else {

	    // The argument reduction method above may result in overflow if the argument y is a massive
	    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
	    // function using ln(x*10^e) = ln(x) + e*ln(10).
	    t = getLn10(Ctor, wpr + 2, pr).times(e + '');
	    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
	    Ctor.precision = pr;

	    return sd == null ? finalise(x, pr, rm, external = true) : x;
	  }

	  // x1 is x reduced to a value near 1.
	  x1 = x;

	  // Taylor series.
	  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
	  // where x = (y - 1)/(y + 1)    (|x| < 1)
	  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
	  x2 = finalise(x.times(x), wpr, 1);
	  denominator = 3;

	  for (;;) {
	    numerator = finalise(numerator.times(x2), wpr, 1);
	    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));

	    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	      sum = sum.times(2);

	      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
	      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
	      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
	      sum = divide(sum, new Ctor(n), wpr, 1);

	      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
	      // been repeated previously) and the first 4 rounding digits 9999?
	      // If so, restart the summation with a higher precision, otherwise
	      // e.g. with precision: 12, rounding: 1
	      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
	      // `wpr - guard` is the index of first rounding digit.
	      if (sd == null) {
	        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	          Ctor.precision = wpr += guard;
	          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
	          x2 = finalise(x.times(x), wpr, 1);
	          denominator = rep = 1;
	        } else {
	          return finalise(sum, Ctor.precision = pr, rm, external = true);
	        }
	      } else {
	        Ctor.precision = pr;
	        return sum;
	      }
	    }

	    sum = t;
	    denominator += 2;
	  }
	}


	// Â±Infinity, NaN.
	function nonFiniteToString(x) {
	  // Unsigned.
	  return String(x.s * x.s / 0);
	}


	/*
	 * Parse the value of a new Decimal `x` from string `str`.
	 */
	function parseDecimal(x, str) {
	  var e, i, len;

	  // Decimal point?
	  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	  // Exponential form?
	  if ((i = str.search(/e/i)) > 0) {

	    // Determine exponent.
	    if (e < 0) e = i;
	    e += +str.slice(i + 1);
	    str = str.substring(0, i);
	  } else if (e < 0) {

	    // Integer.
	    e = str.length;
	  }

	  // Determine leading zeros.
	  for (i = 0; str.charCodeAt(i) === 48; i++);

	  // Determine trailing zeros.
	  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
	  str = str.slice(i, len);

	  if (str) {
	    len -= i;
	    x.e = e = e - i - 1;
	    x.d = [];

	    // Transform base

	    // e is the base 10 exponent.
	    // i is where to slice str to get the first word of the digits array.
	    i = (e + 1) % LOG_BASE;
	    if (e < 0) i += LOG_BASE;

	    if (i < len) {
	      if (i) x.d.push(+str.slice(0, i));
	      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
	      str = str.slice(i);
	      i = LOG_BASE - str.length;
	    } else {
	      i -= len;
	    }

	    for (; i--;) str += '0';
	    x.d.push(+str);

	    if (external) {

	      // Overflow?
	      if (x.e > x.constructor.maxE) {

	        // Infinity.
	        x.d = null;
	        x.e = NaN;

	      // Underflow?
	      } else if (x.e < x.constructor.minE) {

	        // Zero.
	        x.e = 0;
	        x.d = [0];
	        // x.constructor.underflow = true;
	      } // else x.constructor.underflow = false;
	    }
	  } else {

	    // Zero.
	    x.e = 0;
	    x.d = [0];
	  }

	  return x;
	}


	/*
	 * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
	 */
	function parseOther(x, str) {
	  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;

	  if (str === 'Infinity' || str === 'NaN') {
	    if (!+str) x.s = NaN;
	    x.e = NaN;
	    x.d = null;
	    return x;
	  }

	  if (isHex.test(str))  {
	    base = 16;
	    str = str.toLowerCase();
	  } else if (isBinary.test(str))  {
	    base = 2;
	  } else if (isOctal.test(str))  {
	    base = 8;
	  } else {
	    throw Error(invalidArgument + str);
	  }

	  // Is there a binary exponent part?
	  i = str.search(/p/i);

	  if (i > 0) {
	    p = +str.slice(i + 1);
	    str = str.substring(2, i);
	  } else {
	    str = str.slice(2);
	  }

	  // Convert `str` as an integer then divide the result by `base` raised to a power such that the
	  // fraction part will be restored.
	  i = str.indexOf('.');
	  isFloat = i >= 0;
	  Ctor = x.constructor;

	  if (isFloat) {
	    str = str.replace('.', '');
	    len = str.length;
	    i = len - i;

	    // log[10](16) = 1.2041... , log[10](88) = 1.9444....
	    divisor = intPow(Ctor, new Ctor(base), i, i * 2);
	  }

	  xd = convertBase(str, base, BASE);
	  xe = xd.length - 1;

	  // Remove trailing zeros.
	  for (i = xe; xd[i] === 0; --i) xd.pop();
	  if (i < 0) return new Ctor(x.s * 0);
	  x.e = getBase10Exponent(xd, xe);
	  x.d = xd;
	  external = false;

	  // At what precision to perform the division to ensure exact conversion?
	  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
	  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
	  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
	  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
	  // Therefore using 4 * the number of digits of str will always be enough.
	  if (isFloat) x = divide(x, divisor, len * 4);

	  // Multiply by the binary exponent part if present.
	  if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
	  external = true;

	  return x;
	}


	/*
	 * sin(x) = x - x^3/3! + x^5/5! - ...
	 * |x| < pi/2
	 *
	 */
	function sine(Ctor, x) {
	  var k,
	    len = x.d.length;

	  if (len < 3) return taylorSeries(Ctor, 2, x, x);

	  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
	  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
	  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))

	  // Estimate the optimum number of times to use the argument reduction.
	  k = 1.4 * Math.sqrt(len);
	  k = k > 16 ? 16 : k | 0;

	  // Max k before Math.pow precision loss is 22
	  x = x.times(Math.pow(5, -k));
	  x = taylorSeries(Ctor, 2, x, x);

	  // Reverse argument reduction
	  var sin2_x,
	    d5 = new Ctor(5),
	    d16 = new Ctor(16),
	    d20 = new Ctor(20);
	  for (; k--;) {
	    sin2_x = x.times(x);
	    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
	  }

	  return x;
	}


	// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
	function taylorSeries(Ctor, n, x, y, isHyperbolic) {
	  var j, t, u, x2,
	    pr = Ctor.precision,
	    k = Math.ceil(pr / LOG_BASE);

	  external = false;
	  x2 = x.times(x);
	  u = new Ctor(y);

	  for (;;) {
	    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
	    u = isHyperbolic ? y.plus(t) : y.minus(t);
	    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
	    t = u.plus(y);

	    if (t.d[k] !== void 0) {
	      for (j = k; t.d[j] === u.d[j] && j--;);
	      if (j == -1) break;
	    }

	    j = u;
	    u = y;
	    y = t;
	    t = j;
	  }

	  external = true;
	  t.d.length = k + 1;

	  return t;
	}


	// Return the absolute value of `x` reduced to less than or equal to half pi.
	function toLessThanHalfPi(Ctor, x) {
	  var t,
	    isNeg = x.s < 0,
	    pi = getPi(Ctor, Ctor.precision, 1),
	    halfPi = pi.times(0.5);

	  x = x.abs();

	  if (x.lte(halfPi)) {
	    quadrant = isNeg ? 4 : 1;
	    return x;
	  }

	  t = x.divToInt(pi);

	  if (t.isZero()) {
	    quadrant = isNeg ? 3 : 2;
	  } else {
	    x = x.minus(t.times(pi));

	    // 0 <= x < pi
	    if (x.lte(halfPi)) {
	      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
	      return x;
	    }

	    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
	  }

	  return x.minus(pi).abs();
	}


	/*
	 * Return the value of Decimal `x` as a string in base `baseOut`.
	 *
	 * If the optional `sd` argument is present include a binary exponent suffix.
	 */
	function toStringBinary(x, baseOut, sd, rm) {
	  var base, e, i, k, len, roundUp, str, xd, y,
	    Ctor = x.constructor,
	    isExp = sd !== void 0;

	  if (isExp) {
	    checkInt32(sd, 1, MAX_DIGITS);
	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);
	  } else {
	    sd = Ctor.precision;
	    rm = Ctor.rounding;
	  }

	  if (!x.isFinite()) {
	    str = nonFiniteToString(x);
	  } else {
	    str = finiteToString(x);
	    i = str.indexOf('.');

	    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
	    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
	    // minBinaryExponent = floor(decimalExponent * log[2](10))
	    // log[2](10) = 3.321928094887362347870319429489390175864

	    if (isExp) {
	      base = 2;
	      if (baseOut == 16) {
	        sd = sd * 4 - 3;
	      } else if (baseOut == 8) {
	        sd = sd * 3 - 2;
	      }
	    } else {
	      base = baseOut;
	    }

	    // Convert the number as an integer then divide the result by its base raised to a power such
	    // that the fraction part will be restored.

	    // Non-integer.
	    if (i >= 0) {
	      str = str.replace('.', '');
	      y = new Ctor(1);
	      y.e = str.length - i;
	      y.d = convertBase(finiteToString(y), 10, base);
	      y.e = y.d.length;
	    }

	    xd = convertBase(str, 10, base);
	    e = len = xd.length;

	    // Remove trailing zeros.
	    for (; xd[--len] == 0;) xd.pop();

	    if (!xd[0]) {
	      str = isExp ? '0p+0' : '0';
	    } else {
	      if (i < 0) {
	        e--;
	      } else {
	        x = new Ctor(x);
	        x.d = xd;
	        x.e = e;
	        x = divide(x, y, sd, rm, 0, base);
	        xd = x.d;
	        e = x.e;
	        roundUp = inexact;
	      }

	      // The rounding digit, i.e. the digit after the digit that may be rounded up.
	      i = xd[sd];
	      k = base / 2;
	      roundUp = roundUp || xd[sd + 1] !== void 0;

	      roundUp = rm < 4
	        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
	        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
	          rm === (x.s < 0 ? 8 : 7));

	      xd.length = sd;

	      if (roundUp) {

	        // Rounding up may mean the previous digit has to be rounded up and so on.
	        for (; ++xd[--sd] > base - 1;) {
	          xd[sd] = 0;
	          if (!sd) {
	            ++e;
	            xd.unshift(1);
	          }
	        }
	      }

	      // Determine trailing zeros.
	      for (len = xd.length; !xd[len - 1]; --len);

	      // E.g. [4, 11, 15] becomes 4bf.
	      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);

	      // Add binary exponent suffix?
	      if (isExp) {
	        if (len > 1) {
	          if (baseOut == 16 || baseOut == 8) {
	            i = baseOut == 16 ? 4 : 3;
	            for (--len; len % i; len++) str += '0';
	            xd = convertBase(str, base, baseOut);
	            for (len = xd.length; !xd[len - 1]; --len);

	            // xd[0] will always be be 1
	            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
	          } else {
	            str = str.charAt(0) + '.' + str.slice(1);
	          }
	        }

	        str =  str + (e < 0 ? 'p' : 'p+') + e;
	      } else if (e < 0) {
	        for (; ++e;) str = '0' + str;
	        str = '0.' + str;
	      } else {
	        if (++e > len) for (e -= len; e-- ;) str += '0';
	        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
	      }
	    }

	    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
	  }

	  return x.s < 0 ? '-' + str : str;
	}


	// Does not strip trailing zeros.
	function truncate(arr, len) {
	  if (arr.length > len) {
	    arr.length = len;
	    return true;
	  }
	}


	// Decimal methods


	/*
	 *  abs
	 *  acos
	 *  acosh
	 *  add
	 *  asin
	 *  asinh
	 *  atan
	 *  atanh
	 *  atan2
	 *  cbrt
	 *  ceil
	 *  clone
	 *  config
	 *  cos
	 *  cosh
	 *  div
	 *  exp
	 *  floor
	 *  hypot
	 *  ln
	 *  log
	 *  log2
	 *  log10
	 *  max
	 *  min
	 *  mod
	 *  mul
	 *  pow
	 *  random
	 *  round
	 *  set
	 *  sign
	 *  sin
	 *  sinh
	 *  sqrt
	 *  sub
	 *  tan
	 *  tanh
	 *  trunc
	 */


	/*
	 * Return a new Decimal whose value is the absolute value of `x`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function abs(x) {
	  return new this(x).abs();
	}


	/*
	 * Return a new Decimal whose value is the arccosine in radians of `x`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function acos(x) {
	  return new this(x).acos();
	}


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function acosh(x) {
	  return new this(x).acosh();
	}


	/*
	 * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function add(x, y) {
	  return new this(x).plus(y);
	}


	/*
	 * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function asin(x) {
	  return new this(x).asin();
	}


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function asinh(x) {
	  return new this(x).asinh();
	}


	/*
	 * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function atan(x) {
	  return new this(x).atan();
	}


	/*
	 * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
	 * `precision` significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function atanh(x) {
	  return new this(x).atanh();
	}


	/*
	 * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
	 * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 * Domain: [-Infinity, Infinity]
	 * Range: [-pi, pi]
	 *
	 * y {number|string|Decimal} The y-coordinate.
	 * x {number|string|Decimal} The x-coordinate.
	 *
	 * atan2(Â±0, -0)               = Â±pi
	 * atan2(Â±0, +0)               = Â±0
	 * atan2(Â±0, -x)               = Â±pi for x > 0
	 * atan2(Â±0, x)                = Â±0 for x > 0
	 * atan2(-y, Â±0)               = -pi/2 for y > 0
	 * atan2(y, Â±0)                = pi/2 for y > 0
	 * atan2(Â±y, -Infinity)        = Â±pi for finite y > 0
	 * atan2(Â±y, +Infinity)        = Â±0 for finite y > 0
	 * atan2(Â±Infinity, x)         = Â±pi/2 for finite x
	 * atan2(Â±Infinity, -Infinity) = Â±3*pi/4
	 * atan2(Â±Infinity, +Infinity) = Â±pi/4
	 * atan2(NaN, x) = NaN
	 * atan2(y, NaN) = NaN
	 *
	 */
	function atan2(y, x) {
	  y = new this(y);
	  x = new this(x);
	  var r,
	    pr = this.precision,
	    rm = this.rounding,
	    wpr = pr + 4;

	  // Either NaN
	  if (!y.s || !x.s) {
	    r = new this(NaN);

	  // Both Â±Infinity
	  } else if (!y.d && !x.d) {
	    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
	    r.s = y.s;

	  // x is Â±Infinity or y is Â±0
	  } else if (!x.d || y.isZero()) {
	    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
	    r.s = y.s;

	  // y is Â±Infinity or x is Â±0
	  } else if (!y.d || x.isZero()) {
	    r = getPi(this, wpr, 1).times(0.5);
	    r.s = y.s;

	  // Both non-zero and finite
	  } else if (x.s < 0) {
	    this.precision = wpr;
	    this.rounding = 1;
	    r = this.atan(divide(y, x, wpr, 1));
	    x = getPi(this, wpr, 1);
	    this.precision = pr;
	    this.rounding = rm;
	    r = y.s < 0 ? r.minus(x) : r.plus(x);
	  } else {
	    r = this.atan(divide(y, x, wpr, 1));
	  }

	  return r;
	}


	/*
	 * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function cbrt(x) {
	  return new this(x).cbrt();
	}


	/*
	 * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function ceil(x) {
	  return finalise(x = new this(x), x.e + 1, 2);
	}


	/*
	 * Configure global settings for a Decimal constructor.
	 *
	 * `obj` is an object with one or more of the following properties,
	 *
	 *   precision  {number}
	 *   rounding   {number}
	 *   toExpNeg   {number}
	 *   toExpPos   {number}
	 *   maxE       {number}
	 *   minE       {number}
	 *   modulo     {number}
	 *   crypto     {boolean|number}
	 *   defaults   {true}
	 *
	 * E.g. Decimal.config({ precision: 20, rounding: 4 })
	 *
	 */
	function config$1(obj) {
	  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
	  var i, p, v,
	    useDefaults = obj.defaults === true,
	    ps = [
	      'precision', 1, MAX_DIGITS,
	      'rounding', 0, 8,
	      'toExpNeg', -EXP_LIMIT, 0,
	      'toExpPos', 0, EXP_LIMIT,
	      'maxE', 0, EXP_LIMIT,
	      'minE', -EXP_LIMIT, 0,
	      'modulo', 0, 9
	    ];

	  for (i = 0; i < ps.length; i += 3) {
	    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];
	    if ((v = obj[p]) !== void 0) {
	      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
	      else throw Error(invalidArgument + p + ': ' + v);
	    }
	  }

	  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];
	  if ((v = obj[p]) !== void 0) {
	    if (v === true || v === false || v === 0 || v === 1) {
	      if (v) {
	        if (typeof crypto != 'undefined' && crypto &&
	          (crypto.getRandomValues || crypto.randomBytes)) {
	          this[p] = true;
	        } else {
	          throw Error(cryptoUnavailable);
	        }
	      } else {
	        this[p] = false;
	      }
	    } else {
	      throw Error(invalidArgument + p + ': ' + v);
	    }
	  }

	  return this;
	}


	/*
	 * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function cos(x) {
	  return new this(x).cos();
	}


	/*
	 * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function cosh(x) {
	  return new this(x).cosh();
	}


	/*
	 * Create and return a Decimal constructor with the same configuration properties as this Decimal
	 * constructor.
	 *
	 */
	function clone(obj) {
	  var i, p, ps;

	  /*
	   * The Decimal constructor and exported function.
	   * Return a new Decimal instance.
	   *
	   * v {number|string|Decimal} A numeric value.
	   *
	   */
	  function Decimal(v) {
	    var e, i, t,
	      x = this;

	    // Decimal called without new.
	    if (!(x instanceof Decimal)) return new Decimal(v);

	    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
	    // which points to Object.
	    x.constructor = Decimal;

	    // Duplicate.
	    if (v instanceof Decimal) {
	      x.s = v.s;
	      x.e = v.e;
	      x.d = (v = v.d) ? v.slice() : v;
	      return;
	    }

	    t = typeof v;

	    if (t === 'number') {
	      if (v === 0) {
	        x.s = 1 / v < 0 ? -1 : 1;
	        x.e = 0;
	        x.d = [0];
	        return;
	      }

	      if (v < 0) {
	        v = -v;
	        x.s = -1;
	      } else {
	        x.s = 1;
	      }

	      // Fast path for small integers.
	      if (v === ~~v && v < 1e7) {
	        for (e = 0, i = v; i >= 10; i /= 10) e++;
	        x.e = e;
	        x.d = [v];
	        return;

	      // Infinity, NaN.
	      } else if (v * 0 !== 0) {
	        if (!v) x.s = NaN;
	        x.e = NaN;
	        x.d = null;
	        return;
	      }

	      return parseDecimal(x, v.toString());

	    } else if (t !== 'string') {
	      throw Error(invalidArgument + v);
	    }

	    // Minus sign?
	    if (v.charCodeAt(0) === 45) {
	      v = v.slice(1);
	      x.s = -1;
	    } else {
	      x.s = 1;
	    }

	    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
	  }

	  Decimal.prototype = P;

	  Decimal.ROUND_UP = 0;
	  Decimal.ROUND_DOWN = 1;
	  Decimal.ROUND_CEIL = 2;
	  Decimal.ROUND_FLOOR = 3;
	  Decimal.ROUND_HALF_UP = 4;
	  Decimal.ROUND_HALF_DOWN = 5;
	  Decimal.ROUND_HALF_EVEN = 6;
	  Decimal.ROUND_HALF_CEIL = 7;
	  Decimal.ROUND_HALF_FLOOR = 8;
	  Decimal.EUCLID = 9;

	  Decimal.config = Decimal.set = config$1;
	  Decimal.clone = clone;
	  Decimal.isDecimal = isDecimalInstance;

	  Decimal.abs = abs;
	  Decimal.acos = acos;
	  Decimal.acosh = acosh;        // ES6
	  Decimal.add = add;
	  Decimal.asin = asin;
	  Decimal.asinh = asinh;        // ES6
	  Decimal.atan = atan;
	  Decimal.atanh = atanh;        // ES6
	  Decimal.atan2 = atan2;
	  Decimal.cbrt = cbrt;          // ES6
	  Decimal.ceil = ceil;
	  Decimal.cos = cos;
	  Decimal.cosh = cosh;          // ES6
	  Decimal.div = div;
	  Decimal.exp = exp;
	  Decimal.floor = floor;
	  Decimal.hypot = hypot;        // ES6
	  Decimal.ln = ln;
	  Decimal.log = log;
	  Decimal.log10 = log10;        // ES6
	  Decimal.log2 = log2;          // ES6
	  Decimal.max = max;
	  Decimal.min = min;
	  Decimal.mod = mod;
	  Decimal.mul = mul;
	  Decimal.pow = pow;
	  Decimal.random = random;
	  Decimal.round = round;
	  Decimal.sign = sign;          // ES6
	  Decimal.sin = sin;
	  Decimal.sinh = sinh;          // ES6
	  Decimal.sqrt = sqrt;
	  Decimal.sub = sub;
	  Decimal.tan = tan;
	  Decimal.tanh = tanh;          // ES6
	  Decimal.trunc = trunc;        // ES6

	  if (obj === void 0) obj = {};
	  if (obj) {
	    if (obj.defaults !== true) {
	      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
	      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
	    }
	  }

	  Decimal.config(obj);

	  return Decimal;
	}


	/*
	 * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function div(x, y) {
	  return new this(x).div(y);
	}


	/*
	 * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} The power to which to raise the base of the natural log.
	 *
	 */
	function exp(x) {
	  return new this(x).exp();
	}


	/*
	 * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function floor(x) {
	  return finalise(x = new this(x), x.e + 1, 3);
	}


	/*
	 * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
	 * rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
	 *
	 */
	function hypot() {
	  var i, n,
	    t = new this(0);

	  external = false;

	  for (i = 0; i < arguments.length;) {
	    n = new this(arguments[i++]);
	    if (!n.d) {
	      if (n.s) {
	        external = true;
	        return new this(1 / 0);
	      }
	      t = n;
	    } else if (t.d) {
	      t = t.plus(n.times(n));
	    }
	  }

	  external = true;

	  return t.sqrt();
	}


	/*
	 * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),
	 * otherwise return false.
	 *
	 */
	function isDecimalInstance(obj) {
	  return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;
	}


	/*
	 * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function ln(x) {
	  return new this(x).ln();
	}


	/*
	 * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
	 * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
	 *
	 * log[y](x)
	 *
	 * x {number|string|Decimal} The argument of the logarithm.
	 * y {number|string|Decimal} The base of the logarithm.
	 *
	 */
	function log(x, y) {
	  return new this(x).log(y);
	}


	/*
	 * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function log2(x) {
	  return new this(x).log(2);
	}


	/*
	 * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function log10(x) {
	  return new this(x).log(10);
	}


	/*
	 * Return a new Decimal whose value is the maximum of the arguments.
	 *
	 * arguments {number|string|Decimal}
	 *
	 */
	function max() {
	  return maxOrMin(this, arguments, 'lt');
	}


	/*
	 * Return a new Decimal whose value is the minimum of the arguments.
	 *
	 * arguments {number|string|Decimal}
	 *
	 */
	function min() {
	  return maxOrMin(this, arguments, 'gt');
	}


	/*
	 * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
	 * using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function mod(x, y) {
	  return new this(x).mod(y);
	}


	/*
	 * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function mul(x, y) {
	  return new this(x).mul(y);
	}


	/*
	 * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} The base.
	 * y {number|string|Decimal} The exponent.
	 *
	 */
	function pow(x, y) {
	  return new this(x).pow(y);
	}


	/*
	 * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
	 * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
	 * are produced).
	 *
	 * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
	 *
	 */
	function random(sd) {
	  var d, e, k, n,
	    i = 0,
	    r = new this(1),
	    rd = [];

	  if (sd === void 0) sd = this.precision;
	  else checkInt32(sd, 1, MAX_DIGITS);

	  k = Math.ceil(sd / LOG_BASE);

	  if (!this.crypto) {
	    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;

	  // Browsers supporting crypto.getRandomValues.
	  } else if (crypto.getRandomValues) {
	    d = crypto.getRandomValues(new Uint32Array(k));

	    for (; i < k;) {
	      n = d[i];

	      // 0 <= n < 4294967296
	      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
	      if (n >= 4.29e9) {
	        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
	      } else {

	        // 0 <= n <= 4289999999
	        // 0 <= (n % 1e7) <= 9999999
	        rd[i++] = n % 1e7;
	      }
	    }

	  // Node.js supporting crypto.randomBytes.
	  } else if (crypto.randomBytes) {

	    // buffer
	    d = crypto.randomBytes(k *= 4);

	    for (; i < k;) {

	      // 0 <= n < 2147483648
	      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);

	      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
	      if (n >= 2.14e9) {
	        crypto.randomBytes(4).copy(d, i);
	      } else {

	        // 0 <= n <= 2139999999
	        // 0 <= (n % 1e7) <= 9999999
	        rd.push(n % 1e7);
	        i += 4;
	      }
	    }

	    i = k / 4;
	  } else {
	    throw Error(cryptoUnavailable);
	  }

	  k = rd[--i];
	  sd %= LOG_BASE;

	  // Convert trailing digits to zeros according to sd.
	  if (k && sd) {
	    n = mathpow(10, LOG_BASE - sd);
	    rd[i] = (k / n | 0) * n;
	  }

	  // Remove trailing words which are zero.
	  for (; rd[i] === 0; i--) rd.pop();

	  // Zero?
	  if (i < 0) {
	    e = 0;
	    rd = [0];
	  } else {
	    e = -1;

	    // Remove leading words which are zero and adjust exponent accordingly.
	    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();

	    // Count the digits of the first word of rd to determine leading zeros.
	    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;

	    // Adjust the exponent for leading zeros of the first word of rd.
	    if (k < LOG_BASE) e -= LOG_BASE - k;
	  }

	  r.e = e;
	  r.d = rd;

	  return r;
	}


	/*
	 * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
	 *
	 * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function round(x) {
	  return finalise(x = new this(x), x.e + 1, this.rounding);
	}


	/*
	 * Return
	 *   1    if x > 0,
	 *  -1    if x < 0,
	 *   0    if x is 0,
	 *  -0    if x is -0,
	 *   NaN  otherwise
	 *
	 */
	function sign(x) {
	  x = new this(x);
	  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
	}


	/*
	 * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
	 * using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function sin(x) {
	  return new this(x).sin();
	}


	/*
	 * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function sinh(x) {
	  return new this(x).sinh();
	}


	/*
	 * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function sqrt(x) {
	  return new this(x).sqrt();
	}


	/*
	 * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
	 * using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal}
	 * y {number|string|Decimal}
	 *
	 */
	function sub(x, y) {
	  return new this(x).sub(y);
	}


	/*
	 * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
	 * digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function tan(x) {
	  return new this(x).tan();
	}


	/*
	 * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
	 * significant digits using rounding mode `rounding`.
	 *
	 * x {number|string|Decimal} A value in radians.
	 *
	 */
	function tanh(x) {
	  return new this(x).tanh();
	}


	/*
	 * Return a new Decimal whose value is `x` truncated to an integer.
	 *
	 * x {number|string|Decimal}
	 *
	 */
	function trunc(x) {
	  return finalise(x = new this(x), x.e + 1, 1);
	}


	// Create and configure initial Decimal constructor.
	var Decimal = clone(DEFAULTS);

	// Create the internal constants from their string values.
	LN10 = new Decimal(LN10);
	PI = new Decimal(PI);

	var decimal = /*#__PURE__*/Object.freeze({
		Decimal: Decimal,
		'default': Decimal
	});

	var require$$0 = getCjsExportFromNamespace(decimal);

	var BigNumber = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.factory = factory;
	exports.math = exports.path = exports.name = void 0;

	var _decimal = _interopRequireDefault(require$$0);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function factory(type, config, load, typed, math) {
	  var BigNumber = _decimal.default.clone({
	    precision: config.precision
	  });
	  /**
	   * Attach type information
	   */


	  BigNumber.prototype.type = 'BigNumber';
	  BigNumber.prototype.isBigNumber = true;
	  /**
	   * Get a JSON representation of a BigNumber containing
	   * type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
	   */

	  BigNumber.prototype.toJSON = function () {
	    return {
	      mathjs: 'BigNumber',
	      value: this.toString()
	    };
	  };
	  /**
	   * Instantiate a BigNumber from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
	   * @return {BigNumber}
	   */


	  BigNumber.fromJSON = function (json) {
	    return new BigNumber(json.value);
	  }; // listen for changed in the configuration, automatically apply changed precision


	  math.on('config', function (curr, prev) {
	    if (curr.precision !== prev.precision) {
	      BigNumber.config({
	        precision: curr.precision
	      });
	    }
	  });
	  return BigNumber;
	}

	var name = 'BigNumber';
	exports.name = name;
	var path = 'type';
	exports.path = path;
	var math = true; // request access to the math namespace

	exports.math = math;
	});

	unwrapExports(BigNumber);
	var BigNumber_1 = BigNumber.factory;
	var BigNumber_2 = BigNumber.math;
	var BigNumber_3 = BigNumber.path;
	var BigNumber_4 = BigNumber.name;

	/**
	 * Execute the callback function element wise for each element in array and any
	 * nested array
	 * Returns an array with the results
	 * @param {Array | Matrix} array
	 * @param {Function} callback   The callback is called with two parameters:
	 *                              value1 and value2, which contain the current
	 *                              element of both arrays.
	 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	 *
	 * @return {Array | Matrix} res
	 */

	var deepMap = function deepMap(array, callback, skipZeros) {
	  if (array && typeof array.map === 'function') {
	    // TODO: replace array.map with a for loop to improve performance
	    return array.map(function (x) {
	      return deepMap(x, callback);
	    });
	  } else {
	    return callback(array);
	  }
	};

	function factory$2(type, config, load, typed) {
	  /**
	   * Create a BigNumber, which can store numbers with arbitrary precision.
	   * When a matrix is provided, all elements will be converted to BigNumber.
	   *
	   * Syntax:
	   *
	   *    math.bignumber(x)
	   *
	   * Examples:
	   *
	   *    0.1 + 0.2                                  // returns number 0.30000000000000004
	   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3
	   *
	   *
	   *    7.2e500                                    // returns number Infinity
	   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500
	   *
	   * See also:
	   *
	   *    boolean, complex, index, matrix, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
	   *                                                    0 by default.
	   * @returns {BigNumber} The created bignumber
	   */
	  var bignumber = typed('bignumber', {
	    '': function _() {
	      return new type.BigNumber(0);
	    },
	    'number': function number(x) {
	      // convert to string to prevent errors in case of >15 digits
	      return new type.BigNumber(x + '');
	    },
	    'string': function string(x) {
	      return new type.BigNumber(x);
	    },
	    'BigNumber': function BigNumber(x) {
	      // we assume a BigNumber is immutable
	      return x;
	    },
	    'Fraction': function Fraction(x) {
	      return new type.BigNumber(x.n).div(x.d).times(x.s);
	    },
	    'null': function _null(x) {
	      return new type.BigNumber(0);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bignumber);
	    }
	  });
	  bignumber.toTex = {
	    0: '0',
	    1: "\\left(${args[0]}\\right)"
	  };
	  return bignumber;
	}

	var name$2 = 'bignumber';
	var factory_1$2 = factory$2;

	var bignumber = {
		name: name$2,
		factory: factory_1$2
	};

	var bignumber$1 = [// type
	BigNumber, // construction function
	bignumber];

	function factory$3(type, config, load, typed) {
	  /**
	   * Create a boolean or convert a string or number to a boolean.
	   * In case of a number, `true` is returned for non-zero numbers, and `false` in
	   * case of zero.
	   * Strings can be `'true'` or `'false'`, or can contain a number.
	   * When value is a matrix, all elements will be converted to boolean.
	   *
	   * Syntax:
	   *
	   *    math.boolean(x)
	   *
	   * Examples:
	   *
	   *    math.boolean(0)     // returns false
	   *    math.boolean(1)     // returns true
	   *    math.boolean(-3)     // returns true
	   *    math.boolean('true')     // returns true
	   *    math.boolean('false')     // returns false
	   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]
	   *
	   * See also:
	   *
	   *    bignumber, complex, index, matrix, string, unit
	   *
	   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
	   * @return {boolean | Array | Matrix} The boolean value
	   */
	  var bool = typed('bool', {
	    '': function _() {
	      return false;
	    },
	    'boolean': function boolean(x) {
	      return x;
	    },
	    'number': function number(x) {
	      return !!x;
	    },
	    'null': function _null(x) {
	      return false;
	    },
	    'BigNumber': function BigNumber(x) {
	      return !x.isZero();
	    },
	    'string': function string(x) {
	      // try case insensitive
	      var lcase = x.toLowerCase();

	      if (lcase === 'true') {
	        return true;
	      } else if (lcase === 'false') {
	        return false;
	      } // test whether value is a valid number


	      var num = Number(x);

	      if (x !== '' && !isNaN(num)) {
	        return !!num;
	      }

	      throw new Error('Cannot convert "' + x + '" to a boolean');
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bool);
	    }
	  });
	  return bool;
	}

	var name$3 = 'boolean';
	var factory_1$3 = factory$3;

	var boolean_1 = {
		name: name$3,
		factory: factory_1$3
	};

	var formatter = createCommonjsModule(function (module, exports) {


	/**
	 * Convert a BigNumber to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential',
	 *                                          'engineering', and 'auto',
	 *                                          `precision` defines the total
	 *                                          number of significant digits returned.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point.
	 *                                          `precision` is undefined by default.
	 *                     {number} lowerExp    Exponent determining the lower boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `-3`.
	 *                     {number} upperExp    Exponent determining the upper boundary
	 *                                          for formatting a value with an exponent
	 *                                          when `notation='auto`.
	 *                                          Default value is `5`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4)                                        // '6.4'
	 *    format(1240000)                                    // '1.24e6'
	 *    format(1/3)                                        // '0.3333333333333333'
	 *    format(1/3, 3)                                     // '0.333'
	 *    format(21385, 2)                                   // '21000'
	 *    format(12e8, {notation: 'fixed'})                  // returns '1200000000'
	 *    format(2.3,    {notation: 'fixed', precision: 4})  // returns '2.3000'
	 *    format(52.8,   {notation: 'exponential'})          // returns '5.28e+1'
	 *    format(12400,  {notation: 'engineering'})          // returns '12.400e+3'
	 *
	 * @param {BigNumber} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */


	exports.format = function (value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  } // handle special cases


	  if (!value.isFinite()) {
	    return value.isNaN() ? 'NaN' : value.gt(0) ? 'Infinity' : '-Infinity';
	  } // default values for options


	  var notation = 'auto';
	  var precision;

	  if (options !== undefined) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    } // determine precision from options


	    if (typeof options === 'number') {
	      precision = options;
	    } else if (options.precision) {
	      precision = options.precision;
	    }
	  } // handle the various notations


	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);

	    case 'exponential':
	      return exports.toExponential(value, precision);

	    case 'auto':
	      // TODO: clean up some day. Deprecated since: 2018-01-24
	      // @deprecated upper and lower are replaced with upperExp and lowerExp since v4.0.0
	      if (options && options.exponential && (options.exponential.lower !== undefined || options.exponential.upper !== undefined)) {
	        var fixedOptions = object.map(options, function (x) {
	          return x;
	        });
	        fixedOptions.exponential = undefined;

	        if (options.exponential.lower !== undefined) {
	          fixedOptions.lowerExp = Math.round(Math.log(options.exponential.lower) / Math.LN10);
	        }

	        if (options.exponential.upper !== undefined) {
	          fixedOptions.upperExp = Math.round(Math.log(options.exponential.upper) / Math.LN10);
	        }

	        console.warn('Deprecation warning: Formatting options exponential.lower and exponential.upper ' + '(minimum and maximum value) ' + 'are replaced with exponential.lowerExp and exponential.upperExp ' + '(minimum and maximum exponent) since version 4.0.0. ' + 'Replace ' + JSON.stringify(options) + ' with ' + JSON.stringify(fixedOptions));
	        return exports.format(value, fixedOptions);
	      } // determine lower and upper bound for exponential notation.
	      // TODO: implement support for upper and lower to be BigNumbers themselves


	      var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;
	      var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5; // handle special case zero

	      if (value.isZero()) return '0'; // determine whether or not to output exponential notation

	      var str;
	      var exp = value.e;

	      if (exp >= lowerExp && exp < upperExp) {
	        // normal number notation
	        str = value.toSignificantDigits(precision).toFixed();
	      } else {
	        // exponential notation
	        str = exports.toExponential(value, precision);
	      } // remove trailing zeros after the decimal point


	      return str.replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return digits !== '.' ? digits + e : e;
	      });

	    default:
	      throw new Error('Unknown notation "' + notation + '". ' + 'Choose "auto", "exponential", or "fixed".');
	  }
	};
	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {BigNumber} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */


	exports.toExponential = function (value, precision) {
	  if (precision !== undefined) {
	    return value.toExponential(precision - 1); // Note the offset of one
	  } else {
	    return value.toExponential();
	  }
	};
	/**
	 * Format a number with fixed notation.
	 * @param {BigNumber} value
	 * @param {number} [precision=undefined] Optional number of decimals after the
	 *                                       decimal point. Undefined by default.
	 */


	exports.toFixed = function (value, precision) {
	  return value.toFixed(precision);
	};
	});
	var formatter_1 = formatter.format;
	var formatter_2 = formatter.toExponential;
	var formatter_3 = formatter.toFixed;

	var string = createCommonjsModule(function (module, exports) {

	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

	var formatNumber = number.format;

	var formatBigNumber = formatter.format;


	/**
	 * Test whether value is a string
	 * @param {*} value
	 * @return {boolean} isString
	 */


	exports.isString = function (value) {
	  return typeof value === 'string';
	};
	/**
	 * Check if a text ends with a certain string.
	 * @param {string} text
	 * @param {string} search
	 */


	exports.endsWith = function (text, search) {
	  var start = text.length - search.length;
	  var end = text.length;
	  return text.substring(start, end) === search;
	};
	/**
	 * Format a value of any type into a string.
	 *
	 * Usage:
	 *     math.format(value)
	 *     math.format(value, precision)
	 *
	 * When value is a function:
	 *
	 * - When the function has a property `syntax`, it returns this
	 *   syntax description.
	 * - In other cases, a string `'function'` is returned.
	 *
	 * When `value` is an Object:
	 *
	 * - When the object contains a property `format` being a function, this
	 *   function is invoked as `value.format(options)` and the result is returned.
	 * - When the object has its own `toString` method, this method is invoked
	 *   and the result is returned.
	 * - In other cases the function will loop over all object properties and
	 *   return JSON object notation like '{"a": 2, "b": 3}'.
	 *
	 * Example usage:
	 *     math.format(2/7)                // '0.2857142857142857'
	 *     math.format(math.pi, 3)         // '3.14'
	 *     math.format(new Complex(2, 3))  // '2 + 3i'
	 *     math.format('hello')            // '"hello"'
	 *
	 * @param {*} value             Value to be stringified
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @return {string} str
	 */


	exports.format = function (value, options) {
	  if (typeof value === 'number') {
	    return formatNumber(value, options);
	  }

	  if (isBigNumber(value)) {
	    return formatBigNumber(value, options);
	  } // note: we use unsafe duck-typing here to check for Fractions, this is
	  // ok here since we're only invoking toString or concatenating its values


	  if (looksLikeFraction(value)) {
	    if (!options || options.fraction !== 'decimal') {
	      // output as ratio, like '1/3'
	      return value.s * value.n + '/' + value.d;
	    } else {
	      // output as decimal, like '0.(3)'
	      return value.toString();
	    }
	  }

	  if (Array.isArray(value)) {
	    return formatArray(value, options);
	  }

	  if (exports.isString(value)) {
	    return '"' + value + '"';
	  }

	  if (typeof value === 'function') {
	    return value.syntax ? String(value.syntax) : 'function';
	  }

	  if (value && _typeof(value) === 'object') {
	    if (typeof value.format === 'function') {
	      return value.format(options);
	    } else if (value && value.toString() !== {}.toString()) {
	      // this object has a non-native toString method, use that one
	      return value.toString();
	    } else {
	      var entries = [];

	      for (var key in value) {
	        if (value.hasOwnProperty(key)) {
	          entries.push('"' + key + '": ' + exports.format(value[key], options));
	        }
	      }

	      return '{' + entries.join(', ') + '}';
	    }
	  }

	  return String(value);
	};
	/**
	 * Stringify a value into a string enclosed in double quotes.
	 * Unescaped double quotes and backslashes inside the value are escaped.
	 * @param {*} value
	 * @return {string}
	 */


	exports.stringify = function (value) {
	  var text = String(value);
	  var escaped = '';
	  var i = 0;

	  while (i < text.length) {
	    var c = text.charAt(i);

	    if (c === '\\') {
	      escaped += c;
	      i++;
	      c = text.charAt(i);

	      if (c === '' || '"\\/bfnrtu'.indexOf(c) === -1) {
	        escaped += '\\'; // no valid escape character -> escape it
	      }

	      escaped += c;
	    } else if (c === '"') {
	      escaped += '\\"';
	    } else {
	      escaped += c;
	    }

	    i++;
	  }

	  return '"' + escaped + '"';
	};
	/**
	 * Escape special HTML characters
	 * @param {*} value
	 * @return {string}
	 */


	exports.escape = function (value) {
	  var text = String(value);
	  text = text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
	  return text;
	};
	/**
	 * Recursively format an n-dimensional matrix
	 * Example output: "[[1, 2], [3, 4]]"
	 * @param {Array} array
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @returns {string} str
	 */


	function formatArray(array, options) {
	  if (Array.isArray(array)) {
	    var str = '[';
	    var len = array.length;

	    for (var i = 0; i < len; i++) {
	      if (i !== 0) {
	        str += ', ';
	      }

	      str += formatArray(array[i], options);
	    }

	    str += ']';
	    return str;
	  } else {
	    return exports.format(array, options);
	  }
	}
	/**
	 * Check whether a value looks like a Fraction (unsafe duck-type check)
	 * @param {*} value
	 * @return {boolean}
	 */


	function looksLikeFraction(value) {
	  return value && _typeof(value) === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;
	}
	});
	var string_1 = string.isString;
	var string_2 = string.endsWith;
	var string_3 = string.format;
	var string_4 = string.stringify;
	var string_5 = string.escape;

	var format = string.format;

	var lazy$1 = object.lazy;

	function factory$4(type, config, load, typed, math) {
	  /**
	   * @constructor Chain
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing chain.done(), which will return
	   * the final value.
	   *
	   * The Chain has a number of special functions:
	   * - done()             Finalize the chained operation and return the
	   *                      chain's value.
	   * - valueOf()          The same as done()
	   * - toString()         Returns a string representation of the chain's value.
	   *
	   * @param {*} [value]
	   */
	  function Chain(value) {
	    if (!(this instanceof Chain)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (type.isChain(value)) {
	      this.value = value.value;
	    } else {
	      this.value = value;
	    }
	  }
	  /**
	   * Attach type information
	   */


	  Chain.prototype.type = 'Chain';
	  Chain.prototype.isChain = true;
	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method valueOf()
	   * @returns {*} value
	   */

	  Chain.prototype.done = function () {
	    return this.value;
	  };
	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method done()
	   * @returns {*} value
	   */


	  Chain.prototype.valueOf = function () {
	    return this.value;
	  };
	  /**
	   * Get a string representation of the value in the chain
	   * @returns {string}
	   */


	  Chain.prototype.toString = function () {
	    return format(this.value);
	  };
	  /**
	   * Get a JSON representation of the chain
	   * @returns {Object}
	   */


	  Chain.prototype.toJSON = function () {
	    return {
	      mathjs: 'Chain',
	      value: this.value
	    };
	  };
	  /**
	   * Instantiate a Chain from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "Chain", value: ...}`,
	   *                       where mathjs is optional
	   * @returns {Chain}
	   */


	  Chain.fromJSON = function (json) {
	    return new Chain(json.value);
	  };
	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {Function} fn      The function to be proxied
	   *                           If fn is no function, it is silently ignored.
	   * @private
	   */


	  function createProxy(name, fn) {
	    if (typeof fn === 'function') {
	      Chain.prototype[name] = chainify(fn);
	    }
	  }
	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {function} resolver   The function resolving with the
	   *                              function to be proxied
	   * @private
	   */


	  function createLazyProxy(name, resolver) {
	    lazy$1(Chain.prototype, name, function outerResolver() {
	      var fn = resolver();

	      if (typeof fn === 'function') {
	        return chainify(fn);
	      }

	      return undefined; // if not a function, ignore
	    });
	  }
	  /**
	   * Make a function chainable
	   * @param {function} fn
	   * @return {Function} chain function
	   * @private
	   */


	  function chainify(fn) {
	    return function () {
	      var args = [this.value]; // `this` will be the context of a Chain instance

	      for (var i = 0; i < arguments.length; i++) {
	        args[i + 1] = arguments[i];
	      }

	      return new Chain(fn.apply(fn, args));
	    };
	  }
	  /**
	   * Create a proxy for a single method, or an object with multiple methods.
	   * Example usage:
	   *
	   *   Chain.createProxy('add', function add (x, y) {...})
	   *   Chain.createProxy({
	   *     add:      function add (x, y) {...},
	   *     subtract: function subtract (x, y) {...}
	   *   }
	   *
	   * @param {string | Object} arg0   A name (string), or an object with
	   *                                 functions
	   * @param {*} [arg1]               A function, when arg0 is a name
	   */


	  Chain.createProxy = function (arg0, arg1) {
	    if (typeof arg0 === 'string') {
	      // createProxy(name, value)
	      createProxy(arg0, arg1);
	    } else {
	      // createProxy(values)
	      for (var prop in arg0) {
	        if (arg0.hasOwnProperty(prop)) {
	          createProxy(prop, arg0[prop]);
	        }
	      }
	    }
	  }; // create proxy for everything that is in math.js


	  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.

	  math.on('import', function (name, resolver, path) {
	    if (path === undefined) {
	      // an imported function (not a data type or something special)
	      createLazyProxy(name, resolver);
	    }
	  });
	  return Chain;
	}

	var name$4 = 'Chain';
	var path = 'type';
	var factory_1$4 = factory$4;
	var math$2 = true; // require providing the math namespace as 5th argument

	var lazy_1$1 = false; // we need to register a listener on the import events, so no lazy loading

	var Chain = {
		name: name$4,
		path: path,
		factory: factory_1$4,
		math: math$2,
		lazy: lazy_1$1
	};

	function factory$5(type, config, load, typed) {
	  /**
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing `chain.done()`, which returns
	   * the final value.
	   *
	   * The chain has a number of special functions:
	   *
	   * - `done()`     Finalize the chain and return the chain's value.
	   * - `valueOf()`  The same as `done()`
	   * - `toString()` Executes `math.format()` onto the chain's value, returning
	   *                a string representation of the value.
	   *
	   * Syntax:
	   *
	   *    math.chain(value)
	   *
	   * Examples:
	   *
	   *     math.chain(3)
	   *         .add(4)
	   *         .subtract(2)
	   *         .done()     // 5
	   *
	   *     math.chain( [[1, 2], [3, 4]] )
	   *         .subset(math.index(0, 0), 8)
	   *         .multiply(3)
	   *         .done()     // [[24, 6], [9, 12]]
	   *
	   * @param {*} [value]   A value of any type on which to start a chained operation.
	   * @return {math.type.Chain} The created chain
	   */
	  return typed('chain', {
	    '': function _() {
	      return new type.Chain();
	    },
	    'any': function any(value) {
	      return new type.Chain(value);
	    }
	  });
	}

	var name$5 = 'chain';
	var factory_1$5 = factory$5;

	var chain = {
		name: name$5,
		factory: factory_1$5
	};

	var chain$1 = [// type
	Chain, // construction function
	chain];

	var complex = createCommonjsModule(function (module, exports) {
	/**
	 * @license Complex.js v2.0.11 11/02/2016
	 *
	 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/

	/**
	 *
	 * This class allows the manipulation of complex numbers.
	 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
	 *
	 * Object form
	 * { re: <real>, im: <imaginary> }
	 * { arg: <angle>, abs: <radius> }
	 * { phi: <angle>, r: <radius> }
	 *
	 * Array / Vector form
	 * [ real, imaginary ]
	 *
	 * Double form
	 * 99.3 - Single double value
	 *
	 * String form
	 * '23.1337' - Simple real number
	 * '15+3i' - a simple complex number
	 * '3-i' - a simple complex number
	 *
	 * Example:
	 *
	 * var c = new Complex('99.3+8i');
	 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
	 *
	 */

	(function(root) {

	  var cosh = function(x) {
	    return (Math.exp(x) + Math.exp(-x)) * 0.5;
	  };

	  var sinh = function(x) {
	    return (Math.exp(x) - Math.exp(-x)) * 0.5;
	  };

	  /**
	   * Calculates cos(x) - 1 using Taylor series if x is small.
	   *
	   * @param {number} x
	   * @returns {number} cos(x) - 1
	   */

	  var cosm1 = function(x) {
	    var limit = Math.PI/4;
	    if (x < -limit || x > limit) {
	      return (Math.cos(x) - 1.0);
	    }

	    var xx = x * x;
	    return xx *
	      (-0.5 + xx *
	        (1/24 + xx *
	          (-1/720 + xx *
	            (1/40320 + xx *
	              (-1/3628800 + xx *
	                (1/4790014600 + xx *
	                  (-1/87178291200 + xx *
	                    (1/20922789888000)
	                  )
	                )
	              )
	            )
	          )
	        )
	      )
	  };

	  var hypot = function(x, y) {

	    var a = Math.abs(x);
	    var b = Math.abs(y);

	    if (a < 3000 && b < 3000) {
	      return Math.sqrt(a * a + b * b);
	    }

	    if (a < b) {
	      a = b;
	      b = x / y;
	    } else {
	      b = y / x;
	    }
	    return a * Math.sqrt(1 + b * b);
	  };

	  var parser_exit = function() {
	    throw SyntaxError('Invalid Param');
	  };

	  /**
	   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
	   *
	   * @param {number} a
	   * @param {number} b
	   * @returns {number}
	   */
	  function logHypot(a, b) {

	    var _a = Math.abs(a);
	    var _b = Math.abs(b);

	    if (a === 0) {
	      return Math.log(_b);
	    }

	    if (b === 0) {
	      return Math.log(_a);
	    }

	    if (_a < 3000 && _b < 3000) {
	      return Math.log(a * a + b * b) * 0.5;
	    }

	    /* I got 4 ideas to compute this property without overflow:
	     *
	     * Testing 1000000 times with random samples for a,b â [1, 1000000000] against a big decimal library to get an error estimate
	     *
	     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)

	     Math.log(a * a + b * b) / 2

	     *
	     *
	     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)

	     var fn = function(a, b) {
	     a = Math.abs(a);
	     b = Math.abs(b);
	     var t = Math.min(a, b);
	     a = Math.max(a, b);
	     t = t / a;

	     return Math.log(a) + Math.log(1 + t * t) / 2;
	     };

	     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)

	     Math.log(a / Math.cos(Math.atan2(b, a)))

	     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)

	     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))

	     */

	    return Math.log(a / Math.cos(Math.atan2(b, a)));
	  }

	  var parse = function(a, b) {

	    var z = {'re': 0, 'im': 0};

	    if (a === undefined || a === null) {
	      z['re'] =
	              z['im'] = 0;
	    } else if (b !== undefined) {
	      z['re'] = a;
	      z['im'] = b;
	    } else
	      switch (typeof a) {

	        case 'object':

	          if ('im' in a && 're' in a) {
	            z['re'] = a['re'];
	            z['im'] = a['im'];
	          } else if ('abs' in a && 'arg' in a) {
	            if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
	              return Complex['INFINITY'];
	            }
	            z['re'] = a['abs'] * Math.cos(a['arg']);
	            z['im'] = a['abs'] * Math.sin(a['arg']);
	          } else if ('r' in a && 'phi' in a) {
	            if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
	              return Complex['INFINITY'];
	            }
	            z['re'] = a['r'] * Math.cos(a['phi']);
	            z['im'] = a['r'] * Math.sin(a['phi']);
	          } else if (a.length === 2) { // Quick array check
	            z['re'] = a[0];
	            z['im'] = a[1];
	          } else {
	            parser_exit();
	          }
	          break;

	        case 'string':

	          z['im'] = /* void */
	                  z['re'] = 0;

	          var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
	          var plus = 1;
	          var minus = 0;

	          if (tokens === null) {
	            parser_exit();
	          }

	          for (var i = 0; i < tokens.length; i++) {

	            var c = tokens[i];

	            if (c === ' ' || c === '\t' || c === '\n') ; else if (c === '+') {
	              plus++;
	            } else if (c === '-') {
	              minus++;
	            } else if (c === 'i' || c === 'I') {

	              if (plus + minus === 0) {
	                parser_exit();
	              }

	              if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
	                i++;
	              } else {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
	              }
	              plus = minus = 0;

	            } else {

	              if (plus + minus === 0 || isNaN(c)) {
	                parser_exit();
	              }

	              if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
	                z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
	                i++;
	              } else {
	                z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
	              }
	              plus = minus = 0;
	            }
	          }

	          // Still something on the stack
	          if (plus + minus > 0) {
	            parser_exit();
	          }
	          break;

	        case 'number':
	          z['im'] = 0;
	          z['re'] = a;
	          break;

	        default:
	          parser_exit();
	      }

	    return z;
	  };

	  /**
	   * @constructor
	   * @returns {Complex}
	   */
	  function Complex(a, b) {

	    if (!(this instanceof Complex)) {
	      return new Complex(a, b);
	    }

	    var z = parse(a, b);

	    this['re'] = z['re'];
	    this['im'] = z['im'];
	  }

	  Complex.prototype = {

	    're': 0,
	    'im': 0,

	    /**
	     * Calculates the sign of a complex number, which is a normalized complex
	     *
	     * @returns {Complex}
	     */
	    'sign': function() {

	      var abs = this['abs']();

	      return new Complex(
	              this['re'] / abs,
	              this['im'] / abs);
	    },

	    /**
	     * Adds two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'add': function(a, b) {

	      var z = new Complex(a, b);

	      // Infinity + Infinity = NaN
	      if (this['isInfinite']() && z['isInfinite']()) {
	        return Complex['NAN'];
	      }

	      // Infinity + z = Infinity { where z != Infinity }
	      if (this['isInfinite']() || z['isInfinite']()) {
	        return Complex['INFINITY'];
	      }

	      return new Complex(
	              this['re'] + z['re'],
	              this['im'] + z['im']);
	    },

	    /**
	     * Subtracts two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'sub': function(a, b) {

	      var z = new Complex(a, b);

	      // Infinity - Infinity = NaN
	      if (this['isInfinite']() && z['isInfinite']()) {
	        return Complex['NAN'];
	      }

	      // Infinity - z = Infinity { where z != Infinity }
	      if (this['isInfinite']() || z['isInfinite']()) {
	        return Complex['INFINITY'];
	      }

	      return new Complex(
	              this['re'] - z['re'],
	              this['im'] - z['im']);
	    },

	    /**
	     * Multiplies two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'mul': function(a, b) {

	      var z = new Complex(a, b);

	      // Infinity * 0 = NaN
	      if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
	        return Complex['NAN'];
	      }

	      // Infinity * z = Infinity { where z != 0 }
	      if (this['isInfinite']() || z['isInfinite']()) {
	        return Complex['INFINITY'];
	      }

	      // Short circuit for real values
	      if (z['im'] === 0 && this['im'] === 0) {
	        return new Complex(this['re'] * z['re'], 0);
	      }

	      return new Complex(
	              this['re'] * z['re'] - this['im'] * z['im'],
	              this['re'] * z['im'] + this['im'] * z['re']);
	    },

	    /**
	     * Divides two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'div': function(a, b) {

	      var z = new Complex(a, b);

	      // 0 / 0 = NaN and Infinity / Infinity = NaN
	      if ((this['isZero']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {
	        return Complex['NAN'];
	      }

	      // Infinity / 0 = Infinity
	      if (this['isInfinite']() || z['isZero']()) {
	        return Complex['INFINITY'];
	      }

	      // 0 / Infinity = 0
	      if (this['isZero']() || z['isInfinite']()) {
	        return Complex['ZERO'];
	      }

	      a = this['re'];
	      b = this['im'];

	      var c = z['re'];
	      var d = z['im'];
	      var t, x;

	      if (0 === d) {
	        // Divisor is real
	        return new Complex(a / c, b / c);
	      }

	      if (Math.abs(c) < Math.abs(d)) {

	        x = c / d;
	        t = c * x + d;

	        return new Complex(
	                (a * x + b) / t,
	                (b * x - a) / t);

	      } else {

	        x = d / c;
	        t = d * x + c;

	        return new Complex(
	                (a + b * x) / t,
	                (b - a * x) / t);
	      }
	    },

	    /**
	     * Calculate the power of two complex numbers
	     *
	     * @returns {Complex}
	     */
	    'pow': function(a, b) {

	      var z = new Complex(a, b);

	      a = this['re'];
	      b = this['im'];

	      if (z['isZero']()) {
	        return Complex['ONE'];
	      }

	      // If the exponent is real
	      if (z['im'] === 0) {

	        if (b === 0 && a >= 0) {

	          return new Complex(Math.pow(a, z['re']), 0);

	        } else if (a === 0) { // If base is fully imaginary

	          switch ((z['re'] % 4 + 4) % 4) {
	            case 0:
	              return new Complex(Math.pow(b, z['re']), 0);
	            case 1:
	              return new Complex(0, Math.pow(b, z['re']));
	            case 2:
	              return new Complex(-Math.pow(b, z['re']), 0);
	            case 3:
	              return new Complex(0, -Math.pow(b, z['re']));
	          }
	        }
	      }

	      /* I couldn't find a good formula, so here is a derivation and optimization
	       *
	       * z_1^z_2 = (a + bi)^(c + di)
	       *         = exp((c + di) * log(a + bi)
	       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
	       * =>...
	       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	       *
	       * =>...
	       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	       *
	       * =>
	       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
	       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
	       *
	       */

	      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
	        return Complex['ZERO'];
	      }

	      var arg = Math.atan2(b, a);
	      var loh = logHypot(a, b);

	      a = Math.exp(z['re'] * loh - z['im'] * arg);
	      b = z['im'] * loh + z['re'] * arg;
	      return new Complex(
	              a * Math.cos(b),
	              a * Math.sin(b));
	    },

	    /**
	     * Calculate the complex square root
	     *
	     * @returns {Complex}
	     */
	    'sqrt': function() {

	      var a = this['re'];
	      var b = this['im'];
	      var r = this['abs']();

	      var re, im;

	      if (a >= 0) {

	        if (b === 0) {
	          return new Complex(Math.sqrt(a), 0);
	        }

	        re = 0.5 * Math.sqrt(2.0 * (r + a));
	      } else {
	        re = Math.abs(b) / Math.sqrt(2 * (r - a));
	      }

	      if (a <= 0) {
	        im = 0.5 * Math.sqrt(2.0 * (r - a));
	      } else {
	        im = Math.abs(b) / Math.sqrt(2 * (r + a));
	      }

	      return new Complex(re, b < 0 ? -im : im);
	    },

	    /**
	     * Calculate the complex exponent
	     *
	     * @returns {Complex}
	     */
	    'exp': function() {

	      var tmp = Math.exp(this['re']);

	      if (this['im'] === 0) ;
	      return new Complex(
	              tmp * Math.cos(this['im']),
	              tmp * Math.sin(this['im']));
	    },

	    /**
	     * Calculate the complex exponent and subtracts one.
	     *
	     * This may be more accurate than `Complex(x).exp().sub(1)` if
	     * `x` is small.
	     *
	     * @returns {Complex}
	     */
	    'expm1': function() {

	      /**
	       * exp(a + i*b) - 1
	       = exp(a) * (cos(b) + j*sin(b)) - 1
	       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
	       */

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              Math.expm1(a) * Math.cos(b) + cosm1(b),
	              Math.exp(a) * Math.sin(b));
	    },

	    /**
	     * Calculate the natural log
	     *
	     * @returns {Complex}
	     */
	    'log': function() {

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              logHypot(a, b),
	              Math.atan2(b, a));
	    },

	    /**
	     * Calculate the magnitude of the complex number
	     *
	     * @returns {number}
	     */
	    'abs': function() {

	      return hypot(this['re'], this['im']);
	    },

	    /**
	     * Calculate the angle of the complex number
	     *
	     * @returns {number}
	     */
	    'arg': function() {

	      return Math.atan2(this['im'], this['re']);
	    },

	    /**
	     * Calculate the sine of the complex number
	     *
	     * @returns {Complex}
	     */
	    'sin': function() {

	      // sin(c) = (e^b - e^(-b)) / (2i)

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              Math.sin(a) * cosh(b),
	              Math.cos(a) * sinh(b));
	    },

	    /**
	     * Calculate the cosine
	     *
	     * @returns {Complex}
	     */
	    'cos': function() {

	      // cos(z) = (e^b + e^(-b)) / 2

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              Math.cos(a) * cosh(b),
	              -Math.sin(a) * sinh(b));
	    },

	    /**
	     * Calculate the tangent
	     *
	     * @returns {Complex}
	     */
	    'tan': function() {

	      // tan(c) = (e^(ci) - e^(-ci)) / (i(e^(ci) + e^(-ci)))

	      var a = 2 * this['re'];
	      var b = 2 * this['im'];
	      var d = Math.cos(a) + cosh(b);

	      return new Complex(
	              Math.sin(a) / d,
	              sinh(b) / d);
	    },

	    /**
	     * Calculate the cotangent
	     *
	     * @returns {Complex}
	     */
	    'cot': function() {

	      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

	      var a = 2 * this['re'];
	      var b = 2 * this['im'];
	      var d = Math.cos(a) - cosh(b);

	      return new Complex(
	              -Math.sin(a) / d,
	              sinh(b) / d);
	    },

	    /**
	     * Calculate the secant
	     *
	     * @returns {Complex}
	     */
	    'sec': function() {

	      // sec(c) = 2 / (e^(ci) + e^(-ci))

	      var a = this['re'];
	      var b = this['im'];
	      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

	      return new Complex(
	              Math.cos(a) * cosh(b) / d,
	              Math.sin(a) * sinh(b) / d);
	    },

	    /**
	     * Calculate the cosecans
	     *
	     * @returns {Complex}
	     */
	    'csc': function() {

	      // csc(c) = 2i / (e^(ci) - e^(-ci))

	      var a = this['re'];
	      var b = this['im'];
	      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

	      return new Complex(
	              Math.sin(a) * cosh(b) / d,
	              -Math.cos(a) * sinh(b) / d);
	    },

	    /**
	     * Calculate the complex arcus sinus
	     *
	     * @returns {Complex}
	     */
	    'asin': function() {

	      // asin(c) = -i * log(ci + sqrt(1 - c^2))

	      var a = this['re'];
	      var b = this['im'];

	      var t1 = new Complex(
	              b * b - a * a + 1,
	              -2 * a * b)['sqrt']();

	      var t2 = new Complex(
	              t1['re'] - b,
	              t1['im'] + a)['log']();

	      return new Complex(t2['im'], -t2['re']);
	    },

	    /**
	     * Calculate the complex arcus cosinus
	     *
	     * @returns {Complex}
	     */
	    'acos': function() {

	      // acos(c) = i * log(c - i * sqrt(1 - c^2))

	      var a = this['re'];
	      var b = this['im'];

	      var t1 = new Complex(
	              b * b - a * a + 1,
	              -2 * a * b)['sqrt']();

	      var t2 = new Complex(
	              t1['re'] - b,
	              t1['im'] + a)['log']();

	      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
	    },

	    /**
	     * Calculate the complex arcus tangent
	     *
	     * @returns {Complex}
	     */
	    'atan': function() {

	      // atan(c) = i / 2 log((i + x) / (i - x))

	      var a = this['re'];
	      var b = this['im'];

	      if (a === 0) {

	        if (b === 1) {
	          return new Complex(0, Infinity);
	        }

	        if (b === -1) {
	          return new Complex(0, -Infinity);
	        }
	      }

	      var d = a * a + (1.0 - b) * (1.0 - b);

	      var t1 = new Complex(
	              (1 - b * b - a * a) / d,
	              -2 * a / d).log();

	      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
	    },

	    /**
	     * Calculate the complex arcus cotangent
	     *
	     * @returns {Complex}
	     */
	    'acot': function() {

	      // acot(c) = i / 2 log((c - i) / (c + i))

	      var a = this['re'];
	      var b = this['im'];

	      if (b === 0) {
	        return new Complex(Math.atan2(1, a), 0);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).atan()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).atan();
	    },

	    /**
	     * Calculate the complex arcus secant
	     *
	     * @returns {Complex}
	     */
	    'asec': function() {

	      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

	      var a = this['re'];
	      var b = this['im'];

	      if (a === 0 && b === 0) {
	        return new Complex(0, Infinity);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).acos()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).acos();
	    },

	    /**
	     * Calculate the complex arcus cosecans
	     *
	     * @returns {Complex}
	     */
	    'acsc': function() {

	      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

	      var a = this['re'];
	      var b = this['im'];

	      if (a === 0 && b === 0) {
	        return new Complex(Math.PI / 2, Infinity);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).asin()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).asin();
	    },

	    /**
	     * Calculate the complex sinh
	     *
	     * @returns {Complex}
	     */
	    'sinh': function() {

	      // sinh(c) = (e^c - e^-c) / 2

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              sinh(a) * Math.cos(b),
	              cosh(a) * Math.sin(b));
	    },

	    /**
	     * Calculate the complex cosh
	     *
	     * @returns {Complex}
	     */
	    'cosh': function() {

	      // cosh(c) = (e^c + e^-c) / 2

	      var a = this['re'];
	      var b = this['im'];

	      return new Complex(
	              cosh(a) * Math.cos(b),
	              sinh(a) * Math.sin(b));
	    },

	    /**
	     * Calculate the complex tanh
	     *
	     * @returns {Complex}
	     */
	    'tanh': function() {

	      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

	      var a = 2 * this['re'];
	      var b = 2 * this['im'];
	      var d = cosh(a) + Math.cos(b);

	      return new Complex(
	              sinh(a) / d,
	              Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex coth
	     *
	     * @returns {Complex}
	     */
	    'coth': function() {

	      // coth(c) = (e^c + e^-c) / (e^c - e^-c)

	      var a = 2 * this['re'];
	      var b = 2 * this['im'];
	      var d = cosh(a) - Math.cos(b);

	      return new Complex(
	              sinh(a) / d,
	              -Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex coth
	     *
	     * @returns {Complex}
	     */
	    'csch': function() {

	      // csch(c) = 2 / (e^c - e^-c)

	      var a = this['re'];
	      var b = this['im'];
	      var d = Math.cos(2 * b) - cosh(2 * a);

	      return new Complex(
	              -2 * sinh(a) * Math.cos(b) / d,
	              2 * cosh(a) * Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex sech
	     *
	     * @returns {Complex}
	     */
	    'sech': function() {

	      // sech(c) = 2 / (e^c + e^-c)

	      var a = this['re'];
	      var b = this['im'];
	      var d = Math.cos(2 * b) + cosh(2 * a);

	      return new Complex(
	              2 * cosh(a) * Math.cos(b) / d,
	              -2 * sinh(a) * Math.sin(b) / d);
	    },

	    /**
	     * Calculate the complex asinh
	     *
	     * @returns {Complex}
	     */
	    'asinh': function() {

	      // asinh(c) = log(c + sqrt(c^2 + 1))

	      var tmp = this['im'];
	      this['im'] = -this['re'];
	      this['re'] = tmp;
	      var res = this['asin']();

	      this['re'] = -this['im'];
	      this['im'] = tmp;
	      tmp = res['re'];

	      res['re'] = -res['im'];
	      res['im'] = tmp;
	      return res;
	    },

	    /**
	     * Calculate the complex asinh
	     *
	     * @returns {Complex}
	     */
	    'acosh': function() {

	      // acosh(c) = log(c + sqrt(c^2 - 1))

	      var res = this['acos']();
	      if (res['im'] <= 0) {
	        var tmp = res['re'];
	        res['re'] = -res['im'];
	        res['im'] = tmp;
	      } else {
	        var tmp = res['im'];
	        res['im'] = -res['re'];
	        res['re'] = tmp;
	      }
	      return res;
	    },

	    /**
	     * Calculate the complex atanh
	     *
	     * @returns {Complex}
	     */
	    'atanh': function() {

	      // atanh(c) = log((1+c) / (1-c)) / 2

	      var a = this['re'];
	      var b = this['im'];

	      var noIM = a > 1 && b === 0;
	      var oneMinus = 1 - a;
	      var onePlus = 1 + a;
	      var d = oneMinus * oneMinus + b * b;

	      var x = (d !== 0)
	              ? new Complex(
	                      (onePlus * oneMinus - b * b) / d,
	                      (b * oneMinus + onePlus * b) / d)
	              : new Complex(
	                      (a !== -1) ? (a / 0) : 0,
	                      (b !== 0) ? (b / 0) : 0);

	      var temp = x['re'];
	      x['re'] = logHypot(x['re'], x['im']) / 2;
	      x['im'] = Math.atan2(x['im'], temp) / 2;
	      if (noIM) {
	        x['im'] = -x['im'];
	      }
	      return x;
	    },

	    /**
	     * Calculate the complex acoth
	     *
	     * @returns {Complex}
	     */
	    'acoth': function() {

	      // acoth(c) = log((c+1) / (c-1)) / 2

	      var a = this['re'];
	      var b = this['im'];

	      if (a === 0 && b === 0) {
	        return new Complex(0, Math.PI / 2);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).atanh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).atanh();
	    },

	    /**
	     * Calculate the complex acsch
	     *
	     * @returns {Complex}
	     */
	    'acsch': function() {

	      // acsch(c) = log((1+sqrt(1+c^2))/c)

	      var a = this['re'];
	      var b = this['im'];

	      if (b === 0) {

	        return new Complex(
	                (a !== 0)
	                ? Math.log(a + Math.sqrt(a * a + 1))
	                : Infinity, 0);
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).asinh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).asinh();
	    },

	    /**
	     * Calculate the complex asech
	     *
	     * @returns {Complex}
	     */
	    'asech': function() {

	      // asech(c) = log((1+sqrt(1-c^2))/c)

	      var a = this['re'];
	      var b = this['im'];

	      if (this['isZero']()) {
	        return Complex['INFINITY'];
	      }

	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).acosh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ? -b / 0 : 0).acosh();
	    },

	    /**
	     * Calculate the complex inverse 1/z
	     *
	     * @returns {Complex}
	     */
	    'inverse': function() {

	      // 1 / 0 = Infinity and 1 / Infinity = 0
	      if (this['isZero']()) {
	        return Complex['INFINITY'];
	      }

	      if (this['isInfinite']()) {
	        return Complex['ZERO'];
	      }

	      var a = this['re'];
	      var b = this['im'];

	      var d = a * a + b * b;

	      return new Complex(a / d, -b / d);
	    },

	    /**
	     * Returns the complex conjugate
	     *
	     * @returns {Complex}
	     */
	    'conjugate': function() {

	      return new Complex(this['re'], -this['im']);
	    },

	    /**
	     * Gets the negated complex number
	     *
	     * @returns {Complex}
	     */
	    'neg': function() {

	      return new Complex(-this['re'], -this['im']);
	    },

	    /**
	     * Ceils the actual complex number
	     *
	     * @returns {Complex}
	     */
	    'ceil': function(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(
	              Math.ceil(this['re'] * places) / places,
	              Math.ceil(this['im'] * places) / places);
	    },

	    /**
	     * Floors the actual complex number
	     *
	     * @returns {Complex}
	     */
	    'floor': function(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(
	              Math.floor(this['re'] * places) / places,
	              Math.floor(this['im'] * places) / places);
	    },

	    /**
	     * Ceils the actual complex number
	     *
	     * @returns {Complex}
	     */
	    'round': function(places) {

	      places = Math.pow(10, places || 0);

	      return new Complex(
	              Math.round(this['re'] * places) / places,
	              Math.round(this['im'] * places) / places);
	    },

	    /**
	     * Compares two complex numbers
	     *
	     * **Note:** new Complex(Infinity).equals(Infinity) === false
	     *
	     * @returns {boolean}
	     */
	    'equals': function(a, b) {

	      var z = new Complex(a, b);

	      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
	              Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
	    },

	    /**
	     * Clones the actual object
	     *
	     * @returns {Complex}
	     */
	    'clone': function() {

	      return new Complex(this['re'], this['im']);
	    },

	    /**
	     * Gets a string of the actual complex number
	     *
	     * @returns {string}
	     */
	    'toString': function() {

	      var a = this['re'];
	      var b = this['im'];
	      var ret = '';

	      if (this['isNaN']()) {
	        return 'NaN';
	      }

	      if (this['isZero']()) {
	        return '0';
	      }

	      if (this['isInfinite']()) {
	        return 'Infinity';
	      }

	      if (a !== 0) {
	        ret += a;
	      }

	      if (b !== 0) {

	        if (a !== 0) {
	          ret += b < 0 ? ' - ' : ' + ';
	        } else if (b < 0) {
	          ret += '-';
	        }

	        b = Math.abs(b);

	        if (1 !== b) {
	          ret += b;
	        }
	        ret += 'i';
	      }

	      if (!ret)
	        return '0';

	      return ret;
	    },

	    /**
	     * Returns the actual number as a vector
	     *
	     * @returns {Array}
	     */
	    'toVector': function() {

	      return [this['re'], this['im']];
	    },

	    /**
	     * Returns the actual real value of the current object
	     *
	     * @returns {number|null}
	     */
	    'valueOf': function() {

	      if (this['im'] === 0) {
	        return this['re'];
	      }
	      return null;
	    },

	    /**
	     * Determines whether a complex number is not on the Riemann sphere.
	     *
	     * @returns {boolean}
	     */
	    'isNaN': function() {
	      return isNaN(this['re']) || isNaN(this['im']);
	    },

	    /**
	     * Determines whether or not a complex number is at the zero pole of the
	     * Riemann sphere.
	     *
	     * @returns {boolean}
	     */
	    'isZero': function() {
	      return (
	              (this['re'] === 0 || this['re'] === -0) &&
	              (this['im'] === 0 || this['im'] === -0)
	              );
	    },

	    /**
	     * Determines whether a complex number is not at the infinity pole of the
	     * Riemann sphere.
	     *
	     * @returns {boolean}
	     */
	    'isFinite': function() {
	      return isFinite(this['re']) && isFinite(this['im']);
	    },

	    /**
	     * Determines whether or not a complex number is at the infinity pole of the
	     * Riemann sphere.
	     *
	     * @returns {boolean}
	     */
	    'isInfinite': function() {
	      return !(this['isNaN']() || this['isFinite']());
	    }
	  };

	  Complex['ZERO'] = new Complex(0, 0);
	  Complex['ONE'] = new Complex(1, 0);
	  Complex['I'] = new Complex(0, 1);
	  Complex['PI'] = new Complex(Math.PI, 0);
	  Complex['E'] = new Complex(Math.E, 0);
	  Complex['INFINITY'] = new Complex(Infinity, Infinity);
	  Complex['NAN'] = new Complex(NaN, NaN);
	  Complex['EPSILON'] = 1e-16;

	  {
	    Object.defineProperty(exports, "__esModule", {'value': true});
	    Complex['default'] = Complex;
	    Complex['Complex'] = Complex;
	    module['exports'] = Complex;
	  }

	})();
	});

	unwrapExports(complex);

	function _typeof$2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }



	var format$1 = number.format;

	var isNumber = number.isNumber;

	function factory$6(type, config, load, typed, math) {
	  /**
	   * Attach type information
	   */
	  complex.prototype.type = 'Complex';
	  complex.prototype.isComplex = true;
	  /**
	   * Get a JSON representation of the complex number
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
	   */

	  complex.prototype.toJSON = function () {
	    return {
	      mathjs: 'Complex',
	      re: this.re,
	      im: this.im
	    };
	  };
	  /*
	   * Return the value of the complex number in polar notation
	   * The angle phi will be set in the interval of [-pi, pi].
	   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
	   */


	  complex.prototype.toPolar = function () {
	    return {
	      r: this.abs(),
	      phi: this.arg()
	    };
	  };
	  /**
	   * Get a string representation of the complex number,
	   * with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string} str
	   */


	  complex.prototype.format = function (options) {
	    var str = '';
	    var im = this.im;
	    var re = this.re;
	    var strRe = format$1(this.re, options);
	    var strIm = format$1(this.im, options); // round either re or im when smaller than the configured precision

	    var precision = isNumber(options) ? options : options ? options.precision : null;

	    if (precision !== null) {
	      var epsilon = Math.pow(10, -precision);

	      if (Math.abs(re / im) < epsilon) {
	        re = 0;
	      }

	      if (Math.abs(im / re) < epsilon) {
	        im = 0;
	      }
	    }

	    if (im === 0) {
	      // real value
	      str = strRe;
	    } else if (re === 0) {
	      // purely complex value
	      if (im === 1) {
	        str = 'i';
	      } else if (im === -1) {
	        str = '-i';
	      } else {
	        str = strIm + 'i';
	      }
	    } else {
	      // complex value
	      if (im < 0) {
	        if (im === -1) {
	          str = strRe + ' - i';
	        } else {
	          str = strRe + ' - ' + strIm.substring(1) + 'i';
	        }
	      } else {
	        if (im === 1) {
	          str = strRe + ' + i';
	        } else {
	          str = strRe + ' + ' + strIm + 'i';
	        }
	      }
	    }

	    return str;
	  };
	  /**
	   * Create a complex number from polar coordinates
	   *
	   * Usage:
	   *
	   *     Complex.fromPolar(r: number, phi: number) : Complex
	   *     Complex.fromPolar({r: number, phi: number}) : Complex
	   *
	   * @param {*} args...
	   * @return {Complex}
	   */


	  complex.fromPolar = function (args) {
	    switch (arguments.length) {
	      case 1:
	        var arg = arguments[0];

	        if (_typeof$2(arg) === 'object') {
	          return complex(arg);
	        }

	        throw new TypeError('Input has to be an object with r and phi keys.');

	      case 2:
	        var r = arguments[0];
	        var phi = arguments[1];

	        if (isNumber(r)) {
	          if (type.isUnit(phi) && phi.hasBase('ANGLE')) {
	            // convert unit to a number in radians
	            phi = phi.toNumber('rad');
	          }

	          if (isNumber(phi)) {
	            return new complex({
	              r: r,
	              phi: phi
	            });
	          }

	          throw new TypeError('Phi is not a number nor an angle unit.');
	        } else {
	          throw new TypeError('Radius r is not a number.');
	        }

	      default:
	        throw new SyntaxError('Wrong number of arguments in function fromPolar');
	    }
	  };

	  complex.prototype.valueOf = complex.prototype.toString;
	  /**
	   * Create a Complex number from a JSON object
	   * @param {Object} json  A JSON Object structured as
	   *                       {"mathjs": "Complex", "re": 2, "im": 3}
	   *                       All properties are optional, default values
	   *                       for `re` and `im` are 0.
	   * @return {Complex} Returns a new Complex number
	   */

	  complex.fromJSON = function (json) {
	    return new complex(json);
	  }; // apply the current epsilon


	  complex.EPSILON = config.epsilon; // listen for changed in the configuration, automatically apply changed epsilon

	  math.on('config', function (curr, prev) {
	    if (curr.epsilon !== prev.epsilon) {
	      complex.EPSILON = curr.epsilon;
	    }
	  });
	  /**
	   * Compare two complex numbers, `a` and `b`:
	   *
	   * - Returns 1 when the real part of `a` is larger than the real part of `b`
	   * - Returns -1 when the real part of `a` is smaller than the real part of `b`
	   * - Returns 1 when the real parts are equal
	   *   and the imaginary part of `a` is larger than the imaginary part of `b`
	   * - Returns -1 when the real parts are equal
	   *   and the imaginary part of `a` is smaller than the imaginary part of `b`
	   * - Returns 0 when both real and imaginary parts are equal.
	   *
	   * @params {Complex} a
	   * @params {Complex} b
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */

	  complex.compare = function (a, b) {
	    if (a.re > b.re) {
	      return 1;
	    }

	    if (a.re < b.re) {
	      return -1;
	    }

	    if (a.im > b.im) {
	      return 1;
	    }

	    if (a.im < b.im) {
	      return -1;
	    }

	    return 0;
	  };

	  return complex;
	}

	var name$6 = 'Complex';
	var path$1 = 'type';
	var factory_1$6 = factory$6;
	var math$3 = true; // request access to the math namespace

	var Complex_1 = {
		name: name$6,
		path: path$1,
		factory: factory_1$6,
		math: math$3
	};

	// Map the characters to escape to their escaped values. The list is derived
	// from http://www.cespedes.org/blog/85/how-to-escape-latex-special-characters

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var defaultEscapes = {
	  "{": "\\{",
	  "}": "\\}",
	  "\\": "\\textbackslash{}",
	  "#": "\\#",
	  $: "\\$",
	  "%": "\\%",
	  "&": "\\&",
	  "^": "\\textasciicircum{}",
	  _: "\\_",
	  "~": "\\textasciitilde{}"
	};
	var formatEscapes = {
	  "\u2013": "\\--",
	  "\u2014": "\\---",
	  " ": "~",
	  "\t": "\\qquad{}",
	  "\r\n": "\\newline{}",
	  "\n": "\\newline{}"
	};

	var defaultEscapeMapFn = function defaultEscapeMapFn(defaultEscapes, formatEscapes) {
	  return _extends({}, defaultEscapes, formatEscapes);
	};

	/**
	 * Escape a string to be used in LaTeX documents.
	 * @param {string} str the string to be escaped.
	 * @param {boolean} params.preserveFormatting whether formatting escapes should
	 *  be performed (default: false).
	 * @param {function} params.escapeMapFn the function to modify the escape maps.
	 * @return {string} the escaped string, ready to be used in LaTeX.
	 */
	var dist = function (str) {
	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref$preserveFormatti = _ref.preserveFormatting,
	      preserveFormatting = _ref$preserveFormatti === undefined ? false : _ref$preserveFormatti,
	      _ref$escapeMapFn = _ref.escapeMapFn,
	      escapeMapFn = _ref$escapeMapFn === undefined ? defaultEscapeMapFn : _ref$escapeMapFn;

	  var runningStr = String(str);
	  var result = "";

	  var escapes = escapeMapFn(_extends({}, defaultEscapes), preserveFormatting ? _extends({}, formatEscapes) : {});
	  var escapeKeys = Object.keys(escapes); // as it is reused later on

	  // Algorithm: Go through the string character by character, if it matches
	  // with one of the special characters then we'll replace it with the escaped
	  // version.

	  var _loop = function _loop() {
	    var specialCharFound = false;
	    escapeKeys.forEach(function (key, index) {
	      if (specialCharFound) {
	        return;
	      }
	      if (runningStr.length >= key.length && runningStr.slice(0, key.length) === key) {
	        result += escapes[escapeKeys[index]];
	        runningStr = runningStr.slice(key.length, runningStr.length);
	        specialCharFound = true;
	      }
	    });
	    if (!specialCharFound) {
	      result += runningStr.slice(0, 1);
	      runningStr = runningStr.slice(1, runningStr.length);
	    }
	  };

	  while (runningStr) {
	    _loop();
	  }
	  return result;
	};

	var latex = createCommonjsModule(function (module, exports) {



	exports.symbols = {
	  // GREEK LETTERS
	  Alpha: 'A',
	  alpha: '\\alpha',
	  Beta: 'B',
	  beta: '\\beta',
	  Gamma: '\\Gamma',
	  gamma: '\\gamma',
	  Delta: '\\Delta',
	  delta: '\\delta',
	  Epsilon: 'E',
	  epsilon: '\\epsilon',
	  varepsilon: '\\varepsilon',
	  Zeta: 'Z',
	  zeta: '\\zeta',
	  Eta: 'H',
	  eta: '\\eta',
	  Theta: '\\Theta',
	  theta: '\\theta',
	  vartheta: '\\vartheta',
	  Iota: 'I',
	  iota: '\\iota',
	  Kappa: 'K',
	  kappa: '\\kappa',
	  varkappa: '\\varkappa',
	  Lambda: '\\Lambda',
	  lambda: '\\lambda',
	  Mu: 'M',
	  mu: '\\mu',
	  Nu: 'N',
	  nu: '\\nu',
	  Xi: '\\Xi',
	  xi: '\\xi',
	  Omicron: 'O',
	  omicron: 'o',
	  Pi: '\\Pi',
	  pi: '\\pi',
	  varpi: '\\varpi',
	  Rho: 'P',
	  rho: '\\rho',
	  varrho: '\\varrho',
	  Sigma: '\\Sigma',
	  sigma: '\\sigma',
	  varsigma: '\\varsigma',
	  Tau: 'T',
	  tau: '\\tau',
	  Upsilon: "\\Upsilon",
	  upsilon: "\\upsilon",
	  Phi: '\\Phi',
	  phi: '\\phi',
	  varphi: '\\varphi',
	  Chi: 'X',
	  chi: '\\chi',
	  Psi: '\\Psi',
	  psi: '\\psi',
	  Omega: '\\Omega',
	  omega: '\\omega',
	  // logic
	  'true': '\\mathrm{True}',
	  'false': '\\mathrm{False}',
	  // other
	  i: 'i',
	  // TODO use \i ??
	  inf: '\\infty',
	  Inf: '\\infty',
	  infinity: '\\infty',
	  Infinity: '\\infty',
	  oo: '\\infty',
	  lim: '\\lim',
	  'undefined': '\\mathbf{?}'
	};
	exports.operators = {
	  'transpose': '^\\top',
	  'ctranspose': '^H',
	  'factorial': '!',
	  'pow': '^',
	  'dotPow': '.^\\wedge',
	  // TODO find ideal solution
	  'unaryPlus': '+',
	  'unaryMinus': '-',
	  'bitNot': '\\~',
	  // TODO find ideal solution
	  'not': '\\neg',
	  'multiply': '\\cdot',
	  'divide': '\\frac',
	  // TODO how to handle that properly?
	  'dotMultiply': '.\\cdot',
	  // TODO find ideal solution
	  'dotDivide': '.:',
	  // TODO find ideal solution
	  'mod': '\\mod',
	  'add': '+',
	  'subtract': '-',
	  'to': '\\rightarrow',
	  'leftShift': '<<',
	  'rightArithShift': '>>',
	  'rightLogShift': '>>>',
	  'equal': '=',
	  'unequal': '\\neq',
	  'smaller': '<',
	  'larger': '>',
	  'smallerEq': '\\leq',
	  'largerEq': '\\geq',
	  'bitAnd': '\\&',
	  'bitXor': "\\underline{|}",
	  'bitOr': '|',
	  'and': '\\wedge',
	  'xor': '\\veebar',
	  'or': '\\vee'
	};
	exports.defaultTemplate = "\\mathrm{${name}}\\left(${args}\\right)";
	var units = {
	  deg: '^\\circ'
	};

	exports.escape = function (string) {
	  return dist(string, {
	    'preserveFormatting': true
	  });
	}; // @param {string} name
	// @param {boolean} isUnit


	exports.toSymbol = function (name, isUnit) {
	  isUnit = typeof isUnit === 'undefined' ? false : isUnit;

	  if (isUnit) {
	    if (units.hasOwnProperty(name)) {
	      return units[name];
	    }

	    return '\\mathrm{' + exports.escape(name) + '}';
	  }

	  if (exports.symbols.hasOwnProperty(name)) {
	    return exports.symbols[name];
	  }

	  return exports.escape(name);
	};
	});
	var latex_1 = latex.symbols;
	var latex_2 = latex.operators;
	var latex_3 = latex.defaultTemplate;
	var latex_4 = latex.escape;
	var latex_5 = latex.toSymbol;

	function factory$7(type, config, load, typed) {
	  var latex$1 = latex;
	  /**
	   * Create a complex value or convert a value to a complex value.
	   *
	   * Syntax:
	   *
	   *     math.complex()                           // creates a complex value with zero
	   *                                              // as real and imaginary part.
	   *     math.complex(re : number, im : string)   // creates a complex value with provided
	   *                                              // values for real and imaginary part.
	   *     math.complex(re : number)                // creates a complex value with provided
	   *                                              // real value and zero imaginary part.
	   *     math.complex(complex : Complex)          // clones the provided complex value.
	   *     math.complex(arg : string)               // parses a string into a complex value.
	   *     math.complex(array : Array)              // converts the elements of the array
	   *                                              // or matrix element wise into a
	   *                                              // complex value.
	   *     math.complex({re: number, im: number})   // creates a complex value with provided
	   *                                              // values for real an imaginary part.
	   *     math.complex({r: number, phi: number})   // creates a complex value with provided
	   *                                              // polar coordinates
	   *
	   * Examples:
	   *
	   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i
	   *    a.re = 5                          // a = Complex 5 - 4i
	   *    const i = a.im                    // Number -4
	   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i
	   *    const c = math.complex()          // Complex 0 + 0i
	   *    const d = math.add(a, b)          // Complex 5 + 2i
	   *
	   * See also:
	   *
	   *    bignumber, boolean, index, matrix, number, string, unit
	   *
	   * @param {* | Array | Matrix} [args]
	   *            Arguments specifying the real and imaginary part of the complex number
	   * @return {Complex | Array | Matrix} Returns a complex value
	   */


	  var complex = typed('complex', {
	    '': function _() {
	      return type.Complex.ZERO;
	    },
	    'number': function number(x) {
	      return new type.Complex(x, 0);
	    },
	    'number, number': function numberNumber(re, im) {
	      return new type.Complex(re, im);
	    },
	    // TODO: this signature should be redundant
	    'BigNumber, BigNumber': function BigNumberBigNumber(re, im) {
	      return new type.Complex(re.toNumber(), im.toNumber());
	    },
	    'Complex': function Complex(x) {
	      return x.clone();
	    },
	    'string': function string(x) {
	      return type.Complex(x); // for example '2 + 3i'
	    },
	    'null': function _null(x) {
	      return type.Complex(0);
	    },
	    'Object': function Object(x) {
	      if ('re' in x && 'im' in x) {
	        return new type.Complex(x.re, x.im);
	      }

	      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {
	        return new type.Complex(x);
	      }

	      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, complex);
	    }
	  });
	  complex.toTex = {
	    0: '0',
	    1: "\\left(${args[0]}\\right)",
	    2: "\\left(\\left(${args[0]}\\right)+".concat(latex$1.symbols['i'], "\\cdot\\left(${args[1]}\\right)\\right)")
	  };
	  return complex;
	}

	var name$7 = 'complex';
	var factory_1$7 = factory$7;

	var complex$1 = {
		name: name$7,
		factory: factory_1$7
	};

	var complex$2 = [// type
	Complex_1, // construction function
	complex$1];

	var fraction = createCommonjsModule(function (module, exports) {
	/**
	 * @license Fraction.js v4.0.12 09/09/2015
	 * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
	 *
	 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/


	/**
	 *
	 * This class offers the possibility to calculate fractions.
	 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
	 *
	 * Array/Object form
	 * [ 0 => <nominator>, 1 => <denominator> ]
	 * [ n => <nominator>, d => <denominator> ]
	 *
	 * Integer form
	 * - Single integer value
	 *
	 * Double form
	 * - Single double value
	 *
	 * String form
	 * 123.456 - a simple double
	 * 123/456 - a string fraction
	 * 123.'456' - a double with repeating decimal places
	 * 123.(456) - synonym
	 * 123.45'6' - a double with repeating last place
	 * 123.45(6) - synonym
	 *
	 * Example:
	 *
	 * var f = new Fraction("9.4'31'");
	 * f.mul([-4, 3]).div(4.9);
	 *
	 */

	(function(root) {

	  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
	  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
	  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
	  var MAX_CYCLE_LEN = 2000;

	  // Parsed data to avoid calling "new" all the time
	  var P = {
	    "s": 1,
	    "n": 0,
	    "d": 1
	  };

	  function createError(name) {

	    function errorConstructor() {
	      var temp = Error.apply(this, arguments);
	      temp['name'] = this['name'] = name;
	      this['stack'] = temp['stack'];
	      this['message'] = temp['message'];
	    }

	    /**
	     * Error constructor
	     *
	     * @constructor
	     */
	    function IntermediateInheritor() {}
	    IntermediateInheritor.prototype = Error.prototype;
	    errorConstructor.prototype = new IntermediateInheritor();

	    return errorConstructor;
	  }

	  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
	  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');

	  function assign(n, s) {

	    if (isNaN(n = parseInt(n, 10))) {
	      throwInvalidParam();
	    }
	    return n * s;
	  }

	  function throwInvalidParam() {
	    throw new InvalidParameter();
	  }

	  var parse = function(p1, p2) {

	    var n = 0, d = 1, s = 1;
	    var v = 0, w = 0, x = 0, y = 1, z = 1;

	    var A = 0, B = 1;
	    var C = 1, D = 1;

	    var N = 10000000;
	    var M;

	    if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
	      n = p1;
	      d = p2;
	      s = n * d;
	    } else
	      switch (typeof p1) {

	        case "object":
	        {
	          if ("d" in p1 && "n" in p1) {
	            n = p1["n"];
	            d = p1["d"];
	            if ("s" in p1)
	              n *= p1["s"];
	          } else if (0 in p1) {
	            n = p1[0];
	            if (1 in p1)
	              d = p1[1];
	          } else {
	            throwInvalidParam();
	          }
	          s = n * d;
	          break;
	        }
	        case "number":
	        {
	          if (p1 < 0) {
	            s = p1;
	            p1 = -p1;
	          }

	          if (p1 % 1 === 0) {
	            n = p1;
	          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

	            if (p1 >= 1) {
	              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
	              p1 /= z;
	            }

	            // Using Farey Sequences
	            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

	            while (B <= N && D <= N) {
	              M = (A + C) / (B + D);

	              if (p1 === M) {
	                if (B + D <= N) {
	                  n = A + C;
	                  d = B + D;
	                } else if (D > B) {
	                  n = C;
	                  d = D;
	                } else {
	                  n = A;
	                  d = B;
	                }
	                break;

	              } else {

	                if (p1 > M) {
	                  A += C;
	                  B += D;
	                } else {
	                  C += A;
	                  D += B;
	                }

	                if (B > N) {
	                  n = C;
	                  d = D;
	                } else {
	                  n = A;
	                  d = B;
	                }
	              }
	            }
	            n *= z;
	          } else if (isNaN(p1) || isNaN(p2)) {
	            d = n = NaN;
	          }
	          break;
	        }
	        case "string":
	        {
	          B = p1.match(/\d+|./g);

	          if (B === null)
	            throwInvalidParam();

	          if (B[A] === '-') {// Check for minus sign at the beginning
	            s = -1;
	            A++;
	          } else if (B[A] === '+') {// Check for plus sign at the beginning
	            A++;
	          }

	          if (B.length === A + 1) { // Check if it's just a simple number "1234"
	            w = assign(B[A++], s);
	          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

	            if (B[A] !== '.') { // Handle 0.5 and .5
	              v = assign(B[A++], s);
	            }
	            A++;

	            // Check for decimal places
	            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
	              w = assign(B[A], s);
	              y = Math.pow(10, B[A].length);
	              A++;
	            }

	            // Check for repeating places
	            if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
	              x = assign(B[A + 1], s);
	              z = Math.pow(10, B[A + 1].length) - 1;
	              A += 3;
	            }

	          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
	            w = assign(B[A], s);
	            y = assign(B[A + 2], 1);
	            A += 3;
	          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
	            v = assign(B[A], s);
	            w = assign(B[A + 2], s);
	            y = assign(B[A + 4], 1);
	            A += 5;
	          }

	          if (B.length <= A) { // Check for more tokens on the stack
	            d = y * z;
	            s = /* void */
	                    n = x + d * v + z * w;
	            break;
	          }

	          /* Fall through on error */
	        }
	        default:
	          throwInvalidParam();
	      }

	    if (d === 0) {
	      throw new DivisionByZero();
	    }

	    P["s"] = s < 0 ? -1 : 1;
	    P["n"] = Math.abs(n);
	    P["d"] = Math.abs(d);
	  };

	  function modpow(b, e, m) {

	    var r = 1;
	    for (; e > 0; b = (b * b) % m, e >>= 1) {

	      if (e & 1) {
	        r = (r * b) % m;
	      }
	    }
	    return r;
	  }


	  function cycleLen(n, d) {

	    for (; d % 2 === 0;
	            d /= 2) {
	    }

	    for (; d % 5 === 0;
	            d /= 5) {
	    }

	    if (d === 1) // Catch non-cyclic numbers
	      return 0;

	    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
	    // 10^(d-1) % d == 1
	    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
	    // as we want to translate the numbers to strings.

	    var rem = 10 % d;
	    var t = 1;

	    for (; rem !== 1; t++) {
	      rem = rem * 10 % d;

	      if (t > MAX_CYCLE_LEN)
	        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
	    }
	    return t;
	  }


	     function cycleStart(n, d, len) {

	    var rem1 = 1;
	    var rem2 = modpow(10, len, d);

	    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
	      // Solve 10^s == 10^(s+t) (mod d)

	      if (rem1 === rem2)
	        return t;

	      rem1 = rem1 * 10 % d;
	      rem2 = rem2 * 10 % d;
	    }
	    return 0;
	  }

	  function gcd(a, b) {

	    if (!a)
	      return b;
	    if (!b)
	      return a;

	    while (1) {
	      a %= b;
	      if (!a)
	        return b;
	      b %= a;
	      if (!b)
	        return a;
	    }
	  }
	  /**
	   * Module constructor
	   *
	   * @constructor
	   * @param {number|Fraction=} a
	   * @param {number=} b
	   */
	  function Fraction(a, b) {

	    if (!(this instanceof Fraction)) {
	      return new Fraction(a, b);
	    }

	    parse(a, b);

	    if (Fraction['REDUCE']) {
	      a = gcd(P["d"], P["n"]); // Abuse a
	    } else {
	      a = 1;
	    }

	    this["s"] = P["s"];
	    this["n"] = P["n"] / a;
	    this["d"] = P["d"] / a;
	  }

	  /**
	   * Boolean global variable to be able to disable automatic reduction of the fraction
	   *
	   */
	  Fraction['REDUCE'] = 1;

	  Fraction.prototype = {

	    "s": 1,
	    "n": 0,
	    "d": 1,

	    /**
	     * Calculates the absolute value
	     *
	     * Ex: new Fraction(-4).abs() => 4
	     **/
	    "abs": function() {

	      return new Fraction(this["n"], this["d"]);
	    },

	    /**
	     * Inverts the sign of the current fraction
	     *
	     * Ex: new Fraction(-4).neg() => 4
	     **/
	    "neg": function() {

	      return new Fraction(-this["s"] * this["n"], this["d"]);
	    },

	    /**
	     * Adds two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
	     **/
	    "add": function(a, b) {

	      parse(a, b);
	      return new Fraction(
	              this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },

	    /**
	     * Subtracts two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
	     **/
	    "sub": function(a, b) {

	      parse(a, b);
	      return new Fraction(
	              this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },

	    /**
	     * Multiplies two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
	     **/
	    "mul": function(a, b) {

	      parse(a, b);
	      return new Fraction(
	              this["s"] * P["s"] * this["n"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },

	    /**
	     * Divides two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").inverse().div(3)
	     **/
	    "div": function(a, b) {

	      parse(a, b);
	      return new Fraction(
	              this["s"] * P["s"] * this["n"] * P["d"],
	              this["d"] * P["n"]
	              );
	    },

	    /**
	     * Clones the actual object
	     *
	     * Ex: new Fraction("-17.(345)").clone()
	     **/
	    "clone": function() {
	      return new Fraction(this);
	    },

	    /**
	     * Calculates the modulo of two rational numbers - a more precise fmod
	     *
	     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
	     **/
	    "mod": function(a, b) {

	      if (isNaN(this['n']) || isNaN(this['d'])) {
	        return new Fraction(NaN);
	      }

	      if (a === undefined) {
	        return new Fraction(this["s"] * this["n"] % this["d"], 1);
	      }

	      parse(a, b);
	      if (0 === P["n"] && 0 === this["d"]) {
	        Fraction(0, 0); // Throw DivisionByZero
	      }

	      /*
	       * First silly attempt, kinda slow
	       *
	       return that["sub"]({
	       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
	       "d": num["d"],
	       "s": this["s"]
	       });*/

	      /*
	       * New attempt: a1 / b1 = a2 / b2 * q + r
	       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
	       * => (b2 * a1 % a2 * b1) / (b1 * b2)
	       */
	      return new Fraction(
	              this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
	              P["d"] * this["d"]
	              );
	    },

	    /**
	     * Calculates the fractional gcd of two rational numbers
	     *
	     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
	     */
	    "gcd": function(a, b) {

	      parse(a, b);

	      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

	      return new Fraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
	    },

	    /**
	     * Calculates the fractional lcm of two rational numbers
	     *
	     * Ex: new Fraction(5,8).lcm(3,7) => 15
	     */
	    "lcm": function(a, b) {

	      parse(a, b);

	      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

	      if (P["n"] === 0 && this["n"] === 0) {
	        return new Fraction;
	      }
	      return new Fraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
	    },

	    /**
	     * Calculates the ceil of a rational number
	     *
	     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
	     **/
	    "ceil": function(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Calculates the floor of a rational number
	     *
	     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
	     **/
	    "floor": function(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Rounds a rational numbers
	     *
	     * Ex: new Fraction('4.(3)').round() => (4 / 1)
	     **/
	    "round": function(places) {

	      places = Math.pow(10, places || 0);

	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
	    },

	    /**
	     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
	     *
	     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
	     **/
	    "inverse": function() {

	      return new Fraction(this["s"] * this["d"], this["n"]);
	    },

	    /**
	     * Calculates the fraction to some integer exponent
	     *
	     * Ex: new Fraction(-1,2).pow(-3) => -8
	     */
	    "pow": function(m) {

	      if (m < 0) {
	        return new Fraction(Math.pow(this['s'] * this["d"], -m), Math.pow(this["n"], -m));
	      } else {
	        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
	      }
	    },

	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    "equals": function(a, b) {

	      parse(a, b);
	      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
	    },

	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    "compare": function(a, b) {

	      parse(a, b);
	      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
	      return (0 < t) - (t < 0);
	    },

	    "simplify": function(eps) {

	      // First naive implementation, needs improvement

	      if (isNaN(this['n']) || isNaN(this['d'])) {
	        return this;
	      }

	      var cont = this['abs']()['toContinued']();

	      eps = eps || 0.001;

	      function rec(a) {
	        if (a.length === 1)
	          return new Fraction(a[0]);
	        return rec(a.slice(1))['inverse']()['add'](a[0]);
	      }

	      for (var i = 0; i < cont.length; i++) {
	        var tmp = rec(cont.slice(0, i + 1));
	        if (tmp['sub'](this['abs']())['abs']().valueOf() < eps) {
	          return tmp['mul'](this['s']);
	        }
	      }
	      return this;
	    },

	    /**
	     * Check if two rational numbers are divisible
	     *
	     * Ex: new Fraction(19.6).divisible(1.5);
	     */
	    "divisible": function(a, b) {

	      parse(a, b);
	      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
	    },

	    /**
	     * Returns a decimal representation of the fraction
	     *
	     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
	     **/
	    'valueOf': function() {

	      return this["s"] * this["n"] / this["d"];
	    },

	    /**
	     * Returns a string-fraction representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
	     **/
	    'toFraction': function(excludeWhole) {

	      var whole, str = "";
	      var n = this["n"];
	      var d = this["d"];
	      if (this["s"] < 0) {
	        str += '-';
	      }

	      if (d === 1) {
	        str += n;
	      } else {

	        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	          str += whole;
	          str += " ";
	          n %= d;
	        }

	        str += n;
	        str += '/';
	        str += d;
	      }
	      return str;
	    },

	    /**
	     * Returns a latex representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
	     **/
	    'toLatex': function(excludeWhole) {

	      var whole, str = "";
	      var n = this["n"];
	      var d = this["d"];
	      if (this["s"] < 0) {
	        str += '-';
	      }

	      if (d === 1) {
	        str += n;
	      } else {

	        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	          str += whole;
	          n %= d;
	        }

	        str += "\\frac{";
	        str += n;
	        str += '}{';
	        str += d;
	        str += '}';
	      }
	      return str;
	    },

	    /**
	     * Returns an array of continued fraction elements
	     *
	     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
	     */
	    'toContinued': function() {

	      var t;
	      var a = this['n'];
	      var b = this['d'];
	      var res = [];

	      if (isNaN(this['n']) || isNaN(this['d'])) {
	        return res;
	      }

	      do {
	        res.push(Math.floor(a / b));
	        t = a % b;
	        a = b;
	        b = t;
	      } while (a !== 1);

	      return res;
	    },

	    /**
	     * Creates a string representation of a fraction with all digits
	     *
	     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
	     **/
	    'toString': function(dec) {

	      var g;
	      var N = this["n"];
	      var D = this["d"];

	      if (isNaN(N) || isNaN(D)) {
	        return "NaN";
	      }

	      if (!Fraction['REDUCE']) {
	        g = gcd(N, D);
	        N /= g;
	        D /= g;
	      }

	      dec = dec || 15; // 15 = decimal places when no repitation

	      var cycLen = cycleLen(N, D); // Cycle length
	      var cycOff = cycleStart(N, D, cycLen); // Cycle start

	      var str = this['s'] === -1 ? "-" : "";

	      str += N / D | 0;

	      N %= D;
	      N *= 10;

	      if (N)
	        str += ".";

	      if (cycLen) {

	        for (var i = cycOff; i--; ) {
	          str += N / D | 0;
	          N %= D;
	          N *= 10;
	        }
	        str += "(";
	        for (var i = cycLen; i--; ) {
	          str += N / D | 0;
	          N %= D;
	          N *= 10;
	        }
	        str += ")";
	      } else {
	        for (var i = dec; N && i--; ) {
	          str += N / D | 0;
	          N %= D;
	          N *= 10;
	        }
	      }
	      return str;
	    }
	  };

	  {
	    Object.defineProperty(exports, "__esModule", {'value': true});
	    Fraction['default'] = Fraction;
	    Fraction['Fraction'] = Fraction;
	    module['exports'] = Fraction;
	  }

	})();
	});

	unwrapExports(fraction);

	/**
	 * Attach type information
	 */


	fraction.prototype.type = 'Fraction';
	fraction.prototype.isFraction = true;
	/**
	 * Get a JSON representation of a Fraction containing type information
	 * @returns {Object} Returns a JSON object structured as:
	 *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 */

	fraction.prototype.toJSON = function () {
	  return {
	    mathjs: 'Fraction',
	    n: this.s * this.n,
	    d: this.d
	  };
	};
	/**
	 * Instantiate a Fraction from a JSON object
	 * @param {Object} json  a JSON object structured as:
	 *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 * @return {BigNumber}
	 */


	fraction.fromJSON = function (json) {
	  return new fraction(json);
	};

	function factory$8(type, config, load, typed) {
	  return fraction;
	}

	var name$8 = 'Fraction';
	var path$2 = 'type';
	var factory_1$8 = factory$8;

	var Fraction_1 = {
		name: name$8,
		path: path$2,
		factory: factory_1$8
	};

	function factory$9(type, config, load, typed) {
	  /**
	   * Create a fraction convert a value to a fraction.
	   *
	   * Syntax:
	   *     math.fraction(numerator, denominator)
	   *     math.fraction({n: numerator, d: denominator})
	   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
	   *                                                   into fractions
	   *
	   * Examples:
	   *
	   *     math.fraction(1, 3)
	   *     math.fraction('2/3')
	   *     math.fraction({n: 2, d: 3})
	   *     math.fraction([0.2, 0.25, 1.25])
	   *
	   * See also:
	   *
	   *    bignumber, number, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
	   *            Arguments specifying the numerator and denominator of
	   *            the fraction
	   * @return {Fraction | Array | Matrix} Returns a fraction
	   */
	  var fraction = typed('fraction', {
	    'number': function number(x) {
	      if (!isFinite(x) || isNaN(x)) {
	        throw new Error(x + ' cannot be represented as a fraction');
	      }

	      return new type.Fraction(x);
	    },
	    'string': function string(x) {
	      return new type.Fraction(x);
	    },
	    'number, number': function numberNumber(numerator, denominator) {
	      return new type.Fraction(numerator, denominator);
	    },
	    'null': function _null(x) {
	      return new type.Fraction(0);
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.Fraction(x.toString());
	    },
	    'Fraction': function Fraction(x) {
	      return x; // fractions are immutable
	    },
	    'Object': function Object(x) {
	      return new type.Fraction(x);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, fraction);
	    }
	  });
	  return fraction;
	}

	var name$9 = 'fraction';
	var factory_1$9 = factory$9;

	var fraction$1 = {
		name: name$9,
		factory: factory_1$9
	};

	var fraction$2 = [// type
	Fraction_1, // construction function
	fraction$1];

	/**
	 * Create a range error with the message:
	 *     'Dimension mismatch (<actual size> != <expected size>)'
	 * @param {number | number[]} actual        The actual size
	 * @param {number | number[]} expected      The expected size
	 * @param {string} [relation='!=']          Optional relation between actual
	 *                                          and expected size: '!=', '<', etc.
	 * @extends RangeError
	 */

	function DimensionError(actual, expected, relation) {
	  if (!(this instanceof DimensionError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.actual = actual;
	  this.expected = expected;
	  this.relation = relation;
	  this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
	  this.stack = new Error().stack;
	}

	DimensionError.prototype = new RangeError();
	DimensionError.prototype.constructor = RangeError;
	DimensionError.prototype.name = 'DimensionError';
	DimensionError.prototype.isDimensionError = true;
	var DimensionError_1 = DimensionError;

	/**
	 * Create a range error with the message:
	 *     'Index out of range (index < min)'
	 *     'Index out of range (index < max)'
	 *
	 * @param {number} index     The actual index
	 * @param {number} [min=0]   Minimum index (included)
	 * @param {number} [max]     Maximum index (excluded)
	 * @extends RangeError
	 */

	function IndexError(index, min, max) {
	  if (!(this instanceof IndexError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  this.index = index;

	  if (arguments.length < 3) {
	    this.min = 0;
	    this.max = min;
	  } else {
	    this.min = min;
	    this.max = max;
	  }

	  if (this.min !== undefined && this.index < this.min) {
	    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
	  } else if (this.max !== undefined && this.index >= this.max) {
	    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
	  } else {
	    this.message = 'Index out of range (' + this.index + ')';
	  }

	  this.stack = new Error().stack;
	}

	IndexError.prototype = new RangeError();
	IndexError.prototype.constructor = RangeError;
	IndexError.prototype.name = 'IndexError';
	IndexError.prototype.isIndexError = true;
	var IndexError_1 = IndexError;

	var array = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.size = size;
	exports.validate = validate;
	exports.validateIndex = validateIndex;
	exports.resize = resize;
	exports.reshape = reshape;
	exports.squeeze = squeeze;
	exports.unsqueeze = unsqueeze;
	exports.flatten = flatten;
	exports.map = map;
	exports.forEach = forEach;
	exports.filter = filter;
	exports.filterRegExp = filterRegExp;
	exports.join = join;
	exports.identify = identify;
	exports.generalize = generalize;

	var _number = _interopRequireDefault(number);

	var _string = _interopRequireDefault(string);

	var _DimensionError = _interopRequireDefault(DimensionError_1);

	var _IndexError = _interopRequireDefault(IndexError_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Calculate the size of a multi dimensional array.
	 * This function checks the size of the first entry, it does not validate
	 * whether all dimensions match. (use function `validate` for that)
	 * @param {Array} x
	 * @Return {Number[]} size
	 */
	function size(x) {
	  var s = [];

	  while (Array.isArray(x)) {
	    s.push(x.length);
	    x = x[0];
	  }

	  return s;
	}
	/**
	 * Recursively validate whether each element in a multi dimensional array
	 * has a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @param {number} dim   Current dimension
	 * @throws DimensionError
	 * @private
	 */


	function _validate(array, size, dim) {
	  var i;
	  var len = array.length;

	  if (len !== size[dim]) {
	    throw new _DimensionError.default(len, size[dim]);
	  }

	  if (dim < size.length - 1) {
	    // recursively validate each child array
	    var dimNext = dim + 1;

	    for (i = 0; i < len; i++) {
	      var child = array[i];

	      if (!Array.isArray(child)) {
	        throw new _DimensionError.default(size.length - 1, size.length, '<');
	      }

	      _validate(array[i], size, dimNext);
	    }
	  } else {
	    // last dimension. none of the childs may be an array
	    for (i = 0; i < len; i++) {
	      if (Array.isArray(array[i])) {
	        throw new _DimensionError.default(size.length + 1, size.length, '>');
	      }
	    }
	  }
	}
	/**
	 * Validate whether each element in a multi dimensional array has
	 * a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @throws DimensionError
	 */


	function validate(array, size) {
	  var isScalar = size.length === 0;

	  if (isScalar) {
	    // scalar
	    if (Array.isArray(array)) {
	      throw new _DimensionError.default(array.length, 0);
	    }
	  } else {
	    // array
	    _validate(array, size, 0);
	  }
	}
	/**
	 * Test whether index is an integer number with index >= 0 and index < length
	 * when length is provided
	 * @param {number} index    Zero-based index
	 * @param {number} [length] Length of the array
	 */


	function validateIndex(index, length) {
	  if (!_number.default.isNumber(index) || !_number.default.isInteger(index)) {
	    throw new TypeError('Index must be an integer (value: ' + index + ')');
	  }

	  if (index < 0 || typeof length === 'number' && index >= length) {
	    throw new _IndexError.default(index, length);
	  }
	}
	/**
	 * Resize a multi dimensional array. The resized array is returned.
	 * @param {Array} array         Array to be resized
	 * @param {Array.<number>} size Array with the size of each dimension
	 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
	 *                              zero by default. Specify for example `null`,
	 *                              to clearly see entries that are not explicitly
	 *                              set.
	 * @return {Array} array         The resized array
	 */


	function resize(array, size, defaultValue) {
	  // TODO: add support for scalars, having size=[] ?
	  // check the type of the arguments
	  if (!Array.isArray(array) || !Array.isArray(size)) {
	    throw new TypeError('Array expected');
	  }

	  if (size.length === 0) {
	    throw new Error('Resizing to scalar is not supported');
	  } // check whether size contains positive integers


	  size.forEach(function (value) {
	    if (!_number.default.isNumber(value) || !_number.default.isInteger(value) || value < 0) {
	      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + _string.default.format(size) + ')');
	    }
	  }); // recursively resize the array

	  var _defaultValue = defaultValue !== undefined ? defaultValue : 0;

	  _resize(array, size, 0, _defaultValue);

	  return array;
	}
	/**
	 * Recursively resize a multi dimensional array
	 * @param {Array} array         Array to be resized
	 * @param {number[]} size       Array with the size of each dimension
	 * @param {number} dim          Current dimension
	 * @param {*} [defaultValue]    Value to be filled in in new entries,
	 *                              undefined by default.
	 * @private
	 */


	function _resize(array, size, dim, defaultValue) {
	  var i;
	  var elem;
	  var oldLen = array.length;
	  var newLen = size[dim];
	  var minLen = Math.min(oldLen, newLen); // apply new length

	  array.length = newLen;

	  if (dim < size.length - 1) {
	    // non-last dimension
	    var dimNext = dim + 1; // resize existing child arrays

	    for (i = 0; i < minLen; i++) {
	      // resize child array
	      elem = array[i];

	      if (!Array.isArray(elem)) {
	        elem = [elem]; // add a dimension

	        array[i] = elem;
	      }

	      _resize(elem, size, dimNext, defaultValue);
	    } // create new child arrays


	    for (i = minLen; i < newLen; i++) {
	      // get child array
	      elem = [];
	      array[i] = elem; // resize new child array

	      _resize(elem, size, dimNext, defaultValue);
	    }
	  } else {
	    // last dimension
	    // remove dimensions of existing values
	    for (i = 0; i < minLen; i++) {
	      while (Array.isArray(array[i])) {
	        array[i] = array[i][0];
	      }
	    } // fill new elements with the default value


	    for (i = minLen; i < newLen; i++) {
	      array[i] = defaultValue;
	    }
	  }
	}
	/**
	 * Re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {Array.<number>} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 *
	 * @throws {DimensionError}       If the product of the new dimension sizes does
	 *                                not equal that of the old ones
	 */


	function reshape(array, sizes) {
	  var flatArray = flatten(array);
	  var newArray;

	  function product(arr) {
	    return arr.reduce(function (prev, curr) {
	      return prev * curr;
	    });
	  }

	  if (!Array.isArray(array) || !Array.isArray(sizes)) {
	    throw new TypeError('Array expected');
	  }

	  if (sizes.length === 0) {
	    throw new _DimensionError.default(0, product(size(array)), '!=');
	  }

	  var totalSize = 1;

	  for (var sizeIndex = 0; sizeIndex < sizes.length; sizeIndex++) {
	    totalSize *= sizes[sizeIndex];
	  }

	  if (flatArray.length !== totalSize) {
	    throw new _DimensionError.default(product(sizes), product(size(array)), '!=');
	  }

	  try {
	    newArray = _reshape(flatArray, sizes);
	  } catch (e) {
	    if (e instanceof _DimensionError.default) {
	      throw new _DimensionError.default(product(sizes), product(size(array)), '!=');
	    }

	    throw e;
	  }

	  return newArray;
	}
	/**
	 * Iteratively re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {Array.<number>} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 */


	function _reshape(array, sizes) {
	  // testing if there are enough elements for the requested shape
	  var tmpArray = array;
	  var tmpArray2; // for each dimensions starting by the last one and ignoring the first one

	  for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
	    var size = sizes[sizeIndex];
	    tmpArray2 = []; // aggregate the elements of the current tmpArray in elements of the requested size

	    var length = tmpArray.length / size;

	    for (var i = 0; i < length; i++) {
	      tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
	    } // set it as the new tmpArray for the next loop turn or for return


	    tmpArray = tmpArray2;
	  }

	  return tmpArray;
	}
	/**
	 * Squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {Array} [arraySize]
	 * @returns {Array} returns the array itself
	 */


	function squeeze(array, arraySize) {
	  var s = arraySize || size(array); // squeeze outer dimensions

	  while (Array.isArray(array) && array.length === 1) {
	    array = array[0];
	    s.shift();
	  } // find the first dimension to be squeezed


	  var dims = s.length;

	  while (s[dims - 1] === 1) {
	    dims--;
	  } // squeeze inner dimensions


	  if (dims < s.length) {
	    array = _squeeze(array, dims, 0);
	    s.length = dims;
	  }

	  return array;
	}
	/**
	 * Recursively squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */


	function _squeeze(array, dims, dim) {
	  var i, ii;

	  if (dim < dims) {
	    var next = dim + 1;

	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _squeeze(array[i], dims, next);
	    }
	  } else {
	    while (Array.isArray(array)) {
	      array = array[0];
	    }
	  }

	  return array;
	}
	/**
	 * Unsqueeze a multi dimensional array: add dimensions when missing
	 *
	 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
	 *
	 * @param {Array} array
	 * @param {number} dims       Desired number of dimensions of the array
	 * @param {number} [outer]    Number of outer dimensions to be added
	 * @param {Array} [arraySize] Current size of array.
	 * @returns {Array} returns the array itself
	 * @private
	 */


	function unsqueeze(array, dims, outer, arraySize) {
	  var s = arraySize || size(array); // unsqueeze outer dimensions

	  if (outer) {
	    for (var i = 0; i < outer; i++) {
	      array = [array];
	      s.unshift(1);
	    }
	  } // unsqueeze inner dimensions


	  array = _unsqueeze(array, dims, 0);

	  while (s.length < dims) {
	    s.push(1);
	  }

	  return array;
	}
	/**
	 * Recursively unsqueeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */


	function _unsqueeze(array, dims, dim) {
	  var i, ii;

	  if (Array.isArray(array)) {
	    var next = dim + 1;

	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _unsqueeze(array[i], dims, next);
	    }
	  } else {
	    for (var d = dim; d < dims; d++) {
	      array = [array];
	    }
	  }

	  return array;
	}
	/**
	 * Flatten a multi dimensional array, put all elements in a one dimensional
	 * array
	 * @param {Array} array   A multi dimensional array
	 * @return {Array}        The flattened array (1 dimensional)
	 */


	function flatten(array) {
	  if (!Array.isArray(array)) {
	    // if not an array, return as is
	    return array;
	  }

	  var flat = [];
	  array.forEach(function callback(value) {
	    if (Array.isArray(value)) {
	      value.forEach(callback); // traverse through sub-arrays recursively
	    } else {
	      flat.push(value);
	    }
	  });
	  return flat;
	}
	/**
	 * A safe map
	 * @param {Array} array
	 * @param {function} callback
	 */


	function map(array, callback) {
	  return Array.prototype.map.call(array, callback);
	}
	/**
	 * A safe forEach
	 * @param {Array} array
	 * @param {function} callback
	 */


	function forEach(array, callback) {
	  Array.prototype.forEach.call(array, callback);
	}
	/**
	 * A safe filter
	 * @param {Array} array
	 * @param {function} callback
	 */


	function filter(array, callback) {
	  if (size(array).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }

	  return Array.prototype.filter.call(array, callback);
	}
	/**
	 * Filter values in a callback given a regular expression
	 * @param {Array} array
	 * @param {RegExp} regexp
	 * @return {Array} Returns the filtered array
	 * @private
	 */


	function filterRegExp(array, regexp) {
	  if (size(array).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }

	  return Array.prototype.filter.call(array, function (entry) {
	    return regexp.test(entry);
	  });
	}
	/**
	 * A safe join
	 * @param {Array} array
	 * @param {string} separator
	 */


	function join(array, separator) {
	  return Array.prototype.join.call(array, separator);
	}
	/**
	 * Assign a numeric identifier to every element of a sorted array
	 * @param {Array} a  An array
	 * @return {Array} An array of objects containing the original value and its identifier
	 */


	function identify(a) {
	  if (!Array.isArray(a)) {
	    throw new TypeError('Array input expected');
	  }

	  if (a.length === 0) {
	    return a;
	  }

	  var b = [];
	  var count = 0;
	  b[0] = {
	    value: a[0],
	    identifier: 0
	  };

	  for (var i = 1; i < a.length; i++) {
	    if (a[i] === a[i - 1]) {
	      count++;
	    } else {
	      count = 0;
	    }

	    b.push({
	      value: a[i],
	      identifier: count
	    });
	  }

	  return b;
	}
	/**
	 * Remove the numeric identifier from the elements
	 * @param {array} a  An array
	 * @return {array} An array of values without identifiers
	 */


	function generalize(a) {
	  if (!Array.isArray(a)) {
	    throw new TypeError('Array input expected');
	  }

	  if (a.length === 0) {
	    return a;
	  }

	  var b = [];

	  for (var i = 0; i < a.length; i++) {
	    b.push(a[i].value);
	  }

	  return b;
	}
	});

	unwrapExports(array);
	var array_1 = array.size;
	var array_2 = array.validate;
	var array_3 = array.validateIndex;
	var array_4 = array.resize;
	var array_5 = array.reshape;
	var array_6 = array.squeeze;
	var array_7 = array.unsqueeze;
	var array_8 = array.flatten;
	var array_9 = array.map;
	var array_10 = array.forEach;
	var array_11 = array.filter;
	var array_12 = array.filterRegExp;
	var array_13 = array.join;
	var array_14 = array.identify;
	var array_15 = array.generalize;

	/**
	 * Test whether value is a boolean
	 * @param {*} value
	 * @return {boolean} isBoolean
	 */

	var isBoolean = function (value) {
	  return typeof value === 'boolean';
	};

	var boolean_1$1 = {
		isBoolean: isBoolean
	};

	/**
	 * Memoize a given function by caching the computed result.
	 * The cache of a memoized function can be cleared by deleting the `cache`
	 * property of the function.
	 *
	 * @param {function} fn                     The function to be memoized.
	 *                                          Must be a pure function.
	 * @param {function(args: Array)} [hasher]  A custom hash builder.
	 *                                          Is JSON.stringify by default.
	 * @return {function}                       Returns the memoized function
	 */

	function _typeof$3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

	var memoize = function (fn, hasher) {
	  return function memoize() {
	    if (_typeof$3(memoize.cache) !== 'object') {
	      memoize.cache = {};
	    }

	    var args = [];

	    for (var i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }

	    var hash = hasher ? hasher(args) : JSON.stringify(args);

	    if (!(hash in memoize.cache)) {
	      memoize.cache[hash] = fn.apply(fn, args);
	    }

	    return memoize.cache[hash];
	  };
	};
	/**
	 * Find the maximum number of arguments expected by a typed function.
	 * @param {function} fn   A typed function
	 * @return {number} Returns the maximum number of expected arguments.
	 *                  Returns -1 when no signatures where found on the function.
	 */


	var maxArgumentCount = function (fn) {
	  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
	    var count = (signature.match(/,/g) || []).length + 1;
	    return Math.max(args, count);
	  }, -1);
	};
	/**
	 * Call a typed function with the
	 * @param {function} fn   A function or typed function
	 * @return {number} Returns the maximum number of expected arguments.
	 *                  Returns -1 when no signatures where found on the function.
	 */


	var callWithRightArgumentCount = function (fn, args, argCount) {
	  return Object.keys(fn.signatures || {}).reduce(function (args, signature) {
	    var count = (signature.match(/,/g) || []).length + 1;
	    return Math.max(args, count);
	  }, -1);
	};

	var _function = {
		memoize: memoize,
		maxArgumentCount: maxArgumentCount,
		callWithRightArgumentCount: callWithRightArgumentCount
	};

	var utils = createCommonjsModule(function (module, exports) {

	exports.array = array;
	exports['boolean'] = boolean_1$1;
	exports['function'] = _function;
	exports.number = number;
	exports.object = object;
	exports.string = string;
	exports.emitter = emitter;
	});
	var utils_1 = utils.array;
	var utils_2 = utils.number;
	var utils_3 = utils.object;
	var utils_4 = utils.string;
	var utils_5 = utils.emitter;

	var string$1 = utils.string;
	var isString = string$1.isString;

	function factory$a(type, config, load, typed) {
	  /**
	   * @constructor Matrix
	   *
	   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
	   * array. A matrix can be constructed as:
	   *
	   *     let matrix = math.matrix(data)
	   *
	   * Matrix contains the functions to resize, get and set values, get the size,
	   * clone the matrix and to convert the matrix to a vector, array, or scalar.
	   * Furthermore, one can iterate over the matrix using map and forEach.
	   * The internal Array of the Matrix can be accessed using the function valueOf.
	   *
	   * Example usage:
	   *
	   *     let matrix = math.matrix([[1, 2], [3, 4]])
	   *     matix.size()              // [2, 2]
	   *     matrix.resize([3, 2], 5)
	   *     matrix.valueOf()          // [[1, 2], [3, 4], [5, 5]]
	   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
	   *
	   */
	  function Matrix() {
	    if (!(this instanceof Matrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }
	  /**
	   * Attach type information
	   */


	  Matrix.prototype.type = 'Matrix';
	  Matrix.prototype.isMatrix = true;
	  /**
	   * Get the Matrix storage constructor for the given format.
	   *
	   * @param {string} format       The Matrix storage format.
	   *
	   * @return {Function}           The Matrix storage constructor.
	   */

	  Matrix.storage = function (format) {
	    // check storage format is a string
	    if (!isString(format)) {
	      throw new TypeError('format must be a string value');
	    } // get storage format constructor


	    var constructor = Matrix._storage[format];

	    if (!constructor) {
	      throw new SyntaxError('Unsupported matrix storage format: ' + format);
	    } // return storage constructor


	    return constructor;
	  }; // a map with all constructors for all storage types


	  Matrix._storage = {};
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */

	  Matrix.prototype.storage = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke storage on a Matrix interface');
	  };
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()    // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */


	  Matrix.prototype.datatype = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke datatype on a Matrix interface');
	  };
	  /**
	   * Create a new Matrix With the type of the current matrix instance
	   * @param {Array | Object} data
	   * @param {string} [datatype]
	   */


	  Matrix.prototype.create = function (data, datatype) {
	    throw new Error('Cannot invoke create on a Matrix interface');
	  };
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */


	  Matrix.prototype.subset = function (index, replacement, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke subset on a Matrix interface');
	  };
	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */


	  Matrix.prototype.get = function (index) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke get on a Matrix interface');
	  };
	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {Matrix} self
	   */


	  Matrix.prototype.set = function (index, value, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke set on a Matrix interface');
	  };
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */


	  Matrix.prototype.resize = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke resize on a Matrix interface');
	  };
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */


	  Matrix.prototype.reshape = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke reshape on a Matrix interface');
	  };
	  /**
	   * Create a clone of the matrix
	   * @return {Matrix} clone
	   */


	  Matrix.prototype.clone = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke clone on a Matrix interface');
	  };
	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */


	  Matrix.prototype.size = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke size on a Matrix interface');
	  };
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {Matrix} matrix
	   */


	  Matrix.prototype.map = function (callback, skipZeros) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke map on a Matrix interface');
	  };
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */


	  Matrix.prototype.forEach = function (callback) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke forEach on a Matrix interface');
	  };
	  /**
	   * Create an Array with a copy of the data of the Matrix
	   * @returns {Array} array
	   */


	  Matrix.prototype.toArray = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toArray on a Matrix interface');
	  };
	  /**
	   * Get the primitive value of the Matrix: a multidimensional array
	   * @returns {Array} array
	   */


	  Matrix.prototype.valueOf = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke valueOf on a Matrix interface');
	  };
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */


	  Matrix.prototype.format = function (options) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke format on a Matrix interface');
	  };
	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */


	  Matrix.prototype.toString = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toString on a Matrix interface');
	  }; // exports


	  return Matrix;
	}

	var name$a = 'Matrix';
	var path$3 = 'type';
	var factory_1$a = factory$a;

	var Matrix = {
		name: name$a,
		path: path$3,
		factory: factory_1$a
	};

	function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

	function factory$b(type, config, load, typed) {
	  /**
	   * Determine the type of a variable.
	   *
	   * Function `typeof` recognizes the following types of objects:
	   *
	   * Object                 | Returns       | Example
	   * ---------------------- | ------------- | ------------------------------------------
	   * null                   | `'null'`      | `math.typeof(null)`
	   * number                 | `'number'`    | `math.typeof(3.5)`
	   * boolean                | `'boolean'`   | `math.typeof(true)`
	   * string                 | `'string'`    | `math.typeof('hello world')`
	   * Array                  | `'Array'`     | `math.typeof([1, 2, 3])`
	   * Date                   | `'Date'`      | `math.typeof(new Date())`
	   * Function               | `'Function'`  | `math.typeof(function () {})`
	   * Object                 | `'Object'`    | `math.typeof({a: 2, b: 3})`
	   * RegExp                 | `'RegExp'`    | `math.typeof(/a regexp/)`
	   * undefined              | `'undefined'` | `math.typeof(undefined)`
	   * math.type.BigNumber    | `'BigNumber'` | `math.typeof(math.bignumber('2.3e500'))`
	   * math.type.Chain        | `'Chain'`     | `math.typeof(math.chain(2))`
	   * math.type.Complex      | `'Complex'`   | `math.typeof(math.complex(2, 3))`
	   * math.type.Fraction     | `'Fraction'`  | `math.typeof(math.fraction(1, 3))`
	   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`
	   * math.type.Help         | `'Help'`      | `math.typeof(math.help('sqrt'))`
	   * math.type.Index        | `'Index'`     | `math.typeof(math.index(1, 3))`
	   * math.type.Matrix       | `'Matrix'`    | `math.typeof(math.matrix([[1,2], [3, 4]]))`
	   * math.type.Range        | `'Range'`     | `math.typeof(math.range(0, 10))`
	   * math.type.ResultSet    | `'ResultSet'` | `math.typeof(math.eval('a=2\nb=3'))`
	   * math.type.Unit         | `'Unit'`      | `math.typeof(math.unit('45 deg'))`
	   * math.expression.node&#8203;.AccessorNode            | `'AccessorNode'`            | `math.typeof(math.parse('A[2]'))`
	   * math.expression.node&#8203;.ArrayNode               | `'ArrayNode'`               | `math.typeof(math.parse('[1,2,3]'))`
	   * math.expression.node&#8203;.AssignmentNode          | `'AssignmentNode'`          | `math.typeof(math.parse('x=2'))`
	   * math.expression.node&#8203;.BlockNode               | `'BlockNode'`               | `math.typeof(math.parse('a=2; b=3'))`
	   * math.expression.node&#8203;.ConditionalNode         | `'ConditionalNode'`         | `math.typeof(math.parse('x<0 ? -x : x'))`
	   * math.expression.node&#8203;.ConstantNode            | `'ConstantNode'`            | `math.typeof(math.parse('2.3'))`
	   * math.expression.node&#8203;.FunctionAssignmentNode  | `'FunctionAssignmentNode'`  | `math.typeof(math.parse('f(x)=x^2'))`
	   * math.expression.node&#8203;.FunctionNode            | `'FunctionNode'`            | `math.typeof(math.parse('sqrt(4)'))`
	   * math.expression.node&#8203;.IndexNode               | `'IndexNode'`               | `math.typeof(math.parse('A[2]').index)`
	   * math.expression.node&#8203;.ObjectNode              | `'ObjectNode'`              | `math.typeof(math.parse('{a:2}'))`
	   * math.expression.node&#8203;.ParenthesisNode         | `'ParenthesisNode'`         | `math.typeof(math.parse('(2+3)'))`
	   * math.expression.node&#8203;.RangeNode               | `'RangeNode'`               | `math.typeof(math.parse('1:10'))`
	   * math.expression.node&#8203;.SymbolNode              | `'SymbolNode'`              | `math.typeof(math.parse('x'))`
	   *
	   * Syntax:
	   *
	   *    math.typeof(x)
	   *
	   * Examples:
	   *
	   *    math.typeof(3.5)                     // returns 'number'
	   *    math.typeof(math.complex('2-4i'))    // returns 'Complex'
	   *    math.typeof(math.unit('45 deg'))     // returns 'Unit'
	   *    math.typeof('hello world')           // returns 'string'
	   *
	   * @param {*} x     The variable for which to test the type.
	   * @return {string} Returns the name of the type. Primitive types are lower case,
	   *                  non-primitive types are upper-camel-case.
	   *                  For example 'number', 'string', 'Array', 'Date'.
	   */
	  var _typeof = typed('_typeof', {
	    'any': function any(x) {
	      var t = _typeof2(x);

	      if (t === 'object') {
	        // JavaScript types
	        if (x === null) return 'null';
	        if (Array.isArray(x)) return 'Array';
	        if (x instanceof Date) return 'Date';
	        if (x instanceof RegExp) return 'RegExp'; // math.js types

	        if (type.isBigNumber(x)) return 'BigNumber';
	        if (type.isComplex(x)) return 'Complex';
	        if (type.isFraction(x)) return 'Fraction';
	        if (type.isMatrix(x)) return 'Matrix';
	        if (type.isUnit(x)) return 'Unit';
	        if (type.isIndex(x)) return 'Index';
	        if (type.isRange(x)) return 'Range';
	        if (type.isResultSet(x)) return 'ResultSet';
	        if (type.isNode(x)) return x.type;
	        if (type.isChain(x)) return 'Chain';
	        if (type.isHelp(x)) return 'Help';
	        return 'Object';
	      }

	      if (t === 'function') return 'Function';
	      return t; // can be 'string', 'number', 'boolean', ...
	    }
	  });

	  _typeof.toTex = undefined; // use default template

	  return _typeof;
	}

	var name$b = 'typeof';
	var factory_1$b = factory$b;

	var _typeof$4 = {
		name: name$b,
		factory: factory_1$b
	};

	function factory$c(type, config, load, typed) {
	  var _typeof = load(_typeof$4);

	  function getArrayDataType(array) {
	    var _type; // to hold type info


	    var _length = 0; // to hold length value to ensure it has consistent sizes

	    for (var i = 0; i < array.length; i++) {
	      var item = array[i];
	      var isArray = Array.isArray(item); // Saving the target matrix row size

	      if (i === 0 && isArray) {
	        _length = item.length;
	      } // If the current item is an array but the length does not equal the targetVectorSize


	      if (isArray && item.length !== _length) {
	        return undefined;
	      }

	      var itemType = isArray ? getArrayDataType(item) // recurse into a nested array
	      : _typeof(item);

	      if (_type === undefined) {
	        _type = itemType; // first item
	      } else if (_type !== itemType) {
	        return 'mixed';
	      }
	    }

	    return _type;
	  }

	  return getArrayDataType;
	}
	/**
	 * Check the datatype of a given object
	 * This is a low level implementation that should only be used by
	 * parent Matrix classes such as SparseMatrix or DenseMatrix
	 * This method does not validate Array Matrix shape
	 * @param array
	 * @return string
	 */


	var factory_1$c = factory$c;

	var getArrayDataType = {
		factory: factory_1$c
	};

	var string$2 = utils.string;
	var array$1 = utils.array;
	var object$1 = utils.object;
	var number$1 = utils.number;
	var isArray = Array.isArray;
	var isNumber$1 = number$1.isNumber;
	var isInteger = number$1.isInteger;
	var isString$1 = string$2.isString;
	var validateIndex = array$1.validateIndex;

	function factory$d(type, config, load, typed) {
	  var getArrayDataType$1 = load(getArrayDataType);
	  var Matrix$1 = load(Matrix); // force loading Matrix (do not use via type.Matrix)

	  /**
	   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
	   * @class DenseMatrix
	   */

	  function DenseMatrix(data, datatype) {
	    if (!(this instanceof DenseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (datatype && !isString$1(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }

	    if (type.isMatrix(data)) {
	      // check data is a DenseMatrix
	      if (data.type === 'DenseMatrix') {
	        // clone data & size
	        this._data = object$1.clone(data._data);
	        this._size = object$1.clone(data._size);
	        this._datatype = datatype || data._datatype;
	      } else {
	        // build data from existing matrix
	        this._data = data.toArray();
	        this._size = data.size();
	        this._datatype = datatype || data._datatype;
	      }
	    } else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    } else if (isArray(data)) {
	      // replace nested Matrices with Arrays
	      this._data = preprocess(data); // get the dimensions of the array

	      this._size = array$1.size(this._data); // verify the dimensions of the array, TODO: compute size while processing array

	      array$1.validate(this._data, this._size); // data type unknown

	      this._datatype = datatype;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + utils.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	    }
	  }

	  DenseMatrix.prototype = new Matrix$1();
	  /**
	   * Attach type information
	   */

	  DenseMatrix.prototype.type = 'DenseMatrix';
	  DenseMatrix.prototype.isDenseMatrix = true;
	  /**
	   * Get the matrix type
	   *
	   * Usage:
	   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
	   *
	   * @memberOf DenseMatrix
	   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
	   */

	  DenseMatrix.prototype.getDataType = function () {
	    return getArrayDataType$1(this._data);
	  };
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()  // retrieve storage format
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The storage format.
	   */


	  DenseMatrix.prototype.storage = function () {
	    return 'dense';
	  };
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()   // retrieve matrix datatype
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The datatype.
	   */


	  DenseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };
	  /**
	   * Create a new DenseMatrix
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */


	  DenseMatrix.prototype.create = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof DenseMatrix
	   * @param {Index} index
	   * @param {Array | DenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */


	  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    switch (arguments.length) {
	      case 1:
	        return _get(this, index);
	      // intentional fall through

	      case 2:
	      case 3:
	        return _set(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	  /**
	   * Get a single element from the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */


	  DenseMatrix.prototype.get = function (index) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }

	    if (index.length !== this._size.length) {
	      throw new DimensionError_1(index.length, this._size.length);
	    } // check index


	    for (var x = 0; x < index.length; x++) {
	      validateIndex(index[x], this._size[x]);
	    }

	    var data = this._data;

	    for (var i = 0, ii = index.length; i < ii; i++) {
	      var indexI = index[i];
	      validateIndex(indexI, data.length);
	      data = data[indexI];
	    }

	    return data;
	  };
	  /**
	   * Replace a single element in the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {DenseMatrix} self
	   */


	  DenseMatrix.prototype.set = function (index, value, defaultValue) {
	    if (!isArray(index)) {
	      throw new TypeError('Array expected');
	    }

	    if (index.length < this._size.length) {
	      throw new DimensionError_1(index.length, this._size.length, '<');
	    }

	    var i, ii, indexI; // enlarge matrix when needed

	    var size = index.map(function (i) {
	      return i + 1;
	    });

	    _fit(this, size, defaultValue); // traverse over the dimensions


	    var data = this._data;

	    for (i = 0, ii = index.length - 1; i < ii; i++) {
	      indexI = index[i];
	      validateIndex(indexI, data.length);
	      data = data[indexI];
	    } // set new value


	    indexI = index[index.length - 1];
	    validateIndex(indexI, data.length);
	    data[indexI] = value;
	    return this;
	  };
	  /**
	   * Get a submatrix of this matrix
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index   Zero-based index
	   * @private
	   */


	  function _get(matrix, index) {
	    if (!type.isIndex(index)) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = index.isScalar();

	    if (isScalar) {
	      // return a scalar
	      return matrix.get(index.min());
	    } else {
	      // validate dimensions
	      var size = index.size();

	      if (size.length !== matrix._size.length) {
	        throw new DimensionError_1(size.length, matrix._size.length);
	      } // validate if any of the ranges in the index is out of range


	      var min = index.min();
	      var max = index.max();

	      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
	        validateIndex(min[i], matrix._size[i]);
	        validateIndex(max[i], matrix._size[i]);
	      } // retrieve submatrix
	      // TODO: more efficient when creating an empty matrix and setting _data and _size manually


	      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
	    }
	  }
	  /**
	   * Recursively get a submatrix of a multi dimensional matrix.
	   * Index is not checked for correct number or length of dimensions.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim    Current dimension
	   * @return {Array} submatrix
	   * @private
	   */


	  function _getSubmatrix(data, index, dims, dim) {
	    var last = dim === dims - 1;
	    var range = index.dimension(dim);

	    if (last) {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        return data[i];
	      }).valueOf();
	    } else {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        var child = data[i];
	        return _getSubmatrix(child, index, dims, dim + 1);
	      }).valueOf();
	    }
	  }
	  /**
	   * Replace a submatrix in this matrix
	   * Indexes are zero-based.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index
	   * @param {DenseMatrix | Array | *} submatrix
	   * @param {*} defaultValue          Default value, filled in on new entries when
	   *                                  the matrix is resized.
	   * @return {DenseMatrix} matrix
	   * @private
	   */


	  function _set(matrix, index, submatrix, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    } // get index size and check whether the index contains a single value


	    var iSize = index.size();
	    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

	    var sSize;

	    if (type.isMatrix(submatrix)) {
	      sSize = submatrix.size();
	      submatrix = submatrix.valueOf();
	    } else {
	      sSize = array$1.size(submatrix);
	    }

	    if (isScalar) {
	      // set a scalar
	      // check whether submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }

	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // set a submatrix
	      // validate dimensions
	      if (iSize.length < matrix._size.length) {
	        throw new DimensionError_1(iSize.length, matrix._size.length, '<');
	      }

	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;

	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }

	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        } // unsqueeze both outer and inner dimensions


	        submatrix = array$1.unsqueeze(submatrix, iSize.length, outer, sSize);
	      } // check whether the size of the submatrix matches the index size


	      if (!object$1.deepEqual(iSize, sSize)) {
	        throw new DimensionError_1(iSize, sSize, '>');
	      } // enlarge matrix when needed


	      var size = index.max().map(function (i) {
	        return i + 1;
	      });

	      _fit(matrix, size, defaultValue); // insert the sub matrix


	      var dims = iSize.length;
	      var dim = 0;

	      _setSubmatrix(matrix._data, index, submatrix, dims, dim);
	    }

	    return matrix;
	  }
	  /**
	   * Replace a submatrix of a multi dimensional matrix.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {Array} submatrix
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim
	   * @private
	   */


	  function _setSubmatrix(data, index, submatrix, dims, dim) {
	    var last = dim === dims - 1;
	    var range = index.dimension(dim);

	    if (last) {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        data[dataIndex] = submatrix[subIndex[0]];
	      });
	    } else {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);

	        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
	      });
	    }
	  }
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */


	  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isArray(size)) {
	      throw new TypeError('Array expected');
	    } // matrix to resize


	    var m = copy ? this.clone() : this; // resize matrix

	    return _resize(m, size, defaultValue);
	  };

	  function _resize(matrix, size, defaultValue) {
	    // check size
	    if (size.length === 0) {
	      // first value in matrix
	      var v = matrix._data; // go deep

	      while (isArray(v)) {
	        v = v[0];
	      }

	      return v;
	    } // resize matrix


	    matrix._size = size.slice(0); // copy the array

	    matrix._data = array$1.resize(matrix._data, matrix._size, defaultValue); // return matrix

	    return matrix;
	  }
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */


	  DenseMatrix.prototype.reshape = function (size, copy) {
	    var m = copy ? this.clone() : this;
	    m._data = array$1.reshape(m._data, size);
	    m._size = size.slice(0);
	    return m;
	  };
	  /**
	   * Enlarge the matrix when it is smaller than given size.
	   * If the matrix is larger or equal sized, nothing is done.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix           The matrix to be resized
	   * @param {number[]} size
	   * @param {*} defaultValue          Default value, filled in on new entries.
	   * @private
	   */


	  function _fit(matrix, size, defaultValue) {
	    var // copy the array
	    newSize = matrix._size.slice(0);

	    var changed = false; // add dimensions when needed

	    while (newSize.length < size.length) {
	      newSize.push(0);
	      changed = true;
	    } // enlarge size when needed


	    for (var i = 0, ii = size.length; i < ii; i++) {
	      if (size[i] > newSize[i]) {
	        newSize[i] = size[i];
	        changed = true;
	      }
	    }

	    if (changed) {
	      // resize only when size is changed
	      _resize(matrix, newSize, defaultValue);
	    }
	  }
	  /**
	   * Create a clone of the matrix
	   * @memberof DenseMatrix
	   * @return {DenseMatrix} clone
	   */


	  DenseMatrix.prototype.clone = function () {
	    var m = new DenseMatrix({
	      data: object$1.clone(this._data),
	      size: object$1.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  /**
	   * Retrieve the size of the matrix.
	   * @memberof DenseMatrix
	   * @returns {number[]} size
	   */


	  DenseMatrix.prototype.size = function () {
	    return this._size.slice(0); // return a clone of _size
	  };
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   *
	   * @return {DenseMatrix} matrix
	   */


	  DenseMatrix.prototype.map = function (callback) {
	    // matrix instance
	    var me = this;

	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        return value.map(function (child, i) {
	          return recurse(child, index.concat(i));
	        });
	      } else {
	        return callback(value, index, me);
	      }
	    }; // return dense format


	    return new DenseMatrix({
	      data: recurse(this._data, []),
	      size: object$1.clone(this._size),
	      datatype: this._datatype
	    });
	  };
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */


	  DenseMatrix.prototype.forEach = function (callback) {
	    // matrix instance
	    var me = this;

	    var recurse = function recurse(value, index) {
	      if (isArray(value)) {
	        value.forEach(function (child, i) {
	          recurse(child, index.concat(i));
	        });
	      } else {
	        callback(value, index, me);
	      }
	    };

	    recurse(this._data, []);
	  };
	  /**
	   * Create an Array with a copy of the data of the DenseMatrix
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */


	  DenseMatrix.prototype.toArray = function () {
	    return object$1.clone(this._data);
	  };
	  /**
	   * Get the primitive value of the DenseMatrix: a multidimensional array
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */


	  DenseMatrix.prototype.valueOf = function () {
	    return this._data;
	  };
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof DenseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */


	  DenseMatrix.prototype.format = function (options) {
	    return string$2.format(this._data, options);
	  };
	  /**
	   * Get a string representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {string} str
	   */


	  DenseMatrix.prototype.toString = function () {
	    return string$2.format(this._data);
	  };
	  /**
	   * Get a JSON representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {Object}
	   */


	  DenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'DenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof DenseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Array}                      The array vector with the diagonal values.
	   */


	  DenseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (type.isBigNumber(k)) {
	        k = k.toNumber();
	      } // is must be an integer


	      if (!isNumber$1(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // rows & columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // number diagonal values

	    var n = Math.min(rows - kSub, columns - kSuper); // x is a matrix get diagonal from matrix

	    var data = []; // loop rows

	    for (var i = 0; i < n; i++) {
	      data[i] = this._data[i + kSub][i + kSuper];
	    } // create DenseMatrix


	    return new DenseMatrix({
	      data: data,
	      size: [n],
	      datatype: this._datatype
	    });
	  };
	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {Array} size                   The matrix size.
	   * @param {number | Array} value          The values for the diagonal.
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]        The default value for non-diagonal
	   *
	   * @returns {DenseMatrix}
	   */


	  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size)) {
	      throw new TypeError('Array expected, size parameter');
	    }

	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    } // map size & validate


	    size = size.map(function (s) {
	      // check it is a big number
	      if (type.isBigNumber(s)) {
	        // convert it
	        s = s.toNumber();
	      } // validate arguments


	      if (!isNumber$1(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }

	      return s;
	    }); // validate k if any

	    if (k) {
	      // convert BigNumber to a number
	      if (type.isBigNumber(k)) {
	        k = k.toNumber();
	      } // is must be an integer


	      if (!isNumber$1(k) || !isInteger(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    if (defaultValue && isString$1(datatype)) {
	      // convert defaultValue to the same datatype
	      defaultValue = typed.convert(defaultValue, datatype);
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // rows and columns

	    var rows = size[0];
	    var columns = size[1]; // number of non-zero items

	    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

	    var _value; // check value


	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      } // define function


	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (type.isMatrix(value)) {
	      // matrix size
	      var ms = value.size(); // validate matrix

	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      } // define function


	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    } // discover default value if needed


	    if (!defaultValue) {
	      // check first value in array
	      defaultValue = type.isBigNumber(_value(0)) ? new type.BigNumber(0) : 0;
	    } // empty array


	    var data = []; // check we need to resize array

	    if (size.length > 0) {
	      // resize array
	      data = array$1.resize(data, size, defaultValue); // fill diagonal

	      for (var d = 0; d < n; d++) {
	        data[d + kSub][d + kSuper] = _value(d);
	      }
	    } // create DenseMatrix


	    return new DenseMatrix({
	      data: data,
	      size: [rows, columns]
	    });
	  };
	  /**
	   * Generate a matrix from a JSON object
	   * @memberof DenseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {DenseMatrix}
	   */


	  DenseMatrix.fromJSON = function (json) {
	    return new DenseMatrix(json);
	  };
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */


	  DenseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber$1(i) || !isInteger(i) || !isNumber$1(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    } // check dimensions


	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    } // validate index


	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]); // swap rows

	    DenseMatrix._swapRows(i, j, this._data); // return current instance


	    return this;
	  };
	  /**
	   * Swap rows i and j in Dense Matrix data structure.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   */


	  DenseMatrix._swapRows = function (i, j, data) {
	    // swap values i <-> j
	    var vi = data[i];
	    data[i] = data[j];
	    data[j] = vi;
	  };
	  /**
	   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
	   * Matrices. Replaces all nested Matrices with Arrays
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @return {Array} data
	   */


	  function preprocess(data) {
	    for (var i = 0, ii = data.length; i < ii; i++) {
	      var elem = data[i];

	      if (isArray(elem)) {
	        data[i] = preprocess(elem);
	      } else if (elem && elem.isMatrix === true) {
	        data[i] = preprocess(elem.valueOf());
	      }
	    }

	    return data;
	  } // register this type in the base class Matrix


	  type.Matrix._storage.dense = DenseMatrix;
	  type.Matrix._storage['default'] = DenseMatrix; // exports

	  return DenseMatrix;
	}

	var name$c = 'DenseMatrix';
	var path$4 = 'type';
	var factory_1$d = factory$d;
	var lazy$2 = false; // no lazy loading, as we alter type.Matrix._storage

	var DenseMatrix = {
		name: name$c,
		path: path$4,
		factory: factory_1$d,
		lazy: lazy$2
	};

	/**
	 * Compares two BigNumbers.
	 * @param {BigNumber} x       First value to compare
	 * @param {BigNumber} y       Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	 */

	var nearlyEqual = function nearlyEqual(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon === null || epsilon === undefined) {
	    return x.eq(y);
	  } // use "==" operator, handles infinities


	  if (x.eq(y)) {
	    return true;
	  } // NaN


	  if (x.isNaN() || y.isNaN()) {
	    return false;
	  } // at this point x and y should be finite


	  if (x.isFinite() && y.isFinite()) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = x.minus(y).abs();

	    if (diff.isZero()) {
	      return true;
	    } else {
	      // use relative error
	      var max = x.constructor.max(x.abs(), y.abs());
	      return diff.lte(max.times(epsilon));
	    }
	  } // Infinite and Number or negative Infinite and positive Infinite cases


	  return false;
	};

	var nearlyEqual$1 = number.nearlyEqual;



	function factory$e(type, config, load, typed) {
	  /**
	   * Test whether two values are equal.
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
	   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
	   * @private
	   */
	  var equalScalar = typed('equalScalar', {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x === y;
	    },
	    'number, number': function numberNumber(x, y) {
	      return x === y || nearlyEqual$1(x, y, config.epsilon);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.eq(y) || nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.equals(y);
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.equals(y);
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }

	      return equalScalar(x.value, y.value);
	    }
	  });
	  return equalScalar;
	}

	var factory_1$e = factory$e;

	var equalScalar = {
		factory: factory_1$e
	};

	var array$2 = utils.array;
	var object$2 = utils.object;
	var string$3 = utils.string;
	var number$2 = utils.number;
	var isArray$1 = Array.isArray;
	var isNumber$2 = number$2.isNumber;
	var isInteger$1 = number$2.isInteger;
	var isString$2 = string$3.isString;
	var validateIndex$1 = array$2.validateIndex;

	function factory$f(type, config, load, typed) {
	  var Matrix$1 = load(Matrix); // force loading Matrix (do not use via type.Matrix)

	  var equalScalar$1 = load(equalScalar);
	  var getArrayDataType$1 = load(getArrayDataType);
	  /**
	   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
	   * for sparse matrices.
	   * @class SparseMatrix
	   */

	  function SparseMatrix(data, datatype) {
	    if (!(this instanceof SparseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (datatype && !isString$2(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }

	    if (type.isMatrix(data)) {
	      // create from matrix
	      _createFromMatrix(this, data, datatype);
	    } else if (data && isArray$1(data.index) && isArray$1(data.ptr) && isArray$1(data.size)) {
	      // initialize fields
	      this._values = data.values;
	      this._index = data.index;
	      this._ptr = data.ptr;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    } else if (isArray$1(data)) {
	      // create from array
	      _createFromArray(this, data, datatype);
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + utils.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._values = [];
	      this._index = [];
	      this._ptr = [0];
	      this._size = [0, 0];
	      this._datatype = datatype;
	    }
	  }

	  function _createFromMatrix(matrix, source, datatype) {
	    // check matrix type
	    if (source.type === 'SparseMatrix') {
	      // clone arrays
	      matrix._values = source._values ? object$2.clone(source._values) : undefined;
	      matrix._index = object$2.clone(source._index);
	      matrix._ptr = object$2.clone(source._ptr);
	      matrix._size = object$2.clone(source._size);
	      matrix._datatype = datatype || source._datatype;
	    } else {
	      // build from matrix data
	      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
	    }
	  }

	  function _createFromArray(matrix, data, datatype) {
	    // initialize fields
	    matrix._values = [];
	    matrix._index = [];
	    matrix._ptr = [];
	    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice

	    var rows = data.length;
	    var columns = 0; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0;

	    if (isString$2(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$1, [datatype, datatype]) || equalScalar$1; // convert 0 to the same datatype

	      zero = typed.convert(0, datatype);
	    } // check we have rows (empty array)


	    if (rows > 0) {
	      // column index
	      var j = 0;

	      do {
	        // store pointer to values index
	        matrix._ptr.push(matrix._index.length); // loop rows


	        for (var i = 0; i < rows; i++) {
	          // current row
	          var row = data[i]; // check row is an array

	          if (isArray$1(row)) {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < row.length) {
	              columns = row.length;
	            } // check row has column


	            if (j < row.length) {
	              // value
	              var v = row[j]; // check value != 0

	              if (!eq(v, zero)) {
	                // store value
	                matrix._values.push(v); // index


	                matrix._index.push(i);
	              }
	            }
	          } else {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < 1) {
	              columns = 1;
	            } // check value != 0 (row is a scalar)


	            if (!eq(row, zero)) {
	              // store value
	              matrix._values.push(row); // index


	              matrix._index.push(i);
	            }
	          }
	        } // increment index


	        j++;
	      } while (j < columns);
	    } // store number of values in ptr


	    matrix._ptr.push(matrix._index.length); // size


	    matrix._size = [rows, columns];
	  }

	  SparseMatrix.prototype = new Matrix$1();
	  /**
	   * Attach type information
	   */

	  SparseMatrix.prototype.type = 'SparseMatrix';
	  SparseMatrix.prototype.isSparseMatrix = true;
	  /**
	   * Get the matrix type
	   *
	   * Usage:
	   *    const matrixType = matrix.getDataType()  // retrieves the matrix type
	   *
	   * @memberOf SparseMatrix
	   * @return {string}   type information; if multiple types are found from the Matrix, it will return "mixed"
	   */

	  SparseMatrix.prototype.getDataType = function () {
	    return getArrayDataType$1(this._values);
	  };
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     const format = matrix.storage()   // retrieve storage format
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The storage format.
	   */


	  SparseMatrix.prototype.storage = function () {
	    return 'sparse';
	  };
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     const format = matrix.datatype()    // retrieve matrix datatype
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The datatype.
	   */


	  SparseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };
	  /**
	   * Create a new SparseMatrix
	   * @memberof SparseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */


	  SparseMatrix.prototype.create = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };
	  /**
	   * Get the matrix density.
	   *
	   * Usage:
	   *     const density = matrix.density()                   // retrieve matrix density
	   *
	   * @memberof SparseMatrix
	   * @return {number}           The matrix density.
	   */


	  SparseMatrix.prototype.density = function () {
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1]; // calculate density

	    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;
	  };
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof SparseMatrix
	   * @param {Index} index
	   * @param {Array | Maytrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */


	  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke subset on a Pattern only matrix');
	    } // check arguments


	    switch (arguments.length) {
	      case 1:
	        return _getsubset(this, index);
	      // intentional fall through

	      case 2:
	      case 3:
	        return _setsubset(this, index, replacement, defaultValue);

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };

	  function _getsubset(matrix, idx) {
	    // check idx
	    if (!type.isIndex(idx)) {
	      throw new TypeError('Invalid index');
	    }

	    var isScalar = idx.isScalar();

	    if (isScalar) {
	      // return a scalar
	      return matrix.get(idx.min());
	    } // validate dimensions


	    var size = idx.size();

	    if (size.length !== matrix._size.length) {
	      throw new DimensionError_1(size.length, matrix._size.length);
	    } // vars


	    var i, ii, k, kk; // validate if any of the ranges in the index is out of range

	    var min = idx.min();
	    var max = idx.max();

	    for (i = 0, ii = matrix._size.length; i < ii; i++) {
	      validateIndex$1(min[i], matrix._size[i]);
	      validateIndex$1(max[i], matrix._size[i]);
	    } // matrix arrays


	    var mvalues = matrix._values;
	    var mindex = matrix._index;
	    var mptr = matrix._ptr; // rows & columns dimensions for result matrix

	    var rows = idx.dimension(0);
	    var columns = idx.dimension(1); // workspace & permutation vector

	    var w = [];
	    var pv = []; // loop rows in resulting matrix

	    rows.forEach(function (i, r) {
	      // update permutation vector
	      pv[i] = r[0]; // mark i in workspace

	      w[i] = true;
	    }); // result matrix arrays

	    var values = mvalues ? [] : undefined;
	    var index = [];
	    var ptr = []; // loop columns in result matrix

	    columns.forEach(function (j) {
	      // update ptr
	      ptr.push(index.length); // loop values in column j

	      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
	        // row
	        i = mindex[k]; // check row is in result matrix

	        if (w[i] === true) {
	          // push index
	          index.push(pv[i]); // check we need to process values

	          if (values) {
	            values.push(mvalues[k]);
	          }
	        }
	      }
	    }); // update ptr

	    ptr.push(index.length); // return matrix

	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: size,
	      datatype: matrix._datatype
	    });
	  }

	  function _setsubset(matrix, index, submatrix, defaultValue) {
	    // check index
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    } // get index size and check whether the index contains a single value


	    var iSize = index.size();
	    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed

	    var sSize;

	    if (type.isMatrix(submatrix)) {
	      // submatrix size
	      sSize = submatrix.size(); // use array representation

	      submatrix = submatrix.toArray();
	    } else {
	      // get submatrix size (array, scalar)
	      sSize = array$2.size(submatrix);
	    } // check index is a scalar


	    if (isScalar) {
	      // verify submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      } // set value


	      matrix.set(index.min(), submatrix, defaultValue);
	    } else {
	      // validate dimensions, index size must be one or two dimensions
	      if (iSize.length !== 1 && iSize.length !== 2) {
	        throw new DimensionError_1(iSize.length, matrix._size.length, '<');
	      } // check submatrix and index have the same dimensions


	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;

	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }

	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        } // unsqueeze both outer and inner dimensions


	        submatrix = array$2.unsqueeze(submatrix, iSize.length, outer, sSize);
	      } // check whether the size of the submatrix matches the index size


	      if (!object$2.deepEqual(iSize, sSize)) {
	        throw new DimensionError_1(iSize, sSize, '>');
	      } // offsets


	      var x0 = index.min()[0];
	      var y0 = index.min()[1]; // submatrix rows and columns

	      var m = sSize[0];
	      var n = sSize[1]; // loop submatrix

	      for (var x = 0; x < m; x++) {
	        // loop columns
	        for (var y = 0; y < n; y++) {
	          // value at i, j
	          var v = submatrix[x][y]; // invoke set (zero value will remove entry from matrix)

	          matrix.set([x + x0, y + y0], v, defaultValue);
	        }
	      }
	    }

	    return matrix;
	  }
	  /**
	   * Get a single element from the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */


	  SparseMatrix.prototype.get = function (index) {
	    if (!isArray$1(index)) {
	      throw new TypeError('Array expected');
	    }

	    if (index.length !== this._size.length) {
	      throw new DimensionError_1(index.length, this._size.length);
	    } // check it is a pattern matrix


	    if (!this._values) {
	      throw new Error('Cannot invoke get on a Pattern only matrix');
	    } // row and column


	    var i = index[0];
	    var j = index[1]; // check i, j are valid

	    validateIndex$1(i, this._size[0]);
	    validateIndex$1(j, this._size[1]); // find value index

	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      return this._values[k];
	    }

	    return 0;
	  };
	  /**
	   * Replace a single element in the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be set to zero.
	   * @return {SparseMatrix} self
	   */


	  SparseMatrix.prototype.set = function (index, v, defaultValue) {
	    if (!isArray$1(index)) {
	      throw new TypeError('Array expected');
	    }

	    if (index.length !== this._size.length) {
	      throw new DimensionError_1(index.length, this._size.length);
	    } // check it is a pattern matrix


	    if (!this._values) {
	      throw new Error('Cannot invoke set on a Pattern only matrix');
	    } // row and column


	    var i = index[0];
	    var j = index[1]; // rows & columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0;

	    if (isString$2(this._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$1, [this._datatype, this._datatype]) || equalScalar$1; // convert 0 to the same datatype

	      zero = typed.convert(0, this._datatype);
	    } // check we need to resize matrix


	    if (i > rows - 1 || j > columns - 1) {
	      // resize matrix
	      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns


	      rows = this._size[0];
	      columns = this._size[1];
	    } // check i, j are valid


	    validateIndex$1(i, rows);
	    validateIndex$1(j, columns); // find value index

	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row


	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      // check value != 0
	      if (!eq(v, zero)) {
	        // update value
	        this._values[k] = v;
	      } else {
	        // remove value from matrix
	        _remove(k, j, this._values, this._index, this._ptr);
	      }
	    } else {
	      // insert value @ (i, j)
	      _insert(k, i, j, v, this._values, this._index, this._ptr);
	    }

	    return this;
	  };

	  function _getValueIndex(i, top, bottom, index) {
	    // check row is on the bottom side
	    if (bottom - top === 0) {
	      return bottom;
	    } // loop rows [top, bottom[


	    for (var r = top; r < bottom; r++) {
	      // check we found value index
	      if (index[r] === i) {
	        return r;
	      }
	    } // we did not find row


	    return top;
	  }

	  function _remove(k, j, values, index, ptr) {
	    // remove value @ k
	    values.splice(k, 1);
	    index.splice(k, 1); // update pointers

	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]--;
	    }
	  }

	  function _insert(k, i, j, v, values, index, ptr) {
	    // insert value
	    values.splice(k, 0, v); // update row for k

	    index.splice(k, 0, i); // update column pointers

	    for (var x = j + 1; x < ptr.length; x++) {
	      ptr[x]++;
	    }
	  }
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */


	  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isArray$1(size)) {
	      throw new TypeError('Array expected');
	    }

	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    } // check sizes


	    size.forEach(function (value) {
	      if (!number$2.isNumber(value) || !number$2.isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string$3.format(size) + ')');
	      }
	    }); // matrix to resize

	    var m = copy ? this.clone() : this; // resize matrix

	    return _resize(m, size[0], size[1], defaultValue);
	  };

	  function _resize(matrix, rows, columns, defaultValue) {
	    // value to insert at the time of growing matrix
	    var value = defaultValue || 0; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0;

	    if (isString$2(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$1, [matrix._datatype, matrix._datatype]) || equalScalar$1; // convert 0 to the same datatype

	      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype

	      value = typed.convert(value, matrix._datatype);
	    } // should we insert the value?


	    var ins = !eq(value, zero); // old columns and rows

	    var r = matrix._size[0];
	    var c = matrix._size[1];
	    var i, j, k; // check we need to increase columns

	    if (columns > c) {
	      // loop new columns
	      for (j = c; j < columns; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values

	        if (ins) {
	          // loop rows
	          for (i = 0; i < r; i++) {
	            // add new matrix._values
	            matrix._values.push(value); // update matrix._index


	            matrix._index.push(i);
	          }
	        }
	      } // store number of matrix._values in matrix._ptr


	      matrix._ptr[columns] = matrix._values.length;
	    } else if (columns < c) {
	      // truncate matrix._ptr
	      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index


	      matrix._values.splice(matrix._ptr[columns], matrix._values.length);

	      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
	    } // update columns


	    c = columns; // check we need to increase rows

	    if (rows > r) {
	      // check we have to insert values
	      if (ins) {
	        // inserts
	        var n = 0; // loop columns

	        for (j = 0; j < c; j++) {
	          // update matrix._ptr for current column
	          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values

	          k = matrix._ptr[j + 1] + n; // pointer

	          var p = 0; // loop new rows, initialize pointer

	          for (i = r; i < rows; i++, p++) {
	            // add value
	            matrix._values.splice(k + p, 0, value); // update matrix._index


	            matrix._index.splice(k + p, 0, i); // increment inserts


	            n++;
	          }
	        } // store number of matrix._values in matrix._ptr


	        matrix._ptr[c] = matrix._values.length;
	      }
	    } else if (rows < r) {
	      // deletes
	      var d = 0; // loop columns

	      for (j = 0; j < c; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column

	        var k0 = matrix._ptr[j];
	        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index

	        for (k = k0; k < k1; k++) {
	          // row
	          i = matrix._index[k]; // check we need to delete value and matrix._index

	          if (i > rows - 1) {
	            // remove value
	            matrix._values.splice(k, 1); // remove item from matrix._index


	            matrix._index.splice(k, 1); // increase deletes


	            d++;
	          }
	        }
	      } // update matrix._ptr for current column


	      matrix._ptr[j] = matrix._values.length;
	    } // update matrix._size


	    matrix._size[0] = rows;
	    matrix._size[1] = columns; // return matrix

	    return matrix;
	  }
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */


	  SparseMatrix.prototype.reshape = function (size, copy) {
	    // validate arguments
	    if (!isArray$1(size)) {
	      throw new TypeError('Array expected');
	    }

	    if (size.length !== 2) {
	      throw new Error('Sparse matrices can only be reshaped in two dimensions');
	    } // check sizes


	    size.forEach(function (value) {
	      if (!number$2.isNumber(value) || !number$2.isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + string$3.format(size) + ')');
	      }
	    }); // m * n must not change

	    if (this._size[0] * this._size[1] !== size[0] * size[1]) {
	      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
	    } // matrix to reshape


	    var m = copy ? this.clone() : this; // return unchanged if the same shape

	    if (this._size[0] === size[0] && this._size[1] === size[1]) {
	      return m;
	    } // Convert to COO format (generate a column index)


	    var colIndex = [];

	    for (var i = 0; i < m._ptr.length; i++) {
	      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {
	        colIndex.push(i);
	      }
	    } // Clone the values array


	    var values = m._values.slice(); // Clone the row index array


	    var rowIndex = m._index.slice(); // Transform the (row, column) indices


	    for (var _i = 0; _i < m._index.length; _i++) {
	      var r1 = rowIndex[_i];
	      var c1 = colIndex[_i];
	      var flat = r1 * m._size[1] + c1;
	      colIndex[_i] = flat % size[1];
	      rowIndex[_i] = Math.floor(flat / size[1]);
	    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
	    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
	    // sorting several arrays based on some other array.
	    // OR, we could easily just:
	    // 1. Remove all values from the matrix


	    m._values.length = 0;
	    m._index.length = 0;
	    m._ptr.length = size[1] + 1;
	    m._size = size.slice();

	    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {
	      m._ptr[_i2] = 0;
	    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
	    // This step is probably the most time-consuming


	    for (var h = 0; h < values.length; h++) {
	      var _i3 = rowIndex[h];
	      var _j = colIndex[h];
	      var v = values[h];

	      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);

	      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);
	    } // The value indices are inserted out of order, but apparently that's... still OK?


	    return m;
	  };
	  /**
	   * Create a clone of the matrix
	   * @memberof SparseMatrix
	   * @return {SparseMatrix} clone
	   */


	  SparseMatrix.prototype.clone = function () {
	    var m = new SparseMatrix({
	      values: this._values ? object$2.clone(this._values) : undefined,
	      index: object$2.clone(this._index),
	      ptr: object$2.clone(this._ptr),
	      size: object$2.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  /**
	   * Retrieve the size of the matrix.
	   * @memberof SparseMatrix
	   * @returns {number[]} size
	   */


	  SparseMatrix.prototype.size = function () {
	    return this._size.slice(0); // copy the Array
	  };
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {SparseMatrix} matrix
	   */


	  SparseMatrix.prototype.map = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke map on a Pattern only matrix');
	    } // matrix instance


	    var me = this; // rows and columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // invoke callback

	    var invoke = function invoke(v, i, j) {
	      // invoke callback
	      return callback(v, [i, j], me);
	    }; // invoke _map


	    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
	  };
	  /**
	   * Create a new matrix with the results of the callback function executed on the interval
	   * [minRow..maxRow, minColumn..maxColumn].
	   */


	  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
	    // result arrays
	    var values = [];
	    var index = [];
	    var ptr = []; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0;

	    if (isString$2(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$1, [matrix._datatype, matrix._datatype]) || equalScalar$1; // convert 0 to the same datatype

	      zero = typed.convert(0, matrix._datatype);
	    } // invoke callback


	    var invoke = function invoke(v, x, y) {
	      // invoke callback
	      v = callback(v, x, y); // check value != 0

	      if (!eq(v, zero)) {
	        // store value
	        values.push(v); // index

	        index.push(x);
	      }
	    }; // loop columns


	    for (var j = minColumn; j <= maxColumn; j++) {
	      // store pointer to values index
	      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

	      var k0 = matrix._ptr[j];
	      var k1 = matrix._ptr[j + 1]; // row pointer

	      var p = minRow; // loop k within [k0, k1[

	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = matrix._index[k]; // check i is in range

	        if (i >= minRow && i <= maxRow) {
	          // zero values
	          if (!skipZeros) {
	            for (var x = p; x < i; x++) {
	              invoke(0, x - minRow, j - minColumn);
	            }
	          } // value @ k


	          invoke(matrix._values[k], i - minRow, j - minColumn);
	        } // update pointer


	        p = i + 1;
	      } // zero values


	      if (!skipZeros) {
	        for (var y = p; y <= maxRow; y++) {
	          invoke(0, y - minRow, j - minColumn);
	        }
	      }
	    } // store number of values in ptr


	    ptr.push(values.length); // return sparse matrix

	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
	    });
	  }
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   */


	  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values) {
	      throw new Error('Cannot invoke forEach on a Pattern only matrix');
	    } // matrix instance


	    var me = this; // rows and columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1]; // column pointer

	      var p = 0; // loop k within [k0, k1[

	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k]; // check we need to process zeros

	        if (!skipZeros) {
	          // zero values
	          for (var x = p; x < i; x++) {
	            callback(0, [x, j], me);
	          } // eslint-disable-line standard/no-callback-literal

	        } // value @ k


	        callback(this._values[k], [i, j], me); // update pointer

	        p = i + 1;
	      } // check we need to process zeros


	      if (!skipZeros) {
	        // zero values
	        for (var y = p; y < rows; y++) {
	          callback(0, [y, j], me);
	        } // eslint-disable-line standard/no-callback-literal

	      }
	    }
	  };
	  /**
	   * Create an Array with a copy of the data of the SparseMatrix
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */


	  SparseMatrix.prototype.toArray = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, true);
	  };
	  /**
	   * Get the primitive value of the SparseMatrix: a two dimensions array
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */


	  SparseMatrix.prototype.valueOf = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, false);
	  };

	  function _toArray(values, index, ptr, size, copy) {
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1]; // result

	    var a = []; // vars

	    var i, j; // initialize array

	    for (i = 0; i < rows; i++) {
	      a[i] = [];

	      for (j = 0; j < columns; j++) {
	        a[i][j] = 0;
	      }
	    } // loop columns


	    for (j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1]; // loop k within [k0, k1[

	      for (var k = k0; k < k1; k++) {
	        // row index
	        i = index[k]; // set value (use one for pattern matrix)

	        a[i][j] = values ? copy ? object$2.clone(values[k]) : values[k] : 1;
	      }
	    }

	    return a;
	  }
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof SparseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */


	  SparseMatrix.prototype.format = function (options) {
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1]; // density

	    var density = this.density(); // rows & columns

	    var str = 'Sparse Matrix [' + string$3.format(rows, options) + ' x ' + string$3.format(columns, options) + '] density: ' + string$3.format(density, options) + '\n'; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[

	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k]; // append value

	        str += '\n    (' + string$3.format(i, options) + ', ' + string$3.format(j, options) + ') ==> ' + (this._values ? string$3.format(this._values[k], options) : 'X');
	      }
	    }

	    return str;
	  };
	  /**
	   * Get a string representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {string} str
	   */


	  SparseMatrix.prototype.toString = function () {
	    return string$3.format(this.toArray());
	  };
	  /**
	   * Get a JSON representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {Object}
	   */


	  SparseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'SparseMatrix',
	      values: this._values,
	      index: this._index,
	      ptr: this._ptr,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof SparseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix vector with the diagonal values.
	   */


	  SparseMatrix.prototype.diagonal = function (k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (type.isBigNumber(k)) {
	        k = k.toNumber();
	      } // is must be an integer


	      if (!isNumber$2(k) || !isInteger$1(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // rows & columns

	    var rows = this._size[0];
	    var columns = this._size[1]; // number diagonal values

	    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays

	    var values = [];
	    var index = [];
	    var ptr = []; // initial ptr value

	    ptr[0] = 0; // loop columns

	    for (var j = kSuper; j < columns && values.length < n; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[

	      for (var x = k0; x < k1; x++) {
	        // row index
	        var i = this._index[x]; // check row

	        if (i === j - kSuper + kSub) {
	          // value on this column
	          values.push(this._values[x]); // store row

	          index[values.length - 1] = i - kSub; // exit loop

	          break;
	        }
	      }
	    } // close ptr


	    ptr.push(values.length); // return matrix

	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [n, 1]
	    });
	  };
	  /**
	   * Generate a matrix from a JSON object
	   * @memberof SparseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
	   *                       where mathjs is optional
	   * @returns {SparseMatrix}
	   */


	  SparseMatrix.fromJSON = function (json) {
	    return new SparseMatrix(json);
	  };
	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {Array} size                       The matrix size.
	   * @param {number | Array | Matrix } value   The values for the diagonal.
	   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
	   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
	   *
	   * @returns {SparseMatrix}
	   */


	  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray$1(size)) {
	      throw new TypeError('Array expected, size parameter');
	    }

	    if (size.length !== 2) {
	      throw new Error('Only two dimensions matrix are supported');
	    } // map size & validate


	    size = size.map(function (s) {
	      // check it is a big number
	      if (type.isBigNumber(s)) {
	        // convert it
	        s = s.toNumber();
	      } // validate arguments


	      if (!isNumber$2(s) || !isInteger$1(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      }

	      return s;
	    }); // validate k if any

	    if (k) {
	      // convert BigNumber to a number
	      if (type.isBigNumber(k)) {
	        k = k.toNumber();
	      } // is must be an integer


	      if (!isNumber$2(k) || !isInteger$1(k)) {
	        throw new TypeError('The parameter k must be an integer number');
	      }
	    } else {
	      // default value
	      k = 0;
	    } // equal signature to use


	    var eq = equalScalar$1; // zero value

	    var zero = 0;

	    if (isString$2(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar$1, [datatype, datatype]) || equalScalar$1; // convert 0 to the same datatype

	      zero = typed.convert(0, datatype);
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // rows and columns

	    var rows = size[0];
	    var columns = size[1]; // number of non-zero items

	    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function

	    var _value; // check value


	    if (isArray$1(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      } // define function


	      _value = function _value(i) {
	        // return value @ i
	        return value[i];
	      };
	    } else if (type.isMatrix(value)) {
	      // matrix size
	      var ms = value.size(); // validate matrix

	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      } // define function


	      _value = function _value(i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    } else {
	      // define function
	      _value = function _value() {
	        // return value
	        return value;
	      };
	    } // create arrays


	    var values = [];
	    var index = [];
	    var ptr = []; // loop items

	    for (var j = 0; j < columns; j++) {
	      // number of rows with value
	      ptr.push(values.length); // diagonal index

	      var i = j - kSuper; // check we need to set diagonal value

	      if (i >= 0 && i < n) {
	        // get value @ i
	        var v = _value(i); // check for zero


	        if (!eq(v, zero)) {
	          // column
	          index.push(i + kSub); // add value

	          values.push(v);
	        }
	      }
	    } // last value should be number of values


	    ptr.push(values.length); // create SparseMatrix

	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [rows, columns]
	    });
	  };
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */


	  SparseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber$2(i) || !isInteger$1(i) || !isNumber$2(j) || !isInteger$1(j)) {
	      throw new Error('Row index must be positive integers');
	    } // check dimensions


	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    } // validate index


	    validateIndex$1(i, this._size[0]);
	    validateIndex$1(j, this._size[0]); // swap rows

	    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance


	    return this;
	  };
	  /**
	   * Loop rows with data in column j.
	   *
	   * @param {number} j            Column
	   * @param {Array} values        Matrix values
	   * @param {Array} index         Matrix row indeces
	   * @param {Array} ptr           Matrix column pointers
	   * @param {Function} callback   Callback function invoked for every row in column j
	   */


	  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
	    // indeces for column j
	    var k0 = ptr[j];
	    var k1 = ptr[j + 1]; // loop

	    for (var k = k0; k < k1; k++) {
	      // invoke callback
	      callback(index[k], values[k]);
	    }
	  };
	  /**
	   * Swap rows x and y in Sparse Matrix data structures.
	   *
	   * @param {number} x         Matrix row index 1
	   * @param {number} y         Matrix row index 2
	   * @param {number} columns   Number of columns in matrix
	   * @param {Array} values     Matrix values
	   * @param {Array} index      Matrix row indeces
	   * @param {Array} ptr        Matrix column pointers
	   */


	  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1]; // find value index @ x

	      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x


	      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix


	      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
	        // swap values (check for pattern matrix)
	        if (values) {
	          var v = values[kx];
	          values[kx] = values[ky];
	          values[ky] = v;
	        } // next column


	        continue;
	      } // check x row exist & no y row


	      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
	        // value @ x (check for pattern matrix)
	        var vx = values ? values[kx] : undefined; // insert value @ y

	        index.splice(ky, 0, y);

	        if (values) {
	          values.splice(ky, 0, vx);
	        } // remove value @ x (adjust array index if needed)


	        index.splice(ky <= kx ? kx + 1 : kx, 1);

	        if (values) {
	          values.splice(ky <= kx ? kx + 1 : kx, 1);
	        } // next column


	        continue;
	      } // check y row exist & no x row


	      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
	        // value @ y (check for pattern matrix)
	        var vy = values ? values[ky] : undefined; // insert value @ x

	        index.splice(kx, 0, x);

	        if (values) {
	          values.splice(kx, 0, vy);
	        } // remove value @ y (adjust array index if needed)


	        index.splice(kx <= ky ? ky + 1 : ky, 1);

	        if (values) {
	          values.splice(kx <= ky ? ky + 1 : ky, 1);
	        }
	      }
	    }
	  }; // register this type in the base class Matrix


	  type.Matrix._storage.sparse = SparseMatrix;
	  return SparseMatrix;
	}

	var name$d = 'SparseMatrix';
	var path$5 = 'type';
	var factory_1$f = factory$f;
	var lazy$3 = false; // no lazy loading, as we alter type.Matrix._storage

	var SparseMatrix = {
		name: name$d,
		path: path$5,
		factory: factory_1$f,
		lazy: lazy$3
	};

	function factory$g(type, config, load, typed) {
	  /**
	   * Create a Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   * Supported storage formats are 'dense' and 'sparse'.
	   *
	   * Syntax:
	   *
	   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
	   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
	   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
	   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
	   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
	   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
	   *
	   * Examples:
	   *
	   *    let m = math.matrix([[1, 2], [3, 4]])
	   *    m.size()                        // Array [2, 2]
	   *    m.resize([3, 2], 5)
	   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, sparse
	   *
	   * @param {Array | Matrix} [data]    A multi dimensional array
	   * @param {string} [format]          The Matrix storage format
	   *
	   * @return {Matrix} The created matrix
	   */
	  var matrix = typed('matrix', {
	    '': function _() {
	      return _create([]);
	    },
	    'string': function string(format) {
	      return _create([], format);
	    },
	    'string, string': function stringString(format, datatype) {
	      return _create([], format, datatype);
	    },
	    'Array': function Array(data) {
	      return _create(data);
	    },
	    'Matrix': function Matrix(data) {
	      return _create(data, data.storage());
	    },
	    'Array | Matrix, string': _create,
	    'Array | Matrix, string, string': _create
	  });
	  matrix.toTex = {
	    0: '\\begin{bmatrix}\\end{bmatrix}',
	    1: "\\left(${args[0]}\\right)",
	    2: "\\left(${args[0]}\\right)"
	  };
	  return matrix;
	  /**
	   * Create a new Matrix with given storage format
	   * @param {Array} data
	   * @param {string} [format]
	   * @param {string} [datatype]
	   * @returns {Matrix} Returns a new Matrix
	   * @private
	   */

	  function _create(data, format, datatype) {
	    // get storage format constructor
	    var M = type.Matrix.storage(format || 'default'); // create instance

	    return new M(data, datatype);
	  }
	}

	var name$e = 'matrix';
	var factory_1$g = factory$g;

	var matrix = {
		name: name$e,
		factory: factory_1$g
	};

	function factory$h(type, config, load, typed) {
	  /**
	   * Add two scalar values, `x + y`.
	   * This function is meant for internal use: it is used by the public function
	   * `add`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`
	   * @private
	   */
	  var add = typed('add', {
	    'number, number': function numberNumber(x, y) {
	      return x + y;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.add(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.plus(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.add(y);
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');
	      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');
	      if (!x.equalBase(y)) throw new Error('Units do not match');
	      var res = x.clone();
	      res.value = add(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    }
	  });
	  return add;
	}

	var factory_1$h = factory$h;

	var addScalar = {
		factory: factory_1$h
	};

	function factory$i(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          â  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  Dij          ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */

	  var algorithm01 = function algorithm01(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype; // sparse matrix arrays

	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // sparse matrix cannot be a Pattern matrix


	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // process data types

	    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined; // callback function

	    var cf = dt ? typed.find(callback, [dt, dt]) : callback; // vars

	    var i, j; // result (DenseMatrix)

	    var cdata = []; // initialize c

	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    } // workspace


	    var x = []; // marks indicating we have a value in x for a given column

	    var w = []; // loop columns in b

	    for (j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1; // values in column j

	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k]; // update workspace

	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // mark i as updated

	        w[i] = mark;
	      } // loop rows


	      for (i = 0; i < rows; i++) {
	        // check row is in workspace
	        if (w[i] === mark) {
	          // c[i][j] was already calculated
	          cdata[i][j] = x[i];
	        } else {
	          // item does not exist in S
	          cdata[i][j] = adata[i][j];
	        }
	      }
	    } // return dense matrix


	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm01;
	}

	var name$f = 'algorithm01';
	var factory_1$i = factory$i;

	var algorithm01 = {
		name: name$f,
		factory: factory_1$i
	};

	function factory$j(type, config, load, typed) {
	  var equalScalar$1 = load(equalScalar);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          â  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = â¤  A(i,j)       ; A(i,j) !== 0
	   *          â  B(i,j)       ; B(i,j) !== 0
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */

	  var algorithm04 = function algorithm04(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype; // sparse matrix arrays

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = []; // matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    }); // workspace

	    var xa = avalues && bvalues ? [] : undefined;
	    var xb = avalues && bvalues ? [] : undefined; // marks indicating we have a value in x for a given column

	    var wa = [];
	    var wb = []; // vars

	    var i, j, k, k0, k1; // loop columns

	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length; // columns mark

	      var mark = j + 1; // loop A(:,j)

	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k]; // update c

	        cindex.push(i); // update workspace

	        wa[i] = mark; // check we need to process values

	        if (xa) {
	          xa[i] = avalues[k];
	        }
	      } // loop B(:,j)


	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k]; // check row exists in A

	        if (wa[i] === mark) {
	          // update record in xa @ i
	          if (xa) {
	            // invoke callback
	            var v = cf(xa[i], bvalues[k]); // check for zero

	            if (!eq(v, zero)) {
	              // update workspace
	              xa[i] = v;
	            } else {
	              // remove mark (index will be removed later)
	              wa[i] = null;
	            }
	          }
	        } else {
	          // update c
	          cindex.push(i); // update workspace

	          wb[i] = mark; // check we need to process values

	          if (xb) {
	            xb[i] = bvalues[k];
	          }
	        }
	      } // check we need to process values (non pattern matrix)


	      if (xa && xb) {
	        // initialize first index in j
	        k = cptr[j]; // loop index in j

	        while (k < cindex.length) {
	          // row
	          i = cindex[k]; // check workspace has value @ i

	          if (wa[i] === mark) {
	            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
	            cvalues[k] = xa[i]; // increment pointer

	            k++;
	          } else if (wb[i] === mark) {
	            // push value (bij != 0)
	            cvalues[k] = xb[i]; // increment pointer

	            k++;
	          } else {
	            // remove index @ k
	            cindex.splice(k, 1);
	          }
	        }
	      }
	    } // update cptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return c;
	  };

	  return algorithm04;
	}

	var name$g = 'algorithm04';
	var factory_1$j = factory$j;

	var algorithm04 = {
		name: name$g,
		factory: factory_1$j
	};

	function factory$k(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          â  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  b          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */

	  var algorithm10 = function algorithm10(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt; // convert b to the same datatype

	      b = typed.convert(b, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cdata = []; // matrix

	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    }); // workspaces

	    var x = []; // marks indicating we have a value in x for a given column

	    var w = []; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1; // values in j

	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k]; // update workspace

	        x[r] = avalues[k];
	        w[r] = mark;
	      } // loop rows


	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        } // check sparse matrix has a value @ i,j


	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = b;
	        }
	      }
	    } // return sparse matrix


	    return c;
	  };

	  return algorithm10;
	}

	var name$h = 'algorithm10';
	var factory_1$k = factory$k;

	var algorithm10 = {
		name: name$h,
		factory: factory_1$k
	};

	function factory$l(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, Bij..z)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Matrix}   b                 The DenseMatrix instance (B)
	   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
	   */

	  var algorithm13 = function algorithm13(a, b, callback) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b arrays

	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype; // c arrays

	    var csize = []; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // validate each one of the dimension sizes


	    for (var s = 0; s < asize.length; s++) {
	      // must match
	      if (asize[s] !== bsize[s]) {
	        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	      } // update dimension in c


	      csize[s] = asize[s];
	    } // datatype


	    var dt; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // populate cdata, iterate through dimensions


	    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : []; // c matrix

	    return new DenseMatrix({
	      data: cdata,
	      size: csize,
	      datatype: dt
	    });
	  }; // recursive function


	  function _iterate(f, level, s, n, av, bv) {
	    // initialize array for this level
	    var cv = []; // check we reach the last level

	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = f(av[i], bv[i]);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
	      }
	    }

	    return cv;
	  }

	  return algorithm13;
	}

	var name$i = 'algorithm13';
	var factory_1$l = factory$l;

	var algorithm13 = {
		name: name$i,
		factory: factory_1$l
	};

	var clone$1 = object.clone;

	function factory$m(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, b)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij..z,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
	   */

	  var algorithm14 = function algorithm14(a, b, callback, inverse) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // datatype

	    var dt; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt; // convert b to the same datatype

	      b = typed.convert(b, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // populate cdata, iterate through dimensions


	    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix

	    return new DenseMatrix({
	      data: cdata,
	      size: clone$1(asize),
	      datatype: dt
	    });
	  }; // recursive function


	  function _iterate(f, level, s, n, av, bv, inverse) {
	    // initialize array for this level
	    var cv = []; // check we reach the last level

	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
	      }
	    } else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
	      }
	    }

	    return cv;
	  }

	  return algorithm14;
	}

	var name$j = 'algorithm14';
	var factory_1$m = factory$m;

	var algorithm14 = {
		name: name$j,
		factory: factory_1$m
	};

	var extend = object.extend;

	function factory$n(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var addScalar$1 = load(addScalar);

	  var latex$1 = latex;

	  var algorithm01$1 = load(algorithm01);
	  var algorithm04$1 = load(algorithm04);
	  var algorithm10$1 = load(algorithm10);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Add two or more values, `x + y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.add(x, y)
	   *    math.add(x, y, z, ...)
	   *
	   * Examples:
	   *
	   *    math.add(2, 3)               // returns number 5
	   *    math.add(2, 3, 4)            // returns number 9
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(-4, 1)
	   *    math.add(a, b)               // returns Complex -2 + 4i
	   *
	   *    math.add([1, 2, 3], 4)       // returns Array [5, 6, 7]
	   *
	   *    const c = math.unit('5 cm')
	   *    const d = math.unit('2.1 mm')
	   *    math.add(c, d)               // returns Unit 52.1 mm
	   *
	   *    math.add("2.3", "4")         // returns number 6.3
	   *
	   * See also:
	   *
	   *    subtract, sum
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
	   */

	  var add = typed('add', extend({
	    // we extend the signatures of addScalar with signatures dealing with matrices
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, addScalar$1);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$1(x, y, addScalar$1, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm01$1(y, x, addScalar$1, true);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm04$1(x, y, addScalar$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return add(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return add(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return add(x, matrix$1(y));
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, addScalar$1, false);
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm10$1(x, y, addScalar$1, false);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, addScalar$1, true);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm10$1(y, x, addScalar$1, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, addScalar$1, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, addScalar$1, true).valueOf();
	    },
	    'any, any': addScalar$1,
	    'any, any, ...any': function anyAnyAny(x, y, rest) {
	      var result = add(x, y);

	      for (var i = 0; i < rest.length; i++) {
	        result = add(result, rest[i]);
	      }

	      return result;
	    }
	  }, addScalar$1.signatures));
	  add.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['add'], "${args[1]}\\right)")
	  };
	  return add;
	}

	var name$k = 'add';
	var factory_1$n = factory$n;

	var add$1 = {
		name: name$k,
		factory: factory_1$n
	};

	function factory$o(type, config, load) {
	  var add = load(add$1);
	  var equalScalar$1 = load(equalScalar);
	  /**
	   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array
	   * of the vector elements and an ordered list of non-zero elements.
	   */

	  function Spa() {
	    if (!(this instanceof Spa)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    } // allocate vector, TODO use typed arrays


	    this._values = [];
	    this._heap = new type.FibonacciHeap();
	  }
	  /**
	   * Attach type information
	   */


	  Spa.prototype.type = 'Spa';
	  Spa.prototype.isSpa = true;
	  /**
	   * Set the value for index i.
	   *
	   * @param {number} i                       The index
	   * @param {number | BigNumber | Complex}   The value at index i
	   */

	  Spa.prototype.set = function (i, v) {
	    // check we have a value @ i
	    if (!this._values[i]) {
	      // insert in heap
	      var node = this._heap.insert(i, v); // set the value @ i


	      this._values[i] = node;
	    } else {
	      // update the value @ i
	      this._values[i].value = v;
	    }
	  };

	  Spa.prototype.get = function (i) {
	    var node = this._values[i];

	    if (node) {
	      return node.value;
	    }

	    return 0;
	  };

	  Spa.prototype.accumulate = function (i, v) {
	    // node @ i
	    var node = this._values[i];

	    if (!node) {
	      // insert in heap
	      node = this._heap.insert(i, v); // initialize value

	      this._values[i] = node;
	    } else {
	      // accumulate value
	      node.value = add(node.value, v);
	    }
	  };

	  Spa.prototype.forEach = function (from, to, callback) {
	    // references
	    var heap = this._heap;
	    var values = this._values; // nodes

	    var nodes = []; // node with minimum key, save it

	    var node = heap.extractMinimum();

	    if (node) {
	      nodes.push(node);
	    } // extract nodes from heap (ordered)


	    while (node && node.key <= to) {
	      // check it is in range
	      if (node.key >= from) {
	        // check value is not zero
	        if (!equalScalar$1(node.value, 0)) {
	          // invoke callback
	          callback(node.key, node.value, this);
	        }
	      } // extract next node, save it


	      node = heap.extractMinimum();

	      if (node) {
	        nodes.push(node);
	      }
	    } // reinsert all nodes in heap


	    for (var i = 0; i < nodes.length; i++) {
	      // current node
	      var n = nodes[i]; // insert node in heap

	      node = heap.insert(n.key, n.value); // update values

	      values[node.key] = node;
	    }
	  };

	  Spa.prototype.swap = function (i, j) {
	    // node @ i and j
	    var nodei = this._values[i];
	    var nodej = this._values[j]; // check we need to insert indeces

	    if (!nodei && nodej) {
	      // insert in heap
	      nodei = this._heap.insert(i, nodej.value); // remove from heap

	      this._heap.remove(nodej); // set values


	      this._values[i] = nodei;
	      this._values[j] = undefined;
	    } else if (nodei && !nodej) {
	      // insert in heap
	      nodej = this._heap.insert(j, nodei.value); // remove from heap

	      this._heap.remove(nodei); // set values


	      this._values[j] = nodej;
	      this._values[i] = undefined;
	    } else if (nodei && nodej) {
	      // swap values
	      var v = nodei.value;
	      nodei.value = nodej.value;
	      nodej.value = v;
	    }
	  };

	  return Spa;
	}

	var name$l = 'Spa';
	var path$6 = 'type';
	var factory_1$o = factory$o;

	var Spa = {
		name: name$l,
		path: path$6,
		factory: factory_1$o
	};

	function factory$p(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked M*N times.
	   *
	   *
	   *          â  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  f(Dij, 0)    ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */

	  var algorithm03 = function algorithm03(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype; // sparse matrix arrays

	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // sparse matrix cannot be a Pattern matrix


	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result (DenseMatrix)


	    var cdata = []; // initialize dense matrix

	    for (var z = 0; z < rows; z++) {
	      // initialize row
	      cdata[z] = [];
	    } // workspace


	    var x = []; // marks indicating we have a value in x for a given column

	    var w = []; // loop columns in b

	    for (var j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1; // values in column j

	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k]; // update workspace

	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        w[i] = mark;
	      } // process workspace


	      for (var y = 0; y < rows; y++) {
	        // check we have a calculated value for current row
	        if (w[y] === mark) {
	          // use calculated value
	          cdata[y][j] = x[y];
	        } else {
	          // calculate value
	          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
	        }
	      }
	    } // return dense matrix


	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm03;
	}

	var name$m = 'algorithm03';
	var factory_1$p = factory$p;

	var algorithm03 = {
		name: name$m,
		factory: factory_1$p
	};

	function factory$q(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MxN times.
	   *
	   * C(i,j) = f(Aij, Bij)
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */

	  var algorithm07 = function algorithm07(a, b, callback) {
	    // sparse matrix arrays
	    var asize = a._size;
	    var adt = a._datatype; // sparse matrix arrays

	    var bsize = b._size;
	    var bdt = b._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // vars


	    var i, j; // result arrays

	    var cdata = []; // initialize c

	    for (i = 0; i < rows; i++) {
	      cdata[i] = [];
	    } // matrix


	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    }); // workspaces

	    var xa = [];
	    var xb = []; // marks indicating we have a value in x for a given column

	    var wa = [];
	    var wb = []; // loop columns

	    for (j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1; // scatter the values of A(:,j) into workspace

	      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace


	      _scatter(b, j, wb, xb, mark); // loop rows


	      for (i = 0; i < rows; i++) {
	        // matrix values @ i,j
	        var va = wa[i] === mark ? xa[i] : zero;
	        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback

	        cdata[i][j] = cf(va, vb);
	      }
	    } // return sparse matrix


	    return c;
	  };

	  function _scatter(m, j, w, x, mark) {
	    // a arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr; // loop values in column j

	    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
	      // row
	      var i = index[k]; // update workspace

	      w[i] = mark;
	      x[i] = values[k];
	    }
	  }

	  return algorithm07;
	}

	var name$n = 'algorithm07';
	var factory_1$q = factory$q;

	var algorithm07 = {
		name: name$n,
		factory: factory_1$q
	};

	function factory$r(type, config, load, typed) {
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked MxN times.
	   *
	   *
	   *          â  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  f(0, b)    ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */

	  var algorithm12 = function algorithm12(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt; // convert b to the same datatype

	      b = typed.convert(b, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cdata = []; // matrix

	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    }); // workspaces

	    var x = []; // marks indicating we have a value in x for a given column

	    var w = []; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1; // values in j

	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k]; // update workspace

	        x[r] = avalues[k];
	        w[r] = mark;
	      } // loop rows


	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        } // check sparse matrix has a value @ i,j


	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        } else {
	          // dense matrix value @ i, j
	          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
	        }
	      }
	    } // return sparse matrix


	    return c;
	  };

	  return algorithm12;
	}

	var name$o = 'algorithm12';
	var factory_1$r = factory$r;

	var algorithm12 = {
		name: name$o,
		factory: factory_1$r
	};

	var nearlyEqual$2 = number.nearlyEqual;



	function factory$s(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);

	  var latex$1 = latex;
	  /**
	   * Test whether value x is smaller than y.
	   *
	   * The function returns true when x is smaller than y and the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.smaller(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(2, 3)            // returns true
	   *    math.smaller(5, 2 * 2)        // returns false
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('2 inch')
	   *    math.smaller(a, b)            // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smallerEq, smaller, smallerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */


	  var smaller = typed('smaller', {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x < y;
	    },
	    'number, number': function numberNumber(x, y) {
	      return x < y && !nearlyEqual$2(x, y, config.epsilon);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.lt(y) && !nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) === -1;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }

	      return smaller(x.value, y.value);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, smaller);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, smaller, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, smaller, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, smaller);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return smaller(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return smaller(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return smaller(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, smaller, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, smaller, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, smaller, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, smaller, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, smaller, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, smaller, true).valueOf();
	    }
	  });
	  smaller.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['smaller'], "${args[1]}\\right)")
	  };
	  return smaller;
	}

	var name$p = 'smaller';
	var factory_1$s = factory$s;

	var smaller = {
		name: name$p,
		factory: factory_1$s
	};

	var nearlyEqual$3 = number.nearlyEqual;



	function factory$t(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);

	  var latex$1 = latex;
	  /**
	   * Test whether value x is larger than y.
	   *
	   * The function returns true when x is larger than y and the relative
	   * difference between x and y is larger than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.larger(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 3)             // returns false
	   *    math.larger(5, 2 + 2)         // returns true
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('2 inch')
	   *    math.larger(a, b)             // returns false
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
	   */


	  var larger = typed('larger', {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x > y;
	    },
	    'number, number': function numberNumber(x, y) {
	      return x > y && !nearlyEqual$3(x, y, config.epsilon);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.gt(y) && !nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) === 1;
	    },
	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }

	      return larger(x.value, y.value);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, larger);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, larger, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, larger, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, larger);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return larger(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return larger(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return larger(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, larger, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, larger, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, larger, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, larger, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, larger, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, larger, true).valueOf();
	    }
	  });
	  larger.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['larger'], "${args[1]}\\right)")
	  };
	  return larger;
	}

	var name$q = 'larger';
	var factory_1$t = factory$t;

	var larger = {
		name: name$q,
		factory: factory_1$t
	};

	function factory$u(type, config, load, typed) {
	  var smaller$1 = load(smaller);
	  var larger$1 = load(larger);
	  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
	  /**
	   * Fibonacci Heap implementation, used interally for Matrix math.
	   * @class FibonacciHeap
	   * @constructor FibonacciHeap
	   */

	  function FibonacciHeap() {
	    if (!(this instanceof FibonacciHeap)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    } // initialize fields


	    this._minimum = null;
	    this._size = 0;
	  }
	  /**
	   * Attach type information
	   */


	  FibonacciHeap.prototype.type = 'FibonacciHeap';
	  FibonacciHeap.prototype.isFibonacciHeap = true;
	  /**
	   * Inserts a new data element into the heap. No heap consolidation is
	   * performed at this time, the new node is simply inserted into the root
	   * list of this heap. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */

	  FibonacciHeap.prototype.insert = function (key, value) {
	    // create node
	    var node = {
	      key: key,
	      value: value,
	      degree: 0 // check we have a node in the minimum

	    };

	    if (this._minimum) {
	      // minimum node
	      var minimum = this._minimum; // update left & right of node

	      node.left = minimum;
	      node.right = minimum.right;
	      minimum.right = node;
	      node.right.left = node; // update minimum node in heap if needed

	      if (smaller$1(key, minimum.key)) {
	        // node has a smaller key, use it as minimum
	        this._minimum = node;
	      }
	    } else {
	      // set left & right
	      node.left = node;
	      node.right = node; // this is the first node

	      this._minimum = node;
	    } // increment number of nodes in heap


	    this._size++; // return node

	    return node;
	  };
	  /**
	   * Returns the number of nodes in heap. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */


	  FibonacciHeap.prototype.size = function () {
	    return this._size;
	  };
	  /**
	   * Removes all elements from this heap.
	   * @memberof FibonacciHeap
	   */


	  FibonacciHeap.prototype.clear = function () {
	    this._minimum = null;
	    this._size = 0;
	  };
	  /**
	   * Returns true if the heap is empty, otherwise false.
	   * @memberof FibonacciHeap
	   */


	  FibonacciHeap.prototype.isEmpty = function () {
	    return this._size === 0;
	  };
	  /**
	   * Extracts the node with minimum key from heap. Amortized running
	   * time: O(log n).
	   * @memberof FibonacciHeap
	   */


	  FibonacciHeap.prototype.extractMinimum = function () {
	    // node to remove
	    var node = this._minimum; // check we have a minimum

	    if (node === null) {
	      return node;
	    } // current minimum


	    var minimum = this._minimum; // get number of children

	    var numberOfChildren = node.degree; // pointer to the first child

	    var x = node.child; // for each child of node do...

	    while (numberOfChildren > 0) {
	      // store node in right side
	      var tempRight = x.right; // remove x from child list

	      x.left.right = x.right;
	      x.right.left = x.left; // add x to root list of heap

	      x.left = minimum;
	      x.right = minimum.right;
	      minimum.right = x;
	      x.right.left = x; // set Parent[x] to null

	      x.parent = null;
	      x = tempRight;
	      numberOfChildren--;
	    } // remove node from root list of heap


	    node.left.right = node.right;
	    node.right.left = node.left; // update minimum

	    if (node === node.right) {
	      // empty
	      minimum = null;
	    } else {
	      // update minimum
	      minimum = node.right; // we need to update the pointer to the root with minimum key

	      minimum = _findMinimumNode(minimum, this._size);
	    } // decrement size of heap


	    this._size--; // update minimum

	    this._minimum = minimum; // return node

	    return node;
	  };
	  /**
	   * Removes a node from the heap given the reference to the node. The trees
	   * in the heap will be consolidated, if necessary. This operation may fail
	   * to remove the correct element if there are nodes with key value -Infinity.
	   * Running time: O(log n) amortized.
	   * @memberof FibonacciHeap
	   */


	  FibonacciHeap.prototype.remove = function (node) {
	    // decrease key value
	    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest

	    this.extractMinimum();
	  };
	  /**
	   * Decreases the key value for a heap node, given the new value to take on.
	   * The structure of the heap may be changed and will not be consolidated.
	   * Running time: O(1) amortized.
	   * @memberof FibonacciHeap
	   */


	  function _decreaseKey(minimum, node, key) {
	    // set node key
	    node.key = key; // get parent node

	    var parent = node.parent;

	    if (parent && smaller$1(node.key, parent.key)) {
	      // remove node from parent
	      _cut(minimum, node, parent); // remove all nodes from parent to the root parent


	      _cascadingCut(minimum, parent);
	    } // update minimum node if needed


	    if (smaller$1(node.key, minimum.key)) {
	      minimum = node;
	    } // return minimum


	    return minimum;
	  }
	  /**
	   * The reverse of the link operation: removes node from the child list of parent.
	   * This method assumes that min is non-null. Running time: O(1).
	   * @memberof FibonacciHeap
	   */


	  function _cut(minimum, node, parent) {
	    // remove node from parent children and decrement Degree[parent]
	    node.left.right = node.right;
	    node.right.left = node.left;
	    parent.degree--; // reset y.child if necessary

	    if (parent.child === node) {
	      parent.child = node.right;
	    } // remove child if degree is 0


	    if (parent.degree === 0) {
	      parent.child = null;
	    } // add node to root list of heap


	    node.left = minimum;
	    node.right = minimum.right;
	    minimum.right = node;
	    node.right.left = node; // set parent[node] to null

	    node.parent = null; // set mark[node] to false

	    node.mark = false;
	  }
	  /**
	   * Performs a cascading cut operation. This cuts node from its parent and then
	   * does the same for its parent, and so on up the tree.
	   * Running time: O(log n); O(1) excluding the recursion.
	   * @memberof FibonacciHeap
	   */


	  function _cascadingCut(minimum, node) {
	    // store parent node
	    var parent = node.parent; // if there's a parent...

	    if (!parent) {
	      return;
	    } // if node is unmarked, set it marked


	    if (!node.mark) {
	      node.mark = true;
	    } else {
	      // it's marked, cut it from parent
	      _cut(minimum, node, parent); // cut its parent as well


	      _cascadingCut(parent);
	    }
	  }
	  /**
	   * Make the first node a child of the second one. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */


	  var _linkNodes = function _linkNodes(node, parent) {
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left; // make node a Child of parent

	    node.parent = parent;

	    if (!parent.child) {
	      parent.child = node;
	      node.right = node;
	      node.left = node;
	    } else {
	      node.left = parent.child;
	      node.right = parent.child.right;
	      parent.child.right = node;
	      node.right.left = node;
	    } // increase degree[parent]


	    parent.degree++; // set mark[node] false

	    node.mark = false;
	  };

	  function _findMinimumNode(minimum, size) {
	    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
	    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity

	    var array = new Array(arraySize); // find the number of root nodes.

	    var numRoots = 0;
	    var x = minimum;

	    if (x) {
	      numRoots++;
	      x = x.right;

	      while (x !== minimum) {
	        numRoots++;
	        x = x.right;
	      }
	    } // vars


	    var y; // For each node in root list do...

	    while (numRoots > 0) {
	      // access this node's degree..
	      var d = x.degree; // get next node

	      var next = x.right; // check if there is a node already in array with the same degree

	      while (true) {
	        // get node with the same degree is any
	        y = array[d];

	        if (!y) {
	          break;
	        } // make one node with the same degree a child of the other, do this based on the key value.


	        if (larger$1(x.key, y.key)) {
	          var temp = y;
	          y = x;
	          x = temp;
	        } // make y a child of x


	        _linkNodes(y, x); // we have handled this degree, go to next one.


	        array[d] = null;
	        d++;
	      } // save this node for later when we might encounter another of the same degree.


	      array[d] = x; // move forward through list.

	      x = next;
	      numRoots--;
	    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].


	    minimum = null; // loop nodes in array

	    for (var i = 0; i < arraySize; i++) {
	      // get current node
	      y = array[i];

	      if (!y) {
	        continue;
	      } // check if we have a linked list


	      if (minimum) {
	        // First remove node from root list.
	        y.left.right = y.right;
	        y.right.left = y.left; // now add to root list, again.

	        y.left = minimum;
	        y.right = minimum.right;
	        minimum.right = y;
	        y.right.left = y; // check if this is a new min.

	        if (smaller$1(y.key, minimum.key)) {
	          minimum = y;
	        }
	      } else {
	        minimum = y;
	      }
	    }

	    return minimum;
	  }

	  return FibonacciHeap;
	}

	var name$r = 'FibonacciHeap';
	var path$7 = 'type';
	var factory_1$u = factory$u;

	var FibonacciHeap = {
		name: name$r,
		path: path$7,
		factory: factory_1$u
	};

	var string$4 = utils.string;
	var object$3 = utils.object;
	var isArray$2 = Array.isArray;
	var isString$3 = string$4.isString;

	function factory$v(type, config, load) {
	  var DenseMatrix$1 = load(DenseMatrix);
	  var smaller$1 = load(smaller);

	  function ImmutableDenseMatrix(data, datatype) {
	    if (!(this instanceof ImmutableDenseMatrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (datatype && !isString$3(datatype)) {
	      throw new Error('Invalid datatype: ' + datatype);
	    }

	    if (type.isMatrix(data) || isArray$2(data)) {
	      // use DenseMatrix implementation
	      var matrix = new DenseMatrix$1(data, datatype); // internal structures

	      this._data = matrix._data;
	      this._size = matrix._size;
	      this._datatype = matrix._datatype;
	      this._min = null;
	      this._max = null;
	    } else if (data && isArray$2(data.data) && isArray$2(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = data.datatype;
	      this._min = typeof data.min !== 'undefined' ? data.min : null;
	      this._max = typeof data.max !== 'undefined' ? data.max : null;
	    } else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + utils.types.type(data) + ')');
	    } else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	      this._min = null;
	      this._max = null;
	    }
	  }

	  ImmutableDenseMatrix.prototype = new DenseMatrix$1();
	  /**
	   * Attach type information
	   */

	  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
	  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     const subset = matrix.subset(index)               // retrieve subset
	   *     const value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | ImmutableDenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */

	  ImmutableDenseMatrix.prototype.subset = function (index) {
	    switch (arguments.length) {
	      case 1:
	        // use base implementation
	        var m = DenseMatrix$1.prototype.subset.call(this, index); // check result is a matrix

	        if (type.isMatrix(m)) {
	          // return immutable matrix
	          return new ImmutableDenseMatrix({
	            data: m._data,
	            size: m._size,
	            datatype: m._datatype
	          });
	        }

	        return m;
	      // intentional fall through

	      case 2:
	      case 3:
	        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');

	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	  /**
	   * Replace a single element in the matrix.
	   * @param {Number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {ImmutableDenseMatrix} self
	   */


	  ImmutableDenseMatrix.prototype.set = function () {
	    throw new Error('Cannot invoke set on an Immutable Matrix instance');
	  };
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {Number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */


	  ImmutableDenseMatrix.prototype.resize = function () {
	    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
	  };
	  /**
	   * Disallows reshaping in favor of immutability.
	   *
	   * @throws {Error} Operation not allowed
	   */


	  ImmutableDenseMatrix.prototype.reshape = function () {
	    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
	  };
	  /**
	   * Create a clone of the matrix
	   * @return {ImmutableDenseMatrix} clone
	   */


	  ImmutableDenseMatrix.prototype.clone = function () {
	    var m = new ImmutableDenseMatrix({
	      data: object$3.clone(this._data),
	      size: object$3.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  /**
	   * Get a JSON representation of the matrix
	   * @returns {Object}
	   */


	  ImmutableDenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'ImmutableDenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	  /**
	   * Generate a matrix from a JSON object
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {ImmutableDenseMatrix}
	   */


	  ImmutableDenseMatrix.fromJSON = function (json) {
	    return new ImmutableDenseMatrix(json);
	  };
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @param {Number} i       Matrix row index 1
	   * @param {Number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */


	  ImmutableDenseMatrix.prototype.swapRows = function () {
	    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
	  };
	  /**
	   * Calculate the minimum value in the set
	   * @return {Number | undefined} min
	   */


	  ImmutableDenseMatrix.prototype.min = function () {
	    // check min has been calculated before
	    if (this._min === null) {
	      // minimum
	      var m = null; // compute min

	      this.forEach(function (v) {
	        if (m === null || smaller$1(v, m)) {
	          m = v;
	        }
	      });
	      this._min = m !== null ? m : undefined;
	    }

	    return this._min;
	  };
	  /**
	   * Calculate the maximum value in the set
	   * @return {Number | undefined} max
	   */


	  ImmutableDenseMatrix.prototype.max = function () {
	    // check max has been calculated before
	    if (this._max === null) {
	      // maximum
	      var m = null; // compute max

	      this.forEach(function (v) {
	        if (m === null || smaller$1(m, v)) {
	          m = v;
	        }
	      });
	      this._max = m !== null ? m : undefined;
	    }

	    return this._max;
	  }; // exports


	  return ImmutableDenseMatrix;
	}

	var name$s = 'ImmutableDenseMatrix';
	var path$8 = 'type';
	var factory_1$v = factory$v;

	var ImmutableDenseMatrix = {
		name: name$s,
		path: path$8,
		factory: factory_1$v
	};

	var clone$2 = object.clone;

	var isInteger$2 = number.isInteger;

	function factory$w(type) {
	  /**
	   * Create an index. An Index can store ranges and sets for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Usage:
	   *     const index = new Index(range1, range2, matrix1, array1, ...)
	   *
	   * Where each parameter can be any of:
	   *     A number
	   *     A string (containing a name of an object property)
	   *     An instance of Range
	   *     An Array with the Set values
	   *     A Matrix with the Set values
	   *
	   * The parameters start, end, and step must be integer numbers.
	   *
	   * @class Index
	   * @Constructor Index
	   * @param {...*} ranges
	   */
	  function Index(ranges) {
	    if (!(this instanceof Index)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this._dimensions = [];
	    this._isScalar = true;

	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];

	      if (type.isRange(arg)) {
	        this._dimensions.push(arg);

	        this._isScalar = false;
	      } else if (Array.isArray(arg) || type.isMatrix(arg)) {
	        // create matrix
	        var m = _createImmutableMatrix(arg.valueOf());

	        this._dimensions.push(m); // size


	        var size = m.size(); // scalar

	        if (size.length !== 1 || size[0] !== 1) {
	          this._isScalar = false;
	        }
	      } else if (typeof arg === 'number') {
	        this._dimensions.push(_createImmutableMatrix([arg]));
	      } else if (typeof arg === 'string') {
	        // object property (arguments.count should be 1)
	        this._dimensions.push(arg);
	      } else {
	        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	      } // TODO: implement support for wildcard '*'

	    }
	  }
	  /**
	   * Attach type information
	   */


	  Index.prototype.type = 'Index';
	  Index.prototype.isIndex = true;

	  function _createImmutableMatrix(arg) {
	    // loop array elements
	    for (var i = 0, l = arg.length; i < l; i++) {
	      if (typeof arg[i] !== 'number' || !isInteger$2(arg[i])) {
	        throw new TypeError('Index parameters must be positive integer numbers');
	      }
	    } // create matrix


	    return new type.ImmutableDenseMatrix(arg);
	  }
	  /**
	   * Create a clone of the index
	   * @memberof Index
	   * @return {Index} clone
	   */


	  Index.prototype.clone = function () {
	    var index = new Index();
	    index._dimensions = clone$2(this._dimensions);
	    index._isScalar = this._isScalar;
	    return index;
	  };
	  /**
	   * Create an index from an array with ranges/numbers
	   * @memberof Index
	   * @param {Array.<Array | number>} ranges
	   * @return {Index} index
	   * @private
	   */


	  Index.create = function (ranges) {
	    var index = new Index();
	    Index.apply(index, ranges);
	    return index;
	  };
	  /**
	   * Retrieve the size of the index, the number of elements for each dimension.
	   * @memberof Index
	   * @returns {number[]} size
	   */


	  Index.prototype.size = function () {
	    var size = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var d = this._dimensions[i];
	      size[i] = typeof d === 'string' ? 1 : d.size()[0];
	    }

	    return size;
	  };
	  /**
	   * Get the maximum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} max
	   */


	  Index.prototype.max = function () {
	    var values = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = typeof range === 'string' ? range : range.max();
	    }

	    return values;
	  };
	  /**
	   * Get the minimum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} min
	   */


	  Index.prototype.min = function () {
	    var values = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = typeof range === 'string' ? range : range.min();
	    }

	    return values;
	  };
	  /**
	   * Loop over each of the ranges of the index
	   * @memberof Index
	   * @param {Function} callback   Called for each range with a Range as first
	   *                              argument, the dimension as second, and the
	   *                              index object as third.
	   */


	  Index.prototype.forEach = function (callback) {
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      callback(this._dimensions[i], i, this);
	    }
	  };
	  /**
	   * Retrieve the dimension for the given index
	   * @memberof Index
	   * @param {Number} dim                  Number of the dimension
	   * @returns {Range | null} range
	   */


	  Index.prototype.dimension = function (dim) {
	    return this._dimensions[dim] || null;
	  };
	  /**
	   * Test whether this index contains an object property
	   * @returns {boolean} Returns true if the index is an object property
	   */


	  Index.prototype.isObjectProperty = function () {
	    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
	  };
	  /**
	   * Returns the object property name when the Index holds a single object property,
	   * else returns null
	   * @returns {string | null}
	   */


	  Index.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this._dimensions[0] : null;
	  };
	  /**
	   * Test whether this index contains only a single value.
	   *
	   * This is the case when the index is created with only scalar values as ranges,
	   * not for ranges resolving into a single value.
	   * @memberof Index
	   * @return {boolean} isScalar
	   */


	  Index.prototype.isScalar = function () {
	    return this._isScalar;
	  };
	  /**
	   * Expand the Index into an array.
	   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
	   * @memberof Index
	   * @returns {Array} array
	   */


	  Index.prototype.toArray = function () {
	    var array = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());
	    }

	    return array;
	  };
	  /**
	   * Get the primitive value of the Index, a two dimensional array.
	   * Equivalent to Index.toArray().
	   * @memberof Index
	   * @returns {Array} array
	   */


	  Index.prototype.valueOf = Index.prototype.toArray;
	  /**
	   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
	   * @memberof Index
	   * @returns {String} str
	   */

	  Index.prototype.toString = function () {
	    var strings = [];

	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];

	      if (typeof dimension === 'string') {
	        strings.push(JSON.stringify(dimension));
	      } else {
	        strings.push(dimension.toString());
	      }
	    }

	    return '[' + strings.join(', ') + ']';
	  };
	  /**
	   * Get a JSON representation of the Index
	   * @memberof Index
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   */


	  Index.prototype.toJSON = function () {
	    return {
	      mathjs: 'Index',
	      dimensions: this._dimensions
	    };
	  };
	  /**
	   * Instantiate an Index from a JSON object
	   * @memberof Index
	   * @param {Object} json A JSON object structured as:
	   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   * @return {Index}
	   */


	  Index.fromJSON = function (json) {
	    return Index.create(json.dimensions);
	  };

	  return Index;
	}

	var name$t = 'Index';
	var path$9 = 'type';
	var factory_1$w = factory$w;

	var MatrixIndex = {
		name: name$t,
		path: path$9,
		factory: factory_1$w
	};

	function factory$x(type, config, load, typed) {
	  /**
	   * Create a range. A range has a start, step, and end, and contains functions
	   * to iterate over the range.
	   *
	   * A range can be constructed as:
	   *
	   *     const range = new Range(start, end)
	   *     const range = new Range(start, end, step)
	   *
	   * To get the result of the range:
	   *     range.forEach(function (x) {
	   *         console.log(x)
	   *     })
	   *     range.map(function (x) {
	   *         return math.sin(x)
	   *     })
	   *     range.toArray()
	   *
	   * Example usage:
	   *
	   *     const c = new Range(2, 6)       // 2:1:5
	   *     c.toArray()                     // [2, 3, 4, 5]
	   *     const d = new Range(2, -3, -1)  // 2:-1:-2
	   *     d.toArray()                     // [2, 1, 0, -1, -2]
	   *
	   * @class Range
	   * @constructor Range
	   * @param {number} start  included lower bound
	   * @param {number} end    excluded upper bound
	   * @param {number} [step] step size, default value is 1
	   */
	  function Range(start, end, step) {
	    if (!(this instanceof Range)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    var hasStart = start !== null && start !== undefined;
	    var hasEnd = end !== null && end !== undefined;
	    var hasStep = step !== null && step !== undefined;

	    if (hasStart) {
	      if (type.isBigNumber(start)) {
	        start = start.toNumber();
	      } else if (typeof start !== 'number') {
	        throw new TypeError('Parameter start must be a number');
	      }
	    }

	    if (hasEnd) {
	      if (type.isBigNumber(end)) {
	        end = end.toNumber();
	      } else if (typeof end !== 'number') {
	        throw new TypeError('Parameter end must be a number');
	      }
	    }

	    if (hasStep) {
	      if (type.isBigNumber(step)) {
	        step = step.toNumber();
	      } else if (typeof step !== 'number') {
	        throw new TypeError('Parameter step must be a number');
	      }
	    }

	    this.start = hasStart ? parseFloat(start) : 0;
	    this.end = hasEnd ? parseFloat(end) : 0;
	    this.step = hasStep ? parseFloat(step) : 1;
	  }
	  /**
	   * Attach type information
	   */


	  Range.prototype.type = 'Range';
	  Range.prototype.isRange = true;
	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @memberof Range
	   * @param {string} str
	   * @return {Range | null} range
	   */

	  Range.parse = function (str) {
	    if (typeof str !== 'string') {
	      return null;
	    }

	    var args = str.split(':');
	    var nums = args.map(function (arg) {
	      return parseFloat(arg);
	    });
	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });

	    if (invalid) {
	      return null;
	    }

	    switch (nums.length) {
	      case 2:
	        return new Range(nums[0], nums[1]);

	      case 3:
	        return new Range(nums[0], nums[2], nums[1]);

	      default:
	        return null;
	    }
	  };
	  /**
	   * Create a clone of the range
	   * @return {Range} clone
	   */


	  Range.prototype.clone = function () {
	    return new Range(this.start, this.end, this.step);
	  };
	  /**
	   * Retrieve the size of the range.
	   * Returns an array containing one number, the number of elements in the range.
	   * @memberof Range
	   * @returns {number[]} size
	   */


	  Range.prototype.size = function () {
	    var len = 0;
	    var start = this.start;
	    var step = this.step;
	    var end = this.end;
	    var diff = end - start;

	    if (number.sign(step) === number.sign(diff)) {
	      len = Math.ceil(diff / step);
	    } else if (diff === 0) {
	      len = 0;
	    }

	    if (isNaN(len)) {
	      len = 0;
	    }

	    return [len];
	  };
	  /**
	   * Calculate the minimum value in the range
	   * @memberof Range
	   * @return {number | undefined} min
	   */


	  Range.prototype.min = function () {
	    var size = this.size()[0];

	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start;
	      } else {
	        // negative step
	        return this.start + (size - 1) * this.step;
	      }
	    } else {
	      return undefined;
	    }
	  };
	  /**
	   * Calculate the maximum value in the range
	   * @memberof Range
	   * @return {number | undefined} max
	   */


	  Range.prototype.max = function () {
	    var size = this.size()[0];

	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start + (size - 1) * this.step;
	      } else {
	        // negative step
	        return this.start;
	      }
	    } else {
	      return undefined;
	    }
	  };
	  /**
	   * Execute a callback function for each value in the range.
	   * @memberof Range
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Range being traversed.
	   */


	  Range.prototype.forEach = function (callback) {
	    var x = this.start;
	    var step = this.step;
	    var end = this.end;
	    var i = 0;

	    if (step > 0) {
	      while (x < end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    } else if (step < 0) {
	      while (x > end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    }
	  };
	  /**
	   * Execute a callback function for each value in the Range, and return the
	   * results as an array
	   * @memberof Range
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @returns {Array} array
	   */


	  Range.prototype.map = function (callback) {
	    var array = [];
	    this.forEach(function (value, index, obj) {
	      array[index[0]] = callback(value, index, obj);
	    });
	    return array;
	  };
	  /**
	   * Create an Array with a copy of the Ranges data
	   * @memberof Range
	   * @returns {Array} array
	   */


	  Range.prototype.toArray = function () {
	    var array = [];
	    this.forEach(function (value, index) {
	      array[index[0]] = value;
	    });
	    return array;
	  };
	  /**
	   * Get the primitive value of the Range, a one dimensional array
	   * @memberof Range
	   * @returns {Array} array
	   */


	  Range.prototype.valueOf = function () {
	    // TODO: implement a caching mechanism for range.valueOf()
	    return this.toArray();
	  };
	  /**
	   * Get a string representation of the range, with optional formatting options.
	   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
	   * @memberof Range
	   * @param {Object | number | function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */


	  Range.prototype.format = function (options) {
	    var str = number.format(this.start, options);

	    if (this.step !== 1) {
	      str += ':' + number.format(this.step, options);
	    }

	    str += ':' + number.format(this.end, options);
	    return str;
	  };
	  /**
	   * Get a string representation of the range.
	   * @memberof Range
	   * @returns {string}
	   */


	  Range.prototype.toString = function () {
	    return this.format();
	  };
	  /**
	   * Get a JSON representation of the range
	   * @memberof Range
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   */


	  Range.prototype.toJSON = function () {
	    return {
	      mathjs: 'Range',
	      start: this.start,
	      end: this.end,
	      step: this.step
	    };
	  };
	  /**
	   * Instantiate a Range from a JSON object
	   * @memberof Range
	   * @param {Object} json A JSON object structured as:
	   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   * @return {Range}
	   */


	  Range.fromJSON = function (json) {
	    return new Range(json.start, json.end, json.step);
	  };

	  return Range;
	}

	var name$u = 'Range';
	var path$a = 'type';
	var factory_1$x = factory$x;

	var Range = {
		name: name$u,
		path: path$a,
		factory: factory_1$x
	};

	function factory$y(type, config, load, typed) {
	  /**
	   * Create an index. An Index can store ranges having start, step, and end
	   * for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Syntax:
	   *
	   *     math.index(range1, range2, ...)
	   *
	   * Where each range can be any of:
	   *
	   * - A number
	   * - A string for getting/setting an object property
	   * - An instance of `Range`
	   * - A one-dimensional Array or a Matrix with numbers
	   *
	   * Indexes must be zero-based, integer numbers.
	   *
	   * Examples:
	   *
	   *    const math = require('mathjs')
	   *
	   *    const b = [1, 2, 3, 4, 5]
	   *    math.subset(b, math.index([1, 2, 3]))     // returns [2, 3, 4]
	   *
	   *    const a = math.matrix([[1, 2], [3, 4]])
	   *    a.subset(math.index(0, 1))             // returns 2
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, matrix, number, string, unit
	   *
	   * @param {...*} ranges   Zero or more ranges or numbers.
	   * @return {Index}        Returns the created index
	   */
	  return typed('index', {
	    '...number | string | BigNumber | Range | Array | Matrix': function numberStringBigNumberRangeArrayMatrix(args) {
	      var ranges = args.map(function (arg) {
	        if (type.isBigNumber(arg)) {
	          return arg.toNumber(); // convert BigNumber to Number
	        } else if (Array.isArray(arg) || type.isMatrix(arg)) {
	          return arg.map(function (elem) {
	            // convert BigNumber to Number
	            return type.isBigNumber(elem) ? elem.toNumber() : elem;
	          });
	        } else {
	          return arg;
	        }
	      });
	      var res = new type.Index();
	      type.Index.apply(res, ranges);
	      return res;
	    }
	  });
	}

	var name$v = 'index';
	var factory_1$y = factory$y;

	var _function$1 = {
		name: name$v,
		factory: factory_1$y
	};

	function factory$z(type, config, load, typed) {
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   *
	   * Syntax:
	   *
	   *    math.sparse()               // creates an empty sparse matrix.
	   *    math.sparse(data)           // creates a sparse matrix with initial data.
	   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
	   *
	   * Examples:
	   *
	   *    let m = math.sparse([[1, 2], [3, 4]])
	   *    m.size()                        // Array [2, 2]
	   *    m.resize([3, 2], 5)
	   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, matrix
	   *
	   * @param {Array | Matrix} [data]    A two dimensional array
	   *
	   * @return {Matrix} The created matrix
	   */

	  var sparse = typed('sparse', {
	    '': function _() {
	      return new SparseMatrix([]);
	    },
	    'string': function string(datatype) {
	      return new SparseMatrix([], datatype);
	    },
	    'Array | Matrix': function ArrayMatrix(data) {
	      return new SparseMatrix(data);
	    },
	    'Array | Matrix, string': function ArrayMatrixString(data, datatype) {
	      return new SparseMatrix(data, datatype);
	    }
	  });
	  sparse.toTex = {
	    0: '\\begin{bsparse}\\end{bsparse}',
	    1: "\\left(${args[0]}\\right)"
	  };
	  return sparse;
	}

	var name$w = 'sparse';
	var factory_1$z = factory$z;

	var sparse = {
		name: name$w,
		factory: factory_1$z
	};

	var matrix$1 = [// types
	Matrix, DenseMatrix, SparseMatrix, Spa, FibonacciHeap, ImmutableDenseMatrix, MatrixIndex, Range, // construction functions
	_function$1, matrix, sparse, // util functions
	getArrayDataType];

	function factory$A(type, config, load, typed) {
	  /**
	   * Create a number or convert a string, boolean, or unit to a number.
	   * When value is a matrix, all elements will be converted to number.
	   *
	   * Syntax:
	   *
	   *    math.number(value)
	   *    math.number(unit, valuelessUnit)
	   *
	   * Examples:
	   *
	   *    math.number(2)                         // returns number 2
	   *    math.number('7.2')                     // returns number 7.2
	   *    math.number(true)                      // returns number 1
	   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]
	   *    math.number(math.unit('52cm'), 'm')    // returns 0.52
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, string, unit
	   *
	   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
	   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
	   * @return {number | Array | Matrix} The created number
	   */
	  var number = typed('number', {
	    '': function _() {
	      return 0;
	    },
	    'number': function number(x) {
	      return x;
	    },
	    'string': function string(x) {
	      if (x === 'NaN') return NaN;
	      var num = Number(x);

	      if (isNaN(num)) {
	        throw new SyntaxError('String "' + x + '" is no valid number');
	      }

	      return num;
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.toNumber();
	    },
	    'Fraction': function Fraction(x) {
	      return x.valueOf();
	    },
	    'Unit': function Unit(x) {
	      throw new Error('Second argument with valueless unit expected');
	    },
	    'null': function _null(x) {
	      return 0;
	    },
	    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {
	      return unit.toNumber(valuelessUnit);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, number);
	    }
	  });
	  number.toTex = {
	    0: "0",
	    1: "\\left(${args[0]}\\right)",
	    2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)"
	  };
	  return number;
	}

	var name$x = 'number';
	var factory_1$A = factory$A;

	var number$3 = {
		name: name$x,
		factory: factory_1$A
	};

	function factory$B(type, config, load, typed) {
	  var getTypeOf = load(_typeof$4);
	  var validInputTypes = {
	    'string': true,
	    'number': true,
	    'BigNumber': true,
	    'Fraction': true // Load the conversion functions for each output type

	  };
	  var validOutputTypes = {
	    'number': load(number$3),
	    'BigNumber': load(bignumber),
	    'Fraction': load(fraction$1)
	    /**
	     * Convert a numeric value to a specific type: number, BigNumber, or Fraction
	     *
	     * @param {string | number | BigNumber | Fraction } value
	     * @param {'number' | 'BigNumber' | 'Fraction'} outputType
	     * @return {number | BigNumber | Fraction} Returns an instance of the
	     *                                         numeric in the requested type
	     */

	  };

	  var numeric = function numeric(value, outputType) {
	    var inputType = getTypeOf(value);

	    if (!(inputType in validInputTypes)) {
	      throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
	    }

	    if (!(outputType in validOutputTypes)) {
	      throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
	    }

	    if (outputType === inputType) {
	      return value;
	    } else {
	      return validOutputTypes[outputType](value);
	    }
	  };

	  numeric.toTex = function (node, options) {
	    // Not sure if this is strictly right but should work correctly for the vast majority of use cases.
	    return node.args[0].toTex();
	  };

	  return numeric;
	} // FIXME: expose numeric in the math namespace after we've decided on a name and have written proper docs for this function. See https://github.com/josdejong/mathjs/pull/1270
	// exports.name = 'type._numeric'


	var path$b = 'type';
	var name$y = '_numeric';
	var factory_1$B = factory$B;

	var numeric = {
		path: path$b,
		name: name$y,
		factory: factory_1$B
	};

	function factory$C(type, config, load, typed) {
	  /**
	   * A ResultSet contains a list or results
	   * @class ResultSet
	   * @param {Array} entries
	   * @constructor ResultSet
	   */
	  function ResultSet(entries) {
	    if (!(this instanceof ResultSet)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.entries = entries || [];
	  }
	  /**
	   * Attach type information
	   */


	  ResultSet.prototype.type = 'ResultSet';
	  ResultSet.prototype.isResultSet = true;
	  /**
	   * Returns the array with results hold by this ResultSet
	   * @memberof ResultSet
	   * @returns {Array} entries
	   */

	  ResultSet.prototype.valueOf = function () {
	    return this.entries;
	  };
	  /**
	   * Returns the stringified results of the ResultSet
	   * @memberof ResultSet
	   * @returns {string} string
	   */


	  ResultSet.prototype.toString = function () {
	    return '[' + this.entries.join(', ') + ']';
	  };
	  /**
	   * Get a JSON representation of the ResultSet
	   * @memberof ResultSet
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "ResultSet", "entries": [...]}`
	   */


	  ResultSet.prototype.toJSON = function () {
	    return {
	      mathjs: 'ResultSet',
	      entries: this.entries
	    };
	  };
	  /**
	   * Instantiate a ResultSet from a JSON object
	   * @memberof ResultSet
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "ResultSet", "entries": [...]}`
	   * @return {ResultSet}
	   */


	  ResultSet.fromJSON = function (json) {
	    return new ResultSet(json.entries);
	  };

	  return ResultSet;
	}

	var name$z = 'ResultSet';
	var path$c = 'type';
	var factory_1$C = factory$C;

	var ResultSet = {
		name: name$z,
		path: path$c,
		factory: factory_1$C
	};

	var resultset = [// type
	ResultSet];

	function factory$D(type, config, load, typed) {
	  /**
	   * Create a string or convert any object into a string.
	   * Elements of Arrays and Matrices are processed element wise.
	   *
	   * Syntax:
	   *
	   *    math.string(value)
	   *
	   * Examples:
	   *
	   *    math.string(4.2)               // returns string '4.2'
	   *    math.string(math.complex(3, 2) // returns string '3 + 2i'
	   *
	   *    const u = math.unit(5, 'km')
	   *    math.string(u.to('m'))         // returns string '5000 m'
	   *
	   *    math.string([true, false])     // returns ['true', 'false']
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, unit
	   *
	   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
	   * @return {string | Array | Matrix} The created string
	   */
	  var string = typed('string', {
	    '': function _() {
	      return '';
	    },
	    'number': number.format,
	    'null': function _null(x) {
	      return 'null';
	    },
	    'boolean': function boolean(x) {
	      return x + '';
	    },
	    'string': function string(x) {
	      return x;
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, string);
	    },
	    'any': function any(x) {
	      return String(x);
	    }
	  });
	  string.toTex = {
	    0: '\\mathtt{""}',
	    1: "\\mathrm{string}\\left(${args[0]}\\right)"
	  };
	  return string;
	}

	var name$A = 'string';
	var factory_1$D = factory$D;

	var string$5 = {
		name: name$A,
		factory: factory_1$D
	};

	var constants = createCommonjsModule(function (module, exports) {

	var memoize = _function.memoize;
	/**
	 * Calculate BigNumber e
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns e
	 */


	exports.e = memoize(function (BigNumber) {
	  return new BigNumber(1).exp();
	}, hasher);
	/**
	 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns phi
	 */

	exports.phi = memoize(function (BigNumber) {
	  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
	}, hasher);
	/**
	 * Calculate BigNumber pi.
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns pi
	 */

	exports.pi = memoize(function (BigNumber) {
	  return BigNumber.acos(-1);
	}, hasher);
	/**
	 * Calculate BigNumber tau, tau = 2 * pi
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns tau
	 */

	exports.tau = memoize(function (BigNumber) {
	  return exports.pi(BigNumber).times(2);
	}, hasher);
	/**
	 * Create a hash for a BigNumber constructor function. The created has is
	 * the configured precision
	 * @param {Array} args         Supposed to contain a single entry with
	 *                             a BigNumber constructor
	 * @return {number} precision
	 * @private
	 */

	function hasher(args) {
	  return args[0].precision;
	}
	});
	var constants_1 = constants.e;
	var constants_2 = constants.phi;
	var constants_3 = constants.pi;
	var constants_4 = constants.tau;

	function factory$E(type, config, load, typed) {
	  var latex$1 = latex;
	  /**
	   * Inverse the sign of a value, apply a unary minus operation.
	   *
	   * For matrices, the function is evaluated element wise. Boolean values and
	   * strings will be converted to a number. For complex numbers, both real and
	   * complex value are inverted.
	   *
	   * Syntax:
	   *
	   *    math.unaryMinus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryMinus(3.5)      // returns -3.5
	   *    math.unaryMinus(-4.2)     // returns 4.2
	   *
	   * See also:
	   *
	   *    add, subtract, unaryPlus
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
	   */


	  var unaryMinus = typed('unaryMinus', {
	    'number': function number(x) {
	      return -x;
	    },
	    'Complex': function Complex(x) {
	      return x.neg();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.neg();
	    },
	    'Fraction': function Fraction(x) {
	      return x.neg();
	    },
	    'Unit': function Unit(x) {
	      var res = x.clone();
	      res.value = unaryMinus(x.value);
	      return res;
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since unaryMinus(0) = 0
	      return deepMap(x, unaryMinus);
	    } // TODO: add support for string

	  });
	  unaryMinus.toTex = {
	    1: "".concat(latex$1.operators['unaryMinus'], "\\left(${args[0]}\\right)")
	  };
	  return unaryMinus;
	}

	var name$B = 'unaryMinus';
	var factory_1$E = factory$E;

	var unaryMinus = {
		name: name$B,
		factory: factory_1$E
	};

	function factory$F(type, config, load, typed) {
	  var equalScalar$1 = load(equalScalar);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          â  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */

	  var algorithm05 = function algorithm05(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype; // sparse matrix arrays

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = []; // matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    }); // workspaces

	    var xa = cvalues ? [] : undefined;
	    var xb = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

	    var wa = [];
	    var wb = []; // vars

	    var i, j, k, k1; // loop columns

	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length; // columns mark

	      var mark = j + 1; // loop values A(:,j)

	      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
	        // row
	        i = aindex[k]; // push index

	        cindex.push(i); // update workspace

	        wa[i] = mark; // check we need to process values

	        if (xa) {
	          xa[i] = avalues[k];
	        }
	      } // loop values B(:,j)


	      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
	        // row
	        i = bindex[k]; // check row existed in A

	        if (wa[i] !== mark) {
	          // push index
	          cindex.push(i);
	        } // update workspace


	        wb[i] = mark; // check we need to process values

	        if (xb) {
	          xb[i] = bvalues[k];
	        }
	      } // check we need to process values (non pattern matrix)


	      if (cvalues) {
	        // initialize first index in j
	        k = cptr[j]; // loop index in j

	        while (k < cindex.length) {
	          // row
	          i = cindex[k]; // marks

	          var wai = wa[i];
	          var wbi = wb[i]; // check Aij or Bij are nonzero

	          if (wai === mark || wbi === mark) {
	            // matrix values @ i,j
	            var va = wai === mark ? xa[i] : zero;
	            var vb = wbi === mark ? xb[i] : zero; // Cij

	            var vc = cf(va, vb); // check for zero

	            if (!eq(vc, zero)) {
	              // push value
	              cvalues.push(vc); // increment pointer

	              k++;
	            } else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	        }
	      }
	    } // update cptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return c;
	  };

	  return algorithm05;
	}

	var name$C = 'algorithm05';
	var factory_1$F = factory$F;

	var algorithm05 = {
		name: name$C,
		factory: factory_1$F
	};

	function factory$G(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var addScalar$1 = load(addScalar);
	  var unaryMinus$1 = load(unaryMinus);
	  var algorithm01$1 = load(algorithm01);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm05$1 = load(algorithm05);
	  var algorithm10$1 = load(algorithm10);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14); // TODO: split function subtract in two: subtract and subtractScalar

	  /**
	   * Subtract two values, `x - y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.subtract(x, y)
	   *
	   * Examples:
	   *
	   *    math.subtract(5.3, 2)        // returns number 3.3
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(4, 1)
	   *    math.subtract(a, b)          // returns Complex -2 + 2i
	   *
	   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]
	   *
	   *    const c = math.unit('2.1 km')
	   *    const d = math.unit('500m')
	   *    math.subtract(c, d)          // returns Unit 1.6 km
	   *
	   * See also:
	   *
	   *    add
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
	   *            Initial value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
	   *            Value to subtract from `x`
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Subtraction of `x` and `y`
	   */

	  var subtract = typed('subtract', {
	    'number, number': function numberNumber(x, y) {
	      return x - y;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.sub(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.minus(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.sub(y);
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (x.value === null) {
	        throw new Error('Parameter x contains a unit with undefined value');
	      }

	      if (y.value === null) {
	        throw new Error('Parameter y contains a unit with undefined value');
	      }

	      if (!x.equalBase(y)) {
	        throw new Error('Units do not match');
	      }

	      var res = x.clone();
	      res.value = subtract(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm05$1(x, y, subtract);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm03$1(y, x, subtract, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm01$1(x, y, subtract, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      checkEqualDimensions(x, y);
	      return algorithm13$1(x, y, subtract);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return subtract(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return subtract(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return subtract(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm10$1(x, unaryMinus$1(y), addScalar$1);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, subtract);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm10$1(y, x, subtract, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, subtract, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, subtract, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, subtract, true).valueOf();
	    }
	  });
	  subtract.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['subtract'], "${args[1]}\\right)")
	  };
	  return subtract;
	}
	/**
	 * Check whether matrix x and y have the same number of dimensions.
	 * Throws a DimensionError when dimensions are not equal
	 * @param {Matrix} x
	 * @param {Matrix} y
	 */


	function checkEqualDimensions(x, y) {
	  var xsize = x.size();
	  var ysize = y.size();

	  if (xsize.length !== ysize.length) {
	    throw new DimensionError_1(xsize.length, ysize.length);
	  }
	}

	var name$D = 'subtract';
	var factory_1$G = factory$G;

	var subtract = {
		name: name$D,
		factory: factory_1$G
	};

	function factory$H(type, config, load, typed) {
	  /**
	   * Multiply two scalar values, `x * y`.
	   * This function is meant for internal use: it is used by the public function
	   * `multiply`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`
	   * @private
	   */
	  var multiplyScalar = typed('multiplyScalar', {
	    'number, number': function numberNumber(x, y) {
	      return x * y;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.mul(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.times(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.mul(y);
	    },
	    'number | Fraction | BigNumber | Complex, Unit': function numberFractionBigNumberComplexUnit(x, y) {
	      var res = y.clone();
	      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);
	      return res;
	    },
	    'Unit, number | Fraction | BigNumber | Complex': function UnitNumberFractionBigNumberComplex(x, y) {
	      var res = x.clone();
	      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);
	      return res;
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      return x.multiply(y);
	    }
	  });
	  return multiplyScalar;
	}

	var factory_1$H = factory$H;

	var multiplyScalar = {
		factory: factory_1$H
	};

	function factory$I(type, config, load, typed) {
	  var numeric$1 = load(numeric);
	  var getTypeOf = load(_typeof$4);
	  /**
	   * Divide two scalar values, `x / y`.
	   * This function is meant for internal use: it is used by the public functions
	   * `divide` and `inv`.
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`
	   * @private
	   */

	  var divideScalar = typed('divide', {
	    'number, number': function numberNumber(x, y) {
	      return x / y;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.div(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.div(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.div(y);
	    },
	    'Unit, number | Fraction | BigNumber': function UnitNumberFractionBigNumber(x, y) {
	      var res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit

	      var one = numeric$1(1, getTypeOf(y));
	      res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);
	      return res;
	    },
	    'number | Fraction | BigNumber, Unit': function numberFractionBigNumberUnit(x, y) {
	      var res = y.clone();
	      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit

	      var one = numeric$1(1, getTypeOf(x));
	      res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);
	      return res;
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      return x.divide(y);
	    }
	  });
	  return divideScalar;
	}

	var factory_1$I = factory$I;

	var divideScalar = {
		factory: factory_1$I
	};

	var isInteger$3 = number.isInteger;

	function factory$J(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Create a 2-dimensional identity matrix with size m x n or n x n.
	   * The matrix has ones on the diagonal and zeros elsewhere.
	   *
	   * Syntax:
	   *
	   *    math.identity(n)
	   *    math.identity(n, format)
	   *    math.identity(m, n)
	   *    math.identity(m, n, format)
	   *    math.identity([m, n])
	   *    math.identity([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.identity(3)                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
	   *    math.identity(3, 2)                 // returns [[1, 0], [0, 1], [0, 0]]
	   *
	   *    const A = [[1, 2, 3], [4, 5, 6]]
	   *    math.identity(math.size(A))         // returns [[1, 0, 0], [0, 1, 0]]
	   *
	   * See also:
	   *
	   *    diag, ones, zeros, size, range
	   *
	   * @param {...number | Matrix | Array} size   The size for the matrix
	   * @param {string} [format]                   The Matrix storage format
	   *
	   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
	   */

	  var identity = typed('identity', {
	    '': function _() {
	      return config.matrix === 'Matrix' ? matrix$1([]) : [];
	    },
	    'string': function string(format) {
	      return matrix$1(format);
	    },
	    'number | BigNumber': function numberBigNumber(rows) {
	      return _identity(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
	    },
	    'number | BigNumber, string': function numberBigNumberString(rows, format) {
	      return _identity(rows, rows, format);
	    },
	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(rows, cols) {
	      return _identity(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
	    },
	    'number | BigNumber, number | BigNumber, string': function numberBigNumberNumberBigNumberString(rows, cols, format) {
	      return _identity(rows, cols, format);
	    },
	    'Array': function Array(size) {
	      return _identityVector(size);
	    },
	    'Array, string': function ArrayString(size, format) {
	      return _identityVector(size, format);
	    },
	    'Matrix': function Matrix(size) {
	      return _identityVector(size.valueOf(), size.storage());
	    },
	    'Matrix, string': function MatrixString(size, format) {
	      return _identityVector(size.valueOf(), format);
	    }
	  });
	  identity.toTex = undefined; // use default template

	  return identity;

	  function _identityVector(size, format) {
	    switch (size.length) {
	      case 0:
	        return format ? matrix$1(format) : [];

	      case 1:
	        return _identity(size[0], size[0], format);

	      case 2:
	        return _identity(size[0], size[1], format);

	      default:
	        throw new Error('Vector containing two values expected');
	    }
	  }
	  /**
	   * Create an identity matrix
	   * @param {number | BigNumber} rows
	   * @param {number | BigNumber} cols
	   * @param {string} [format]
	   * @returns {Matrix}
	   * @private
	   */


	  function _identity(rows, cols, format) {
	    // BigNumber constructor with the right precision
	    var Big = type.isBigNumber(rows) || type.isBigNumber(cols) ? type.BigNumber : null;
	    if (type.isBigNumber(rows)) rows = rows.toNumber();
	    if (type.isBigNumber(cols)) cols = cols.toNumber();

	    if (!isInteger$3(rows) || rows < 1) {
	      throw new Error('Parameters in function identity must be positive integers');
	    }

	    if (!isInteger$3(cols) || cols < 1) {
	      throw new Error('Parameters in function identity must be positive integers');
	    }

	    var one = Big ? new type.BigNumber(1) : 1;
	    var defaultValue = Big ? new Big(0) : 0;
	    var size = [rows, cols]; // check we need to return a matrix

	    if (format) {
	      // get matrix storage constructor
	      var F = type.Matrix.storage(format); // create diagonal matrix (use optimized implementation for storage format)

	      return F.diagonal(size, one, 0, defaultValue);
	    } // create and resize array


	    var res = array.resize([], size, defaultValue); // fill in ones on the diagonal

	    var minimum = rows < cols ? rows : cols; // fill diagonal

	    for (var d = 0; d < minimum; d++) {
	      res[d][d] = one;
	    }

	    return res;
	  }
	}

	var name$E = 'identity';
	var factory_1$J = factory$J;

	var identity = {
		name: name$E,
		factory: factory_1$J
	};

	function factory$K(type, config, load, typed) {
	  var equalScalar$1 = load(equalScalar);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          â  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  0          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */

	  var algorithm11 = function algorithm11(s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix

	    if (!avalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // convert b to the same datatype

	      b = typed.convert(b, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    }); // loop columns

	    for (var j = 0; j < columns; j++) {
	      // initialize ptr
	      cptr[j] = cindex.length; // values in j

	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = aindex[k]; // invoke callback

	        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero

	        if (!eq(v, zero)) {
	          // push index & value
	          cindex.push(i);
	          cvalues.push(v);
	        }
	      }
	    } // update ptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return c;
	  };

	  return algorithm11;
	}

	var name$F = 'algorithm11';
	var factory_1$K = factory$K;

	var algorithm11 = {
		name: name$F,
		factory: factory_1$K
	};

	var extend$1 = object.extend;



	function factory$L(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var addScalar$1 = load(addScalar);
	  var multiplyScalar$1 = load(multiplyScalar);
	  var equalScalar$1 = load(equalScalar);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm14$1 = load(algorithm14);
	  var DenseMatrix = type.DenseMatrix;
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Multiply two or more values, `x * y`.
	   * For matrices, the matrix product is calculated.
	   *
	   * Syntax:
	   *
	   *    math.multiply(x, y)
	   *    math.multiply(x, y, z, ...)
	   *
	   * Examples:
	   *
	   *    math.multiply(4, 5.2)        // returns number 20.8
	   *    math.multiply(2, 3, 4)       // returns number 24
	   *
	   *    const a = math.complex(2, 3)
	   *    const b = math.complex(4, 1)
	   *    math.multiply(a, b)          // returns Complex 5 + 14i
	   *
	   *    const c = [[1, 2], [4, 3]]
	   *    const d = [[1, 2, 3], [3, -4, 7]]
	   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]
	   *
	   *    const e = math.unit('2.1 km')
	   *    math.multiply(3, e)          // returns Unit 6.3 km
	   *
	   * See also:
	   *
	   *    divide, prod, cross, dot
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
	   */

	  var multiply = typed('multiply', extend$1({
	    // we extend the signatures of multiplyScalar with signatures dealing with matrices
	    'Array, Array': function ArrayArray(x, y) {
	      // check dimensions
	      _validateMatrixDimensions(array.size(x), array.size(y)); // use dense matrix implementation


	      var m = multiply(matrix$1(x), matrix$1(y)); // return array or scalar

	      return type.isMatrix(m) ? m.valueOf() : m;
	    },
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // dimensions
	      var xsize = x.size();
	      var ysize = y.size(); // check dimensions

	      _validateMatrixDimensions(xsize, ysize); // process dimensions


	      if (xsize.length === 1) {
	        // process y dimensions
	        if (ysize.length === 1) {
	          // Vector * Vector
	          return _multiplyVectorVector(x, y, xsize[0]);
	        } // Vector * Matrix


	        return _multiplyVectorMatrix(x, y);
	      } // process y dimensions


	      if (ysize.length === 1) {
	        // Matrix * Vector
	        return _multiplyMatrixVector(x, y);
	      } // Matrix * Matrix


	      return _multiplyMatrixMatrix(x, y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(x, matrix$1(y));
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(matrix$1(x, y.storage()), y);
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$1(x, y, multiplyScalar$1, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, multiplyScalar$1, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm11$1(y, x, multiplyScalar$1, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, multiplyScalar$1, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, multiplyScalar$1, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, multiplyScalar$1, true).valueOf();
	    },
	    'any, any': multiplyScalar$1,
	    'any, any, ...any': function anyAnyAny(x, y, rest) {
	      var result = multiply(x, y);

	      for (var i = 0; i < rest.length; i++) {
	        result = multiply(result, rest[i]);
	      }

	      return result;
	    }
	  }, multiplyScalar$1.signatures));

	  function _validateMatrixDimensions(size1, size2) {
	    // check left operand dimensions
	    switch (size1.length) {
	      case 1:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Vector x Vector
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
	            }

	            break;

	          case 2:
	            // Vector x Matrix
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
	            }

	            break;

	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }

	        break;

	      case 2:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Matrix x Vector
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
	            }

	            break;

	          case 2:
	            // Matrix x Matrix
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
	            }

	            break;

	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }

	        break;

	      default:
	        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
	    }
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (N)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {number}             Scalar value
	   */


	  function _multiplyVectorVector(a, b, n) {
	    // check empty vector
	    if (n === 0) {
	      throw new Error('Cannot multiply two empty vectors');
	    } // a dense


	    var adata = a._data;
	    var adt = a._datatype; // b dense

	    var bdata = b._data;
	    var bdt = b._datatype; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar$1; // multiplyScalar signature to use

	    var mf = multiplyScalar$1; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$1, [dt, dt]);
	    } // result (do not initialize it with zero)


	    var c = mf(adata[0], bdata[0]); // loop data

	    for (var i = 1; i < n; i++) {
	      // multiply and accumulate
	      c = af(c, mf(adata[i], bdata[i]));
	    }

	    return c;
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Matrix         (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */


	  function _multiplyVectorMatrix(a, b) {
	    // process storage
	    if (b.storage() !== 'dense') {
	      throw new Error('Support for SparseMatrix not implemented');
	    }

	    return _multiplyVectorDenseMatrix(a, b);
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Dense Matrix   (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */


	  function _multiplyVectorDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b dense

	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype; // rows & columns

	    var alength = asize[0];
	    var bcolumns = bsize[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar$1; // multiplyScalar signature to use

	    var mf = multiplyScalar$1; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$1, [dt, dt]);
	    } // result


	    var c = []; // loop matrix columns

	    for (var j = 0; j < bcolumns; j++) {
	      // sum (do not initialize it with zero)
	      var sum = mf(adata[0], bdata[0][j]); // loop vector

	      for (var i = 1; i < alength; i++) {
	        // multiply & accumulate
	        sum = af(sum, mf(adata[i], bdata[i][j]));
	      }

	      c[j] = sum;
	    } // return matrix


	    return new DenseMatrix({
	      data: c,
	      size: [bcolumns],
	      datatype: dt
	    });
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {Matrix}             Dense Vector   (M)
	   */


	  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {
	    'DenseMatrix, any': _multiplyDenseMatrixVector,
	    'SparseMatrix, any': _multiplySparseMatrixVector
	  });
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Matrix         (NxC)
	   *
	   * @return {Matrix}             Matrix         (MxC)
	   */


	  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {
	    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,
	    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,
	    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,
	    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix
	  });
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix  (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             Dense Vector (M)
	   */


	  function _multiplyDenseMatrixVector(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b dense

	    var bdata = b._data;
	    var bdt = b._datatype; // rows & columns

	    var arows = asize[0];
	    var acolumns = asize[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar$1; // multiplyScalar signature to use

	    var mf = multiplyScalar$1; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$1, [dt, dt]);
	    } // result


	    var c = []; // loop matrix a rows

	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i]; // sum (do not initialize it with zero)

	      var sum = mf(row[0], bdata[0]); // loop matrix a columns

	      for (var j = 1; j < acolumns; j++) {
	        // multiply & accumulate
	        sum = af(sum, mf(row[j], bdata[j]));
	      }

	      c[i] = sum;
	    } // return matrix


	    return new DenseMatrix({
	      data: c,
	      size: [arows],
	      datatype: dt
	    });
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            DenseMatrix    (NxC)
	   *
	   * @return {Matrix}             DenseMatrix    (MxC)
	   */


	  function _multiplyDenseMatrixDenseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b dense

	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype; // rows & columns

	    var arows = asize[0];
	    var acolumns = asize[1];
	    var bcolumns = bsize[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar$1; // multiplyScalar signature to use

	    var mf = multiplyScalar$1; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$1, [dt, dt]);
	    } // result


	    var c = []; // loop matrix a rows

	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i]; // initialize row array

	      c[i] = []; // loop matrix b columns

	      for (var j = 0; j < bcolumns; j++) {
	        // sum (avoid initializing sum to zero)
	        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns

	        for (var x = 1; x < acolumns; x++) {
	          // multiply & accumulate
	          sum = af(sum, mf(row[x], bdata[x][j]));
	        }

	        c[i][j] = sum;
	      }
	    } // return matrix


	    return new DenseMatrix({
	      data: c,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            SparseMatrix   (NxC)
	   *
	   * @return {Matrix}             SparseMatrix   (MxC)
	   */


	  function _multiplyDenseMatrixSparseMatrix(a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype; // b sparse

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype; // validate b matrix

	    if (!bvalues) {
	      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
	    } // rows & columns


	    var arows = asize[0];
	    var bcolumns = bsize[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar$1; // multiplyScalar signature to use

	    var mf = multiplyScalar$1; // equalScalar signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$1, [dt, dt]);
	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt);
	    } // result


	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // c matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    }); // loop b columns

	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length; // indeces in column jb

	      var kb0 = bptr[jb];
	      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists

	      if (kb1 > kb0) {
	        // last row mark processed
	        var last = 0; // loop a rows

	        for (var i = 0; i < arows; i++) {
	          // column mark
	          var mark = i + 1; // C[i, jb]

	          var cij = void 0; // values in b column j

	          for (var kb = kb0; kb < kb1; kb++) {
	            // row
	            var ib = bindex[kb]; // check value has been initialized

	            if (last !== mark) {
	              // first value in column jb
	              cij = mf(adata[i][ib], bvalues[kb]); // update mark

	              last = mark;
	            } else {
	              // accumulate value
	              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
	            }
	          } // check column has been processed and value != 0


	          if (last === mark && !eq(cij, zero)) {
	            // push row & value
	            cindex.push(i);
	            cvalues.push(cij);
	          }
	        }
	      }
	    } // update ptr


	    cptr[bcolumns] = cindex.length; // return sparse matrix

	    return c;
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix    (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             SparseMatrix    (M, 1)
	   */


	  function _multiplySparseMatrixVector(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype; // validate a matrix

	    if (!avalues) {
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    } // b dense


	    var bdata = b._data;
	    var bdt = b._datatype; // rows & columns

	    var arows = a._size[0];
	    var brows = b._size[0]; // result

	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar$1; // multiplyScalar signature to use

	    var mf = multiplyScalar$1; // equalScalar signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$1, [dt, dt]);
	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt);
	    } // workspace


	    var x = []; // vector with marks indicating a value x[i] exists in a given column

	    var w = []; // update ptr

	    cptr[0] = 0; // rows in b

	    for (var ib = 0; ib < brows; ib++) {
	      // b[ib]
	      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops

	      if (!eq(vbi, zero)) {
	        // A values & index in ib column
	        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	          // a row
	          var ia = aindex[ka]; // check value exists in current j

	          if (!w[ia]) {
	            // ia is new entry in j
	            w[ia] = true; // add i to pattern of C

	            cindex.push(ia); // x(ia) = A

	            x[ia] = mf(vbi, avalues[ka]);
	          } else {
	            // i exists in C already
	            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
	          }
	        }
	      }
	    } // copy values from x to column jb of c


	    for (var p1 = cindex.length, p = 0; p < p1; p++) {
	      // row
	      var ic = cindex[p]; // copy value

	      cvalues[p] = x[ic];
	    } // update ptr


	    cptr[1] = cindex.length; // return sparse matrix

	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, 1],
	      datatype: dt
	    });
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            DenseMatrix       (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */


	  function _multiplySparseMatrixDenseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype; // validate a matrix

	    if (!avalues) {
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    } // b dense


	    var bdata = b._data;
	    var bdt = b._datatype; // rows & columns

	    var arows = a._size[0];
	    var brows = b._size[0];
	    var bcolumns = b._size[1]; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar$1; // multiplyScalar signature to use

	    var mf = multiplyScalar$1; // equalScalar signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$1, [dt, dt]);
	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt);
	    } // result


	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // c matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    }); // workspace

	    var x = []; // vector with marks indicating a value x[i] exists in a given column

	    var w = []; // loop b columns

	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length; // mark in workspace for current column

	      var mark = jb + 1; // rows in jb

	      for (var ib = 0; ib < brows; ib++) {
	        // b[ib, jb]
	        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops

	        if (!eq(vbij, zero)) {
	          // A values & index in ib column
	          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // a row
	            var ia = aindex[ka]; // check value exists in current j

	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark; // add i to pattern of C

	              cindex.push(ia); // x(ia) = A

	              x[ia] = mf(vbij, avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
	            }
	          }
	        }
	      } // copy values from x to column jb of c


	      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	        // row
	        var ic = cindex[p]; // copy value

	        cvalues[p] = x[ic];
	      }
	    } // update ptr


	    cptr[bcolumns] = cindex.length; // return sparse matrix

	    return c;
	  }
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            SparseMatrix      (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */


	  function _multiplySparseMatrixSparseMatrix(a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype; // b sparse

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bdt = b._datatype; // rows & columns

	    var arows = a._size[0];
	    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data

	    var values = avalues && bvalues; // datatype

	    var dt; // addScalar signature to use

	    var af = addScalar$1; // multiplyScalar signature to use

	    var mf = multiplyScalar$1; // process data types

	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt; // find signatures that matches (dt, dt)

	      af = typed.find(addScalar$1, [dt, dt]);
	      mf = typed.find(multiplyScalar$1, [dt, dt]);
	    } // result


	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = []; // c matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    }); // workspace

	    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column

	    var w = []; // variables

	    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns

	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length; // mark in workspace for current column

	      var mark = jb + 1; // B values & index in j

	      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
	        // b row
	        ib = bindex[kb]; // check we need to process values

	        if (values) {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka]; // check value exists in current j

	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark; // add i to pattern of C

	              cindex.push(ia); // x(ia) = A

	              x[ia] = mf(bvalues[kb], avalues[ka]);
	            } else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
	            }
	          }
	        } else {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka]; // check value exists in current j

	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark; // add i to pattern of C

	              cindex.push(ia);
	            }
	          }
	        }
	      } // check we need to process matrix values (pattern matrix)


	      if (values) {
	        // copy values from x to column jb of c
	        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	          // row
	          var ic = cindex[p]; // copy value

	          cvalues[p] = x[ic];
	        }
	      }
	    } // update ptr


	    cptr[bcolumns] = cindex.length; // return sparse matrix

	    return c;
	  }

	  multiply.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['multiply'], "${args[1]}\\right)")
	  };
	  return multiply;
	}

	var name$G = 'multiply';
	var factory_1$L = factory$L;

	var multiply = {
		name: name$G,
		factory: factory_1$L
	};

	var isInteger$4 = number.isInteger;

	var size = array.size;

	function factory$M(type, config, load, typed) {
	  var latex$1 = latex;

	  var identity$1 = load(identity);
	  var multiply$1 = load(multiply);
	  var matrix$1 = load(matrix);
	  var fraction = load(fraction$1);
	  var number = load(number$3);
	  /**
	   * Calculates the power of x to y, `x ^ y`.
	   * Matrix exponentiation is supported for square matrices `x`, and positive
	   * integer exponents `y`.
	   *
	   * For cubic roots of negative numbers, the function returns the principal
	   * root by default. In order to let the function return the real root,
	   * math.js can be configured with `math.config({predictable: true})`.
	   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
	   *
	   * Syntax:
	   *
	   *    math.pow(x, y)
	   *
	   * Examples:
	   *
	   *    math.pow(2, 3)               // returns number 8
	   *
	   *    const a = math.complex(2, 3)
	   *    math.pow(a, 2)                // returns Complex -5 + 12i
	   *
	   *    const b = [[1, 2], [4, 3]]
	   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    multiply, sqrt, cbrt, nthRoot
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex} y                          The exponent
	   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
	   */

	  var pow = typed('pow', {
	    'number, number': _pow,
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.pow(y);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      if (y.isInteger() || x >= 0 || config.predictable) {
	        return x.pow(y);
	      } else {
	        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
	      }
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      if (y.d !== 1) {
	        if (config.predictable) {
	          throw new Error('Function pow does not support non-integer exponents for fractions.');
	        } else {
	          return _pow(x.valueOf(), y.valueOf());
	        }
	      } else {
	        return x.pow(y);
	      }
	    },
	    'Array, number': _powArray,
	    'Array, BigNumber': function ArrayBigNumber(x, y) {
	      return _powArray(x, y.toNumber());
	    },
	    'Matrix, number': _powMatrix,
	    'Matrix, BigNumber': function MatrixBigNumber(x, y) {
	      return _powMatrix(x, y.toNumber());
	    },
	    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {
	      return x.pow(y);
	    }
	  });
	  /**
	   * Calculates the power of x to y, x^y, for two numbers.
	   * @param {number} x
	   * @param {number} y
	   * @return {number | Complex} res
	   * @private
	   */

	  function _pow(x, y) {
	    // Alternatively could define a 'realmode' config option or something, but
	    // 'predictable' will work for now
	    if (config.predictable && !isInteger$4(y) && x < 0) {
	      // Check to see if y can be represented as a fraction
	      try {
	        var yFrac = fraction(y);
	        var yNum = number(yFrac);

	        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
	          if (yFrac.d % 2 === 1) {
	            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
	          }
	        }
	      } catch (ex) {} // fraction() throws an error if y is Infinity, etc.
	      // Unable to express y as a fraction, so continue on

	    } // x^Infinity === 0 if -1 < x < 1
	    // A real number 0 is returned instead of complex(0)


	    if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {
	      return 0;
	    } // **for predictable mode** x^Infinity === NaN if x < -1
	    // N.B. this behavour is different from `Math.pow` which gives
	    // (-2)^Infinity === Infinity


	    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {
	      return NaN;
	    }

	    if (isInteger$4(y) || x >= 0 || config.predictable) {
	      return Math.pow(x, y);
	    } else {
	      return new type.Complex(x, 0).pow(y, 0);
	    }
	  }
	  /**
	   * Calculate the power of a 2d array
	   * @param {Array} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Array}
	   * @private
	   */


	  function _powArray(x, y) {
	    if (!isInteger$4(y) || y < 0) {
	      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
	    } // verify that A is a 2 dimensional square matrix


	    var s = size(x);

	    if (s.length !== 2) {
	      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
	    }

	    if (s[0] !== s[1]) {
	      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
	    }

	    var res = identity$1(s[0]).valueOf();
	    var px = x;

	    while (y >= 1) {
	      if ((y & 1) === 1) {
	        res = multiply$1(px, res);
	      }

	      y >>= 1;
	      px = multiply$1(px, px);
	    }

	    return res;
	  }
	  /**
	   * Calculate the power of a 2d matrix
	   * @param {Matrix} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Matrix}
	   * @private
	   */


	  function _powMatrix(x, y) {
	    return matrix$1(_powArray(x.valueOf(), y));
	  }

	  pow.toTex = {
	    2: "\\left(${args[0]}\\right)".concat(latex$1.operators['pow'], "{${args[1]}}")
	  };
	  return pow;
	}

	var name$H = 'pow';
	var factory_1$M = factory$M;

	var pow$1 = {
		name: name$H,
		factory: factory_1$M
	};

	function factory$N(type, config, load, typed) {
	  /**
	   * Calculate the absolute value of a number. For matrices, the function is
	   * evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.abs(x)
	   *
	   * Examples:
	   *
	   *    math.abs(3.5)                // returns number 3.5
	   *    math.abs(-4.2)               // returns number 4.2
	   *
	   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]
	   *
	   * See also:
	   *
	   *    sign
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            A number or matrix for which to get the absolute value
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Absolute value of `x`
	   */
	  var abs = typed('abs', {
	    'number': Math.abs,
	    'Complex': function Complex(x) {
	      return x.abs();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.abs();
	    },
	    'Fraction': function Fraction(x) {
	      return x.abs();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since abs(0) = 0
	      return deepMap(x, abs);
	    },
	    'Unit': function Unit(x) {
	      return x.abs();
	    }
	  });
	  abs.toTex = {
	    1: "\\left|${args[0]}\\right|"
	  };
	  return abs;
	}

	var name$I = 'abs';
	var factory_1$N = factory$N;

	var abs$1 = {
		name: name$I,
		factory: factory_1$N
	};

	function factory$O(type, config, load, typed) {
	  /**
	   * Round a value towards zero.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.fix(x)
	   *
	   * Examples:
	   *
	   *    math.fix(3.2)                // returns number 3
	   *    math.fix(3.8)                // returns number 3
	   *    math.fix(-4.2)               // returns number -4
	   *    math.fix(-4.7)               // returns number -4
	   *
	   *    const c = math.complex(3.2, -2.7)
	   *    math.fix(c)                  // returns Complex 3 - 2i
	   *
	   *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]
	   *
	   * See also:
	   *
	   *    ceil, floor, round
	   *
	   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
	   */
	  var fix = typed('fix', {
	    'number': function number(x) {
	      return x > 0 ? Math.floor(x) : Math.ceil(x);
	    },
	    'Complex': function Complex(x) {
	      return new type.Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.isNegative() ? x.ceil() : x.floor();
	    },
	    'Fraction': function Fraction(x) {
	      return x.s < 0 ? x.ceil() : x.floor();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since fix(0) = 0
	      return deepMap(x, fix);
	    }
	  });
	  fix.toTex = {
	    1: "\\mathrm{${name}}\\left(${args[0]}\\right)"
	  };
	  return fix;
	}

	var name$J = 'fix';
	var factory_1$O = factory$O;

	var fix = {
		name: name$J,
		factory: factory_1$O
	};

	var isInteger$5 = number.isInteger;

	var resize = array.resize;

	function factory$P(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Create a matrix filled with zeros. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.zeros(m)
	   *    math.zeros(m, format)
	   *    math.zeros(m, n)
	   *    math.zeros(m, n, format)
	   *    math.zeros([m, n])
	   *    math.zeros([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.zeros(3)                  // returns [0, 0, 0]
	   *    math.zeros(3, 2)               // returns [[0, 0], [0, 0], [0, 0]]
	   *    math.zeros(3, 'dense')         // returns [0, 0, 0]
	   *
	   *    const A = [[1, 2, 3], [4, 5, 6]]
	   *    math.zeros(math.size(A))       // returns [[0, 0, 0], [0, 0, 0]]
	   *
	   * See also:
	   *
	   *    ones, identity, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix}           A matrix filled with zeros
	   */

	  var zeros = typed('zeros', {
	    '': function _() {
	      return config.matrix === 'Array' ? _zeros([]) : _zeros([], 'default');
	    },
	    // math.zeros(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function numberBigNumberString(size) {
	      var last = size[size.length - 1];

	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _zeros(size, format);
	      } else if (config.matrix === 'Array') {
	        return _zeros(size);
	      } else {
	        return _zeros(size, 'default');
	      }
	    },
	    'Array': _zeros,
	    'Matrix': function Matrix(size) {
	      var format = size.storage();
	      return _zeros(size.valueOf(), format);
	    },
	    'Array | Matrix, string': function ArrayMatrixString(size, format) {
	      return _zeros(size.valueOf(), format);
	    }
	  });
	  zeros.toTex = undefined; // use default template

	  return zeros;
	  /**
	   * Create an Array or Matrix with zeros
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */

	  function _zeros(size, format) {
	    var hasBigNumbers = _normalize(size);

	    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;

	    _validate(size);

	    if (format) {
	      // return a matrix
	      var m = matrix$1(format);

	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }

	      return m;
	    } else {
	      // return an Array
	      var arr = [];

	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }

	      return arr;
	    }
	  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (type.isBigNumber(value)) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  } // validate arguments


	  function _validate(size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger$5(value) || value < 0) {
	        throw new Error('Parameters in function zeros must be positive integers');
	      }
	    });
	  }
	} // TODO: zeros contains almost the same code as ones. Reuse this?


	var name$K = 'zeros';
	var factory_1$P = factory$P;

	var zeros = {
		name: name$K,
		factory: factory_1$P
	};

	var isInteger$6 = number.isInteger;

	var toFixed = number.toFixed;



	var NO_INT = 'Number of decimals in function round must be an integer';

	function factory$Q(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var equalScalar$1 = load(equalScalar);
	  var zeros$1 = load(zeros);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Round a value towards the nearest integer.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.round(x)
	   *    math.round(x, n)
	   *
	   * Examples:
	   *
	   *    math.round(3.2)              // returns number 3
	   *    math.round(3.8)              // returns number 4
	   *    math.round(-4.2)             // returns number -4
	   *    math.round(-4.7)             // returns number -5
	   *    math.round(math.pi, 3)       // returns number 3.142
	   *    math.round(123.45678, 2)     // returns number 123.46
	   *
	   *    const c = math.complex(3.2, -2.7)
	   *    math.round(c)                // returns Complex 3 - 3i
	   *
	   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, floor
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */

	  var round = typed('round', {
	    'number': Math.round,
	    'number, number': function numberNumber(x, n) {
	      if (!isInteger$6(n)) {
	        throw new TypeError(NO_INT);
	      }

	      if (n < 0 || n > 15) {
	        throw new Error('Number of decimals in function round must be in te range of 0-15');
	      }

	      return _round(x, n);
	    },
	    'Complex': function Complex(x) {
	      return x.round();
	    },
	    'Complex, number': function ComplexNumber(x, n) {
	      if (n % 1) {
	        throw new TypeError(NO_INT);
	      }

	      return x.round(n);
	    },
	    'Complex, BigNumber': function ComplexBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      var _n = n.toNumber();

	      return x.round(_n);
	    },
	    'number, BigNumber': function numberBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.toDecimalPlaces(0);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {
	      if (!n.isInteger()) {
	        throw new TypeError(NO_INT);
	      }

	      return x.toDecimalPlaces(n.toNumber());
	    },
	    'Fraction': function Fraction(x) {
	      return x.round();
	    },
	    'Fraction, number': function FractionNumber(x, n) {
	      if (n % 1) {
	        throw new TypeError(NO_INT);
	      }

	      return x.round(n);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since round(0) = 0
	      return deepMap(x, round);
	    },
	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm11$1(x, y, round, false);
	    },
	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$1(x, y, round, false);
	    },
	    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {
	      // check scalar is zero
	      if (equalScalar$1(x, 0)) {
	        // do not execute algorithm, result will be a zero matrix
	        return zeros$1(y.size(), y.storage());
	      }

	      return algorithm12$1(y, x, round, true);
	    },
	    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {
	      // check scalar is zero
	      if (equalScalar$1(x, 0)) {
	        // do not execute algorithm, result will be a zero matrix
	        return zeros$1(y.size(), y.storage());
	      }

	      return algorithm14$1(y, x, round, true);
	    },
	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, round, false).valueOf();
	    },
	    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, round, true).valueOf();
	    }
	  });
	  round.toTex = {
	    1: "\\left\\lfloor${args[0]}\\right\\rceil",
	    2: undefined // use default template

	  };
	  return round;
	}
	/**
	 * round a number to the given number of decimals, or to zero if decimals is
	 * not provided
	 * @param {number} value
	 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
	 * @return {number} roundedValue
	 * @private
	 */


	function _round(value, decimals) {
	  return parseFloat(toFixed(value, decimals));
	}

	var name$L = 'round';
	var factory_1$Q = factory$Q;

	var round$1 = {
		name: name$L,
		factory: factory_1$Q
	};

	function factory$R(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var equalScalar$1 = load(equalScalar);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);

	  var latex$1 = latex;
	  /**
	   * Test whether two values are equal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is only
	   * equal to `null` and nothing else, and `undefined` is only equal to
	   * `undefined` and nothing else. Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.equal(x, y)
	   *
	   * Examples:
	   *
	   *    math.equal(2 + 2, 3)         // returns false
	   *    math.equal(2 + 2, 4)         // returns true
	   *
	   *    const a = math.unit('50 cm')
	   *    const b = math.unit('5 m')
	   *    math.equal(a, b)             // returns true
	   *
	   *    const c = [2, 5, 1]
	   *    const d = [2, 7, 1]
	   *
	   *    math.equal(c, d)             // returns [true, false, true]
	   *    math.deepEqual(c, d)         // returns false
	   *
	   *    math.equal("1000", "1e3")    // returns true
	   *    math.equal(0, null)          // returns false
	   *
	   * See also:
	   *
	   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText
	   *
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
	   */


	  var equal = typed('equal', {
	    'any, any': function anyAny(x, y) {
	      // strict equality for null and undefined?
	      if (x === null) {
	        return y === null;
	      }

	      if (y === null) {
	        return x === null;
	      }

	      if (x === undefined) {
	        return y === undefined;
	      }

	      if (y === undefined) {
	        return x === undefined;
	      }

	      return equalScalar$1(x, y);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, equalScalar$1);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, equalScalar$1, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, equalScalar$1, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, equalScalar$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return equal(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return equal(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return equal(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, equalScalar$1, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, equalScalar$1, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, equalScalar$1, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, equalScalar$1, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, equalScalar$1, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, equalScalar$1, true).valueOf();
	    }
	  });
	  equal.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['equal'], "${args[1]}\\right)")
	  };
	  return equal;
	}

	var name$M = 'equal';
	var factory_1$R = factory$R;

	var equal = {
		name: name$M,
		factory: factory_1$R
	};

	function factory$S(type, config, load, typed) {
	  /**
	   * Test whether a value is an numeric value.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNumeric(x)
	   *
	   * Examples:
	   *
	   *    math.isNumeric(2)                     // returns true
	   *    math.isNumeric(0)                     // returns true
	   *    math.isNumeric(math.bignumber(500))   // returns true
	   *    math.isNumeric(math.fraction(4))      // returns true
	   *    math.isNumeric(math.complex('2-4i')   // returns false
	   *    math.isNumeric('3')                   // returns false
	   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    isZero, isPositive, isNegative, isInteger
	   *
	   * @param {*} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
	   *                    `Fraction`, or `boolean`. Returns false for other types.
	   *                    Throws an error in case of unknown types.
	   */
	  var isNumeric = typed('isNumeric', {
	    'number | BigNumber | Fraction | boolean': function numberBigNumberFractionBoolean() {
	      return true;
	    },
	    'Complex | Unit | string | null | undefined | Node': function ComplexUnitStringNullUndefinedNode() {
	      return false;
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isNumeric);
	    }
	  });
	  return isNumeric;
	}

	var name$N = 'isNumeric';
	var factory_1$S = factory$S;

	var isNumeric = {
		name: name$N,
		factory: factory_1$S
	};

	function factory$T(type, config, load, typed) {
	  /**
	   * Format a value of any type into a string.
	   *
	   * Syntax:
	   *
	   *    math.format(value)
	   *    math.format(value, options)
	   *    math.format(value, precision)
	   *    math.format(value, callback)
	   *
	   * Where:
	   *
	   *  - `value: *`
	   *    The value to be formatted
	   *  - `options: Object`
	   *    An object with formatting options. Available options:
	   *    - `notation: string`
	   *      Number notation. Choose from:
	   *      - 'fixed'
	   *        Always use regular number notation.
	   *        For example '123.40' and '14000000'
	   *      - 'exponential'
	   *        Always use exponential notation.
	   *        For example '1.234e+2' and '1.4e+7'
	   *      - 'engineering'
	   *        Always use engineering notation.
	   *        For example '123.4e+0' and '14.0e+6'
	   *      - 'auto' (default)
	   *        Regular number notation for numbers having an absolute value between
	   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
	   *        Lower bound is included, upper bound is excluded.
	   *        For example '123.4' and '1.4e7'.
	   *    - `precision: number`
	   *      A number between 0 and 16 to round the digits of the number. In case
	   *      of notations 'exponential', 'engineering', and 'auto', `precision`
	   *      defines the total number of significant digits returned.
	   *      In case of notation 'fixed', `precision` defines the number of
	   *      significant digits after the decimal point.
	   *      `precision` is undefined by default.
	   *    - `lowerExp: number`
	   *      Exponent determining the lower boundary for formatting a value with
	   *      an exponent when `notation='auto`. Default value is `-3`.
	   *    - `upperExp: number`
	   *      Exponent determining the upper boundary for formatting a value with
	   *      an exponent when `notation='auto`. Default value is `5`.
	   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
	   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
	   *      configured, and will output `0.(3)` when 'decimal' is configured.
	   * - `callback: function`
	   *   A custom formatting function, invoked for all numeric elements in `value`,
	   *   for example all elements of a matrix, or the real and imaginary
	   *   parts of a complex number. This callback can be used to override the
	   *   built-in numeric notation with any type of formatting. Function `callback`
	   *   is called with `value` as parameter and must return a string.
	   *
	   * When `value` is an Object:
	   *
	   * - When the object contains a property `format` being a function, this function
	   *   is invoked as `value.format(options)` and the result is returned.
	   * - When the object has its own `toString` method, this method is invoked
	   *   and the result is returned.
	   * - In other cases the function will loop over all object properties and
	   *   return JSON object notation like '{"a": 2, "b": 3}'.
	   *
	   * When value is a function:
	   *
	   * - When the function has a property `syntax`, it returns this
	   *   syntax description.
	   * - In other cases, a string `'function'` is returned.
	   *
	   * Examples:
	   *
	   *    math.format(6.4)                                        // returns '6.4'
	   *    math.format(1240000)                                    // returns '1.24e6'
	   *    math.format(1/3)                                        // returns '0.3333333333333333'
	   *    math.format(1/3, 3)                                     // returns '0.333'
	   *    math.format(21385, 2)                                   // returns '21000'
	   *    math.format(12e8, {notation: 'fixed'})                  // returns '1200000000'
	   *    math.format(2.3,  {notation: 'fixed', precision: 4})    // returns '2.3000'
	   *    math.format(52.8, {notation: 'exponential'})            // returns '5.28e+1'
	   *    math.format(12400,{notation: 'engineering'})            // returns '12.400e+3'
	   *    math.format(2000, {lowerExp: -2, upperExp: 2})          // returns '2e+3'
	   *
	   *    function formatCurrency(value) {
	   *      // return currency notation with two digits:
	   *      return '$' + value.toFixed(2)
	   *
	   *      // you could also use math.format inside the callback:
	   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2})
	   *    }
	   *    math.format([2.1, 3, 0.016], formatCurrency}            // returns '[$2.10, $3.00, $0.02]'
	   *
	   * See also:
	   *
	   *    print
	   *
	   * @param {*} value                               Value to be stringified
	   * @param {Object | Function | number} [options]  Formatting options
	   * @return {string} The formatted value
	   */
	  var format = typed('format', {
	    'any': string.format,
	    'any, Object | function | number': string.format
	  });
	  format.toTex = undefined; // use default template

	  return format;
	}

	var name$O = 'format';
	var factory_1$T = factory$T;

	var format$2 = {
		name: name$O,
		factory: factory_1$T
	};

	function _typeof$5(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }

	var endsWith = string.endsWith;

	var clone$3 = object.clone;



	function factory$U(type, config, load, typed, math) {
	  var add = load(addScalar);
	  var subtract$1 = load(subtract);
	  var multiply = load(multiplyScalar);
	  var divide = load(divideScalar);
	  var pow = load(pow$1);
	  var abs = load(abs$1);
	  var fix$1 = load(fix);
	  var round = load(round$1);
	  var equal$1 = load(equal);
	  var isNumeric$1 = load(isNumeric);
	  var format = load(format$2);
	  var getTypeOf = load(_typeof$4);
	  var toNumber = load(number$3);
	  var Complex = load(Complex_1);
	  /**
	   * A unit can be constructed in the following ways:
	   *
	   *     const a = new Unit(value, name)
	   *     const b = new Unit(null, name)
	   *     const c = Unit.parse(str)
	   *
	   * Example usage:
	   *
	   *     const a = new Unit(5, 'cm')               // 50 mm
	   *     const b = Unit.parse('23 kg')             // 23 kg
	   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m
	   *     const d = new Unit(9.81, "m/s^2")         // 9.81 m/s^2
	   *
	   * @class Unit
	   * @constructor Unit
	   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
	   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
	   */

	  function Unit(value, name) {
	    if (!(this instanceof Unit)) {
	      throw new Error('Constructor must be called with the new operator');
	    }

	    if (!(value === null || value === undefined || isNumeric$1(value) || type.isComplex(value))) {
	      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
	    }

	    if (name !== undefined && (typeof name !== 'string' || name === '')) {
	      throw new TypeError('Second parameter in Unit constructor must be a string');
	    }

	    if (name !== undefined) {
	      var u = Unit.parse(name);
	      this.units = u.units;
	      this.dimensions = u.dimensions;
	    } else {
	      this.units = [{
	        unit: UNIT_NONE,
	        prefix: PREFIXES.NONE,
	        // link to a list with supported prefixes
	        power: 0
	      }];
	      this.dimensions = [];

	      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	        this.dimensions[i] = 0;
	      }
	    }

	    this.value = value !== undefined && value !== null ? this._normalize(value) : null;
	    this.fixPrefix = false; // if true, function format will not search for the
	    // best prefix but leave it as initially provided.
	    // fixPrefix is set true by the method Unit.to
	    // The justification behind this is that if the constructor is explicitly called,
	    // the caller wishes the units to be returned exactly as he supplied.

	    this.skipAutomaticSimplification = true;
	  }
	  /**
	   * Attach type information
	   */


	  Unit.prototype.type = 'Unit';
	  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser

	  var text, index, c;

	  function skipWhitespace() {
	    while (c === ' ' || c === '\t') {
	      next();
	    }
	  }

	  function isDigitDot(c) {
	    return c >= '0' && c <= '9' || c === '.';
	  }

	  function isDigit(c) {
	    return c >= '0' && c <= '9';
	  }

	  function next() {
	    index++;
	    c = text.charAt(index);
	  }

	  function revert(oldIndex) {
	    index = oldIndex;
	    c = text.charAt(index);
	  }

	  function parseNumber() {
	    var number = '';
	    var oldIndex;
	    oldIndex = index;

	    if (c === '+') {
	      next();
	    } else if (c === '-') {
	      number += c;
	      next();
	    }

	    if (!isDigitDot(c)) {
	      // a + or - must be followed by a digit
	      revert(oldIndex);
	      return null;
	    } // get number, can have a single dot


	    if (c === '.') {
	      number += c;
	      next();

	      if (!isDigit(c)) {
	        // this is no legal number, it is just a dot
	        revert(oldIndex);
	        return null;
	      }
	    } else {
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }

	      if (c === '.') {
	        number += c;
	        next();
	      }
	    }

	    while (isDigit(c)) {
	      number += c;
	      next();
	    } // check for exponential notation like "2.3e-4" or "1.23e50"


	    if (c === 'E' || c === 'e') {
	      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
	      var tentativeNumber = '';
	      var tentativeIndex = index;
	      tentativeNumber += c;
	      next();

	      if (c === '+' || c === '-') {
	        tentativeNumber += c;
	        next();
	      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)


	      if (!isDigit(c)) {
	        // The e or E must belong to something else, so return the number without the e or E.
	        revert(tentativeIndex);
	        return number;
	      } // We can now safely say that this is scientific notation.


	      number = number + tentativeNumber;

	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	    }

	    return number;
	  }

	  function parseUnit() {
	    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]

	    var code = text.charCodeAt(index);

	    while (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122) {
	      unitName += c;
	      next();
	      code = text.charCodeAt(index);
	    } // Must begin with [a-zA-Z]


	    code = unitName.charCodeAt(0);

	    if (code >= 65 && code <= 90 || code >= 97 && code <= 122) {
	      return unitName || null;
	    } else {
	      return null;
	    }
	  }

	  function parseCharacter(toFind) {
	    if (c === toFind) {
	      next();
	      return toFind;
	    } else {
	      return null;
	    }
	  }
	  /**
	   * Parse a string into a unit. The value of the unit is parsed as number,
	   * BigNumber, or Fraction depending on the math.js config setting `number`.
	   *
	   * Throws an exception if the provided string does not contain a valid unit or
	   * cannot be parsed.
	   * @memberof Unit
	   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
	   * @return {Unit} unit
	   */


	  Unit.parse = function (str, options) {
	    options = options || {};
	    text = str;
	    index = -1;
	    c = '';

	    if (typeof text !== 'string') {
	      throw new TypeError('Invalid argument in Unit.parse, string expected');
	    }

	    var unit = new Unit();
	    unit.units = [];
	    var powerMultiplierCurrent = 1;
	    var expectingUnit = false; // A unit should follow this pattern:
	    // [number] ...[ [*/] unit[^number] ]
	    // unit[^number] ... [ [*/] unit[^number] ]
	    // Rules:
	    // number is any floating point number.
	    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
	    // The string may optionally begin with a number.
	    // Each unit may optionally be followed by ^number.
	    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
	    //   2m^2kg/s^2
	    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
	    //   4erg

	    next();
	    skipWhitespace(); // Optional number at the start of the string

	    var valueStr = parseNumber();
	    var value = null;

	    if (valueStr) {
	      if (config.number === 'BigNumber') {
	        value = new type.BigNumber(valueStr);
	      } else if (config.number === 'Fraction') {
	        value = new type.Fraction(valueStr);
	      } else {
	        // number
	        value = parseFloat(valueStr);
	      }

	      skipWhitespace(); // Whitespace is not required here
	      // handle multiplication or division right after the value, like '1/s'

	      if (parseCharacter('*')) {
	        powerMultiplierCurrent = 1;
	        expectingUnit = true;
	      } else if (parseCharacter('/')) {
	        powerMultiplierCurrent = -1;
	        expectingUnit = true;
	      }
	    } // Stack to keep track of powerMultipliers applied to each parentheses group


	    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack

	    var powerMultiplierStackProduct = 1;

	    while (true) {
	      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
	      // A '(' will always appear directly before a unit.

	      while (c === '(') {
	        powerMultiplierStack.push(powerMultiplierCurrent);
	        powerMultiplierStackProduct *= powerMultiplierCurrent;
	        powerMultiplierCurrent = 1;
	        next();
	        skipWhitespace();
	      } // Is there something here?


	      var uStr = void 0;

	      if (c) {
	        var oldC = c;
	        uStr = parseUnit();

	        if (uStr === null) {
	          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
	        }
	      } else {
	        // End of input.
	        break;
	      } // Verify the unit exists and get the prefix (if any)


	      var res = _findUnit(uStr);

	      if (res === null) {
	        // Unit not found.
	        throw new SyntaxError('Unit "' + uStr + '" not found.');
	      }

	      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a "^ number"?

	      skipWhitespace();

	      if (parseCharacter('^')) {
	        skipWhitespace();
	        var p = parseNumber();

	        if (p === null) {
	          // No valid number found for the power!
	          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
	        }

	        power *= p;
	      } // Add the unit to the list


	      unit.units.push({
	        unit: res.unit,
	        prefix: res.prefix,
	        power: power
	      });

	      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
	      } // Check for and consume closing parentheses, popping from the stack.
	      // A ')' will always follow a unit.


	      skipWhitespace();

	      while (c === ')') {
	        if (powerMultiplierStack.length === 0) {
	          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
	        }

	        powerMultiplierStackProduct /= powerMultiplierStack.pop();
	        next();
	        skipWhitespace();
	      } // "*" and "/" should mean we are expecting something to come next.
	      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.


	      expectingUnit = false;

	      if (parseCharacter('*')) {
	        // explicit multiplication
	        powerMultiplierCurrent = 1;
	        expectingUnit = true;
	      } else if (parseCharacter('/')) {
	        // division
	        powerMultiplierCurrent = -1;
	        expectingUnit = true;
	      } else {
	        // implicit multiplication
	        powerMultiplierCurrent = 1;
	      } // Replace the unit into the auto unit system


	      if (res.unit.base) {
	        var baseDim = res.unit.base.key;
	        UNIT_SYSTEMS.auto[baseDim] = {
	          unit: res.unit,
	          prefix: res.prefix
	        };
	      }
	    } // Has the string been entirely consumed?


	    skipWhitespace();

	    if (c) {
	      throw new SyntaxError('Could not parse: "' + str + '"');
	    } // Is there a trailing slash?


	    if (expectingUnit) {
	      throw new SyntaxError('Trailing characters: "' + str + '"');
	    } // Is the parentheses stack empty?


	    if (powerMultiplierStack.length !== 0) {
	      throw new SyntaxError('Unmatched "(" in "' + text + '"');
	    } // Are there any units at all?


	    if (unit.units.length === 0 && !options.allowNoUnits) {
	      throw new SyntaxError('"' + str + '" contains no units');
	    }

	    unit.value = value !== undefined ? unit._normalize(value) : null;
	    return unit;
	  };
	  /**
	   * create a copy of this unit
	   * @memberof Unit
	   * @return {Unit} Returns a cloned version of the unit
	   */


	  Unit.prototype.clone = function () {
	    var unit = new Unit();
	    unit.fixPrefix = this.fixPrefix;
	    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;
	    unit.value = clone$3(this.value);
	    unit.dimensions = this.dimensions.slice(0);
	    unit.units = [];

	    for (var i = 0; i < this.units.length; i++) {
	      unit.units[i] = {};

	      for (var p in this.units[i]) {
	        if (this.units[i].hasOwnProperty(p)) {
	          unit.units[i][p] = this.units[i][p];
	        }
	      }
	    }

	    return unit;
	  };
	  /**
	   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
	   * @memberof Unit
	   * @return {boolean} True if the unit is derived
	   */


	  Unit.prototype._isDerived = function () {
	    if (this.units.length === 0) {
	      return false;
	    }

	    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
	  };
	  /**
	   * Normalize a value, based on its currently set unit(s)
	   * @memberof Unit
	   * @param {number | BigNumber | Fraction | boolean} value
	   * @return {number | BigNumber | Fraction | boolean} normalized value
	   * @private
	   */


	  Unit.prototype._normalize = function (value) {
	    var unitValue, unitOffset, unitPower, unitPrefixValue;
	    var convert;

	    if (value === null || value === undefined || this.units.length === 0) {
	      return value;
	    } else if (this._isDerived()) {
	      // This is a derived unit, so do not apply offsets.
	      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
	      var res = value;
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      for (var i = 0; i < this.units.length; i++) {
	        unitValue = convert(this.units[i].unit.value);
	        unitPrefixValue = convert(this.units[i].prefix.value);
	        unitPower = convert(this.units[i].power);
	        res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
	      }

	      return res;
	    } else {
	      // This is a single unit of power 1, like kg or degC
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      unitValue = convert(this.units[0].unit.value);
	      unitOffset = convert(this.units[0].unit.offset);
	      unitPrefixValue = convert(this.units[0].prefix.value);
	      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
	    }
	  };
	  /**
	   * Denormalize a value, based on its currently set unit(s)
	   * @memberof Unit
	   * @param {number} value
	   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
	   * @return {number} denormalized value
	   * @private
	   */


	  Unit.prototype._denormalize = function (value, prefixValue) {
	    var unitValue, unitOffset, unitPower, unitPrefixValue;
	    var convert;

	    if (value === null || value === undefined || this.units.length === 0) {
	      return value;
	    } else if (this._isDerived()) {
	      // This is a derived unit, so do not apply offsets.
	      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
	      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
	      var res = value;
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      for (var i = 0; i < this.units.length; i++) {
	        unitValue = convert(this.units[i].unit.value);
	        unitPrefixValue = convert(this.units[i].prefix.value);
	        unitPower = convert(this.units[i].power);
	        res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
	      }

	      return res;
	    } else {
	      // This is a single unit of power 1, like kg or degC
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed

	      unitValue = convert(this.units[0].unit.value);
	      unitPrefixValue = convert(this.units[0].prefix.value);
	      unitOffset = convert(this.units[0].unit.offset);

	      if (prefixValue === undefined || prefixValue === null) {
	        return subtract$1(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
	      } else {
	        return subtract$1(divide(divide(value, unitValue), prefixValue), unitOffset);
	      }
	    }
	  };
	  /**
	   * Find a unit from a string
	   * @memberof Unit
	   * @param {string} str              A string like 'cm' or 'inch'
	   * @returns {Object | null} result  When found, an object with fields unit and
	   *                                  prefix is returned. Else, null is returned.
	   * @private
	   */


	  function _findUnit(str) {
	    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
	    if (UNITS.hasOwnProperty(str)) {
	      var unit = UNITS[str];
	      var prefix = unit.prefixes[''];
	      return {
	        unit: unit,
	        prefix: prefix
	      };
	    }

	    for (var name in UNITS) {
	      if (UNITS.hasOwnProperty(name)) {
	        if (endsWith(str, name)) {
	          var _unit = UNITS[name];
	          var prefixLen = str.length - name.length;
	          var prefixName = str.substring(0, prefixLen);

	          var _prefix = _unit.prefixes.hasOwnProperty(prefixName) ? _unit.prefixes[prefixName] : undefined;

	          if (_prefix !== undefined) {
	            // store unit, prefix, and value
	            return {
	              unit: _unit,
	              prefix: _prefix
	            };
	          }
	        }
	      }
	    }

	    return null;
	  }
	  /**
	   * Test if the given expression is a unit.
	   * The unit can have a prefix but cannot have a value.
	   * @memberof Unit
	   * @param {string} name   A string to be tested whether it is a value less unit.
	   *                        The unit can have prefix, like "cm"
	   * @return {boolean}      true if the given string is a unit
	   */


	  Unit.isValuelessUnit = function (name) {
	    return _findUnit(name) !== null;
	  };
	  /**
	   * check if this unit has given base unit
	   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
	   * @memberof Unit
	   * @param {BASE_UNITS | string | undefined} base
	   */


	  Unit.prototype.hasBase = function (base) {
	    if (typeof base === 'string') {
	      base = BASE_UNITS[base];
	    }

	    if (!base) {
	      return false;
	    } // All dimensions must be the same


	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
	        return false;
	      }
	    }

	    return true;
	  };
	  /**
	   * Check if this unit has a base or bases equal to another base or bases
	   * For derived units, the exponent on each base also must match
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {boolean} true if equal base
	   */


	  Unit.prototype.equalBase = function (other) {
	    // All dimensions must be the same
	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
	        return false;
	      }
	    }

	    return true;
	  };
	  /**
	   * Check if this unit equals another unit
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {boolean} true if both units are equal
	   */


	  Unit.prototype.equals = function (other) {
	    return this.equalBase(other) && equal$1(this.value, other.value);
	  };
	  /**
	   * Multiply this unit with another one
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {Unit} product of this unit and the other unit
	   */


	  Unit.prototype.multiply = function (other) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
	    } // Append other's units list onto res


	    for (var _i = 0; _i < other.units.length; _i++) {
	      // Make a deep copy
	      var inverted = {};

	      for (var key in other.units[_i]) {
	        inverted[key] = other.units[_i][key];
	      }

	      res.units.push(inverted);
	    } // If at least one operand has a value, then the result should also have a value


	    if (this.value !== null || other.value !== null) {
	      var valThis = this.value === null ? this._normalize(1) : this.value;
	      var valOther = other.value === null ? other._normalize(1) : other.value;
	      res.value = multiply(valThis, valOther);
	    } else {
	      res.value = null;
	    }

	    res.skipAutomaticSimplification = false;
	    return getNumericIfUnitless(res);
	  };
	  /**
	   * Divide this unit by another one
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {Unit} result of dividing this unit by the other unit
	   */


	  Unit.prototype.divide = function (other) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
	    } // Invert and append other's units list onto res


	    for (var _i2 = 0; _i2 < other.units.length; _i2++) {
	      // Make a deep copy
	      var inverted = {};

	      for (var key in other.units[_i2]) {
	        inverted[key] = other.units[_i2][key];
	      }

	      inverted.power = -inverted.power;
	      res.units.push(inverted);
	    } // If at least one operand has a value, the result should have a value


	    if (this.value !== null || other.value !== null) {
	      var valThis = this.value === null ? this._normalize(1) : this.value;
	      var valOther = other.value === null ? other._normalize(1) : other.value;
	      res.value = divide(valThis, valOther);
	    } else {
	      res.value = null;
	    }

	    res.skipAutomaticSimplification = false;
	    return getNumericIfUnitless(res);
	  };
	  /**
	   * Calculate the power of a unit
	   * @memberof Unit
	   * @param {number | Fraction | BigNumber} p
	   * @returns {Unit}      The result: this^p
	   */


	  Unit.prototype.pow = function (p) {
	    var res = this.clone();

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) * p;
	    } // Adjust the power of each unit in the list


	    for (var _i3 = 0; _i3 < res.units.length; _i3++) {
	      res.units[_i3].power *= p;
	    }

	    if (res.value !== null) {
	      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number
	      // if (!isNumeric(res.value)) {
	      //  res.value = NaN
	      // }
	      // Update: Complex supported now
	    } else {
	      res.value = null;
	    }

	    res.skipAutomaticSimplification = false;
	    return getNumericIfUnitless(res);
	  };
	  /**
	   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
	   * @param {Unit} unit
	   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
	   */


	  function getNumericIfUnitless(unit) {
	    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
	      return unit.value;
	    } else {
	      return unit;
	    }
	  }
	  /**
	   * Calculate the absolute value of a unit
	   * @memberof Unit
	   * @param {number | Fraction | BigNumber} x
	   * @returns {Unit}      The result: |x|, absolute value of x
	   */


	  Unit.prototype.abs = function () {
	    // This gives correct, but unexpected, results for units with an offset.
	    // For example, abs(-283.15 degC) = -263.15 degC !!!
	    var ret = this.clone();
	    ret.value = ret.value !== null ? abs(ret.value) : null;

	    for (var i in ret.units) {
	      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
	        ret.units[i].unit = UNITS['W'];
	      }
	    }

	    return ret;
	  };
	  /**
	   * Convert the unit to a specific unit name.
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
	   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
	   */


	  Unit.prototype.to = function (valuelessUnit) {
	    var other;
	    var value = this.value === null ? this._normalize(1) : this.value;

	    if (typeof valuelessUnit === 'string') {
	      // other = new Unit(null, valuelessUnit)
	      other = Unit.parse(valuelessUnit);

	      if (!this.equalBase(other)) {
	        throw new Error("Units do not match ('".concat(other.toString(), "' != '").concat(this.toString(), "')"));
	      }

	      if (other.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }

	      other.value = clone$3(value);
	      other.fixPrefix = true;
	      other.skipAutomaticSimplification = true;
	      return other;
	    } else if (type.isUnit(valuelessUnit)) {
	      if (!this.equalBase(valuelessUnit)) {
	        throw new Error("Units do not match ('".concat(valuelessUnit.toString(), "' != '").concat(this.toString(), "')"));
	      }

	      if (valuelessUnit.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }

	      other = valuelessUnit.clone();
	      other.value = clone$3(value);
	      other.fixPrefix = true;
	      other.skipAutomaticSimplification = true;
	      return other;
	    } else {
	      throw new Error('String or Unit expected as parameter');
	    }
	  };
	  /**
	   * Return the value of the unit when represented with given valueless unit
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number} Returns the unit value as number.
	   */
	  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric


	  Unit.prototype.toNumber = function (valuelessUnit) {
	    return toNumber(this.toNumeric(valuelessUnit));
	  };
	  /**
	   * Return the value of the unit in the original numeric type
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number | BigNumber | Fraction} Returns the unit value
	   */


	  Unit.prototype.toNumeric = function (valuelessUnit) {
	    var other;

	    if (valuelessUnit) {
	      // Allow getting the numeric value without converting to a different unit
	      other = this.to(valuelessUnit);
	    } else {
	      other = this.clone();
	    }

	    if (other._isDerived()) {
	      return other._denormalize(other.value);
	    } else {
	      return other._denormalize(other.value, other.units[0].prefix.value);
	    }
	  };
	  /**
	   * Get a string representation of the unit.
	   * @memberof Unit
	   * @return {string}
	   */


	  Unit.prototype.toString = function () {
	    return this.format();
	  };
	  /**
	   * Get a JSON representation of the unit
	   * @memberof Unit
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   */


	  Unit.prototype.toJSON = function () {
	    return {
	      mathjs: 'Unit',
	      value: this._denormalize(this.value),
	      unit: this.formatUnits(),
	      fixPrefix: this.fixPrefix
	    };
	  };
	  /**
	   * Instantiate a Unit from a JSON object
	   * @memberof Unit
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   * @return {Unit}
	   */


	  Unit.fromJSON = function (json) {
	    var unit = new Unit(json.value, json.unit);
	    unit.fixPrefix = json.fixPrefix || false;
	    return unit;
	  };
	  /**
	   * Returns the string representation of the unit.
	   * @memberof Unit
	   * @return {string}
	   */


	  Unit.prototype.valueOf = Unit.prototype.toString;
	  /**
	   * Simplify this Unit's unit list and return a new Unit with the simplified list.
	   * The returned Unit will contain a list of the "best" units for formatting.
	   */

	  Unit.prototype.simplify = function () {
	    var ret = this.clone();
	    var proposedUnitList = []; // Search for a matching base

	    var matchingBase;

	    for (var key in currentUnitSystem) {
	      if (ret.hasBase(BASE_UNITS[key])) {
	        matchingBase = key;
	        break;
	      }
	    }

	    if (matchingBase === 'NONE') {
	      ret.units = [];
	    } else {
	      var matchingUnit;

	      if (matchingBase) {
	        // Does the unit system have a matching unit?
	        if (currentUnitSystem.hasOwnProperty(matchingBase)) {
	          matchingUnit = currentUnitSystem[matchingBase];
	        }
	      }

	      if (matchingUnit) {
	        ret.units = [{
	          unit: matchingUnit.unit,
	          prefix: matchingUnit.prefix,
	          power: 1.0
	        }];
	      } else {
	        // Multiple units or units with powers are formatted like this:
	        // 5 (kg m^2) / (s^3 mol)
	        // Build an representation from the base units of the current unit system
	        var missingBaseDim = false;

	        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	          var baseDim = BASE_DIMENSIONS[i];

	          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
	            if (currentUnitSystem.hasOwnProperty(baseDim)) {
	              proposedUnitList.push({
	                unit: currentUnitSystem[baseDim].unit,
	                prefix: currentUnitSystem[baseDim].prefix,
	                power: ret.dimensions[i] || 0
	              });
	            } else {
	              missingBaseDim = true;
	            }
	          }
	        } // Is the proposed unit list "simpler" than the existing one?


	        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {
	          // Replace this unit list with the proposed list
	          ret.units = proposedUnitList;
	        }
	      }
	    }

	    return ret;
	  };
	  /**
	   * Returns a new Unit in the SI system with the same value as this one
	   */


	  Unit.prototype.toSI = function () {
	    var ret = this.clone();
	    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:
	    // 5 (kg m^2) / (s^3 mol)
	    // Build an representation from the base units of the SI unit system

	    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
	      var baseDim = BASE_DIMENSIONS[i];

	      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {
	        if (UNIT_SYSTEMS['si'].hasOwnProperty(baseDim)) {
	          proposedUnitList.push({
	            unit: UNIT_SYSTEMS['si'][baseDim].unit,
	            prefix: UNIT_SYSTEMS['si'][baseDim].prefix,
	            power: ret.dimensions[i] || 0
	          });
	        } else {
	          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');
	        }
	      }
	    } // Replace this unit list with the proposed list


	    ret.units = proposedUnitList;
	    ret.fixPrefix = true;
	    ret.skipAutomaticSimplification = true;
	    return ret;
	  };
	  /**
	   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.
	   * @memberof Unit
	   * @return {string}
	   */


	  Unit.prototype.formatUnits = function () {
	    var strNum = '';
	    var strDen = '';
	    var nNum = 0;
	    var nDen = 0;

	    for (var i = 0; i < this.units.length; i++) {
	      if (this.units[i].power > 0) {
	        nNum++;
	        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;

	        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {
	          strNum += '^' + this.units[i].power;
	        }
	      } else if (this.units[i].power < 0) {
	        nDen++;
	      }
	    }

	    if (nDen > 0) {
	      for (var _i4 = 0; _i4 < this.units.length; _i4++) {
	        if (this.units[_i4].power < 0) {
	          if (nNum > 0) {
	            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;

	            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {
	              strDen += '^' + -this.units[_i4].power;
	            }
	          } else {
	            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;
	            strDen += '^' + this.units[_i4].power;
	          }
	        }
	      }
	    } // Remove leading " "


	    strNum = strNum.substr(1);
	    strDen = strDen.substr(1); // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting

	    if (nNum > 1 && nDen > 0) {
	      strNum = '(' + strNum + ')';
	    }

	    if (nDen > 1 && nNum > 0) {
	      strDen = '(' + strDen + ')';
	    }

	    var str = strNum;

	    if (nNum > 0 && nDen > 0) {
	      str += ' / ';
	    }

	    str += strDen;
	    return str;
	  };
	  /**
	   * Get a string representation of the Unit, with optional formatting options.
	   * @memberof Unit
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string}
	   */


	  Unit.prototype.format = function (options) {
	    // Simplfy the unit list, unless it is valueless or was created directly in the
	    // constructor or as the result of to or toSI
	    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.

	    var isImaginary = false;

	    if (typeof simp.value !== 'undefined' && simp.value !== null && type.isComplex(simp.value)) {
	      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
	      isImaginary = Math.abs(simp.value.re) < 1e-14;
	    }

	    for (var i in simp.units) {
	      if (simp.units[i].unit) {
	        if (simp.units[i].unit.name === 'VA' && isImaginary) {
	          simp.units[i].unit = UNITS['VAR'];
	        } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {
	          simp.units[i].unit = UNITS['VA'];
	        }
	      }
	    } // Now apply the best prefix
	    // Units must have only one unit and not have the fixPrefix flag set


	    if (simp.units.length === 1 && !simp.fixPrefix) {
	      // Units must have integer powers, otherwise the prefix will change the
	      // outputted value by not-an-integer-power-of-ten
	      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {
	        // Apply the best prefix
	        simp.units[0].prefix = simp._bestPrefix();
	      }
	    }

	    var value = simp._denormalize(simp.value);

	    var str = simp.value !== null ? format(value, options || {}) : '';
	    var unitStr = simp.formatUnits();

	    if (simp.value && type.isComplex(simp.value)) {
	      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing
	    }

	    if (unitStr.length > 0 && str.length > 0) {
	      str += ' ';
	    }

	    str += unitStr;
	    return str;
	  };
	  /**
	   * Calculate the best prefix using current value.
	   * @memberof Unit
	   * @returns {Object} prefix
	   * @private
	   */


	  Unit.prototype._bestPrefix = function () {
	    if (this.units.length !== 1) {
	      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
	    }

	    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
	      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');
	    } // find the best prefix value (resulting in the value of which
	    // the absolute value of the log10 is closest to zero,
	    // though with a little offset of 1.2 for nicer values: you get a
	    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
	    // Note: the units value can be any numeric type, but to find the best
	    // prefix it's enough to work with limited precision of a regular number
	    // Update: using mathjs abs since we also allow complex numbers


	    var absValue = this.value !== null ? abs(this.value) : 0;
	    var absUnitValue = abs(this.units[0].unit.value);
	    var bestPrefix = this.units[0].prefix;

	    if (absValue === 0) {
	      return bestPrefix;
	    }

	    var power = this.units[0].power;
	    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
	    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix

	    bestDiff = Math.abs(bestDiff);
	    var prefixes = this.units[0].unit.prefixes;

	    for (var p in prefixes) {
	      if (prefixes.hasOwnProperty(p)) {
	        var prefix = prefixes[p];

	        if (prefix.scientific) {
	          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);

	          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {
	            // choose the prefix with the smallest diff, or if equal, choose the one
	            // with the shortest name (can happen with SHORTLONG for example)
	            bestPrefix = prefix;
	            bestDiff = diff;
	          }
	        }
	      }
	    }

	    return bestPrefix;
	  };
	  /**
	   * Returns an array of units whose sum is equal to this unit
	   * @memberof Unit
	   * @param {Array} [parts] An array of strings or valueless units.
	   *
	   *   Example:
	   *
	   *   const u = new Unit(1, 'm')
	   *   u.splitUnit(['feet', 'inch'])
	   *     [ 3 feet, 3.3700787401575 inch ]
	   *
	   * @return {Array} An array of units.
	   */


	  Unit.prototype.splitUnit = function (parts) {
	    var x = this.clone();
	    var ret = [];

	    for (var i = 0; i < parts.length; i++) {
	      // Convert x to the requested unit
	      x = x.to(parts[i]);
	      if (i === parts.length - 1) break; // Get the numeric value of this unit

	      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,
	      // since fix can incorrectly round down if there is round-off error

	      var xRounded = round(xNumeric);
	      var xFixed = void 0;
	      var isNearlyEqual = equal$1(xRounded, xNumeric);

	      if (isNearlyEqual) {
	        xFixed = xRounded;
	      } else {
	        xFixed = fix$1(x.toNumeric());
	      }

	      var y = new Unit(xFixed, parts[i].toString());
	      ret.push(y);
	      x = subtract$1(x, y);
	    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.
	    // But instead of comparing x, the remainder, with zero--we will compare the sum of
	    // all the parts so far with the original value. If they are nearly equal,
	    // we set the remainder to 0.


	    var testSum = 0;

	    for (var _i5 = 0; _i5 < ret.length; _i5++) {
	      testSum = add(testSum, ret[_i5].value);
	    }

	    if (equal$1(testSum, this.value)) {
	      x.value = 0;
	    }

	    ret.push(x);
	    return ret;
	  };

	  var PREFIXES = {
	    NONE: {
	      '': {
	        name: '',
	        value: 1,
	        scientific: true
	      }
	    },
	    SHORT: {
	      '': {
	        name: '',
	        value: 1,
	        scientific: true
	      },
	      'da': {
	        name: 'da',
	        value: 1e1,
	        scientific: false
	      },
	      'h': {
	        name: 'h',
	        value: 1e2,
	        scientific: false
	      },
	      'k': {
	        name: 'k',
	        value: 1e3,
	        scientific: true
	      },
	      'M': {
	        name: 'M',
	        value: 1e6,
	        scientific: true
	      },
	      'G': {
	        name: 'G',
	        value: 1e9,
	        scientific: true
	      },
	      'T': {
	        name: 'T',
	        value: 1e12,
	        scientific: true
	      },
	      'P': {
	        name: 'P',
	        value: 1e15,
	        scientific: true
	      },
	      'E': {
	        name: 'E',
	        value: 1e18,
	        scientific: true
	      },
	      'Z': {
	        name: 'Z',
	        value: 1e21,
	        scientific: true
	      },
	      'Y': {
	        name: 'Y',
	        value: 1e24,
	        scientific: true
	      },
	      'd': {
	        name: 'd',
	        value: 1e-1,
	        scientific: false
	      },
	      'c': {
	        name: 'c',
	        value: 1e-2,
	        scientific: false
	      },
	      'm': {
	        name: 'm',
	        value: 1e-3,
	        scientific: true
	      },
	      'u': {
	        name: 'u',
	        value: 1e-6,
	        scientific: true
	      },
	      'n': {
	        name: 'n',
	        value: 1e-9,
	        scientific: true
	      },
	      'p': {
	        name: 'p',
	        value: 1e-12,
	        scientific: true
	      },
	      'f': {
	        name: 'f',
	        value: 1e-15,
	        scientific: true
	      },
	      'a': {
	        name: 'a',
	        value: 1e-18,
	        scientific: true
	      },
	      'z': {
	        name: 'z',
	        value: 1e-21,
	        scientific: true
	      },
	      'y': {
	        name: 'y',
	        value: 1e-24,
	        scientific: true
	      }
	    },
	    LONG: {
	      '': {
	        name: '',
	        value: 1,
	        scientific: true
	      },
	      'deca': {
	        name: 'deca',
	        value: 1e1,
	        scientific: false
	      },
	      'hecto': {
	        name: 'hecto',
	        value: 1e2,
	        scientific: false
	      },
	      'kilo': {
	        name: 'kilo',
	        value: 1e3,
	        scientific: true
	      },
	      'mega': {
	        name: 'mega',
	        value: 1e6,
	        scientific: true
	      },
	      'giga': {
	        name: 'giga',
	        value: 1e9,
	        scientific: true
	      },
	      'tera': {
	        name: 'tera',
	        value: 1e12,
	        scientific: true
	      },
	      'peta': {
	        name: 'peta',
	        value: 1e15,
	        scientific: true
	      },
	      'exa': {
	        name: 'exa',
	        value: 1e18,
	        scientific: true
	      },
	      'zetta': {
	        name: 'zetta',
	        value: 1e21,
	        scientific: true
	      },
	      'yotta': {
	        name: 'yotta',
	        value: 1e24,
	        scientific: true
	      },
	      'deci': {
	        name: 'deci',
	        value: 1e-1,
	        scientific: false
	      },
	      'centi': {
	        name: 'centi',
	        value: 1e-2,
	        scientific: false
	      },
	      'milli': {
	        name: 'milli',
	        value: 1e-3,
	        scientific: true
	      },
	      'micro': {
	        name: 'micro',
	        value: 1e-6,
	        scientific: true
	      },
	      'nano': {
	        name: 'nano',
	        value: 1e-9,
	        scientific: true
	      },
	      'pico': {
	        name: 'pico',
	        value: 1e-12,
	        scientific: true
	      },
	      'femto': {
	        name: 'femto',
	        value: 1e-15,
	        scientific: true
	      },
	      'atto': {
	        name: 'atto',
	        value: 1e-18,
	        scientific: true
	      },
	      'zepto': {
	        name: 'zepto',
	        value: 1e-21,
	        scientific: true
	      },
	      'yocto': {
	        name: 'yocto',
	        value: 1e-24,
	        scientific: true
	      }
	    },
	    SQUARED: {
	      '': {
	        name: '',
	        value: 1,
	        scientific: true
	      },
	      'da': {
	        name: 'da',
	        value: 1e2,
	        scientific: false
	      },
	      'h': {
	        name: 'h',
	        value: 1e4,
	        scientific: false
	      },
	      'k': {
	        name: 'k',
	        value: 1e6,
	        scientific: true
	      },
	      'M': {
	        name: 'M',
	        value: 1e12,
	        scientific: true
	      },
	      'G': {
	        name: 'G',
	        value: 1e18,
	        scientific: true
	      },
	      'T': {
	        name: 'T',
	        value: 1e24,
	        scientific: true
	      },
	      'P': {
	        name: 'P',
	        value: 1e30,
	        scientific: true
	      },
	      'E': {
	        name: 'E',
	        value: 1e36,
	        scientific: true
	      },
	      'Z': {
	        name: 'Z',
	        value: 1e42,
	        scientific: true
	      },
	      'Y': {
	        name: 'Y',
	        value: 1e48,
	        scientific: true
	      },
	      'd': {
	        name: 'd',
	        value: 1e-2,
	        scientific: false
	      },
	      'c': {
	        name: 'c',
	        value: 1e-4,
	        scientific: false
	      },
	      'm': {
	        name: 'm',
	        value: 1e-6,
	        scientific: true
	      },
	      'u': {
	        name: 'u',
	        value: 1e-12,
	        scientific: true
	      },
	      'n': {
	        name: 'n',
	        value: 1e-18,
	        scientific: true
	      },
	      'p': {
	        name: 'p',
	        value: 1e-24,
	        scientific: true
	      },
	      'f': {
	        name: 'f',
	        value: 1e-30,
	        scientific: true
	      },
	      'a': {
	        name: 'a',
	        value: 1e-36,
	        scientific: true
	      },
	      'z': {
	        name: 'z',
	        value: 1e-42,
	        scientific: true
	      },
	      'y': {
	        name: 'y',
	        value: 1e-48,
	        scientific: true
	      }
	    },
	    CUBIC: {
	      '': {
	        name: '',
	        value: 1,
	        scientific: true
	      },
	      'da': {
	        name: 'da',
	        value: 1e3,
	        scientific: false
	      },
	      'h': {
	        name: 'h',
	        value: 1e6,
	        scientific: false
	      },
	      'k': {
	        name: 'k',
	        value: 1e9,
	        scientific: true
	      },
	      'M': {
	        name: 'M',
	        value: 1e18,
	        scientific: true
	      },
	      'G': {
	        name: 'G',
	        value: 1e27,
	        scientific: true
	      },
	      'T': {
	        name: 'T',
	        value: 1e36,
	        scientific: true
	      },
	      'P': {
	        name: 'P',
	        value: 1e45,
	        scientific: true
	      },
	      'E': {
	        name: 'E',
	        value: 1e54,
	        scientific: true
	      },
	      'Z': {
	        name: 'Z',
	        value: 1e63,
	        scientific: true
	      },
	      'Y': {
	        name: 'Y',
	        value: 1e72,
	        scientific: true
	      },
	      'd': {
	        name: 'd',
	        value: 1e-3,
	        scientific: false
	      },
	      'c': {
	        name: 'c',
	        value: 1e-6,
	        scientific: false
	      },
	      'm': {
	        name: 'm',
	        value: 1e-9,
	        scientific: true
	      },
	      'u': {
	        name: 'u',
	        value: 1e-18,
	        scientific: true
	      },
	      'n': {
	        name: 'n',
	        value: 1e-27,
	        scientific: true
	      },
	      'p': {
	        name: 'p',
	        value: 1e-36,
	        scientific: true
	      },
	      'f': {
	        name: 'f',
	        value: 1e-45,
	        scientific: true
	      },
	      'a': {
	        name: 'a',
	        value: 1e-54,
	        scientific: true
	      },
	      'z': {
	        name: 'z',
	        value: 1e-63,
	        scientific: true
	      },
	      'y': {
	        name: 'y',
	        value: 1e-72,
	        scientific: true
	      }
	    },
	    BINARY_SHORT: {
	      '': {
	        name: '',
	        value: 1,
	        scientific: true
	      },
	      'k': {
	        name: 'k',
	        value: 1e3,
	        scientific: true
	      },
	      'M': {
	        name: 'M',
	        value: 1e6,
	        scientific: true
	      },
	      'G': {
	        name: 'G',
	        value: 1e9,
	        scientific: true
	      },
	      'T': {
	        name: 'T',
	        value: 1e12,
	        scientific: true
	      },
	      'P': {
	        name: 'P',
	        value: 1e15,
	        scientific: true
	      },
	      'E': {
	        name: 'E',
	        value: 1e18,
	        scientific: true
	      },
	      'Z': {
	        name: 'Z',
	        value: 1e21,
	        scientific: true
	      },
	      'Y': {
	        name: 'Y',
	        value: 1e24,
	        scientific: true
	      },
	      'Ki': {
	        name: 'Ki',
	        value: 1024,
	        scientific: true
	      },
	      'Mi': {
	        name: 'Mi',
	        value: Math.pow(1024, 2),
	        scientific: true
	      },
	      'Gi': {
	        name: 'Gi',
	        value: Math.pow(1024, 3),
	        scientific: true
	      },
	      'Ti': {
	        name: 'Ti',
	        value: Math.pow(1024, 4),
	        scientific: true
	      },
	      'Pi': {
	        name: 'Pi',
	        value: Math.pow(1024, 5),
	        scientific: true
	      },
	      'Ei': {
	        name: 'Ei',
	        value: Math.pow(1024, 6),
	        scientific: true
	      },
	      'Zi': {
	        name: 'Zi',
	        value: Math.pow(1024, 7),
	        scientific: true
	      },
	      'Yi': {
	        name: 'Yi',
	        value: Math.pow(1024, 8),
	        scientific: true
	      }
	    },
	    BINARY_LONG: {
	      '': {
	        name: '',
	        value: 1,
	        scientific: true
	      },
	      'kilo': {
	        name: 'kilo',
	        value: 1e3,
	        scientific: true
	      },
	      'mega': {
	        name: 'mega',
	        value: 1e6,
	        scientific: true
	      },
	      'giga': {
	        name: 'giga',
	        value: 1e9,
	        scientific: true
	      },
	      'tera': {
	        name: 'tera',
	        value: 1e12,
	        scientific: true
	      },
	      'peta': {
	        name: 'peta',
	        value: 1e15,
	        scientific: true
	      },
	      'exa': {
	        name: 'exa',
	        value: 1e18,
	        scientific: true
	      },
	      'zetta': {
	        name: 'zetta',
	        value: 1e21,
	        scientific: true
	      },
	      'yotta': {
	        name: 'yotta',
	        value: 1e24,
	        scientific: true
	      },
	      'kibi': {
	        name: 'kibi',
	        value: 1024,
	        scientific: true
	      },
	      'mebi': {
	        name: 'mebi',
	        value: Math.pow(1024, 2),
	        scientific: true
	      },
	      'gibi': {
	        name: 'gibi',
	        value: Math.pow(1024, 3),
	        scientific: true
	      },
	      'tebi': {
	        name: 'tebi',
	        value: Math.pow(1024, 4),
	        scientific: true
	      },
	      'pebi': {
	        name: 'pebi',
	        value: Math.pow(1024, 5),
	        scientific: true
	      },
	      'exi': {
	        name: 'exi',
	        value: Math.pow(1024, 6),
	        scientific: true
	      },
	      'zebi': {
	        name: 'zebi',
	        value: Math.pow(1024, 7),
	        scientific: true
	      },
	      'yobi': {
	        name: 'yobi',
	        value: Math.pow(1024, 8),
	        scientific: true
	      }
	    },
	    BTU: {
	      '': {
	        name: '',
	        value: 1,
	        scientific: true
	      },
	      'MM': {
	        name: 'MM',
	        value: 1e6,
	        scientific: true
	      }
	    } // Add a prefix list for both short and long prefixes (for example for ohm and bar which support both Mohm and megaohm, mbar and millibar):

	  };
	  PREFIXES.SHORTLONG = {};

	  for (var key in PREFIXES.SHORT) {
	    if (PREFIXES.SHORT.hasOwnProperty(key)) {
	      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
	    }
	  }

	  for (var _key in PREFIXES.LONG) {
	    if (PREFIXES.LONG.hasOwnProperty(_key)) {
	      PREFIXES.SHORTLONG[_key] = PREFIXES.LONG[_key];
	    }
	  }
	  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
	   * Index  Dimension
	   * -----  ---------
	   *   0    Length
	   *   1    Mass
	   *   2    Time
	   *   3    Current
	   *   4    Temperature
	   *   5    Luminous intensity
	   *   6    Amount of substance
	   *   7    Angle
	   *   8    Bit (digital)
	   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm Â°C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
	   *
	   */


	  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];
	  var BASE_UNITS = {
	    NONE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
	    },
	    MASS: {
	      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
	    },
	    LENGTH: {
	      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
	    },
	    TIME: {
	      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
	    },
	    CURRENT: {
	      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
	    },
	    TEMPERATURE: {
	      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
	    },
	    LUMINOUS_INTENSITY: {
	      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
	    },
	    AMOUNT_OF_SUBSTANCE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
	    },
	    FORCE: {
	      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
	    },
	    SURFACE: {
	      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
	    },
	    VOLUME: {
	      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
	    },
	    ENERGY: {
	      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
	    },
	    POWER: {
	      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
	    },
	    PRESSURE: {
	      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CHARGE: {
	      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CAPACITANCE: {
	      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_POTENTIAL: {
	      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_RESISTANCE: {
	      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_INDUCTANCE: {
	      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CONDUCTANCE: {
	      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
	    },
	    MAGNETIC_FLUX: {
	      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
	    },
	    MAGNETIC_FLUX_DENSITY: {
	      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
	    },
	    FREQUENCY: {
	      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
	    },
	    ANGLE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
	    },
	    BIT: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
	    }
	  };

	  for (var _key2 in BASE_UNITS) {
	    BASE_UNITS[_key2].key = _key2;
	  }

	  var BASE_UNIT_NONE = {};
	  var UNIT_NONE = {
	    name: '',
	    base: BASE_UNIT_NONE,
	    value: 1,
	    offset: 0,
	    dimensions: BASE_DIMENSIONS.map(function (x) {
	      return 0;
	    })
	  };
	  var UNITS = {
	    // length
	    meter: {
	      name: 'meter',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    inch: {
	      name: 'inch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    foot: {
	      name: 'foot',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yard: {
	      name: 'yard',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mile: {
	      name: 'mile',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    link: {
	      name: 'link',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rod: {
	      name: 'rod',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.0292,
	      offset: 0
	    },
	    chain: {
	      name: 'chain',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    angstrom: {
	      name: 'angstrom',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1e-10,
	      offset: 0
	    },
	    m: {
	      name: 'm',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    'in': {
	      name: 'in',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    ft: {
	      name: 'ft',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yd: {
	      name: 'yd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mi: {
	      name: 'mi',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    li: {
	      name: 'li',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rd: {
	      name: 'rd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    ch: {
	      name: 'ch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    mil: {
	      name: 'mil',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000254,
	      offset: 0
	    },
	    // 1/1000 inch
	    // Surface
	    m2: {
	      name: 'm2',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.SQUARED,
	      value: 1,
	      offset: 0
	    },
	    sqin: {
	      name: 'sqin',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.00064516,
	      offset: 0
	    },
	    // 645.16 mm2
	    sqft: {
	      name: 'sqft',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.09290304,
	      offset: 0
	    },
	    // 0.09290304 m2
	    sqyd: {
	      name: 'sqyd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.83612736,
	      offset: 0
	    },
	    // 0.83612736 m2
	    sqmi: {
	      name: 'sqmi',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 2589988.110336,
	      offset: 0
	    },
	    // 2.589988110336 km2
	    sqrd: {
	      name: 'sqrd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 25.29295,
	      offset: 0
	    },
	    // 25.29295 m2
	    sqch: {
	      name: 'sqch',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 404.6873,
	      offset: 0
	    },
	    // 404.6873 m2
	    sqmil: {
	      name: 'sqmil',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 6.4516e-10,
	      offset: 0
	    },
	    // 6.4516 * 10^-10 m2
	    acre: {
	      name: 'acre',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 4046.86,
	      offset: 0
	    },
	    // 4046.86 m2
	    hectare: {
	      name: 'hectare',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 10000,
	      offset: 0
	    },
	    // 10000 m2
	    // Volume
	    m3: {
	      name: 'm3',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.CUBIC,
	      value: 1,
	      offset: 0
	    },
	    L: {
	      name: 'L',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    },
	    // litre
	    l: {
	      name: 'l',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    },
	    // litre
	    litre: {
	      name: 'litre',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },
	    cuin: {
	      name: 'cuin',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1.6387064e-5,
	      offset: 0
	    },
	    // 1.6387064e-5 m3
	    cuft: {
	      name: 'cuft',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.028316846592,
	      offset: 0
	    },
	    // 28.316 846 592 L
	    cuyd: {
	      name: 'cuyd',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.764554857984,
	      offset: 0
	    },
	    // 764.554 857 984 L
	    teaspoon: {
	      name: 'teaspoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000005,
	      offset: 0
	    },
	    // 5 mL
	    tablespoon: {
	      name: 'tablespoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000015,
	      offset: 0
	    },
	    // 15 mL
	    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
	    drop: {
	      name: 'drop',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    },
	    // 0.05 mL = 5e-8 m3
	    gtt: {
	      name: 'gtt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    },
	    // 0.05 mL = 5e-8 m3
	    // Liquid volume
	    minim: {
	      name: 'minim',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00000006161152,
	      offset: 0
	    },
	    // 0.06161152 mL
	    fluiddram: {
	      name: 'fluiddram',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    },
	    // 3.696691 mL
	    fluidounce: {
	      name: 'fluidounce',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    },
	    // 29.57353 mL
	    gill: {
	      name: 'gill',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    },
	    // 118.2941 mL
	    cc: {
	      name: 'cc',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1e-6,
	      offset: 0
	    },
	    // 1e-6 L
	    cup: {
	      name: 'cup',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    },
	    // 236.5882 mL
	    pint: {
	      name: 'pint',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    },
	    // 473.1765 mL
	    quart: {
	      name: 'quart',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    },
	    // 946.3529 mL
	    gallon: {
	      name: 'gallon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    },
	    // 3.785412 L
	    beerbarrel: {
	      name: 'beerbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    },
	    // 117.3478 L
	    oilbarrel: {
	      name: 'oilbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    },
	    // 158.9873 L
	    hogshead: {
	      name: 'hogshead',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.2384810,
	      offset: 0
	    },
	    // 238.4810 L
	    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
	    fldr: {
	      name: 'fldr',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    },
	    // 3.696691 mL
	    floz: {
	      name: 'floz',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    },
	    // 29.57353 mL
	    gi: {
	      name: 'gi',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    },
	    // 118.2941 mL
	    cp: {
	      name: 'cp',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    },
	    // 236.5882 mL
	    pt: {
	      name: 'pt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    },
	    // 473.1765 mL
	    qt: {
	      name: 'qt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    },
	    // 946.3529 mL
	    gal: {
	      name: 'gal',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    },
	    // 3.785412 L
	    bbl: {
	      name: 'bbl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    },
	    // 117.3478 L
	    obl: {
	      name: 'obl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    },
	    // 158.9873 L
	    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
	    // Mass
	    g: {
	      name: 'g',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    },
	    gram: {
	      name: 'gram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },
	    ton: {
	      name: 'ton',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 907.18474,
	      offset: 0
	    },
	    tonne: {
	      name: 'tonne',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 1000,
	      offset: 0
	    },
	    grain: {
	      name: 'grain',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dram: {
	      name: 'dram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    ounce: {
	      name: 'ounce',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    poundmass: {
	      name: 'poundmass',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    hundredweight: {
	      name: 'hundredweight',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },
	    stick: {
	      name: 'stick',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 115e-3,
	      offset: 0
	    },
	    stone: {
	      name: 'stone',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 6.35029318,
	      offset: 0
	    },
	    gr: {
	      name: 'gr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dr: {
	      name: 'dr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    oz: {
	      name: 'oz',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    lbm: {
	      name: 'lbm',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    cwt: {
	      name: 'cwt',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },
	    // Time
	    s: {
	      name: 's',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    min: {
	      name: 'min',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    h: {
	      name: 'h',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    second: {
	      name: 'second',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    sec: {
	      name: 'sec',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    minute: {
	      name: 'minute',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    hour: {
	      name: 'hour',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    day: {
	      name: 'day',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 86400,
	      offset: 0
	    },
	    week: {
	      name: 'week',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 7 * 86400,
	      offset: 0
	    },
	    month: {
	      name: 'month',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 2629800,
	      // 1/12th of Julian year
	      offset: 0
	    },
	    year: {
	      name: 'year',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 31557600,
	      // Julian year
	      offset: 0
	    },
	    decade: {
	      name: 'decade',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 315576000,
	      // Julian decade
	      offset: 0
	    },
	    century: {
	      name: 'century',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3155760000,
	      // Julian century
	      offset: 0
	    },
	    millennium: {
	      name: 'millennium',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 31557600000,
	      // Julian millennium
	      offset: 0
	    },
	    // Frequency
	    hertz: {
	      name: 'Hertz',
	      base: BASE_UNITS.FREQUENCY,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0,
	      reciprocal: true
	    },
	    Hz: {
	      name: 'Hz',
	      base: BASE_UNITS.FREQUENCY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0,
	      reciprocal: true
	    },
	    // Angle
	    rad: {
	      name: 'rad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    radian: {
	      name: 'radian',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
	    deg: {
	      name: 'deg',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.SHORT,
	      value: null,
	      // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    degree: {
	      name: 'degree',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: null,
	      // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
	    grad: {
	      name: 'grad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.SHORT,
	      value: null,
	      // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    gradian: {
	      name: 'gradian',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: null,
	      // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
	    cycle: {
	      name: 'cycle',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null,
	      // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
	    arcsec: {
	      name: 'arcsec',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null,
	      // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
	    arcmin: {
	      name: 'arcmin',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null,
	      // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // Electric current
	    A: {
	      name: 'A',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    ampere: {
	      name: 'ampere',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    // Temperature
	    // K(C) = Â°C + 273.15
	    // K(F) = (Â°F + 459.67) / 1.8
	    // K(R) = Â°R / 1.8
	    K: {
	      name: 'K',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    degC: {
	      name: 'degC',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    degF: {
	      name: 'degF',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    degR: {
	      name: 'degR',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },
	    kelvin: {
	      name: 'kelvin',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    celsius: {
	      name: 'celsius',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    fahrenheit: {
	      name: 'fahrenheit',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    rankine: {
	      name: 'rankine',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },
	    // amount of substance
	    mol: {
	      name: 'mol',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    mole: {
	      name: 'mole',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    // luminous intensity
	    cd: {
	      name: 'cd',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    candela: {
	      name: 'candela',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    // TODO: units STERADIAN
	    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
	    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
	    // Force
	    N: {
	      name: 'N',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    newton: {
	      name: 'newton',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    dyn: {
	      name: 'dyn',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 0.00001,
	      offset: 0
	    },
	    dyne: {
	      name: 'dyne',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 0.00001,
	      offset: 0
	    },
	    lbf: {
	      name: 'lbf',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    poundforce: {
	      name: 'poundforce',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    kip: {
	      name: 'kip',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 4448.2216,
	      offset: 0
	    },
	    // Energy
	    J: {
	      name: 'J',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    joule: {
	      name: 'joule',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    erg: {
	      name: 'erg',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.NONE,
	      value: 1e-7,
	      offset: 0
	    },
	    Wh: {
	      name: 'Wh',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 3600,
	      offset: 0
	    },
	    BTU: {
	      name: 'BTU',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.BTU,
	      value: 1055.05585262,
	      offset: 0
	    },
	    eV: {
	      name: 'eV',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1.602176565e-19,
	      offset: 0
	    },
	    electronvolt: {
	      name: 'electronvolt',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.LONG,
	      value: 1.602176565e-19,
	      offset: 0
	    },
	    // Power
	    W: {
	      name: 'W',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    watt: {
	      name: 'watt',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    hp: {
	      name: 'hp',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.NONE,
	      value: 745.6998715386,
	      offset: 0
	    },
	    // Electrical power units
	    VAR: {
	      name: 'VAR',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: Complex.I,
	      offset: 0
	    },
	    VA: {
	      name: 'VA',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Pressure
	    Pa: {
	      name: 'Pa',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    psi: {
	      name: 'psi',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 6894.75729276459,
	      offset: 0
	    },
	    atm: {
	      name: 'atm',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 101325,
	      offset: 0
	    },
	    bar: {
	      name: 'bar',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.SHORTLONG,
	      value: 100000,
	      offset: 0
	    },
	    torr: {
	      name: 'torr',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 133.322,
	      offset: 0
	    },
	    mmHg: {
	      name: 'mmHg',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 133.322,
	      offset: 0
	    },
	    mmH2O: {
	      name: 'mmH2O',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 9.80665,
	      offset: 0
	    },
	    cmH2O: {
	      name: 'cmH2O',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 98.0665,
	      offset: 0
	    },
	    // Electric charge
	    coulomb: {
	      name: 'coulomb',
	      base: BASE_UNITS.ELECTRIC_CHARGE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    C: {
	      name: 'C',
	      base: BASE_UNITS.ELECTRIC_CHARGE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric capacitance
	    farad: {
	      name: 'farad',
	      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    F: {
	      name: 'F',
	      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric potential
	    volt: {
	      name: 'volt',
	      base: BASE_UNITS.ELECTRIC_POTENTIAL,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    V: {
	      name: 'V',
	      base: BASE_UNITS.ELECTRIC_POTENTIAL,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric resistance
	    ohm: {
	      name: 'ohm',
	      base: BASE_UNITS.ELECTRIC_RESISTANCE,
	      prefixes: PREFIXES.SHORTLONG,
	      // Both Mohm and megaohm are acceptable
	      value: 1,
	      offset: 0
	    },

	    /*
	     * Unicode breaks in browsers if charset is not specified
	    Î©: {
	      name: 'Î©',
	      base: BASE_UNITS.ELECTRIC_RESISTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    */
	    // Electric inductance
	    henry: {
	      name: 'henry',
	      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    H: {
	      name: 'H',
	      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric conductance
	    siemens: {
	      name: 'siemens',
	      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    S: {
	      name: 'S',
	      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Magnetic flux
	    weber: {
	      name: 'weber',
	      base: BASE_UNITS.MAGNETIC_FLUX,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    Wb: {
	      name: 'Wb',
	      base: BASE_UNITS.MAGNETIC_FLUX,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Magnetic flux density
	    tesla: {
	      name: 'tesla',
	      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    T: {
	      name: 'T',
	      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Binary
	    b: {
	      name: 'b',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 1,
	      offset: 0
	    },
	    bits: {
	      name: 'bits',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 1,
	      offset: 0
	    },
	    B: {
	      name: 'B',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 8,
	      offset: 0
	    },
	    bytes: {
	      name: 'bytes',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 8,
	      offset: 0
	    } // aliases (formerly plurals)

	  };
	  var ALIASES = {
	    meters: 'meter',
	    inches: 'inch',
	    feet: 'foot',
	    yards: 'yard',
	    miles: 'mile',
	    links: 'link',
	    rods: 'rod',
	    chains: 'chain',
	    angstroms: 'angstrom',
	    lt: 'l',
	    litres: 'litre',
	    liter: 'litre',
	    liters: 'litre',
	    teaspoons: 'teaspoon',
	    tablespoons: 'tablespoon',
	    minims: 'minim',
	    fluiddrams: 'fluiddram',
	    fluidounces: 'fluidounce',
	    gills: 'gill',
	    cups: 'cup',
	    pints: 'pint',
	    quarts: 'quart',
	    gallons: 'gallon',
	    beerbarrels: 'beerbarrel',
	    oilbarrels: 'oilbarrel',
	    hogsheads: 'hogshead',
	    gtts: 'gtt',
	    grams: 'gram',
	    tons: 'ton',
	    tonnes: 'tonne',
	    grains: 'grain',
	    drams: 'dram',
	    ounces: 'ounce',
	    poundmasses: 'poundmass',
	    hundredweights: 'hundredweight',
	    sticks: 'stick',
	    lb: 'lbm',
	    lbs: 'lbm',
	    kips: 'kip',
	    acres: 'acre',
	    hectares: 'hectare',
	    sqfeet: 'sqft',
	    sqyard: 'sqyd',
	    sqmile: 'sqmi',
	    sqmiles: 'sqmi',
	    mmhg: 'mmHg',
	    mmh2o: 'mmH2O',
	    cmh2o: 'cmH2O',
	    seconds: 'second',
	    secs: 'second',
	    minutes: 'minute',
	    mins: 'minute',
	    hours: 'hour',
	    hr: 'hour',
	    hrs: 'hour',
	    days: 'day',
	    weeks: 'week',
	    months: 'month',
	    years: 'year',
	    decades: 'decade',
	    centuries: 'century',
	    millennia: 'millennium',
	    hertz: 'hertz',
	    radians: 'radian',
	    degrees: 'degree',
	    gradians: 'gradian',
	    cycles: 'cycle',
	    arcsecond: 'arcsec',
	    arcseconds: 'arcsec',
	    arcminute: 'arcmin',
	    arcminutes: 'arcmin',
	    BTUs: 'BTU',
	    watts: 'watt',
	    joules: 'joule',
	    amperes: 'ampere',
	    coulombs: 'coulomb',
	    volts: 'volt',
	    ohms: 'ohm',
	    farads: 'farad',
	    webers: 'weber',
	    teslas: 'tesla',
	    electronvolts: 'electronvolt',
	    moles: 'mole'
	    /**
	     * Calculate the values for the angle units.
	     * Value is calculated as number or BigNumber depending on the configuration
	     * @param {{number: 'number' | 'BigNumber'}} config
	     */

	  };

	  function calculateAngleValues(config) {
	    if (config.number === 'BigNumber') {
	      var pi = constants.pi(type.BigNumber);
	      UNITS.rad.value = new type.BigNumber(1);
	      UNITS.deg.value = pi.div(180); // 2 * pi / 360

	      UNITS.grad.value = pi.div(200); // 2 * pi / 400

	      UNITS.cycle.value = pi.times(2); // 2 * pi

	      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600

	      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60
	    } else {
	      // number
	      UNITS.rad.value = 1;
	      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360

	      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400

	      UNITS.cycle.value = Math.PI * 2; // 2 * pi

	      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600

	      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60
	    } // copy to the full names of the angles


	    UNITS.radian.value = UNITS.rad.value;
	    UNITS.degree.value = UNITS.deg.value;
	    UNITS.gradian.value = UNITS.grad.value;
	  } // apply the angle values now


	  calculateAngleValues(config); // recalculate the values on change of configuration

	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      calculateAngleValues(curr);
	    }
	  });
	  /**
	   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
	   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
	   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
	   */

	  var UNIT_SYSTEMS = {
	    si: {
	      // Base units
	      NONE: {
	        unit: UNIT_NONE,
	        prefix: PREFIXES.NONE['']
	      },
	      LENGTH: {
	        unit: UNITS.m,
	        prefix: PREFIXES.SHORT['']
	      },
	      MASS: {
	        unit: UNITS.g,
	        prefix: PREFIXES.SHORT['k']
	      },
	      TIME: {
	        unit: UNITS.s,
	        prefix: PREFIXES.SHORT['']
	      },
	      CURRENT: {
	        unit: UNITS.A,
	        prefix: PREFIXES.SHORT['']
	      },
	      TEMPERATURE: {
	        unit: UNITS.K,
	        prefix: PREFIXES.SHORT['']
	      },
	      LUMINOUS_INTENSITY: {
	        unit: UNITS.cd,
	        prefix: PREFIXES.SHORT['']
	      },
	      AMOUNT_OF_SUBSTANCE: {
	        unit: UNITS.mol,
	        prefix: PREFIXES.SHORT['']
	      },
	      ANGLE: {
	        unit: UNITS.rad,
	        prefix: PREFIXES.SHORT['']
	      },
	      BIT: {
	        unit: UNITS.bit,
	        prefix: PREFIXES.SHORT['']
	      },
	      // Derived units
	      FORCE: {
	        unit: UNITS.N,
	        prefix: PREFIXES.SHORT['']
	      },
	      ENERGY: {
	        unit: UNITS.J,
	        prefix: PREFIXES.SHORT['']
	      },
	      POWER: {
	        unit: UNITS.W,
	        prefix: PREFIXES.SHORT['']
	      },
	      PRESSURE: {
	        unit: UNITS.Pa,
	        prefix: PREFIXES.SHORT['']
	      },
	      ELECTRIC_CHARGE: {
	        unit: UNITS.C,
	        prefix: PREFIXES.SHORT['']
	      },
	      ELECTRIC_CAPACITANCE: {
	        unit: UNITS.F,
	        prefix: PREFIXES.SHORT['']
	      },
	      ELECTRIC_POTENTIAL: {
	        unit: UNITS.V,
	        prefix: PREFIXES.SHORT['']
	      },
	      ELECTRIC_RESISTANCE: {
	        unit: UNITS.ohm,
	        prefix: PREFIXES.SHORT['']
	      },
	      ELECTRIC_INDUCTANCE: {
	        unit: UNITS.H,
	        prefix: PREFIXES.SHORT['']
	      },
	      ELECTRIC_CONDUCTANCE: {
	        unit: UNITS.S,
	        prefix: PREFIXES.SHORT['']
	      },
	      MAGNETIC_FLUX: {
	        unit: UNITS.Wb,
	        prefix: PREFIXES.SHORT['']
	      },
	      MAGNETIC_FLUX_DENSITY: {
	        unit: UNITS.T,
	        prefix: PREFIXES.SHORT['']
	      },
	      FREQUENCY: {
	        unit: UNITS.Hz,
	        prefix: PREFIXES.SHORT['']
	      }
	    } // Clone to create the other unit systems

	  };
	  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	  UNIT_SYSTEMS.cgs.LENGTH = {
	    unit: UNITS.m,
	    prefix: PREFIXES.SHORT['c']
	  };
	  UNIT_SYSTEMS.cgs.MASS = {
	    unit: UNITS.g,
	    prefix: PREFIXES.SHORT['']
	  };
	  UNIT_SYSTEMS.cgs.FORCE = {
	    unit: UNITS.dyn,
	    prefix: PREFIXES.SHORT['']
	  };
	  UNIT_SYSTEMS.cgs.ENERGY = {
	    unit: UNITS.erg,
	    prefix: PREFIXES.NONE[''] // there are wholly 4 unique cgs systems for electricity and magnetism,
	    // so let's not worry about it unless somebody complains

	  };
	  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	  UNIT_SYSTEMS.us.LENGTH = {
	    unit: UNITS.ft,
	    prefix: PREFIXES.NONE['']
	  };
	  UNIT_SYSTEMS.us.MASS = {
	    unit: UNITS.lbm,
	    prefix: PREFIXES.NONE['']
	  };
	  UNIT_SYSTEMS.us.TEMPERATURE = {
	    unit: UNITS.degF,
	    prefix: PREFIXES.NONE['']
	  };
	  UNIT_SYSTEMS.us.FORCE = {
	    unit: UNITS.lbf,
	    prefix: PREFIXES.NONE['']
	  };
	  UNIT_SYSTEMS.us.ENERGY = {
	    unit: UNITS.BTU,
	    prefix: PREFIXES.BTU['']
	  };
	  UNIT_SYSTEMS.us.POWER = {
	    unit: UNITS.hp,
	    prefix: PREFIXES.NONE['']
	  };
	  UNIT_SYSTEMS.us.PRESSURE = {
	    unit: UNITS.psi,
	    prefix: PREFIXES.NONE[''] // Add additional unit systems here.
	    // Choose a unit system to seed the auto unit system.

	  };
	  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system

	  var currentUnitSystem = UNIT_SYSTEMS.auto;
	  /**
	   * Set a unit system for formatting derived units.
	   * @param {string} [name] The name of the unit system.
	   */

	  Unit.setUnitSystem = function (name) {
	    if (UNIT_SYSTEMS.hasOwnProperty(name)) {
	      currentUnitSystem = UNIT_SYSTEMS[name];
	    } else {
	      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
	    }
	  };
	  /**
	   * Return the current unit system.
	   * @return {string} The current unit system.
	   */


	  Unit.getUnitSystem = function () {
	    for (var _key3 in UNIT_SYSTEMS) {
	      if (UNIT_SYSTEMS[_key3] === currentUnitSystem) {
	        return _key3;
	      }
	    }
	  };
	  /**
	   * Converters to convert from number to an other numeric type like BigNumber
	   * or Fraction
	   */


	  Unit.typeConverters = {
	    BigNumber: function BigNumber(x) {
	      return new type.BigNumber(x + ''); // stringify to prevent constructor error
	    },
	    Fraction: function Fraction(x) {
	      return new type.Fraction(x);
	    },
	    Complex: function Complex(x) {
	      return x;
	    },
	    number: function number(x) {
	      return x;
	    }
	    /**
	     * Retrieve the right convertor function corresponding with the type
	     * of provided exampleValue.
	     *
	     * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
	     *                        In case of an unknown type,
	     * @return {Function}
	     */

	  };

	  Unit._getNumberConverter = function (type) {
	    if (!Unit.typeConverters[type]) {
	      throw new TypeError('Unsupported type "' + type + '"');
	    }

	    return Unit.typeConverters[type];
	  }; // Add dimensions to each built-in unit


	  for (var _key4 in UNITS) {
	    var unit = UNITS[_key4];
	    unit.dimensions = unit.base.dimensions;
	  } // Create aliases


	  for (var name in ALIASES) {
	    if (ALIASES.hasOwnProperty(name)) {
	      var _unit2 = UNITS[ALIASES[name]];
	      var alias = {};

	      for (var _key5 in _unit2) {
	        if (_unit2.hasOwnProperty(_key5)) {
	          alias[_key5] = _unit2[_key5];
	        }
	      }

	      alias.name = name;
	      UNITS[name] = alias;
	    }
	  }

	  function assertUnitNameIsValid(name) {
	    for (var i = 0; i < name.length; i++) {
	      var _c = name.charAt(i);

	      var isValidAlpha = function isValidAlpha(p) {
	        return /^[a-zA-Z]$/.test(p);
	      };

	      var _isDigit = function _isDigit(c) {
	        return c >= '0' && c <= '9';
	      };

	      if (i === 0 && !isValidAlpha(_c)) {
	        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
	      }

	      if (i > 0 && !(isValidAlpha(_c) || _isDigit(_c))) {
	        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
	      }
	    }
	  }
	  /**
	   * Wrapper around createUnitSingle.
	   * Example:
	   *  createUnit({
	   *    foo: { },
	   *    bar: {
	   *      definition: 'kg/foo',
	   *      aliases: ['ba', 'barr', 'bars'],
	   *      offset: 200
	   *    },
	   *    baz: '4 bar'
	   *  },
	   *  {
	   *    override: true
	   *  })
	   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
	   * @param {object} options
	   */


	  Unit.createUnit = function (obj, options) {
	    if (_typeof$5(obj) !== 'object') {
	      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
	    } // Remove all units and aliases we are overriding


	    if (options && options.override) {
	      for (var _key6 in obj) {
	        if (obj.hasOwnProperty(_key6)) {
	          Unit.deleteUnit(_key6);
	        }

	        if (obj[_key6].aliases) {
	          for (var i = 0; i < obj[_key6].aliases.length; i++) {
	            Unit.deleteUnit(obj[_key6].aliases[i]);
	          }
	        }
	      }
	    } // TODO: traverse multiple times until all units have been added


	    var lastUnit;

	    for (var _key7 in obj) {
	      if (obj.hasOwnProperty(_key7)) {
	        lastUnit = Unit.createUnitSingle(_key7, obj[_key7]);
	      }
	    }

	    return lastUnit;
	  };
	  /**
	   * Create a user-defined unit and register it with the Unit type.
	   * Example:
	   *  createUnitSingle('knot', '0.514444444 m/s')
	   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
	   *
	   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
	   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
	   * @param {Object} options   (optional) An object containing any of the following properties:
	   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
	   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
	   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.
	   *
	   * @return {Unit}
	   */


	  Unit.createUnitSingle = function (name, obj, options) {
	    if (typeof obj === 'undefined' || obj === null) {
	      obj = {};
	    }

	    if (typeof name !== 'string') {
	      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
	    } // Check collisions with existing units


	    if (UNITS.hasOwnProperty(name)) {
	      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
	    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.


	    assertUnitNameIsValid(name);
	    var defUnit = null; // The Unit from which the new unit will be created.

	    var aliases = [];
	    var offset = 0;
	    var definition;
	    var prefixes;

	    if (obj && obj.type === 'Unit') {
	      defUnit = obj.clone();
	    } else if (typeof obj === 'string') {
	      if (obj !== '') {
	        definition = obj;
	      }
	    } else if (_typeof$5(obj) === 'object') {
	      definition = obj.definition;
	      prefixes = obj.prefixes;
	      offset = obj.offset;

	      if (obj.aliases) {
	        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array
	      }
	    } else {
	      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
	    }

	    if (aliases) {
	      for (var i = 0; i < aliases.length; i++) {
	        if (UNITS.hasOwnProperty(aliases[i])) {
	          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
	        }
	      }
	    }

	    if (definition && typeof definition === 'string' && !defUnit) {
	      try {
	        defUnit = Unit.parse(definition, {
	          allowNoUnits: true
	        });
	      } catch (ex) {
	        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
	        throw ex;
	      }
	    } else if (definition && definition.type === 'Unit') {
	      defUnit = definition.clone();
	    }

	    aliases = aliases || [];
	    offset = offset || 0;

	    if (prefixes && prefixes.toUpperCase) {
	      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
	    } else {
	      prefixes = PREFIXES.NONE;
	    } // If defUnit is null, it is because the user did not
	    // specify a defintion. So create a new base dimension.


	    var newUnit = {};

	    if (!defUnit) {
	      // Add a new base dimension
	      var baseName = name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo

	      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {
	        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
	      }

	      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units

	      for (var b in BASE_UNITS) {
	        if (BASE_UNITS.hasOwnProperty(b)) {
	          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;
	        }
	      } // Add the new base unit


	      var newBaseUnit = {
	        dimensions: []
	      };

	      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {
	        newBaseUnit.dimensions[_i6] = 0;
	      }

	      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;
	      newBaseUnit.key = baseName;
	      BASE_UNITS[baseName] = newBaseUnit;
	      newUnit = {
	        name: name,
	        value: 1,
	        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
	        prefixes: prefixes,
	        offset: offset,
	        base: BASE_UNITS[baseName]
	      };
	      currentUnitSystem[baseName] = {
	        unit: newUnit,
	        prefix: PREFIXES.NONE['']
	      };
	    } else {
	      newUnit = {
	        name: name,
	        value: defUnit.value,
	        dimensions: defUnit.dimensions.slice(0),
	        prefixes: prefixes,
	        offset: offset // Create a new base if no matching base exists

	      };
	      var anyMatch = false;

	      for (var _i7 in BASE_UNITS) {
	        if (BASE_UNITS.hasOwnProperty(_i7)) {
	          var match = true;

	          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {
	            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {
	              match = false;
	              break;
	            }
	          }

	          if (match) {
	            anyMatch = true;
	            newUnit.base = BASE_UNITS[_i7];
	            break;
	          }
	        }
	      }

	      if (!anyMatch) {
	        var _baseName = name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo
	        // Add the new base unit


	        var _newBaseUnit = {
	          dimensions: defUnit.dimensions.slice(0)
	        };
	        _newBaseUnit.key = _baseName;
	        BASE_UNITS[_baseName] = _newBaseUnit;
	        currentUnitSystem[_baseName] = {
	          unit: newUnit,
	          prefix: PREFIXES.NONE['']
	        };
	        newUnit.base = BASE_UNITS[_baseName];
	      }
	    }

	    Unit.UNITS[name] = newUnit;

	    for (var _i8 = 0; _i8 < aliases.length; _i8++) {
	      var aliasName = aliases[_i8];
	      var _alias = {};

	      for (var _key8 in newUnit) {
	        if (newUnit.hasOwnProperty(_key8)) {
	          _alias[_key8] = newUnit[_key8];
	        }
	      }

	      _alias.name = aliasName;
	      Unit.UNITS[aliasName] = _alias;
	    }

	    return new Unit(null, name);
	  };

	  Unit.deleteUnit = function (name) {
	    delete Unit.UNITS[name];
	  }; // expose arrays with prefixes, dimensions, units, systems


	  Unit.PREFIXES = PREFIXES;
	  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;
	  Unit.BASE_UNITS = BASE_UNITS;
	  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
	  Unit.UNITS = UNITS;
	  return Unit;
	}

	var name$P = 'Unit';
	var path$d = 'type';
	var factory_1$U = factory$U;
	var math$4 = true; // request access to the math namespace

	var Unit = {
		name: name$P,
		path: path$d,
		factory: factory_1$U,
		math: math$4
	};

	function factory$V(type, config, load, typed) {
	  /**
	   * Create a unit. Depending on the passed arguments, the function
	   * will create and return a new math.type.Unit object.
	   * When a matrix is provided, all elements will be converted to units.
	   *
	   * Syntax:
	   *
	   *     math.unit(unit : string)
	   *     math.unit(value : number, unit : string)
	   *
	   * Examples:
	   *
	   *    const a = math.unit(5, 'cm')    // returns Unit 50 mm
	   *    const b = math.unit('23 kg')    // returns Unit 23 kg
	   *    a.to('m')                       // returns Unit 0.05 m
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
	   *
	   * @param {* | Array | Matrix} args   A number and unit.
	   * @return {Unit | Array | Matrix}    The created unit
	   */
	  var unit = typed('unit', {
	    'Unit': function Unit(x) {
	      return x.clone();
	    },
	    'string': function string(x) {
	      if (type.Unit.isValuelessUnit(x)) {
	        return new type.Unit(null, x); // a pure unit
	      }

	      return type.Unit.parse(x, {
	        allowNoUnits: true
	      }); // a unit with value, like '5cm'
	    },
	    'number | BigNumber | Fraction | Complex, string': function numberBigNumberFractionComplexString(value, unit) {
	      return new type.Unit(value, unit);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, unit);
	    }
	  });
	  unit.toTex = {
	    1: "\\left(${args[0]}\\right)",
	    2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)"
	  };
	  return unit;
	}

	var name$Q = 'unit';
	var factory_1$V = factory$V;

	var unit = {
		name: name$Q,
		factory: factory_1$V
	};

	function factory$W(type, config, load, typed) {
	  /**
	   * Create a user-defined unit and register it with the Unit type.
	   *
	   * Syntax:
	   *
	   *     math.createUnit({
	   *       baseUnit1: {
	   *         aliases: [string, ...]
	   *         prefixes: object
	   *       },
	   *       unit2: {
	   *         definition: string,
	   *         aliases: [string, ...]
	   *         prefixes: object,
	   *         offset: number
	   *       },
	   *       unit3: string    // Shortcut
	   *     })
	   *
	   *     // Another shortcut:
	   *     math.createUnit(string, unit : string, [object])
	   *
	   * Examples:
	   *
	   *     math.createUnit('foo')
	   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']})
	   *     math.createUnit('mph', '1 mile/hour')
	   *
	   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
	   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
	   * @param {Object} options   (optional) An object containing any of the following properties:
	   *     - `prefixes {string}` "none", "short", "long", "binary_short", or "binary_long". The default is "none".
	   *     - `aliases {Array}` Array of strings. Example: ['knots', 'kt', 'kts']
	   *     - `offset {Numeric}` An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
	   *
	   * See also:
	   *
	   *     unit
	   *
	   * @return {Unit} The new unit
	   */
	  var createUnit = typed('createUnit', {
	    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
	    'Object, Object': function ObjectObject(obj, options) {
	      return type.Unit.createUnit(obj, options);
	    },
	    // Same as above but without the options.
	    'Object': function Object(obj) {
	      return type.Unit.createUnit(obj, {});
	    },
	    // Shortcut method for creating one unit.
	    'string, Unit | string | Object, Object': function stringUnitStringObjectObject(name, def, options) {
	      var obj = {};
	      obj[name] = def;
	      return type.Unit.createUnit(obj, options);
	    },
	    // Same as above but without the options.
	    'string, Unit | string | Object': function stringUnitStringObject(name, def) {
	      var obj = {};
	      obj[name] = def;
	      return type.Unit.createUnit(obj, {});
	    },
	    // Without a definition, creates a base unit.
	    'string': function string(name) {
	      var obj = {};
	      obj[name] = {};
	      return type.Unit.createUnit(obj, {});
	    }
	  });
	  return createUnit;
	}

	var name$R = 'createUnit';
	var factory_1$W = factory$W;

	var createUnit = {
		name: name$R,
		factory: factory_1$W
	};

	function factory$X(type, config, load, typed) {
	  /**
	   * Split a unit in an array of units whose sum is equal to the original unit.
	   *
	   * Syntax:
	   *
	   *     splitUnit(unit: Unit, parts: Array.<Unit>)
	   *
	   * Example:
	   *
	   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch'])
	   *     // [ 3 feet, 3.3700787401575 inch ]
	   *
	   * See also:
	   *
	   *     unit
	   *
	   * @param {Array} [parts] An array of strings or valueless units.
	   * @return {Array} An array of units.
	   */
	  var splitUnit = typed('splitUnit', {
	    'Unit, Array': function UnitArray(unit, parts) {
	      return unit.splitUnit(parts);
	    }
	  });
	  return splitUnit;
	}

	var name$S = 'splitUnit';
	var factory_1$X = factory$X;

	var splitUnit = {
		name: name$S,
		factory: factory_1$X
	};

	var lazy$4 = object.lazy;

	function factory$Y(type, config, load, typed, math) {
	  // helper function to create a unit with a fixed prefix
	  function fixedUnit(str) {
	    var unit = type.Unit.parse(str);
	    unit.fixPrefix = true;
	    return unit;
	  } // Source: http://www.wikiwand.com/en/Physical_constant
	  // Universal constants


	  setLazyConstant(math, 'speedOfLight', function () {
	    return fixedUnit('299792458 m s^-1');
	  });
	  setLazyConstant(math, 'gravitationConstant', function () {
	    return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2');
	  });
	  setLazyConstant(math, 'planckConstant', function () {
	    return fixedUnit('6.626069311e-34 J s');
	  });
	  setLazyConstant(math, 'reducedPlanckConstant', function () {
	    return fixedUnit('1.05457172647e-34 J s');
	  }); // Electromagnetic constants

	  setLazyConstant(math, 'magneticConstant', function () {
	    return fixedUnit('1.2566370614e-6 N A^-2');
	  });
	  setLazyConstant(math, 'electricConstant', function () {
	    return fixedUnit('8.854187817e-12 F m^-1');
	  });
	  setLazyConstant(math, 'vacuumImpedance', function () {
	    return fixedUnit('376.730313461 ohm');
	  });
	  setLazyConstant(math, 'coulomb', function () {
	    return fixedUnit('8.9875517873681764e9 N m^2 C^-2');
	  });
	  setLazyConstant(math, 'elementaryCharge', function () {
	    return fixedUnit('1.60217656535e-19 C');
	  });
	  setLazyConstant(math, 'bohrMagneton', function () {
	    return fixedUnit('9.2740096820e-24 J T^-1');
	  });
	  setLazyConstant(math, 'conductanceQuantum', function () {
	    return fixedUnit('7.748091734625e-5 S');
	  });
	  setLazyConstant(math, 'inverseConductanceQuantum', function () {
	    return fixedUnit('12906.403721742 ohm');
	  });
	  setLazyConstant(math, 'magneticFluxQuantum', function () {
	    return fixedUnit('2.06783375846e-15 Wb');
	  });
	  setLazyConstant(math, 'nuclearMagneton', function () {
	    return fixedUnit('5.0507835311e-27 J T^-1');
	  });
	  setLazyConstant(math, 'klitzing', function () {
	    return fixedUnit('25812.807443484 ohm');
	  }); // setLazyConstant(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')})  // TODO: support for Hz needed
	  // Atomic and nuclear constants

	  setLazyConstant(math, 'bohrRadius', function () {
	    return fixedUnit('5.291772109217e-11 m');
	  });
	  setLazyConstant(math, 'classicalElectronRadius', function () {
	    return fixedUnit('2.817940326727e-15 m');
	  });
	  setLazyConstant(math, 'electronMass', function () {
	    return fixedUnit('9.1093829140e-31 kg');
	  });
	  setLazyConstant(math, 'fermiCoupling', function () {
	    return fixedUnit('1.1663645e-5 GeV^-2');
	  });
	  setLazyConstant(math, 'fineStructure', function () {
	    return 7.297352569824e-3;
	  });
	  setLazyConstant(math, 'hartreeEnergy', function () {
	    return fixedUnit('4.3597443419e-18 J');
	  });
	  setLazyConstant(math, 'protonMass', function () {
	    return fixedUnit('1.67262177774e-27 kg');
	  });
	  setLazyConstant(math, 'deuteronMass', function () {
	    return fixedUnit('3.3435830926e-27 kg');
	  });
	  setLazyConstant(math, 'neutronMass', function () {
	    return fixedUnit('1.6749271613e-27 kg');
	  });
	  setLazyConstant(math, 'quantumOfCirculation', function () {
	    return fixedUnit('3.636947552024e-4 m^2 s^-1');
	  });
	  setLazyConstant(math, 'rydberg', function () {
	    return fixedUnit('10973731.56853955 m^-1');
	  });
	  setLazyConstant(math, 'thomsonCrossSection', function () {
	    return fixedUnit('6.65245873413e-29 m^2');
	  });
	  setLazyConstant(math, 'weakMixingAngle', function () {
	    return 0.222321;
	  });
	  setLazyConstant(math, 'efimovFactor', function () {
	    return 22.7;
	  }); // Physico-chemical constants

	  setLazyConstant(math, 'atomicMass', function () {
	    return fixedUnit('1.66053892173e-27 kg');
	  });
	  setLazyConstant(math, 'avogadro', function () {
	    return fixedUnit('6.0221412927e23 mol^-1');
	  });
	  setLazyConstant(math, 'boltzmann', function () {
	    return fixedUnit('1.380648813e-23 J K^-1');
	  });
	  setLazyConstant(math, 'faraday', function () {
	    return fixedUnit('96485.336521 C mol^-1');
	  });
	  setLazyConstant(math, 'firstRadiation', function () {
	    return fixedUnit('3.7417715317e-16 W m^2');
	  }); // setLazyConstant(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}) // TODO spectralRadiance

	  setLazyConstant(math, 'loschmidt', function () {
	    return fixedUnit('2.686780524e25 m^-3');
	  });
	  setLazyConstant(math, 'gasConstant', function () {
	    return fixedUnit('8.314462175 J K^-1 mol^-1');
	  });
	  setLazyConstant(math, 'molarPlanckConstant', function () {
	    return fixedUnit('3.990312717628e-10 J s mol^-1');
	  });
	  setLazyConstant(math, 'molarVolume', function () {
	    return fixedUnit('2.241396820e-10 m^3 mol^-1');
	  });
	  setLazyConstant(math, 'sackurTetrode', function () {
	    return -1.164870823;
	  });
	  setLazyConstant(math, 'secondRadiation', function () {
	    return fixedUnit('1.438777013e-2 m K');
	  });
	  setLazyConstant(math, 'stefanBoltzmann', function () {
	    return fixedUnit('5.67037321e-8 W m^-2 K^-4');
	  });
	  setLazyConstant(math, 'wienDisplacement', function () {
	    return fixedUnit('2.897772126e-3 m K');
	  }); // Adopted values

	  setLazyConstant(math, 'molarMass', function () {
	    return fixedUnit('1e-3 kg mol^-1');
	  });
	  setLazyConstant(math, 'molarMassC12', function () {
	    return fixedUnit('1.2e-2 kg mol^-1');
	  });
	  setLazyConstant(math, 'gravity', function () {
	    return fixedUnit('9.80665 m s^-2');
	  }); // atm is defined in Unit.js
	  // Natural units

	  setLazyConstant(math, 'planckLength', function () {
	    return fixedUnit('1.61619997e-35 m');
	  });
	  setLazyConstant(math, 'planckMass', function () {
	    return fixedUnit('2.1765113e-8 kg');
	  });
	  setLazyConstant(math, 'planckTime', function () {
	    return fixedUnit('5.3910632e-44 s');
	  });
	  setLazyConstant(math, 'planckCharge', function () {
	    return fixedUnit('1.87554595641e-18 C');
	  });
	  setLazyConstant(math, 'planckTemperature', function () {
	    return fixedUnit('1.41683385e+32 K');
	  });
	} // create a lazy constant in both math and mathWithTransform


	function setLazyConstant(math, name, resolver) {
	  lazy$4(math, name, resolver);
	  lazy$4(math.expression.mathWithTransform, name, resolver);
	}

	var factory_1$Y = factory$Y;
	var lazy_1$2 = false; // no lazy loading of constants, the constants themselves are lazy when needed

	var math$5 = true; // request access to the math namespace

	var physicalConstants = {
		factory: factory_1$Y,
		lazy: lazy_1$2,
		math: math$5
	};

	var unit$1 = [// type
	Unit, // construction function
	unit, // create new units
	createUnit, // split units
	splitUnit, // physical constants
	physicalConstants];

	var type = [bignumber$1, boolean_1, chain$1, complex$2, fraction$2, matrix$1, number$3, numeric, resultset, string$5, unit$1];

	var version = '5.4.2'; // Note: This file is automatically generated when building math.js.

	function factory$Z(type, config, load, typed, math) {
	  // listen for changed in the configuration, automatically reload
	  // constants when needed
	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      factory$Z(type, config, load, typed, math);
	    }
	  });
	  setConstant(math, 'true', true);
	  setConstant(math, 'false', false);
	  setConstant(math, 'null', null);
	  setConstant(math, 'uninitialized', 'Error: Constant uninitialized is removed since v4.0.0. Use null instead');

	  if (config.number === 'BigNumber') {
	    setConstant(math, 'Infinity', new type.BigNumber(Infinity));
	    setConstant(math, 'NaN', new type.BigNumber(NaN));
	    setLazyConstant$1(math, 'pi', function () {
	      return constants.pi(type.BigNumber);
	    });
	    setLazyConstant$1(math, 'tau', function () {
	      return constants.tau(type.BigNumber);
	    });
	    setLazyConstant$1(math, 'e', function () {
	      return constants.e(type.BigNumber);
	    });
	    setLazyConstant$1(math, 'phi', function () {
	      return constants.phi(type.BigNumber);
	    }); // golden ratio, (1+sqrt(5))/2
	    // uppercase constants (for compatibility with built-in Math)

	    setLazyConstant$1(math, 'E', function () {
	      return math.e;
	    });
	    setLazyConstant$1(math, 'LN2', function () {
	      return new type.BigNumber(2).ln();
	    });
	    setLazyConstant$1(math, 'LN10', function () {
	      return new type.BigNumber(10).ln();
	    });
	    setLazyConstant$1(math, 'LOG2E', function () {
	      return new type.BigNumber(1).div(new type.BigNumber(2).ln());
	    });
	    setLazyConstant$1(math, 'LOG10E', function () {
	      return new type.BigNumber(1).div(new type.BigNumber(10).ln());
	    });
	    setLazyConstant$1(math, 'PI', function () {
	      return math.pi;
	    });
	    setLazyConstant$1(math, 'SQRT1_2', function () {
	      return new type.BigNumber('0.5').sqrt();
	    });
	    setLazyConstant$1(math, 'SQRT2', function () {
	      return new type.BigNumber(2).sqrt();
	    });
	  } else {
	    setConstant(math, 'Infinity', Infinity);
	    setConstant(math, 'NaN', NaN);
	    setConstant(math, 'pi', Math.PI);
	    setConstant(math, 'tau', Math.PI * 2);
	    setConstant(math, 'e', Math.E);
	    setConstant(math, 'phi', 1.61803398874989484820458683436563811772030917980576286213545); // golden ratio, (1+sqrt(5))/2
	    // uppercase constants (for compatibility with built-in Math)

	    setConstant(math, 'E', math.e);
	    setConstant(math, 'LN2', Math.LN2);
	    setConstant(math, 'LN10', Math.LN10);
	    setConstant(math, 'LOG2E', Math.LOG2E);
	    setConstant(math, 'LOG10E', Math.LOG10E);
	    setConstant(math, 'PI', math.pi);
	    setConstant(math, 'SQRT1_2', Math.SQRT1_2);
	    setConstant(math, 'SQRT2', Math.SQRT2);
	  } // complex i


	  if (type.Complex) {
	    setConstant(math, 'i', type.Complex.I);
	  } // meta information


	  setConstant(math, 'version', version);
	} // create a constant in both math and mathWithTransform


	function setConstant(math, name, value) {
	  math[name] = value;
	  math.expression.mathWithTransform[name] = value;
	} // create a lazy constant in both math and mathWithTransform


	function setLazyConstant$1(math, name, resolver) {
	  object.lazy(math, name, resolver);
	  object.lazy(math.expression.mathWithTransform, name, resolver);
	}

	var factory_1$Z = factory$Z;
	var lazy$5 = false; // no lazy loading of constants, the constants themselves are lazy when needed

	var math$6 = true; // request access to the math namespace

	var constants$1 = {
		factory: factory_1$Z,
		lazy: lazy$5,
		math: math$6
	};

	function _typeof$6(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }

	var hasOwnProperty = object.hasOwnProperty;
	/**
	 * Get a property of a plain object
	 * Throws an error in case the object is not a plain object or the
	 * property is not defined on the object itself
	 * @param {Object} object
	 * @param {string} prop
	 * @return {*} Returns the property value when safe
	 */


	function getSafeProperty(object, prop) {
	  // only allow getting safe properties of a plain object
	  if (isPlainObject(object) && isSafeProperty(object, prop)) {
	    return object[prop];
	  }

	  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
	    throw new Error('Cannot access method "' + prop + '" as a property');
	  }

	  throw new Error('No access to property "' + prop + '"');
	}
	/**
	 * Set a property on a plain object.
	 * Throws an error in case the object is not a plain object or the
	 * property would override an inherited property like .constructor or .toString
	 * @param {Object} object
	 * @param {string} prop
	 * @param {*} value
	 * @return {*} Returns the value
	 */
	// TODO: merge this function into access.js?


	function setSafeProperty(object, prop, value) {
	  // only allow setting safe properties of a plain object
	  if (isPlainObject(object) && isSafeProperty(object, prop)) {
	    object[prop] = value;
	    return value;
	  }

	  throw new Error('No access to property "' + prop + '"');
	}
	/**
	 * Test whether a property is safe to use for an object.
	 * For example .toString and .constructor are not safe
	 * @param {string} prop
	 * @return {boolean} Returns true when safe
	 */


	function isSafeProperty(object, prop) {
	  if (!object || _typeof$6(object) !== 'object') {
	    return false;
	  } // SAFE: whitelisted
	  // e.g length


	  if (hasOwnProperty(safeNativeProperties, prop)) {
	    return true;
	  } // UNSAFE: inherited from Object prototype
	  // e.g constructor


	  if (prop in Object.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Object.prototype is a root object
	    return false;
	  } // UNSAFE: inherited from Function prototype
	  // e.g call, apply


	  if (prop in Function.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Function.prototype is a root object
	    return false;
	  }

	  return true;
	}
	/**
	 * Validate whether a method is safe.
	 * Throws an error when that's not the case.
	 * @param {Object} object
	 * @param {string} method
	 */
	// TODO: merge this function into assign.js?


	function validateSafeMethod(object, method) {
	  if (!isSafeMethod(object, method)) {
	    throw new Error('No access to method "' + method + '"');
	  }
	}
	/**
	 * Check whether a method is safe.
	 * Throws an error when that's not the case (for example for `constructor`).
	 * @param {Object} object
	 * @param {string} method
	 * @return {boolean} Returns true when safe, false otherwise
	 */


	function isSafeMethod(object, method) {
	  if (!object || typeof object[method] !== 'function') {
	    return false;
	  } // UNSAFE: ghosted
	  // e.g overridden toString
	  // Note that IE10 doesn't support __proto__ and we can't do this check there.


	  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {
	    return false;
	  } // SAFE: whitelisted
	  // e.g toString


	  if (hasOwnProperty(safeNativeMethods, method)) {
	    return true;
	  } // UNSAFE: inherited from Object prototype
	  // e.g constructor


	  if (method in Object.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Object.prototype is a root object
	    return false;
	  } // UNSAFE: inherited from Function prototype
	  // e.g call, apply


	  if (method in Function.prototype) {
	    // 'in' is used instead of hasOwnProperty for nodejs v0.10
	    // which is inconsistent on root prototypes. It is safe
	    // here because Function.prototype is a root object
	    return false;
	  }

	  return true;
	}

	function isPlainObject(object) {
	  return _typeof$6(object) === 'object' && object && object.constructor === Object;
	}

	var safeNativeProperties = {
	  length: true,
	  name: true
	};
	var safeNativeMethods = {
	  toString: true,
	  valueOf: true,
	  toLocaleString: true
	};
	var getSafeProperty_1 = getSafeProperty;
	var setSafeProperty_1 = setSafeProperty;
	var isSafeProperty_1 = isSafeProperty;
	var validateSafeMethod_1 = validateSafeMethod;
	var isSafeMethod_1 = isSafeMethod;
	var isPlainObject_1 = isPlainObject;

	var customs = {
		getSafeProperty: getSafeProperty_1,
		setSafeProperty: setSafeProperty_1,
		isSafeProperty: isSafeProperty_1,
		validateSafeMethod: validateSafeMethod_1,
		isSafeMethod: isSafeMethod_1,
		isPlainObject: isPlainObject_1
	};

	var keywords = {
	  end: true
	};

	function _typeof$7(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$7 = function _typeof(obj) { return typeof obj; }; } else { _typeof$7 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$7(obj); }



	var deepEqual = object.deepEqual;

	var hasOwnProperty$1 = object.hasOwnProperty;

	function factory$_(type, config, load, typed, math) {
	  /**
	   * Node
	   */
	  function Node() {
	    if (!(this instanceof Node)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }
	  /**
	   * Evaluate the node
	   * @param {Object} [scope]  Scope to read/write variables
	   * @return {*}              Returns the result
	   */


	  Node.prototype.eval = function (scope) {
	    return this.compile().eval(scope);
	  };

	  Node.prototype.type = 'Node';
	  Node.prototype.isNode = true;
	  Node.prototype.comment = '';
	  /**
	   * Compile the node into an optimized, evauatable JavaScript function
	   * @return {{eval: function([Object])}} expr  Returns an object with a function 'eval',
	   *                                  which can be invoked as expr.eval([scope: Object]),
	   *                                  where scope is an optional object with
	   *                                  variables.
	   */

	  Node.prototype.compile = function () {
	    var expr = this._compile(math.expression.mathWithTransform, {});

	    var args = {};
	    var context = null;
	    return {
	      eval: function evalNode(scope) {
	        var s = scope || {};

	        _validateScope(s);

	        return expr(s, args, context);
	      }
	    };
	  };
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */


	  Node.prototype._compile = function (math, argNames) {
	    throw new Error('Method _compile should be implemented by type ' + this.type);
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  Node.prototype.forEach = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run forEach on a Node interface');
	  };
	  /**
	   * Create a new Node having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */


	  Node.prototype.map = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run map on a Node interface');
	  };
	  /**
	   * Validate whether an object is a Node, for use with map
	   * @param {Node} node
	   * @returns {Node} Returns the input if it's a node, else throws an Error
	   * @protected
	   */


	  Node.prototype._ifNode = function (node) {
	    if (!type.isNode(node)) {
	      throw new TypeError('Callback function must return a Node');
	    }

	    return node;
	  };
	  /**
	   * Recursively traverse all nodes in a node tree. Executes given callback for
	   * this node and each of its child nodes.
	   * @param {function(node: Node, path: string, parent: Node)} callback
	   *          A callback called for every node in the node tree.
	   */


	  Node.prototype.traverse = function (callback) {
	    // execute callback for itself
	    callback(this, null, null); // eslint-disable-line standard/no-callback-literal
	    // recursively traverse over all childs of a node

	    function _traverse(node, callback) {
	      node.forEach(function (child, path, parent) {
	        callback(child, path, parent);

	        _traverse(child, callback);
	      });
	    }

	    _traverse(this, callback);
	  };
	  /**
	   * Recursively transform a node tree via a transform function.
	   *
	   * For example, to replace all nodes of type SymbolNode having name 'x' with a
	   * ConstantNode with value 2:
	   *
	   *     const res = Node.transform(function (node, path, parent) {
	   *       if (node && node.isSymbolNode) && (node.name === 'x')) {
	   *         return new ConstantNode(2)
	   *       }
	   *       else {
	   *         return node
	   *       }
	   *     })
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *          A mapping function accepting a node, and returning
	   *          a replacement for the node or the original node.
	   *          Signature: callback(node: Node, index: string, parent: Node) : Node
	   * @return {Node} Returns the original node or its replacement
	   */


	  Node.prototype.transform = function (callback) {
	    // traverse over all childs
	    function _transform(node, callback) {
	      return node.map(function (child, path, parent) {
	        var replacement = callback(child, path, parent);
	        return _transform(replacement, callback);
	      });
	    }

	    var replacement = callback(this, null, null); // eslint-disable-line standard/no-callback-literal

	    return _transform(replacement, callback);
	  };
	  /**
	   * Find any node in the node tree matching given filter function. For example, to
	   * find all nodes of type SymbolNode having name 'x':
	   *
	   *     const results = Node.filter(function (node) {
	   *       return (node && node.isSymbolNode) && (node.name === 'x')
	   *     })
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *            A test function returning true when a node matches, and false
	   *            otherwise. Function signature:
	   *            callback(node: Node, index: string, parent: Node) : boolean
	   * @return {Node[]} nodes       An array with nodes matching given filter criteria
	   */


	  Node.prototype.filter = function (callback) {
	    var nodes = [];
	    this.traverse(function (node, path, parent) {
	      if (callback(node, path, parent)) {
	        nodes.push(node);
	      }
	    });
	    return nodes;
	  }; // TODO: deprecated since version 1.1.0, remove this some day


	  Node.prototype.find = function () {
	    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
	  }; // TODO: deprecated since version 1.1.0, remove this some day


	  Node.prototype.match = function () {
	    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
	  };
	  /**
	   * Create a shallow clone of this node
	   * @return {Node}
	   */


	  Node.prototype.clone = function () {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot clone a Node interface');
	  };
	  /**
	   * Create a deep clone of this node
	   * @return {Node}
	   */


	  Node.prototype.cloneDeep = function () {
	    return this.map(function (node) {
	      return node.cloneDeep();
	    });
	  };
	  /**
	   * Deep compare this node with another node.
	   * @param {Node} other
	   * @return {boolean} Returns true when both nodes are of the same type and
	   *                   contain the same values (as do their childs)
	   */


	  Node.prototype.equals = function (other) {
	    return other ? deepEqual(this, other) : false;
	  };
	  /**
	   * Get string representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */


	  Node.prototype.toString = function (options) {
	    var customString;

	    if (options && _typeof$7(options) === 'object') {
	      switch (_typeof$7(options.handler)) {
	        case 'object':
	        case 'undefined':
	          break;

	        case 'function':
	          customString = options.handler(this, options);
	          break;

	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    return this._toString(options);
	  };
	  /**
	   * Get a JSON representation of the node
	   * Both .toJSON() and the static .fromJSON(json) should be implemented by all
	   * implementations of Node
	   * @returns {Object}
	   */


	  Node.prototype.toJSON = function () {
	    throw new Error('Cannot serialize object: toJSON not implemented by ' + this.type);
	  };
	  /**
	   * Get HTML representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)" or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */


	  Node.prototype.toHTML = function (options) {
	    var customString;

	    if (options && _typeof$7(options) === 'object') {
	      switch (_typeof$7(options.handler)) {
	        case 'object':
	        case 'undefined':
	          break;

	        case 'function':
	          customString = options.handler(this, options);
	          break;

	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    }

	    return this.toHTML(options);
	  };
	  /**
	   * Internal function to generate the string output.
	   * This has to be implemented by every Node
	   *
	   * @throws {Error}
	   */


	  Node.prototype._toString = function () {
	    // must be implemented by each of the Node implementations
	    throw new Error('_toString not implemented for ' + this.type);
	  };
	  /**
	   * Get LaTeX representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */


	  Node.prototype.toTex = function (options) {
	    var customTex;

	    if (options && _typeof$7(options) === 'object') {
	      switch (_typeof$7(options.handler)) {
	        case 'object':
	        case 'undefined':
	          break;

	        case 'function':
	          customTex = options.handler(this, options);
	          break;

	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }

	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }

	    return this._toTex(options);
	  };
	  /**
	   * Internal function to generate the LaTeX output.
	   * This has to be implemented by every Node
	   *
	   * @param {Object} [options]
	   * @throws {Error}
	   */


	  Node.prototype._toTex = function (options) {
	    // must be implemented by each of the Node implementations
	    throw new Error('_toTex not implemented for ' + this.type);
	  };
	  /**
	   * Get identifier.
	   * @return {string}
	   */


	  Node.prototype.getIdentifier = function () {
	    return this.type;
	  };
	  /**
	   * Get the content of the current Node.
	   * @return {Node} node
	   **/


	  Node.prototype.getContent = function () {
	    return this;
	  };
	  /**
	   * Validate the symbol names of a scope.
	   * Throws an error when the scope contains an illegal symbol.
	   * @param {Object} scope
	   */


	  function _validateScope(scope) {
	    for (var symbol in scope) {
	      if (hasOwnProperty$1(scope, symbol)) {
	        if (symbol in keywords) {
	          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
	        }
	      }
	    }
	  }

	  return Node;
	}

	var name$T = 'Node';
	var path$e = 'expression.node';
	var math$7 = true; // request access to the math namespace as 5th argument of the factory function

	var factory_1$_ = factory$_;

	var Node$1 = {
		name: name$T,
		path: path$e,
		math: math$7,
		factory: factory_1$_
	};

	/**
	 * Transform zero-based indices to one-based indices in errors
	 * @param {Error} err
	 * @returns {Error} Returns the transformed error
	 */


	var transform = function (err) {
	  if (err && err.isIndexError) {
	    return new IndexError_1(err.index + 1, err.min + 1, err.max !== undefined ? err.max + 1 : undefined);
	  }

	  return err;
	};

	var error_transform = {
		transform: transform
	};

	var clone$4 = object.clone;

	var validateIndex$2 = array.validateIndex;

	var getSafeProperty$1 = customs.getSafeProperty;

	var setSafeProperty$1 = customs.setSafeProperty;



	function factory$$(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Get or set a subset of a matrix or string.
	   *
	   * Syntax:
	   *     math.subset(value, index)                                // retrieve a subset
	   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
	   *
	   * Examples:
	   *
	   *     // get a subset
	   *     const d = [[1, 2], [3, 4]]
	   *     math.subset(d, math.index(1, 0))        // returns 3
	   *     math.subset(d, math.index([0, 1], 1))   // returns [[2], [4]]
	   *
	   *     // replace a subset
	   *     const e = []
	   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 6]]
	   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 6], [0, 7]]
	   *
	   * See also:
	   *
	   *     size, resize, squeeze, index
	   *
	   * @param {Array | Matrix | string} matrix  An array, matrix, or string
	   * @param {Index} index                     An index containing ranges for each
	   *                                          dimension
	   * @param {*} [replacement]                 An array, matrix, or scalar.
	   *                                          If provided, the subset is replaced with replacement.
	   *                                          If not provided, the subset is returned
	   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
	   *                                          the matrix is resized. If not provided,
	   *                                          math.matrix elements will be left undefined.
	   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
	   */

	  var subset = typed('subset', {
	    // get subset
	    'Array, Index': function ArrayIndex(value, index) {
	      var m = matrix$1(value);
	      var subset = m.subset(index); // returns a Matrix

	      return index.isScalar() ? subset : subset.valueOf(); // return an Array (like the input)
	    },
	    'Matrix, Index': function MatrixIndex(value, index) {
	      return value.subset(index);
	    },
	    'Object, Index': _getObjectProperty,
	    'string, Index': _getSubstring,
	    // set subset
	    'Array, Index, any': function ArrayIndexAny(value, index, replacement) {
	      return matrix$1(clone$4(value)).subset(index, replacement, undefined).valueOf();
	    },
	    'Array, Index, any, any': function ArrayIndexAnyAny(value, index, replacement, defaultValue) {
	      return matrix$1(clone$4(value)).subset(index, replacement, defaultValue).valueOf();
	    },
	    'Matrix, Index, any': function MatrixIndexAny(value, index, replacement) {
	      return value.clone().subset(index, replacement);
	    },
	    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {
	      return value.clone().subset(index, replacement, defaultValue);
	    },
	    'string, Index, string': _setSubstring,
	    'string, Index, string, string': _setSubstring,
	    'Object, Index, any': _setObjectProperty
	  });
	  subset.toTex = undefined; // use default template

	  return subset;
	  /**
	   * Retrieve a subset of a string
	   * @param {string} str            string from which to get a substring
	   * @param {Index} index           An index containing ranges for each dimension
	   * @returns {string} substring
	   * @private
	   */

	  function _getSubstring(str, index) {
	    if (!type.isIndex(index)) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }

	    if (index.size().length !== 1) {
	      throw new DimensionError_1(index.size().length, 1);
	    } // validate whether the range is out of range


	    var strLen = str.length;
	    validateIndex$2(index.min()[0], strLen);
	    validateIndex$2(index.max()[0], strLen);
	    var range = index.dimension(0);
	    var substr = '';
	    range.forEach(function (v) {
	      substr += str.charAt(v);
	    });
	    return substr;
	  }
	  /**
	   * Replace a substring in a string
	   * @param {string} str            string to be replaced
	   * @param {Index} index           An index containing ranges for each dimension
	   * @param {string} replacement    Replacement string
	   * @param {string} [defaultValue] Default value to be uses when resizing
	   *                                the string. is ' ' by default
	   * @returns {string} result
	   * @private
	   */


	  function _setSubstring(str, index, replacement, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }

	    if (index.size().length !== 1) {
	      throw new DimensionError_1(index.size().length, 1);
	    }

	    if (defaultValue !== undefined) {
	      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    } else {
	      defaultValue = ' ';
	    }

	    var range = index.dimension(0);
	    var len = range.size()[0];

	    if (len !== replacement.length) {
	      throw new DimensionError_1(range.size()[0], replacement.length);
	    } // validate whether the range is out of range


	    var strLen = str.length;
	    validateIndex$2(index.min()[0]);
	    validateIndex$2(index.max()[0]); // copy the string into an array with characters

	    var chars = [];

	    for (var i = 0; i < strLen; i++) {
	      chars[i] = str.charAt(i);
	    }

	    range.forEach(function (v, i) {
	      chars[v] = replacement.charAt(i[0]);
	    }); // initialize undefined characters with a space

	    if (chars.length > strLen) {
	      for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {
	        if (!chars[_i]) {
	          chars[_i] = defaultValue;
	        }
	      }
	    }

	    return chars.join('');
	  }
	}
	/**
	 * Retrieve a property from an object
	 * @param {Object} object
	 * @param {Index} index
	 * @return {*} Returns the value of the property
	 * @private
	 */


	function _getObjectProperty(object, index) {
	  if (index.size().length !== 1) {
	    throw new DimensionError_1(index.size(), 1);
	  }

	  var key = index.dimension(0);

	  if (typeof key !== 'string') {
	    throw new TypeError('String expected as index to retrieve an object property');
	  }

	  return getSafeProperty$1(object, key);
	}
	/**
	 * Set a property on an object
	 * @param {Object} object
	 * @param {Index} index
	 * @param {*} replacement
	 * @return {*} Returns the updated object
	 * @private
	 */


	function _setObjectProperty(object, index, replacement) {
	  if (index.size().length !== 1) {
	    throw new DimensionError_1(index.size(), 1);
	  }

	  var key = index.dimension(0);

	  if (typeof key !== 'string') {
	    throw new TypeError('String expected as index to retrieve an object property');
	  } // clone the object, and apply the property to the clone


	  var updated = clone$4(object);
	  setSafeProperty$1(updated, key, replacement);
	  return updated;
	}

	var name$U = 'subset';
	var factory_1$$ = factory$$;

	var subset = {
		name: name$U,
		factory: factory_1$$
	};

	function _typeof$8(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$8 = function _typeof(obj) { return typeof obj; }; } else { _typeof$8 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$8(obj); }

	var errorTransform = error_transform.transform;

	var getSafeProperty$2 = customs.getSafeProperty;

	function factory$10(type, config, load, typed) {
	  var subset$1 = load(subset);
	  /**
	   * Retrieve part of an object:
	   *
	   * - Retrieve a property from an object
	   * - Retrieve a part of a string
	   * - Retrieve a matrix subset
	   *
	   * @param {Object | Array | Matrix | string} object
	   * @param {Index} index
	   * @return {Object | Array | Matrix | string} Returns the subset
	   */

	  return function access(object, index) {
	    try {
	      if (Array.isArray(object)) {
	        return subset$1(object, index);
	      } else if (object && typeof object.subset === 'function') {
	        // Matrix
	        return object.subset(index);
	      } else if (typeof object === 'string') {
	        // TODO: move getStringSubset into a separate util file, use that
	        return subset$1(object, index);
	      } else if (_typeof$8(object) === 'object') {
	        if (!index.isObjectProperty()) {
	          throw new TypeError('Cannot apply a numeric index as object property');
	        }

	        return getSafeProperty$2(object, index.getObjectProperty());
	      } else {
	        throw new TypeError('Cannot apply index: unsupported type of object');
	      }
	    } catch (err) {
	      throw errorTransform(err);
	    }
	  };
	}

	var factory_1$10 = factory$10;

	var access = {
		factory: factory_1$10
	};

	var getSafeProperty$3 = customs.getSafeProperty;

	function factory$11(type, config, load, typed) {
	  var Node = load(Node$1);
	  var access$1 = load(access);
	  /**
	   * @constructor AccessorNode
	   * @extends {Node}
	   * Access an object property or get a matrix subset
	   *
	   * @param {Node} object                 The object from which to retrieve
	   *                                      a property or subset.
	   * @param {IndexNode} index             IndexNode containing ranges
	   */

	  function AccessorNode(object, index) {
	    if (!(this instanceof AccessorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!type.isNode(object)) {
	      throw new TypeError('Node expected for parameter "object"');
	    }

	    if (!type.isIndexNode(index)) {
	      throw new TypeError('IndexNode expected for parameter "index"');
	    }

	    this.object = object || null;
	    this.index = index; // readonly property name

	    Object.defineProperty(this, 'name', {
	      get: function () {
	        if (this.index) {
	          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
	        } else {
	          return this.object.name || '';
	        }
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	  }

	  AccessorNode.prototype = new Node();
	  AccessorNode.prototype.type = 'AccessorNode';
	  AccessorNode.prototype.isAccessorNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  AccessorNode.prototype._compile = function (math, argNames) {
	    var evalObject = this.object._compile(math, argNames);

	    var evalIndex = this.index._compile(math, argNames);

	    if (this.index.isObjectProperty()) {
	      var prop = this.index.getObjectProperty();
	      return function evalAccessorNode(scope, args, context) {
	        return getSafeProperty$3(evalObject(scope, args, context), prop);
	      };
	    } else {
	      return function evalAccessorNode(scope, args, context) {
	        var object = evalObject(scope, args, context);
	        var index = evalIndex(scope, args, object); // we pass object here instead of context

	        return access$1(object, index);
	      };
	    }
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  AccessorNode.prototype.forEach = function (callback) {
	    callback(this.object, 'object', this);
	    callback(this.index, 'index', this);
	  };
	  /**
	   * Create a new AccessorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AccessorNode} Returns a transformed copy of the node
	   */


	  AccessorNode.prototype.map = function (callback) {
	    return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AccessorNode}
	   */


	  AccessorNode.prototype.clone = function () {
	    return new AccessorNode(this.object, this.index);
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */


	  AccessorNode.prototype._toString = function (options) {
	    var object = this.object.toString(options);

	    if (needParenthesis(this.object)) {
	      object = '(' + object + ')';
	    }

	    return object + this.index.toString(options);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string}
	   */


	  AccessorNode.prototype.toHTML = function (options) {
	    var object = this.object.toHTML(options);

	    if (needParenthesis(this.object)) {
	      object = '<span class="math-parenthesis math-round-parenthesis">(</span>' + object + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    return object + this.index.toHTML(options);
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */


	  AccessorNode.prototype._toTex = function (options) {
	    var object = this.object.toTex(options);

	    if (needParenthesis(this.object)) {
	      object = "\\left(' + object + '\\right)";
	    }

	    return object + this.index.toTex(options);
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  AccessorNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'AccessorNode',
	      object: this.object,
	      index: this.index
	    };
	  };
	  /**
	   * Instantiate an AccessorNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "AccessorNode", object: ..., index: ...}`,
	   *                       where mathjs is optional
	   * @returns {AccessorNode}
	   */


	  AccessorNode.fromJSON = function (json) {
	    return new AccessorNode(json.object, json.index);
	  };
	  /**
	   * Are parenthesis needed?
	   * @private
	   */


	  function needParenthesis(node) {
	    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
	    return !(type.isAccessorNode(node) || type.isArrayNode(node) || type.isConstantNode(node) || type.isFunctionNode(node) || type.isObjectNode(node) || type.isParenthesisNode(node) || type.isSymbolNode(node));
	  }

	  return AccessorNode;
	}

	var name$V = 'AccessorNode';
	var path$f = 'expression.node';
	var factory_1$11 = factory$11;

	var AccessorNode = {
		name: name$V,
		path: path$f,
		factory: factory_1$11
	};

	var map = array.map;

	function factory$12(type, config, load, typed) {
	  var Node = load(Node$1);
	  /**
	   * @constructor ArrayNode
	   * @extends {Node}
	   * Holds an 1-dimensional array with items
	   * @param {Node[]} [items]   1 dimensional array with items
	   */

	  function ArrayNode(items) {
	    if (!(this instanceof ArrayNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.items = items || []; // validate input

	    if (!Array.isArray(this.items) || !this.items.every(type.isNode)) {
	      throw new TypeError('Array containing Nodes expected');
	    } // TODO: deprecated since v3, remove some day


	    var deprecated = function deprecated() {
	      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
	    };

	    Object.defineProperty(this, 'nodes', {
	      get: deprecated,
	      set: deprecated
	    });
	  }

	  ArrayNode.prototype = new Node();
	  ArrayNode.prototype.type = 'ArrayNode';
	  ArrayNode.prototype.isArrayNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  ArrayNode.prototype._compile = function (math, argNames) {
	    var evalItems = map(this.items, function (item) {
	      return item._compile(math, argNames);
	    });
	    var asMatrix = math.config().matrix !== 'Array';

	    if (asMatrix) {
	      var matrix = math.matrix;
	      return function evalArrayNode(scope, args, context) {
	        return matrix(map(evalItems, function (evalItem) {
	          return evalItem(scope, args, context);
	        }));
	      };
	    } else {
	      return function evalArrayNode(scope, args, context) {
	        return map(evalItems, function (evalItem) {
	          return evalItem(scope, args, context);
	        });
	      };
	    }
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  ArrayNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.items.length; i++) {
	      var node = this.items[i];
	      callback(node, 'items[' + i + ']', this);
	    }
	  };
	  /**
	   * Create a new ArrayNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ArrayNode} Returns a transformed copy of the node
	   */


	  ArrayNode.prototype.map = function (callback) {
	    var items = [];

	    for (var i = 0; i < this.items.length; i++) {
	      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
	    }

	    return new ArrayNode(items);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ArrayNode}
	   */


	  ArrayNode.prototype.clone = function () {
	    return new ArrayNode(this.items.slice(0));
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  ArrayNode.prototype._toString = function (options) {
	    var items = this.items.map(function (node) {
	      return node.toString(options);
	    });
	    return '[' + items.join(', ') + ']';
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  ArrayNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ArrayNode',
	      items: this.items
	    };
	  };
	  /**
	   * Instantiate an ArrayNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ArrayNode", items: [...]}`,
	   *                       where mathjs is optional
	   * @returns {ArrayNode}
	   */


	  ArrayNode.fromJSON = function (json) {
	    return new ArrayNode(json.items);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  ArrayNode.prototype.toHTML = function (options) {
	    var items = this.items.map(function (node) {
	      return node.toHTML(options);
	    });
	    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + items.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  ArrayNode.prototype._toTex = function (options) {
	    var s = '\\begin{bmatrix}';
	    this.items.forEach(function (node) {
	      if (node.items) {
	        s += node.items.map(function (childNode) {
	          return childNode.toTex(options);
	        }).join('&');
	      } else {
	        s += node.toTex(options);
	      } // new line


	      s += '\\\\';
	    });
	    s += '\\end{bmatrix}';
	    return s;
	  };

	  return ArrayNode;
	}

	var name$W = 'ArrayNode';
	var path$g = 'expression.node';
	var factory_1$12 = factory$12;

	var ArrayNode = {
		name: name$W,
		path: path$g,
		factory: factory_1$12
	};

	function _typeof$9(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$9 = function _typeof(obj) { return typeof obj; }; } else { _typeof$9 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$9(obj); }

	var errorTransform$1 = error_transform.transform;

	var setSafeProperty$2 = customs.setSafeProperty;

	function factory$13(type, config, load, typed) {
	  var subset$1 = load(subset);
	  var matrix$1 = load(matrix);
	  /**
	   * Replace part of an object:
	   *
	   * - Assign a property to an object
	   * - Replace a part of a string
	   * - Replace a matrix subset
	   *
	   * @param {Object | Array | Matrix | string} object
	   * @param {Index} index
	   * @param {*} value
	   * @return {Object | Array | Matrix | string} Returns the original object
	   *                                            except in case of a string
	   */
	  // TODO: change assign to return the value instead of the object

	  return function assign(object, index, value) {
	    try {
	      if (Array.isArray(object)) {
	        return matrix$1(object).subset(index, value).valueOf();
	      } else if (object && typeof object.subset === 'function') {
	        // Matrix
	        return object.subset(index, value);
	      } else if (typeof object === 'string') {
	        // TODO: move setStringSubset into a separate util file, use that
	        return subset$1(object, index, value);
	      } else if (_typeof$9(object) === 'object') {
	        if (!index.isObjectProperty()) {
	          throw TypeError('Cannot apply a numeric index as object property');
	        }

	        setSafeProperty$2(object, index.getObjectProperty(), value);
	        return object;
	      } else {
	        throw new TypeError('Cannot apply index: unsupported type of object');
	      }
	    } catch (err) {
	      throw errorTransform$1(err);
	    }
	  };
	}

	var factory_1$13 = factory$13;

	var assign = {
		factory: factory_1$13
	};

	// also contains information about left/right associativity
	// and which other operator the operator is associative with
	// Example:
	// addition is associative with addition and subtraction, because:
	// (a+b)+c=a+(b+c)
	// (a+b)-c=a+(b-c)
	//
	// postfix operators are left associative, prefix operators
	// are right associative
	//
	// It's also possible to set the following properties:
	// latexParens: if set to false, this node doesn't need to be enclosed
	//              in parentheses when using LaTeX
	// latexLeftParens: if set to false, this !OperatorNode's!
	//                  left argument doesn't need to be enclosed
	//                  in parentheses
	// latexRightParens: the same for the right argument

	var properties = [{
	  // assignment
	  'AssignmentNode': {},
	  'FunctionAssignmentNode': {}
	}, {
	  // conditional expression
	  'ConditionalNode': {
	    latexLeftParens: false,
	    latexRightParens: false,
	    latexParens: false // conditionals don't need parentheses in LaTeX because
	    // they are 2 dimensional

	  }
	}, {
	  // logical or
	  'OperatorNode:or': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // logical xor
	  'OperatorNode:xor': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // logical and
	  'OperatorNode:and': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // bitwise or
	  'OperatorNode:bitOr': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // bitwise xor
	  'OperatorNode:bitXor': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // bitwise and
	  'OperatorNode:bitAnd': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // relational operators
	  'OperatorNode:equal': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:unequal': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:smaller': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:larger': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:smallerEq': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:largerEq': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'RelationalNode': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // bitshift operators
	  'OperatorNode:leftShift': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:rightArithShift': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:rightLogShift': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // unit conversion
	  'OperatorNode:to': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // range
	  'RangeNode': {}
	}, {
	  // addition, subtraction
	  'OperatorNode:add': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
	  },
	  'OperatorNode:subtract': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // multiply, divide, modulus
	  'OperatorNode:multiply': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'Operator:dotMultiply', 'Operator:dotDivide']
	  },
	  'OperatorNode:divide': {
	    associativity: 'left',
	    associativeWith: [],
	    latexLeftParens: false,
	    latexRightParens: false,
	    latexParens: false // fractions don't require parentheses because
	    // they're 2 dimensional, so parens aren't needed
	    // in LaTeX

	  },
	  'OperatorNode:dotMultiply': {
	    associativity: 'left',
	    associativeWith: ['OperatorNode:multiply', 'OperatorNode:divide', 'OperatorNode:dotMultiply', 'OperatorNode:doDivide']
	  },
	  'OperatorNode:dotDivide': {
	    associativity: 'left',
	    associativeWith: []
	  },
	  'OperatorNode:mod': {
	    associativity: 'left',
	    associativeWith: []
	  }
	}, {
	  // unary prefix operators
	  'OperatorNode:unaryPlus': {
	    associativity: 'right'
	  },
	  'OperatorNode:unaryMinus': {
	    associativity: 'right'
	  },
	  'OperatorNode:bitNot': {
	    associativity: 'right'
	  },
	  'OperatorNode:not': {
	    associativity: 'right'
	  }
	}, {
	  // exponentiation
	  'OperatorNode:pow': {
	    associativity: 'right',
	    associativeWith: [],
	    latexRightParens: false // the exponent doesn't need parentheses in
	    // LaTeX because it's 2 dimensional
	    // (it's on top)

	  },
	  'OperatorNode:dotPow': {
	    associativity: 'right',
	    associativeWith: []
	  }
	}, {
	  // factorial
	  'OperatorNode:factorial': {
	    associativity: 'left'
	  }
	}, {
	  // matrix transpose
	  'OperatorNode:transpose': {
	    associativity: 'left'
	  }
	}];
	/**
	 * Get the precedence of a Node.
	 * Higher number for higher precedence, starting with 0.
	 * Returns null if the precedence is undefined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {number|null}
	 */

	function getPrecedence(_node, parenthesis) {
	  var node = _node;

	  if (parenthesis !== 'keep') {
	    // ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }

	  var identifier = node.getIdentifier();

	  for (var i = 0; i < properties.length; i++) {
	    if (identifier in properties[i]) {
	      return i;
	    }
	  }

	  return null;
	}
	/**
	 * Get the associativity of an operator (left or right).
	 * Returns a string containing 'left' or 'right' or null if
	 * the associativity is not defined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {string|null}
	 * @throws {Error}
	 */


	function getAssociativity(_node, parenthesis) {
	  var node = _node;

	  if (parenthesis !== 'keep') {
	    // ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }

	  var identifier = node.getIdentifier();
	  var index = getPrecedence(node, parenthesis);

	  if (index === null) {
	    // node isn't in the list
	    return null;
	  }

	  var property = properties[index][identifier];

	  if (property.hasOwnProperty('associativity')) {
	    if (property.associativity === 'left') {
	      return 'left';
	    }

	    if (property.associativity === 'right') {
	      return 'right';
	    } // associativity is invalid


	    throw Error('\'' + identifier + '\' has the invalid associativity \'' + property.associativity + '\'.');
	  } // associativity is undefined


	  return null;
	}
	/**
	 * Check if an operator is associative with another operator.
	 * Returns either true or false or null if not defined.
	 *
	 * @param {Node} nodeA
	 * @param {Node} nodeB
	 * @param {string} parenthesis
	 * @return {bool|null}
	 */


	function isAssociativeWith(nodeA, nodeB, parenthesis) {
	  // ParenthesisNodes are only ignored when not in 'keep' mode
	  var a = parenthesis !== 'keep' ? nodeA.getContent() : nodeA;
	  var b = parenthesis !== 'keep' ? nodeA.getContent() : nodeB;
	  var identifierA = a.getIdentifier();
	  var identifierB = b.getIdentifier();
	  var index = getPrecedence(a, parenthesis);

	  if (index === null) {
	    // node isn't in the list
	    return null;
	  }

	  var property = properties[index][identifierA];

	  if (property.hasOwnProperty('associativeWith') && property.associativeWith instanceof Array) {
	    for (var i = 0; i < property.associativeWith.length; i++) {
	      if (property.associativeWith[i] === identifierB) {
	        return true;
	      }
	    }

	    return false;
	  } // associativeWith is not defined


	  return null;
	}

	var properties_1 = properties;
	var getPrecedence_1 = getPrecedence;
	var getAssociativity_1 = getAssociativity;
	var isAssociativeWith_1 = isAssociativeWith;

	var operators = {
		properties: properties_1,
		getPrecedence: getPrecedence_1,
		getAssociativity: getAssociativity_1,
		isAssociativeWith: isAssociativeWith_1
	};

	var getSafeProperty$4 = customs.getSafeProperty;

	var setSafeProperty$3 = customs.setSafeProperty;

	function factory$14(type, config, load, typed) {
	  var Node = load(Node$1);
	  var assign$1 = load(assign);
	  var access$1 = load(access);

	  var operators$1 = operators;
	  /**
	   * @constructor AssignmentNode
	   * @extends {Node}
	   *
	   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
	   * replace a subset of a matrix like `A[2,2]=42`.
	   *
	   * Syntax:
	   *
	   *     new AssignmentNode(symbol, value)
	   *     new AssignmentNode(object, index, value)
	   *
	   * Usage:
	   *
	   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))                       // a=2
	   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
	   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
	   *
	   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
	   * @param {IndexNode} [index=null]            Index, property name or matrix
	   *                                            index. Optional. If not provided
	   *                                            and `object` is a SymbolNode,
	   *                                            the property is assigned to the
	   *                                            global scope.
	   * @param {Node} value                        The value to be assigned
	   */


	  function AssignmentNode(object, index, value) {
	    if (!(this instanceof AssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.object = object;
	    this.index = value ? index : null;
	    this.value = value || index; // validate input

	    if (!type.isSymbolNode(object) && !type.isAccessorNode(object)) {
	      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
	    }

	    if (type.isSymbolNode(object) && object.name === 'end') {
	      throw new Error('Cannot assign to symbol "end"');
	    }

	    if (this.index && !type.isIndexNode(this.index)) {
	      // index is optional
	      throw new TypeError('IndexNode expected as "index"');
	    }

	    if (!type.isNode(this.value)) {
	      throw new TypeError('Node expected as "value"');
	    } // readonly property name


	    Object.defineProperty(this, 'name', {
	      get: function () {
	        if (this.index) {
	          return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
	        } else {
	          return this.object.name || '';
	        }
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	  }

	  AssignmentNode.prototype = new Node();
	  AssignmentNode.prototype.type = 'AssignmentNode';
	  AssignmentNode.prototype.isAssignmentNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  AssignmentNode.prototype._compile = function (math, argNames) {
	    var evalObject = this.object._compile(math, argNames);

	    var evalIndex = this.index ? this.index._compile(math, argNames) : null;

	    var evalValue = this.value._compile(math, argNames);

	    var name = this.object.name;

	    if (!this.index) {
	      // apply a variable to the scope, for example `a=2`
	      if (!type.isSymbolNode(this.object)) {
	        throw new TypeError('SymbolNode expected as object');
	      }

	      return function evalAssignmentNode(scope, args, context) {
	        return setSafeProperty$3(scope, name, evalValue(scope, args, context));
	      };
	    } else if (this.index.isObjectProperty()) {
	      // apply an object property for example `a.b=2`
	      var prop = this.index.getObjectProperty();
	      return function evalAssignmentNode(scope, args, context) {
	        var object = evalObject(scope, args, context);
	        var value = evalValue(scope, args, context);
	        return setSafeProperty$3(object, prop, value);
	      };
	    } else if (type.isSymbolNode(this.object)) {
	      // update a matrix subset, for example `a[2]=3`
	      return function evalAssignmentNode(scope, args, context) {
	        var childObject = evalObject(scope, args, context);
	        var value = evalValue(scope, args, context);
	        var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

	        setSafeProperty$3(scope, name, assign$1(childObject, index, value));
	        return value;
	      };
	    } else {
	      // type.isAccessorNode(node.object) === true
	      // update a matrix subset, for example `a.b[2]=3`
	      // we will not use the compile function of the AccessorNode, but compile it
	      // ourselves here as we need the parent object of the AccessorNode:
	      // wee need to apply the updated object to parent object
	      var evalParentObject = this.object.object._compile(math, argNames);

	      if (this.object.index.isObjectProperty()) {
	        var parentProp = this.object.index.getObjectProperty();
	        return function evalAssignmentNode(scope, args, context) {
	          var parent = evalParentObject(scope, args, context);
	          var childObject = getSafeProperty$4(parent, parentProp);
	          var index = evalIndex(scope, args, childObject); // Important: we pass childObject instead of context

	          var value = evalValue(scope, args, context);
	          setSafeProperty$3(parent, parentProp, assign$1(childObject, index, value));
	          return value;
	        };
	      } else {
	        // if some parameters use the 'end' parameter, we need to calculate the size
	        var evalParentIndex = this.object.index._compile(math, argNames);

	        return function evalAssignmentNode(scope, args, context) {
	          var parent = evalParentObject(scope, args, context);
	          var parentIndex = evalParentIndex(scope, args, parent); // Important: we pass parent instead of context

	          var childObject = access$1(parent, parentIndex);
	          var index = evalIndex(scope, args, childObject); // Important:  we pass childObject instead of context

	          var value = evalValue(scope, args, context);
	          assign$1(parent, parentIndex, assign$1(childObject, index, value));
	          return value;
	        };
	      }
	    }
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  AssignmentNode.prototype.forEach = function (callback) {
	    callback(this.object, 'object', this);

	    if (this.index) {
	      callback(this.index, 'index', this);
	    }

	    callback(this.value, 'value', this);
	  };
	  /**
	   * Create a new AssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AssignmentNode} Returns a transformed copy of the node
	   */


	  AssignmentNode.prototype.map = function (callback) {
	    var object = this._ifNode(callback(this.object, 'object', this));

	    var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;

	    var value = this._ifNode(callback(this.value, 'value', this));

	    return new AssignmentNode(object, index, value);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AssignmentNode}
	   */


	  AssignmentNode.prototype.clone = function () {
	    return new AssignmentNode(this.object, this.index, this.value);
	  };
	  /*
	   * Is parenthesis needed?
	   * @param {node} node
	   * @param {string} [parenthesis='keep']
	   * @private
	   */


	  function needParenthesis(node, parenthesis) {
	    if (!parenthesis) {
	      parenthesis = 'keep';
	    }

	    var precedence = operators$1.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators$1.getPrecedence(node.value, parenthesis);
	    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
	  }
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */


	  AssignmentNode.prototype._toString = function (options) {
	    var object = this.object.toString(options);
	    var index = this.index ? this.index.toString(options) : '';
	    var value = this.value.toString(options);

	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '(' + value + ')';
	    }

	    return object + index + ' = ' + value;
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  AssignmentNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'AssignmentNode',
	      object: this.object,
	      index: this.index,
	      value: this.value
	    };
	  };
	  /**
	   * Instantiate an AssignmentNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "AssignmentNode", object: ..., index: ..., value: ...}`,
	   *                       where mathjs is optional
	   * @returns {AssignmentNode}
	   */


	  AssignmentNode.fromJSON = function (json) {
	    return new AssignmentNode(json.object, json.index, json.value);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string}
	   */


	  AssignmentNode.prototype.toHTML = function (options) {
	    var object = this.object.toHTML(options);
	    var index = this.index ? this.index.toHTML(options) : '';
	    var value = this.value.toHTML(options);

	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '<span class="math-paranthesis math-round-parenthesis">(</span>' + value + '<span class="math-paranthesis math-round-parenthesis">)</span>';
	    }

	    return object + index + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + value;
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */


	  AssignmentNode.prototype._toTex = function (options) {
	    var object = this.object.toTex(options);
	    var index = this.index ? this.index.toTex(options) : '';
	    var value = this.value.toTex(options);

	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = "\\left(".concat(value, "\\right)");
	    }

	    return object + index + ':=' + value;
	  };

	  return AssignmentNode;
	}

	var name$X = 'AssignmentNode';
	var path$h = 'expression.node';
	var factory_1$14 = factory$14;

	var AssignmentNode = {
		name: name$X,
		path: path$h,
		factory: factory_1$14
	};

	var forEach = array.forEach;

	var map$1 = array.map;

	function factory$15(type, config, load, typed) {
	  var Node = load(Node$1);
	  var ResultSet$1 = load(ResultSet);
	  /**
	   * @constructor BlockNode
	   * @extends {Node}
	   * Holds a set with blocks
	   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
	   *            An array with blocks, where a block is constructed as an Object
	   *            with properties block, which is a Node, and visible, which is
	   *            a boolean. The property visible is optional and is true by default
	   */

	  function BlockNode(blocks) {
	    if (!(this instanceof BlockNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    } // validate input, copy blocks


	    if (!Array.isArray(blocks)) throw new Error('Array expected');
	    this.blocks = blocks.map(function (block) {
	      var node = block && block.node;
	      var visible = block && block.visible !== undefined ? block.visible : true;
	      if (!type.isNode(node)) throw new TypeError('Property "node" must be a Node');
	      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
	      return {
	        node: node,
	        visible: visible
	      };
	    });
	  }

	  BlockNode.prototype = new Node();
	  BlockNode.prototype.type = 'BlockNode';
	  BlockNode.prototype.isBlockNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  BlockNode.prototype._compile = function (math, argNames) {
	    var evalBlocks = map$1(this.blocks, function (block) {
	      return {
	        eval: block.node._compile(math, argNames),
	        visible: block.visible
	      };
	    });
	    return function evalBlockNodes(scope, args, context) {
	      var results = [];
	      forEach(evalBlocks, function evalBlockNode(block) {
	        var result = block.eval(scope, args, context);

	        if (block.visible) {
	          results.push(result);
	        }
	      });
	      return new ResultSet$1(results);
	    };
	  };
	  /**
	   * Execute a callback for each of the child blocks of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  BlockNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.blocks.length; i++) {
	      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
	    }
	  };
	  /**
	   * Create a new BlockNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {BlockNode} Returns a transformed copy of the node
	   */


	  BlockNode.prototype.map = function (callback) {
	    var blocks = [];

	    for (var i = 0; i < this.blocks.length; i++) {
	      var block = this.blocks[i];

	      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));

	      blocks[i] = {
	        node: node,
	        visible: block.visible
	      };
	    }

	    return new BlockNode(blocks);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {BlockNode}
	   */


	  BlockNode.prototype.clone = function () {
	    var blocks = this.blocks.map(function (block) {
	      return {
	        node: block.node,
	        visible: block.visible
	      };
	    });
	    return new BlockNode(blocks);
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  BlockNode.prototype._toString = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toString(options) + (param.visible ? '' : ';');
	    }).join('\n');
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  BlockNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'BlockNode',
	      blocks: this.blocks
	    };
	  };
	  /**
	   * Instantiate an BlockNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "BlockNode", blocks: [{node: ..., visible: false}, ...]}`,
	   *                       where mathjs is optional
	   * @returns {BlockNode}
	   */


	  BlockNode.fromJSON = function (json) {
	    return new BlockNode(json.blocks);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  BlockNode.prototype.toHTML = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toHTML(options) + (param.visible ? '' : '<span class="math-separator">;</span>');
	    }).join('<span class="math-separator"><br /></span>');
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  BlockNode.prototype._toTex = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toTex(options) + (param.visible ? '' : ';');
	    }).join('\\;\\;\n');
	  };

	  return BlockNode;
	}

	var name$Y = 'BlockNode';
	var path$i = 'expression.node';
	var factory_1$15 = factory$15;

	var BlockNode = {
		name: name$Y,
		path: path$i,
		factory: factory_1$15
	};

	function factory$16(type, config, load, typed) {
	  var Node = load(Node$1);
	  var mathTypeOf = load(_typeof$4);
	  /**
	   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
	   *
	   * @param {Node} condition   Condition, must result in a boolean
	   * @param {Node} trueExpr    Expression evaluated when condition is true
	   * @param {Node} falseExpr   Expression evaluated when condition is true
	   *
	   * @constructor ConditionalNode
	   * @extends {Node}
	   */

	  function ConditionalNode(condition, trueExpr, falseExpr) {
	    if (!(this instanceof ConditionalNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!type.isNode(condition)) throw new TypeError('Parameter condition must be a Node');
	    if (!type.isNode(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
	    if (!type.isNode(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
	    this.condition = condition;
	    this.trueExpr = trueExpr;
	    this.falseExpr = falseExpr;
	  }

	  ConditionalNode.prototype = new Node();
	  ConditionalNode.prototype.type = 'ConditionalNode';
	  ConditionalNode.prototype.isConditionalNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  ConditionalNode.prototype._compile = function (math, argNames) {
	    var evalCondition = this.condition._compile(math, argNames);

	    var evalTrueExpr = this.trueExpr._compile(math, argNames);

	    var evalFalseExpr = this.falseExpr._compile(math, argNames);

	    return function evalConditionalNode(scope, args, context) {
	      return testCondition(evalCondition(scope, args, context)) ? evalTrueExpr(scope, args, context) : evalFalseExpr(scope, args, context);
	    };
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  ConditionalNode.prototype.forEach = function (callback) {
	    callback(this.condition, 'condition', this);
	    callback(this.trueExpr, 'trueExpr', this);
	    callback(this.falseExpr, 'falseExpr', this);
	  };
	  /**
	   * Create a new ConditionalNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ConditionalNode} Returns a transformed copy of the node
	   */


	  ConditionalNode.prototype.map = function (callback) {
	    return new ConditionalNode(this._ifNode(callback(this.condition, 'condition', this)), this._ifNode(callback(this.trueExpr, 'trueExpr', this)), this._ifNode(callback(this.falseExpr, 'falseExpr', this)));
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConditionalNode}
	   */


	  ConditionalNode.prototype.clone = function () {
	    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  ConditionalNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
	    // or have lower or equal precedence
	    // NOTE: enclosing all OperatorNodes in parentheses is a decision
	    // purely based on aesthetics and readability

	    var condition = this.condition.toString(options);
	    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);

	    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
	      condition = '(' + condition + ')';
	    }

	    var trueExpr = this.trueExpr.toString(options);
	    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);

	    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
	      trueExpr = '(' + trueExpr + ')';
	    }

	    var falseExpr = this.falseExpr.toString(options);
	    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);

	    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
	      falseExpr = '(' + falseExpr + ')';
	    }

	    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  ConditionalNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ConditionalNode',
	      condition: this.condition,
	      trueExpr: this.trueExpr,
	      falseExpr: this.falseExpr
	    };
	  };
	  /**
	   * Instantiate an ConditionalNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ConditionalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
	   *                       where mathjs is optional
	   * @returns {ConditionalNode}
	   */


	  ConditionalNode.fromJSON = function (json) {
	    return new ConditionalNode(json.condition, json.trueExpr, json.falseExpr);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  ConditionalNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis); // Enclose Arguments in parentheses if they are an OperatorNode
	    // or have lower or equal precedence
	    // NOTE: enclosing all OperatorNodes in parentheses is a decision
	    // purely based on aesthetics and readability

	    var condition = this.condition.toHTML(options);
	    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);

	    if (parenthesis === 'all' || this.condition.type === 'OperatorNode' || conditionPrecedence !== null && conditionPrecedence <= precedence) {
	      condition = '<span class="math-parenthesis math-round-parenthesis">(</span>' + condition + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    var trueExpr = this.trueExpr.toHTML(options);
	    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);

	    if (parenthesis === 'all' || this.trueExpr.type === 'OperatorNode' || truePrecedence !== null && truePrecedence <= precedence) {
	      trueExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + trueExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    var falseExpr = this.falseExpr.toHTML(options);
	    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);

	    if (parenthesis === 'all' || this.falseExpr.type === 'OperatorNode' || falsePrecedence !== null && falsePrecedence <= precedence) {
	      falseExpr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + falseExpr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    return condition + '<span class="math-operator math-conditional-operator">?</span>' + trueExpr + '<span class="math-operator math-conditional-operator">:</span>' + falseExpr;
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  ConditionalNode.prototype._toTex = function (options) {
	    return '\\begin{cases} {' + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;' + this.condition.toTex(options) + '}\\\\{' + this.falseExpr.toTex(options) + '}, &\\quad{\\text{otherwise}}\\end{cases}';
	  };
	  /**
	   * Test whether a condition is met
	   * @param {*} condition
	   * @returns {boolean} true if condition is true or non-zero, else false
	   */


	  function testCondition(condition) {
	    if (typeof condition === 'number' || typeof condition === 'boolean' || typeof condition === 'string') {
	      return !!condition;
	    }

	    if (condition) {
	      if (type.isBigNumber(condition)) {
	        return !condition.isZero();
	      }

	      if (type.isComplex(condition)) {
	        return !!(condition.re || condition.im);
	      }

	      if (type.isUnit(condition)) {
	        return !!condition.value;
	      }
	    }

	    if (condition === null || condition === undefined) {
	      return false;
	    }

	    throw new TypeError('Unsupported type of condition "' + mathTypeOf(condition) + '"');
	  }

	  return ConditionalNode;
	}

	var name$Z = 'ConditionalNode';
	var path$j = 'expression.node';
	var factory_1$16 = factory$16;

	var ConditionalNode = {
		name: name$Z,
		path: path$j,
		factory: factory_1$16
	};

	var format$3 = string.format;

	var escapeLatex = latex.escape;

	function factory$17(type, config, load, typed) {
	  var Node = load(Node$1);
	  var getType = load(_typeof$4);
	  /**
	   * A ConstantNode holds a constant value like a number or string.
	   *
	   * Usage:
	   *
	   *     new ConstantNode(2.3)
	   *     new ConstantNode('hello')
	   *
	   * @param {*} value    Value can be any type (number, BigNumber, string, ...)
	   * @constructor ConstantNode
	   * @extends {Node}
	   */

	  function ConstantNode(value) {
	    if (!(this instanceof ConstantNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (arguments.length === 2) {
	      // TODO: remove deprecation error some day (created 2018-01-23)
	      throw new SyntaxError('new ConstantNode(valueStr, valueType) is not supported anymore since math v4.0.0. Use new ConstantNode(value) instead, where value is a non-stringified value.');
	    }

	    this.value = value;
	  }

	  ConstantNode.prototype = new Node();
	  ConstantNode.prototype.type = 'ConstantNode';
	  ConstantNode.prototype.isConstantNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  ConstantNode.prototype._compile = function (math, argNames) {
	    var value = this.value;
	    return function evalConstantNode() {
	      return value;
	    };
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  ConstantNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs

	  /**
	   * Create a new ConstantNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ConstantNode} Returns a clone of the node
	   */
	  ;

	  ConstantNode.prototype.map = function (callback) {
	    return this.clone();
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConstantNode}
	   */


	  ConstantNode.prototype.clone = function () {
	    return new ConstantNode(this.value);
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  ConstantNode.prototype._toString = function (options) {
	    return format$3(this.value, options);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  ConstantNode.prototype.toHTML = function (options) {
	    var value = this._toString(options);

	    switch (getType(this.value)) {
	      case 'number':
	      case 'BigNumber':
	      case 'Fraction':
	        return '<span class="math-number">' + value + '</span>';

	      case 'string':
	        return '<span class="math-string">' + value + '</span>';

	      case 'boolean':
	        return '<span class="math-boolean">' + value + '</span>';

	      case 'null':
	        return '<span class="math-null-symbol">' + value + '</span>';

	      case 'undefined':
	        return '<span class="math-undefined">' + value + '</span>';

	      default:
	        return '<span class="math-symbol">' + value + '</span>';
	    }
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  ConstantNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ConstantNode',
	      value: this.value
	    };
	  };
	  /**
	   * Instantiate a ConstantNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SymbolNode", value: 2.3}`,
	   *                       where mathjs is optional
	   * @returns {ConstantNode}
	   */


	  ConstantNode.fromJSON = function (json) {
	    return new ConstantNode(json.value);
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  ConstantNode.prototype._toTex = function (options) {
	    var value = this._toString(options);

	    switch (getType(this.value)) {
	      case 'string':
	        return '\\mathtt{' + escapeLatex(value) + '}';

	      case 'number':
	      case 'BigNumber':
	        var index = value.toLowerCase().indexOf('e');

	        if (index !== -1) {
	          return value.substring(0, index) + '\\cdot10^{' + value.substring(index + 1) + '}';
	        }

	        return value;

	      case 'Fraction':
	        return this.value.toLatex();

	      default:
	        return value;
	    }
	  };

	  return ConstantNode;
	}

	var name$_ = 'ConstantNode';
	var path$k = 'expression.node';
	var factory_1$17 = factory$17;

	var ConstantNode = {
		name: name$_,
		path: path$k,
		factory: factory_1$17
	};

	var escape = string.escape;

	var forEach$1 = array.forEach;

	var join = array.join;





	var setSafeProperty$4 = customs.setSafeProperty;

	function factory$18(type, config, load, typed) {
	  var Node = load(Node$1);
	  /**
	   * @constructor FunctionAssignmentNode
	   * @extends {Node}
	   * Function assignment
	   *
	   * @param {string} name           Function name
	   * @param {string[] | Array.<{name: string, type: string}>} params
	   *                                Array with function parameter names, or an
	   *                                array with objects containing the name
	   *                                and type of the parameter
	   * @param {Node} expr             The function expression
	   */

	  function FunctionAssignmentNode(name, params, expr) {
	    if (!(this instanceof FunctionAssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    } // validate input


	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
	    if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
	    if (!type.isNode(expr)) throw new TypeError('Node expected for parameter "expr"');
	    if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
	    this.name = name;
	    this.params = params.map(function (param) {
	      return param && param.name || param;
	    });
	    this.types = params.map(function (param) {
	      return param && param.type || 'any';
	    });
	    this.expr = expr;
	  }

	  FunctionAssignmentNode.prototype = new Node();
	  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
	  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  FunctionAssignmentNode.prototype._compile = function (math, argNames) {
	    var childArgNames = Object.create(argNames);
	    forEach$1(this.params, function (param) {
	      childArgNames[param] = true;
	    }); // compile the function expression with the child args

	    var evalExpr = this.expr._compile(math, childArgNames);

	    var name = this.name;
	    var params = this.params;
	    var signature = join(this.types, ',');
	    var syntax = name + '(' + join(this.params, ', ') + ')';
	    return function evalFunctionAssignmentNode(scope, args, context) {
	      var signatures = {};

	      signatures[signature] = function () {
	        var childArgs = Object.create(args);

	        for (var i = 0; i < params.length; i++) {
	          childArgs[params[i]] = arguments[i];
	        }

	        return evalExpr(scope, childArgs, context);
	      };

	      var fn = typed(name, signatures);
	      fn.syntax = syntax;
	      setSafeProperty$4(scope, name, fn);
	      return fn;
	    };
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  FunctionAssignmentNode.prototype.forEach = function (callback) {
	    callback(this.expr, 'expr', this);
	  };
	  /**
	   * Create a new FunctionAssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
	   */


	  FunctionAssignmentNode.prototype.map = function (callback) {
	    var expr = this._ifNode(callback(this.expr, 'expr', this));

	    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionAssignmentNode}
	   */


	  FunctionAssignmentNode.prototype.clone = function () {
	    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
	  };
	  /**
	   * Is parenthesis needed?
	   * @param {Node} node
	   * @param {Object} parenthesis
	   * @private
	   */


	  function needParenthesis(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);
	    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;
	  }
	  /**
	   * get string representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  FunctionAssignmentNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var expr = this.expr.toString(options);

	    if (needParenthesis(this, parenthesis)) {
	      expr = '(' + expr + ')';
	    }

	    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  FunctionAssignmentNode.prototype.toJSON = function () {
	    var types = this.types;
	    return {
	      mathjs: 'FunctionAssignmentNode',
	      name: this.name,
	      params: this.params.map(function (param, index) {
	        return {
	          name: param,
	          type: types[index]
	        };
	      }),
	      expr: this.expr
	    };
	  };
	  /**
	   * Instantiate an FunctionAssignmentNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "FunctionAssignmentNode", name: ..., params: ..., expr: ...}`,
	   *                       where mathjs is optional
	   * @returns {FunctionAssignmentNode}
	   */


	  FunctionAssignmentNode.fromJSON = function (json) {
	    return new FunctionAssignmentNode(json.name, json.params, json.expr);
	  };
	  /**
	   * get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  FunctionAssignmentNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var params = [];

	    for (var i = 0; i < this.params.length; i++) {
	      params.push('<span class="math-symbol math-parameter">' + escape(this.params[i]) + '</span>');
	    }

	    var expr = this.expr.toHTML(options);

	    if (needParenthesis(this, parenthesis)) {
	      expr = '<span class="math-parenthesis math-round-parenthesis">(</span>' + expr + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    return '<span class="math-function">' + escape(this.name) + '</span>' + '<span class="math-parenthesis math-round-parenthesis">(</span>' + params.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + expr;
	  };
	  /**
	   * get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  FunctionAssignmentNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var expr = this.expr.toTex(options);

	    if (needParenthesis(this, parenthesis)) {
	      expr = "\\left(".concat(expr, "\\right)");
	    }

	    return '\\mathrm{' + this.name + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
	  };

	  return FunctionAssignmentNode;
	}

	var name$$ = 'FunctionAssignmentNode';
	var path$l = 'expression.node';
	var factory_1$18 = factory$18;

	var FunctionAssignmentNode = {
		name: name$$,
		path: path$l,
		factory: factory_1$18
	};

	var map$2 = array.map;

	var escape$1 = string.escape;

	function factory$19(type, config, load, typed) {
	  var Node = load(Node$1);
	  var Range$1 = load(Range);
	  var isArray = Array.isArray;
	  /**
	   * @constructor IndexNode
	   * @extends Node
	   *
	   * Describes a subset of a matrix or an object property.
	   * Cannot be used on its own, needs to be used within an AccessorNode or
	   * AssignmentNode.
	   *
	   * @param {Node[]} dimensions
	   * @param {boolean} [dotNotation=false]  Optional property describing whether
	   *                                       this index was written using dot
	   *                                       notation like `a.b`, or using bracket
	   *                                       notation like `a["b"]` (default).
	   *                                       Used to stringify an IndexNode.
	   */

	  function IndexNode(dimensions, dotNotation) {
	    if (!(this instanceof IndexNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.dimensions = dimensions;
	    this.dotNotation = dotNotation || false; // validate input

	    if (!isArray(dimensions) || !dimensions.every(type.isNode)) {
	      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
	    }

	    if (this.dotNotation && !this.isObjectProperty()) {
	      throw new Error('dotNotation only applicable for object properties');
	    } // TODO: deprecated since v3, remove some day


	    var deprecated = function deprecated() {
	      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
	    };

	    Object.defineProperty(this, 'object', {
	      get: deprecated,
	      set: deprecated
	    });
	  }

	  IndexNode.prototype = new Node();
	  IndexNode.prototype.type = 'IndexNode';
	  IndexNode.prototype.isIndexNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  IndexNode.prototype._compile = function (math, argNames) {
	    // TODO: implement support for bignumber (currently bignumbers are silently
	    //       reduced to numbers when changing the value to zero-based)
	    // TODO: Optimization: when the range values are ConstantNodes,
	    //       we can beforehand resolve the zero-based value
	    // optimization for a simple object property
	    var evalDimensions = map$2(this.dimensions, function (range, i) {
	      if (type.isRangeNode(range)) {
	        if (range.needsEnd()) {
	          // create a range containing end (like '4:end')
	          var childArgNames = Object.create(argNames);
	          childArgNames['end'] = true;

	          var evalStart = range.start._compile(math, childArgNames);

	          var evalEnd = range.end._compile(math, childArgNames);

	          var evalStep = range.step ? range.step._compile(math, childArgNames) : function () {
	            return 1;
	          };
	          return function evalDimension(scope, args, context) {
	            var size = math.size(context).valueOf();
	            var childArgs = Object.create(args);
	            childArgs['end'] = size[i];
	            return createRange(evalStart(scope, childArgs, context), evalEnd(scope, childArgs, context), evalStep(scope, childArgs, context));
	          };
	        } else {
	          // create range
	          var _evalStart = range.start._compile(math, argNames);

	          var _evalEnd = range.end._compile(math, argNames);

	          var _evalStep = range.step ? range.step._compile(math, argNames) : function () {
	            return 1;
	          };

	          return function evalDimension(scope, args, context) {
	            return createRange(_evalStart(scope, args, context), _evalEnd(scope, args, context), _evalStep(scope, args, context));
	          };
	        }
	      } else if (type.isSymbolNode(range) && range.name === 'end') {
	        // SymbolNode 'end'
	        var _childArgNames = Object.create(argNames);

	        _childArgNames['end'] = true;

	        var evalRange = range._compile(math, _childArgNames);

	        return function evalDimension(scope, args, context) {
	          var size = math.size(context).valueOf();
	          var childArgs = Object.create(args);
	          childArgs['end'] = size[i];
	          return evalRange(scope, childArgs, context);
	        };
	      } else {
	        // ConstantNode
	        var _evalRange = range._compile(math, argNames);

	        return function evalDimension(scope, args, context) {
	          return _evalRange(scope, args, context);
	        };
	      }
	    });
	    return function evalIndexNode(scope, args, context) {
	      var dimensions = map$2(evalDimensions, function (evalDimension) {
	        return evalDimension(scope, args, context);
	      });
	      return math.index.apply(math, dimensions);
	    };
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  IndexNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.dimensions.length; i++) {
	      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
	    }
	  };
	  /**
	   * Create a new IndexNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {IndexNode} Returns a transformed copy of the node
	   */


	  IndexNode.prototype.map = function (callback) {
	    var dimensions = [];

	    for (var i = 0; i < this.dimensions.length; i++) {
	      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
	    }

	    return new IndexNode(dimensions);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {IndexNode}
	   */


	  IndexNode.prototype.clone = function () {
	    return new IndexNode(this.dimensions.slice(0));
	  };
	  /**
	   * Test whether this IndexNode contains a single property name
	   * @return {boolean}
	   */


	  IndexNode.prototype.isObjectProperty = function () {
	    return this.dimensions.length === 1 && type.isConstantNode(this.dimensions[0]) && typeof this.dimensions[0].value === 'string';
	  };
	  /**
	   * Returns the property name if IndexNode contains a property.
	   * If not, returns null.
	   * @return {string | null}
	   */


	  IndexNode.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this.dimensions[0].value : null;
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  IndexNode.prototype._toString = function (options) {
	    // format the parameters like "[1, 0:5]"
	    return this.dotNotation ? '.' + this.getObjectProperty() : '[' + this.dimensions.join(', ') + ']';
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  IndexNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'IndexNode',
	      dimensions: this.dimensions,
	      dotNotation: this.dotNotation
	    };
	  };
	  /**
	   * Instantiate an IndexNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "IndexNode", dimensions: [...], dotNotation: false}`,
	   *                       where mathjs is optional
	   * @returns {IndexNode}
	   */


	  IndexNode.fromJSON = function (json) {
	    return new IndexNode(json.dimensions, json.dotNotation);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  IndexNode.prototype.toHTML = function (options) {
	    // format the parameters like "[1, 0:5]"
	    var dimensions = [];

	    for (var i = 0; i < this.dimensions.length; i++) {
	      dimensions[i] = this.dimensions[i].toHTML();
	    }

	    if (this.dotNotation) {
	      return '<span class="math-operator math-accessor-operator">.</span>' + '<span class="math-symbol math-property">' + escape$1(this.getObjectProperty()) + '</span>';
	    } else {
	      return '<span class="math-parenthesis math-square-parenthesis">[</span>' + dimensions.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
	    }
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  IndexNode.prototype._toTex = function (options) {
	    var dimensions = this.dimensions.map(function (range) {
	      return range.toTex(options);
	    });
	    return this.dotNotation ? '.' + this.getObjectProperty() + '' : '_{' + dimensions.join(',') + '}';
	  }; // helper function to create a Range from start, step and end


	  function createRange(start, end, step) {
	    return new Range$1(type.isBigNumber(start) ? start.toNumber() : start, type.isBigNumber(end) ? end.toNumber() : end, type.isBigNumber(step) ? step.toNumber() : step);
	  }

	  return IndexNode;
	}

	var name$10 = 'IndexNode';
	var path$m = 'expression.node';
	var factory_1$19 = factory$19;

	var IndexNode = {
		name: name$10,
		path: path$m,
		factory: factory_1$19
	};

	function _typeof$a(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$a = function _typeof(obj) { return typeof obj; }; } else { _typeof$a = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$a(obj); }

	var stringify = string.stringify;

	var escape$2 = string.escape;

	var isSafeProperty$1 = customs.isSafeProperty;

	var hasOwnProperty$2 = object.hasOwnProperty;

	function factory$1a(type, config, load, typed) {
	  var Node = load(Node$1);
	  /**
	   * @constructor ObjectNode
	   * @extends {Node}
	   * Holds an object with keys/values
	   * @param {Object.<string, Node>} [properties]   object with key/value pairs
	   */

	  function ObjectNode(properties) {
	    if (!(this instanceof ObjectNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.properties = properties || {}; // validate input

	    if (properties) {
	      if (!(_typeof$a(properties) === 'object') || !Object.keys(properties).every(function (key) {
	        return type.isNode(properties[key]);
	      })) {
	        throw new TypeError('Object containing Nodes expected');
	      }
	    }
	  }

	  ObjectNode.prototype = new Node();
	  ObjectNode.prototype.type = 'ObjectNode';
	  ObjectNode.prototype.isObjectNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  ObjectNode.prototype._compile = function (math, argNames) {
	    var evalEntries = {};

	    for (var key in this.properties) {
	      if (hasOwnProperty$2(this.properties, key)) {
	        // we stringify/parse the key here to resolve unicode characters,
	        // so you cannot create a key like {"co\\u006Estructor": null}
	        var stringifiedKey = stringify(key);
	        var parsedKey = JSON.parse(stringifiedKey);

	        if (!isSafeProperty$1(this.properties, parsedKey)) {
	          throw new Error('No access to property "' + parsedKey + '"');
	        }

	        evalEntries[parsedKey] = this.properties[key]._compile(math, argNames);
	      }
	    }

	    return function evalObjectNode(scope, args, context) {
	      var obj = {};

	      for (var _key in evalEntries) {
	        if (hasOwnProperty$2(evalEntries, _key)) {
	          obj[_key] = evalEntries[_key](scope, args, context);
	        }
	      }

	      return obj;
	    };
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  ObjectNode.prototype.forEach = function (callback) {
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);
	      }
	    }
	  };
	  /**
	   * Create a new ObjectNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ObjectNode} Returns a transformed copy of the node
	   */


	  ObjectNode.prototype.map = function (callback) {
	    var properties = {};

	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        properties[key] = this._ifNode(callback(this.properties[key], 'properties[' + stringify(key) + ']', this));
	      }
	    }

	    return new ObjectNode(properties);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ObjectNode}
	   */


	  ObjectNode.prototype.clone = function () {
	    var properties = {};

	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        properties[key] = this.properties[key];
	      }
	    }

	    return new ObjectNode(properties);
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  ObjectNode.prototype._toString = function (options) {
	    var entries = [];

	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));
	      }
	    }

	    return '{' + entries.join(', ') + '}';
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  ObjectNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ObjectNode',
	      properties: this.properties
	    };
	  };
	  /**
	   * Instantiate an OperatorNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ObjectNode", "properties": {...}}`,
	   *                       where mathjs is optional
	   * @returns {ObjectNode}
	   */


	  ObjectNode.fromJSON = function (json) {
	    return new ObjectNode(json.properties);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  ObjectNode.prototype.toHTML = function (options) {
	    var entries = [];

	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push('<span class="math-symbol math-property">' + escape$2(key) + '</span>' + '<span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[key].toHTML(options));
	      }
	    }

	    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + entries.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  ObjectNode.prototype._toTex = function (options) {
	    var entries = [];

	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push('\\mathbf{' + key + ':} & ' + this.properties[key].toTex(options) + '\\\\');
	      }
	    }

	    return "\\left\\{\\begin{array}{ll}".concat(entries.join('\n'), "\\end{array}\\right\\}");
	  };

	  return ObjectNode;
	}

	var name$11 = 'ObjectNode';
	var path$n = 'expression.node';
	var factory_1$1a = factory$1a;

	var ObjectNode = {
		name: name$11,
		path: path$n,
		factory: factory_1$1a
	};

	var map$3 = array.map;

	var escape$3 = string.escape;

	var isSafeMethod$1 = customs.isSafeMethod;

	var getSafeProperty$5 = customs.getSafeProperty;



	function factory$1b(type, config, load, typed) {
	  var Node = load(Node$1);
	  /**
	   * @constructor OperatorNode
	   * @extends {Node}
	   * An operator with two arguments, like 2+3
	   *
	   * @param {string} op           Operator name, for example '+'
	   * @param {string} fn           Function name, for example 'add'
	   * @param {Node[]} args         Operator arguments
	   * @param {boolean} [implicit]  Is this an implicit multiplication?
	   */

	  function OperatorNode(op, fn, args, implicit) {
	    if (!(this instanceof OperatorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    } // validate input


	    if (typeof op !== 'string') {
	      throw new TypeError('string expected for parameter "op"');
	    }

	    if (typeof fn !== 'string') {
	      throw new TypeError('string expected for parameter "fn"');
	    }

	    if (!Array.isArray(args) || !args.every(type.isNode)) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }

	    this.implicit = implicit === true;
	    this.op = op;
	    this.fn = fn;
	    this.args = args || [];
	  }

	  OperatorNode.prototype = new Node();
	  OperatorNode.prototype.type = 'OperatorNode';
	  OperatorNode.prototype.isOperatorNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  OperatorNode.prototype._compile = function (math, argNames) {
	    // validate fn
	    if (typeof this.fn !== 'string' || !isSafeMethod$1(math, this.fn)) {
	      if (!math[this.fn]) {
	        throw new Error('Function ' + this.fn + ' missing in provided namespace "math"');
	      } else {
	        throw new Error('No access to function "' + this.fn + '"');
	      }
	    }

	    var fn = getSafeProperty$5(math, this.fn);
	    var evalArgs = map$3(this.args, function (arg) {
	      return arg._compile(math, argNames);
	    });

	    if (evalArgs.length === 1) {
	      var evalArg0 = evalArgs[0];
	      return function evalOperatorNode(scope, args, context) {
	        return fn(evalArg0(scope, args, context));
	      };
	    } else if (evalArgs.length === 2) {
	      var _evalArg = evalArgs[0];
	      var evalArg1 = evalArgs[1];
	      return function evalOperatorNode(scope, args, context) {
	        return fn(_evalArg(scope, args, context), evalArg1(scope, args, context));
	      };
	    } else {
	      return function evalOperatorNode(scope, args, context) {
	        return fn.apply(null, map$3(evalArgs, function (evalArg) {
	          return evalArg(scope, args, context);
	        }));
	      };
	    }
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  OperatorNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };
	  /**
	   * Create a new OperatorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */


	  OperatorNode.prototype.map = function (callback) {
	    var args = [];

	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }

	    return new OperatorNode(this.op, this.fn, args, this.implicit);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {OperatorNode}
	   */


	  OperatorNode.prototype.clone = function () {
	    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
	  };
	  /**
	   * Check whether this is an unary OperatorNode:
	   * has exactly one argument, like `-a`.
	   * @return {boolean} Returns true when an unary operator node, false otherwise.
	   */


	  OperatorNode.prototype.isUnary = function () {
	    return this.args.length === 1;
	  };
	  /**
	   * Check whether this is a binary OperatorNode:
	   * has exactly two arguments, like `a + b`.
	   * @return {boolean} Returns true when a binary operator node, false otherwise.
	   */


	  OperatorNode.prototype.isBinary = function () {
	    return this.args.length === 2;
	  };
	  /**
	   * Calculate which parentheses are necessary. Gets an OperatorNode
	   * (which is the root of the tree) and an Array of Nodes
	   * (this.args) and returns an array where 'true' means that an argument
	   * has to be enclosed in parentheses whereas 'false' means the opposite.
	   *
	   * @param {OperatorNode} root
	   * @param {string} parenthesis
	   * @param {Node[]} args
	   * @param {boolean} latex
	   * @return {boolean[]}
	   * @private
	   */


	  function calculateNecessaryParentheses(root, parenthesis, implicit, args, latex) {
	    // precedence of the root OperatorNode
	    var precedence = operators.getPrecedence(root, parenthesis);
	    var associativity = operators.getAssociativity(root, parenthesis);

	    if (parenthesis === 'all' || args.length > 2 && root.getIdentifier() !== 'OperatorNode:add' && root.getIdentifier() !== 'OperatorNode:multiply') {
	      var parens = args.map(function (arg) {
	        switch (arg.getContent().type) {
	          // Nodes that don't need extra parentheses
	          case 'ArrayNode':
	          case 'ConstantNode':
	          case 'SymbolNode':
	          case 'ParenthesisNode':
	            return false;

	          default:
	            return true;
	        }
	      });
	      return parens;
	    }

	    var result;

	    switch (args.length) {
	      case 0:
	        result = [];
	        break;

	      case 1:
	        // unary operators
	        // precedence of the operand
	        var operandPrecedence = operators.getPrecedence(args[0], parenthesis); // handle special cases for LaTeX, where some of the parentheses aren't needed

	        if (latex && operandPrecedence !== null) {
	          var operandIdentifier;
	          var rootIdentifier;

	          if (parenthesis === 'keep') {
	            operandIdentifier = args[0].getIdentifier();
	            rootIdentifier = root.getIdentifier();
	          } else {
	            // Ignore Parenthesis Nodes when not in 'keep' mode
	            operandIdentifier = args[0].getContent().getIdentifier();
	            rootIdentifier = root.getContent().getIdentifier();
	          }

	          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
	            result = [false];
	            break;
	          }

	          if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
	            result = [false];
	            break;
	          }
	        }

	        if (operandPrecedence === null) {
	          // if the operand has no defined precedence, no parens are needed
	          result = [false];
	          break;
	        }

	        if (operandPrecedence <= precedence) {
	          // if the operands precedence is lower, parens are needed
	          result = [true];
	          break;
	        } // otherwise, no parens needed


	        result = [false];
	        break;

	      case 2:
	        // binary operators
	        var lhsParens; // left hand side needs parenthesis?
	        // precedence of the left hand side

	        var lhsPrecedence = operators.getPrecedence(args[0], parenthesis); // is the root node associative with the left hand side

	        var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);

	        if (lhsPrecedence === null) {
	          // if the left hand side has no defined precedence, no parens are needed
	          // FunctionNode for example
	          lhsParens = false;
	        } else if (lhsPrecedence === precedence && associativity === 'right' && !assocWithLhs) {
	          // In case of equal precedence, if the root node is left associative
	          // parens are **never** necessary for the left hand side.
	          // If it is right associative however, parens are necessary
	          // if the root node isn't associative with the left hand side
	          lhsParens = true;
	        } else if (lhsPrecedence < precedence) {
	          lhsParens = true;
	        } else {
	          lhsParens = false;
	        }

	        var rhsParens; // right hand side needs parenthesis?
	        // precedence of the right hand side

	        var rhsPrecedence = operators.getPrecedence(args[1], parenthesis); // is the root node associative with the right hand side?

	        var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);

	        if (rhsPrecedence === null) {
	          // if the right hand side has no defined precedence, no parens are needed
	          // FunctionNode for example
	          rhsParens = false;
	        } else if (rhsPrecedence === precedence && associativity === 'left' && !assocWithRhs) {
	          // In case of equal precedence, if the root node is right associative
	          // parens are **never** necessary for the right hand side.
	          // If it is left associative however, parens are necessary
	          // if the root node isn't associative with the right hand side
	          rhsParens = true;
	        } else if (rhsPrecedence < precedence) {
	          rhsParens = true;
	        } else {
	          rhsParens = false;
	        } // handle special cases for LaTeX, where some of the parentheses aren't needed


	        if (latex) {
	          var _rootIdentifier;

	          var lhsIdentifier;
	          var rhsIdentifier;

	          if (parenthesis === 'keep') {
	            _rootIdentifier = root.getIdentifier();
	            lhsIdentifier = root.args[0].getIdentifier();
	            rhsIdentifier = root.args[1].getIdentifier();
	          } else {
	            // Ignore ParenthesisNodes when not in 'keep' mode
	            _rootIdentifier = root.getContent().getIdentifier();
	            lhsIdentifier = root.args[0].getContent().getIdentifier();
	            rhsIdentifier = root.args[1].getContent().getIdentifier();
	          }

	          if (lhsPrecedence !== null) {
	            if (operators.properties[precedence][_rootIdentifier].latexLeftParens === false) {
	              lhsParens = false;
	            }

	            if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
	              lhsParens = false;
	            }
	          }

	          if (rhsPrecedence !== null) {
	            if (operators.properties[precedence][_rootIdentifier].latexRightParens === false) {
	              rhsParens = false;
	            }

	            if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
	              rhsParens = false;
	            }
	          }
	        }

	        result = [lhsParens, rhsParens];
	        break;

	      default:
	        if (root.getIdentifier() === 'OperatorNode:add' || root.getIdentifier() === 'OperatorNode:multiply') {
	          result = args.map(function (arg) {
	            var argPrecedence = operators.getPrecedence(arg, parenthesis);
	            var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);
	            var argAssociativity = operators.getAssociativity(arg, parenthesis);

	            if (argPrecedence === null) {
	              // if the argument has no defined precedence, no parens are needed
	              return false;
	            } else if (precedence === argPrecedence && associativity === argAssociativity && !assocWithArg) {
	              return true;
	            } else if (argPrecedence < precedence) {
	              return true;
	            }

	            return false;
	          });
	        }

	        break;
	    } // handles an edge case of 'auto' parentheses with implicit multiplication of ConstantNode
	    // In that case print parentheses for ParenthesisNodes even though they normally wouldn't be
	    // printed.


	    if (args.length >= 2 && root.getIdentifier() === 'OperatorNode:multiply' && root.implicit && parenthesis === 'auto' && implicit === 'hide') {
	      result = args.map(function (arg, index) {
	        var isParenthesisNode = arg.getIdentifier() === 'ParenthesisNode';

	        if (result[index] || isParenthesisNode) {
	          // put in parenthesis?
	          return true;
	        }

	        return false;
	      });
	    }

	    return result;
	  }
	  /**
	   * Get string representation.
	   * @param {Object} options
	   * @return {string} str
	   */


	  OperatorNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var implicit = options && options.implicit ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

	    if (args.length === 1) {
	      // unary operators
	      var assoc = operators.getAssociativity(this, parenthesis);
	      var operand = args[0].toString(options);

	      if (parens[0]) {
	        operand = '(' + operand + ')';
	      }

	      if (assoc === 'right') {
	        // prefix operator
	        return this.op + operand;
	      } else if (assoc === 'left') {
	        // postfix
	        return operand + this.op;
	      } // fall back to postfix


	      return operand + this.op;
	    } else if (args.length === 2) {
	      var lhs = args[0].toString(options); // left hand side

	      var rhs = args[1].toString(options); // right hand side

	      if (parens[0]) {
	        // left hand side in parenthesis?
	        lhs = '(' + lhs + ')';
	      }

	      if (parens[1]) {
	        // right hand side in parenthesis?
	        rhs = '(' + rhs + ')';
	      }

	      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
	        return lhs + ' ' + rhs;
	      }

	      return lhs + ' ' + this.op + ' ' + rhs;
	    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
	      var stringifiedArgs = args.map(function (arg, index) {
	        arg = arg.toString(options);

	        if (parens[index]) {
	          // put in parenthesis?
	          arg = '(' + arg + ')';
	        }

	        return arg;
	      });

	      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
	        return stringifiedArgs.join(' ');
	      }

	      return stringifiedArgs.join(' ' + this.op + ' ');
	    } else {
	      // fallback to formatting as a function call
	      return this.fn + '(' + this.args.join(', ') + ')';
	    }
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  OperatorNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'OperatorNode',
	      op: this.op,
	      fn: this.fn,
	      args: this.args,
	      implicit: this.implicit
	    };
	  };
	  /**
	   * Instantiate an OperatorNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "OperatorNode", "op": "+", "fn": "add", "args": [...], "implicit": false}`,
	   *                       where mathjs is optional
	   * @returns {OperatorNode}
	   */


	  OperatorNode.fromJSON = function (json) {
	    return new OperatorNode(json.op, json.fn, json.args, json.implicit);
	  };
	  /**
	   * Get HTML representation.
	   * @param {Object} options
	   * @return {string} str
	   */


	  OperatorNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var implicit = options && options.implicit ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, false);

	    if (args.length === 1) {
	      // unary operators
	      var assoc = operators.getAssociativity(this, parenthesis);
	      var operand = args[0].toHTML(options);

	      if (parens[0]) {
	        operand = '<span class="math-parenthesis math-round-parenthesis">(</span>' + operand + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	      }

	      if (assoc === 'right') {
	        // prefix operator
	        return '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + escape$3(this.op) + '</span>' + operand;
	      } else if (assoc === 'left') {
	        // postfix
	        return '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape$3(this.op) + '</span>' + operand;
	      } // fall back to postfix


	      return '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + escape$3(this.op) + '</span>' + operand;
	    } else if (args.length === 2) {
	      // binary operatoes
	      var lhs = args[0].toHTML(options); // left hand side

	      var rhs = args[1].toHTML(options); // right hand side

	      if (parens[0]) {
	        // left hand side in parenthesis?
	        lhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + lhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	      }

	      if (parens[1]) {
	        // right hand side in parenthesis?
	        rhs = '<span class="math-parenthesis math-round-parenthesis">(</span>' + rhs + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	      }

	      if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
	        return lhs + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + rhs;
	      }

	      return lhs + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$3(this.op) + '</span>' + rhs;
	    } else {
	      var stringifiedArgs = args.map(function (arg, index) {
	        arg = arg.toHTML(options);

	        if (parens[index]) {
	          // put in parenthesis?
	          arg = '<span class="math-parenthesis math-round-parenthesis">(</span>' + arg + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	        }

	        return arg;
	      });

	      if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
	        if (this.implicit && this.getIdentifier() === 'OperatorNode:multiply' && implicit === 'hide') {
	          return stringifiedArgs.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>');
	        }

	        return stringifiedArgs.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$3(this.op) + '</span>');
	      } else {
	        // fallback to formatting as a function call
	        return '<span class="math-function">' + escape$3(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + stringifiedArgs.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
	      }
	    }
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  OperatorNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var implicit = options && options.implicit ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, implicit, args, true);
	    var op = latex.operators[this.fn];
	    op = typeof op === 'undefined' ? this.op : op; // fall back to using this.op

	    if (args.length === 1) {
	      // unary operators
	      var assoc = operators.getAssociativity(this, parenthesis);
	      var operand = args[0].toTex(options);

	      if (parens[0]) {
	        operand = "\\left(".concat(operand, "\\right)");
	      }

	      if (assoc === 'right') {
	        // prefix operator
	        return op + operand;
	      } else if (assoc === 'left') {
	        // postfix operator
	        return operand + op;
	      } // fall back to postfix


	      return operand + op;
	    } else if (args.length === 2) {
	      // binary operators
	      var lhs = args[0]; // left hand side

	      var lhsTex = lhs.toTex(options);

	      if (parens[0]) {
	        lhsTex = "\\left(".concat(lhsTex, "\\right)");
	      }

	      var rhs = args[1]; // right hand side

	      var rhsTex = rhs.toTex(options);

	      if (parens[1]) {
	        rhsTex = "\\left(".concat(rhsTex, "\\right)");
	      } // handle some exceptions (due to the way LaTeX works)


	      var lhsIdentifier;

	      if (parenthesis === 'keep') {
	        lhsIdentifier = lhs.getIdentifier();
	      } else {
	        // Ignore ParenthesisNodes if in 'keep' mode
	        lhsIdentifier = lhs.getContent().getIdentifier();
	      }

	      switch (this.getIdentifier()) {
	        case 'OperatorNode:divide':
	          // op contains '\\frac' at this point
	          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';

	        case 'OperatorNode:pow':
	          lhsTex = '{' + lhsTex + '}';
	          rhsTex = '{' + rhsTex + '}';

	          switch (lhsIdentifier) {
	            case 'ConditionalNode': //

	            case 'OperatorNode:divide':
	              lhsTex = "\\left(".concat(lhsTex, "\\right)");
	          }

	          break;

	        case 'OperatorNode:multiply':
	          if (this.implicit && implicit === 'hide') {
	            return lhsTex + '~' + rhsTex;
	          }

	      }

	      return lhsTex + op + rhsTex;
	    } else if (args.length > 2 && (this.getIdentifier() === 'OperatorNode:add' || this.getIdentifier() === 'OperatorNode:multiply')) {
	      var texifiedArgs = args.map(function (arg, index) {
	        arg = arg.toTex(options);

	        if (parens[index]) {
	          arg = "\\left(".concat(arg, "\\right)");
	        }

	        return arg;
	      });

	      if (this.getIdentifier() === 'OperatorNode:multiply' && this.implicit) {
	        return texifiedArgs.join('~');
	      }

	      return texifiedArgs.join(op);
	    } else {
	      // fall back to formatting as a function call
	      // as this is a fallback, it doesn't use
	      // fancy function names
	      return '\\mathrm{' + this.fn + '}\\left(' + args.map(function (arg) {
	        return arg.toTex(options);
	      }).join(',') + '\\right)';
	    }
	  };
	  /**
	   * Get identifier.
	   * @return {string}
	   */


	  OperatorNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.fn;
	  };

	  return OperatorNode;
	}

	var name$12 = 'OperatorNode';
	var path$o = 'expression.node';
	var factory_1$1b = factory$1b;

	var OperatorNode = {
		name: name$12,
		path: path$o,
		factory: factory_1$1b
	};

	function factory$1c(type, config, load, typed) {
	  var Node = load(Node$1);
	  /**
	   * @constructor ParenthesisNode
	   * @extends {Node}
	   * A parenthesis node describes manual parenthesis from the user input
	   * @param {Node} content
	   * @extends {Node}
	   */

	  function ParenthesisNode(content) {
	    if (!(this instanceof ParenthesisNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    } // validate input


	    if (!type.isNode(content)) {
	      throw new TypeError('Node expected for parameter "content"');
	    }

	    this.content = content;
	  }

	  ParenthesisNode.prototype = new Node();
	  ParenthesisNode.prototype.type = 'ParenthesisNode';
	  ParenthesisNode.prototype.isParenthesisNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  ParenthesisNode.prototype._compile = function (math, argNames) {
	    return this.content._compile(math, argNames);
	  };
	  /**
	   * Get the content of the current Node.
	   * @return {Node} content
	   * @override
	   **/


	  ParenthesisNode.prototype.getContent = function () {
	    return this.content.getContent();
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  ParenthesisNode.prototype.forEach = function (callback) {
	    callback(this.content, 'content', this);
	  };
	  /**
	   * Create a new ParenthesisNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ParenthesisNode} Returns a clone of the node
	   */


	  ParenthesisNode.prototype.map = function (callback) {
	    var content = callback(this.content, 'content', this);
	    return new ParenthesisNode(content);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ParenthesisNode}
	   */


	  ParenthesisNode.prototype.clone = function () {
	    return new ParenthesisNode(this.content);
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  ParenthesisNode.prototype._toString = function (options) {
	    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
	      return '(' + this.content.toString(options) + ')';
	    }

	    return this.content.toString(options);
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  ParenthesisNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'ParenthesisNode',
	      content: this.content
	    };
	  };
	  /**
	   * Instantiate an ParenthesisNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ParenthesisNode", "content": ...}`,
	   *                       where mathjs is optional
	   * @returns {ParenthesisNode}
	   */


	  ParenthesisNode.fromJSON = function (json) {
	    return new ParenthesisNode(json.content);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  ParenthesisNode.prototype.toHTML = function (options) {
	    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
	      return '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    return this.content.toHTML(options);
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  ParenthesisNode.prototype._toTex = function (options) {
	    if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {
	      return "\\left(".concat(this.content.toTex(options), "\\right)");
	    }

	    return this.content.toTex(options);
	  };

	  return ParenthesisNode;
	}

	var name$13 = 'ParenthesisNode';
	var path$p = 'expression.node';
	var factory_1$1c = factory$1c;

	var ParenthesisNode = {
		name: name$13,
		path: path$p,
		factory: factory_1$1c
	};

	var escape$4 = string.escape;

	var hasOwnProperty$3 = object.hasOwnProperty;

	var getSafeProperty$6 = customs.getSafeProperty;

	function factory$1d(type, config, load, typed, math) {
	  var Node = load(Node$1);
	  /**
	   * Check whether some name is a valueless unit like "inch".
	   * @param {string} name
	   * @return {boolean}
	   */

	  function isValuelessUnit(name) {
	    return type.Unit ? type.Unit.isValuelessUnit(name) : false;
	  }
	  /**
	   * @constructor SymbolNode
	   * @extends {Node}
	   * A symbol node can hold and resolve a symbol
	   * @param {string} name
	   * @extends {Node}
	   */


	  function SymbolNode(name) {
	    if (!(this instanceof SymbolNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    } // validate input


	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
	    this.name = name;
	  }

	  SymbolNode.prototype = new Node();
	  SymbolNode.prototype.type = 'SymbolNode';
	  SymbolNode.prototype.isSymbolNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  SymbolNode.prototype._compile = function (math, argNames) {
	    var name = this.name;

	    if (hasOwnProperty$3(argNames, name)) {
	      // this is a FunctionAssignment argument
	      // (like an x when inside the expression of a function assignment `f(x) = ...`)
	      return function (scope, args, context) {
	        return args[name];
	      };
	    } else if (name in math) {
	      return function (scope, args, context) {
	        return name in scope ? getSafeProperty$6(scope, name) : getSafeProperty$6(math, name);
	      };
	    } else {
	      var isUnit = isValuelessUnit(name);
	      return function (scope, args, context) {
	        return name in scope ? getSafeProperty$6(scope, name) : isUnit ? new type.Unit(null, name) : undef(name);
	      };
	    }
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  SymbolNode.prototype.forEach = function (callback) {} // nothing to do, we don't have childs

	  /**
	   * Create a new SymbolNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {SymbolNode} Returns a clone of the node
	   */
	  ;

	  SymbolNode.prototype.map = function (callback) {
	    return this.clone();
	  };
	  /**
	   * Throws an error 'Undefined symbol {name}'
	   * @param {string} name
	   */


	  function undef(name) {
	    throw new Error('Undefined symbol ' + name);
	  }
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {SymbolNode}
	   */


	  SymbolNode.prototype.clone = function () {
	    return new SymbolNode(this.name);
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  SymbolNode.prototype._toString = function (options) {
	    return this.name;
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  SymbolNode.prototype.toHTML = function (options) {
	    var name = escape$4(this.name);

	    if (name === 'true' || name === 'false') {
	      return '<span class="math-symbol math-boolean">' + name + '</span>';
	    } else if (name === 'i') {
	      return '<span class="math-symbol math-imaginary-symbol">' + name + '</span>';
	    } else if (name === 'Infinity') {
	      return '<span class="math-symbol math-infinity-symbol">' + name + '</span>';
	    } else if (name === 'NaN') {
	      return '<span class="math-symbol math-nan-symbol">' + name + '</span>';
	    } else if (name === 'null') {
	      return '<span class="math-symbol math-null-symbol">' + name + '</span>';
	    } else if (name === 'undefined') {
	      return '<span class="math-symbol math-undefined-symbol">' + name + '</span>';
	    }

	    return '<span class="math-symbol">' + name + '</span>';
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  SymbolNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'SymbolNode',
	      name: this.name
	    };
	  };
	  /**
	   * Instantiate a SymbolNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SymbolNode", name: "x"}`,
	   *                       where mathjs is optional
	   * @returns {SymbolNode}
	   */


	  SymbolNode.fromJSON = function (json) {
	    return new SymbolNode(json.name);
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */


	  SymbolNode.prototype._toTex = function (options) {
	    var isUnit = false;

	    if (typeof math[this.name] === 'undefined' && isValuelessUnit(this.name)) {
	      isUnit = true;
	    }

	    var symbol = latex.toSymbol(this.name, isUnit);

	    if (symbol[0] === '\\') {
	      // no space needed if the symbol starts with '\'
	      return symbol;
	    } // the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol


	    return ' ' + symbol;
	  };

	  return SymbolNode;
	}

	var name$14 = 'SymbolNode';
	var path$q = 'expression.node';
	var math$8 = true; // request access to the math namespace as 5th argument of the factory function

	var factory_1$1d = factory$1d;

	var SymbolNode = {
		name: name$14,
		path: path$q,
		math: math$8,
		factory: factory_1$1d
	};

	function _typeof$b(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$b = function _typeof(obj) { return typeof obj; }; } else { _typeof$b = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$b(obj); }

	function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

	var latex$1 = latex;

	var escape$5 = string.escape;

	var hasOwnProperty$4 = object.hasOwnProperty;

	var map$4 = array.map;

	var validateSafeMethod$1 = customs.validateSafeMethod;

	var getSafeProperty$7 = customs.getSafeProperty;

	function factory$1e(type, config, load, typed, math) {
	  var Node = load(Node$1);
	  var SymbolNode$1 = load(SymbolNode);
	  /**
	   * @constructor FunctionNode
	   * @extends {./Node}
	   * invoke a list with arguments on a node
	   * @param {./Node | string} fn Node resolving with a function on which to invoke
	   *                             the arguments, typically a SymboNode or AccessorNode
	   * @param {./Node[]} args
	   */

	  function FunctionNode(fn, args) {
	    if (!(this instanceof FunctionNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (typeof fn === 'string') {
	      fn = new SymbolNode$1(fn);
	    } // validate input


	    if (!type.isNode(fn)) throw new TypeError('Node expected as parameter "fn"');

	    if (!Array.isArray(args) || !args.every(type.isNode)) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }

	    this.fn = fn;
	    this.args = args || []; // readonly property name

	    Object.defineProperty(this, 'name', {
	      get: function () {
	        return this.fn.name || '';
	      }.bind(this),
	      set: function set() {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    }); // TODO: deprecated since v3, remove some day

	    var deprecated = function deprecated() {
	      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
	    };

	    Object.defineProperty(this, 'object', {
	      get: deprecated,
	      set: deprecated
	    });
	  }

	  FunctionNode.prototype = new Node();
	  FunctionNode.prototype.type = 'FunctionNode';
	  FunctionNode.prototype.isFunctionNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  FunctionNode.prototype._compile = function (math, argNames) {
	    if (!(this instanceof FunctionNode)) {
	      throw new TypeError('No valid FunctionNode');
	    } // compile arguments


	    var evalArgs = map$4(this.args, function (arg) {
	      return arg._compile(math, argNames);
	    });

	    if (type.isSymbolNode(this.fn)) {
	      // we can statically determine whether the function has an rawArgs property
	      var name = this.fn.name;
	      var fn = name in math ? getSafeProperty$7(math, name) : undefined;
	      var isRaw = typeof fn === 'function' && fn.rawArgs === true;

	      if (isRaw) {
	        // pass unevaluated parameters (nodes) to the function
	        // "raw" evaluation
	        var rawArgs = this.args;
	        return function evalFunctionNode(scope, args, context) {
	          return (name in scope ? getSafeProperty$7(scope, name) : fn)(rawArgs, math, _extends$1({}, scope, args));
	        };
	      } else {
	        // "regular" evaluation
	        if (evalArgs.length === 1) {
	          var evalArg0 = evalArgs[0];
	          return function evalFunctionNode(scope, args, context) {
	            return (name in scope ? getSafeProperty$7(scope, name) : fn)(evalArg0(scope, args, context));
	          };
	        } else if (evalArgs.length === 2) {
	          var _evalArg = evalArgs[0];
	          var evalArg1 = evalArgs[1];
	          return function evalFunctionNode(scope, args, context) {
	            return (name in scope ? getSafeProperty$7(scope, name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));
	          };
	        } else {
	          return function evalFunctionNode(scope, args, context) {
	            return (name in scope ? getSafeProperty$7(scope, name) : fn).apply(null, map$4(evalArgs, function (evalArg) {
	              return evalArg(scope, args, context);
	            }));
	          };
	        }
	      }
	    } else if (type.isAccessorNode(this.fn) && type.isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {
	      // execute the function with the right context: the object of the AccessorNode
	      var evalObject = this.fn.object._compile(math, argNames);

	      var prop = this.fn.index.getObjectProperty();
	      var _rawArgs = this.args;
	      return function evalFunctionNode(scope, args, context) {
	        var object = evalObject(scope, args, context);
	        validateSafeMethod$1(object, prop);
	        var isRaw = object[prop] && object[prop].rawArgs;
	        return isRaw ? object[prop](_rawArgs, math, _extends$1({}, scope, args)) // "raw" evaluation
	        : object[prop].apply(object, map$4(evalArgs, function (evalArg) {
	          // "regular" evaluation
	          return evalArg(scope, args, context);
	        }));
	      };
	    } else {
	      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
	      // we have to dynamically determine whether the function has a rawArgs property
	      var evalFn = this.fn._compile(math, argNames);

	      var _rawArgs2 = this.args;
	      return function evalFunctionNode(scope, args, context) {
	        var fn = evalFn(scope, args, context);
	        var isRaw = fn && fn.rawArgs;
	        return isRaw ? fn(_rawArgs2, math, _extends$1({}, scope, args)) // "raw" evaluation
	        : fn.apply(fn, map$4(evalArgs, function (evalArg) {
	          // "regular" evaluation
	          return evalArg(scope, args, context);
	        }));
	      };
	    }
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  FunctionNode.prototype.forEach = function (callback) {
	    callback(this.fn, 'fn', this);

	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };
	  /**
	   * Create a new FunctionNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionNode} Returns a transformed copy of the node
	   */


	  FunctionNode.prototype.map = function (callback) {
	    var fn = this._ifNode(callback(this.fn, 'fn', this));

	    var args = [];

	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }

	    return new FunctionNode(fn, args);
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionNode}
	   */


	  FunctionNode.prototype.clone = function () {
	    return new FunctionNode(this.fn, this.args.slice(0));
	  }; // backup Node's toString function
	  // @private


	  var nodeToString = FunctionNode.prototype.toString;
	  /**
	   * Get string representation. (wrapper function)
	   * This overrides parts of Node's toString function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toString
	   * function.
	   *
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */

	  FunctionNode.prototype.toString = function (options) {
	    var customString;
	    var name = this.fn.toString(options);

	    if (options && _typeof$b(options.handler) === 'object' && hasOwnProperty$4(options.handler, name)) {
	      // callback is a map of callback functions
	      customString = options.handler[name](this, options);
	    }

	    if (typeof customString !== 'undefined') {
	      return customString;
	    } // fall back to Node's toString


	    return nodeToString.call(this, options);
	  };
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  FunctionNode.prototype._toString = function (options) {
	    var args = this.args.map(function (arg) {
	      return arg.toString(options);
	    });
	    var fn = type.isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like "add(2, 4.2)"

	    return fn + '(' + args.join(', ') + ')';
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  FunctionNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'FunctionNode',
	      fn: this.fn,
	      args: this.args
	    };
	  };
	  /**
	   * Instantiate an AssignmentNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "FunctionNode", fn: ..., args: ...}`,
	   *                       where mathjs is optional
	   * @returns {FunctionNode}
	   */


	  FunctionNode.fromJSON = function (json) {
	    return new FunctionNode(json.fn, json.args);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  FunctionNode.prototype.toHTML = function (options) {
	    var args = this.args.map(function (arg) {
	      return arg.toHTML(options);
	    }); // format the arguments like "add(2, 4.2)"

	    return '<span class="math-function">' + escape$5(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + args.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
	  };
	  /*
	   * Expand a LaTeX template
	   *
	   * @param {string} template
	   * @param {Node} node
	   * @param {Object} options
	   * @private
	   **/


	  function expandTemplate(template, node, options) {
	    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$
	    // while submatching identifier and 2 (in the second case)

	    var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');
	    var inputPos = 0; // position in the input string

	    var match;

	    while ((match = regex.exec(template)) !== null) {
	      // go through all matches
	      // add everything in front of the match to the LaTeX string
	      latex += template.substring(inputPos, match.index);
	      inputPos = match.index;

	      if (match[0] === '$$') {
	        // escaped dollar sign
	        latex += '$';
	        inputPos++;
	      } else {
	        // template parameter
	        inputPos += match[0].length;
	        var property = node[match[1]];

	        if (!property) {
	          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
	        }

	        if (match[2] === undefined) {
	          // no square brackets
	          switch (_typeof$b(property)) {
	            case 'string':
	              latex += property;
	              break;

	            case 'object':
	              if (type.isNode(property)) {
	                latex += property.toTex(options);
	              } else if (Array.isArray(property)) {
	                // make array of Nodes into comma separated list
	                latex += property.map(function (arg, index) {
	                  if (type.isNode(arg)) {
	                    return arg.toTex(options);
	                  }

	                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
	                }).join(',');
	              } else {
	                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	              }

	              break;

	            default:
	              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	          }
	        } else {
	          // with square brackets
	          if (type.isNode(property[match[2]] && property[match[2]])) {
	            latex += property[match[2]].toTex(options);
	          } else {
	            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
	          }
	        }
	      }
	    }

	    latex += template.slice(inputPos); // append rest of the template

	    return latex;
	  } // backup Node's toTex function
	  // @private


	  var nodeToTex = FunctionNode.prototype.toTex;
	  /**
	   * Get LaTeX representation. (wrapper function)
	   * This overrides parts of Node's toTex function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toTex
	   * function.
	   *
	   * @param {Object} options
	   * @return {string}
	   */

	  FunctionNode.prototype.toTex = function (options) {
	    var customTex;

	    if (options && _typeof$b(options.handler) === 'object' && hasOwnProperty$4(options.handler, this.name)) {
	      // callback is a map of callback functions
	      customTex = options.handler[this.name](this, options);
	    }

	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    } // fall back to Node's toTex


	    return nodeToTex.call(this, options);
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  FunctionNode.prototype._toTex = function (options) {
	    var args = this.args.map(function (arg) {
	      // get LaTeX of the arguments
	      return arg.toTex(options);
	    });
	    var latexConverter;

	    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof$b(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {
	      // .toTex is a callback function
	      latexConverter = math[this.name].toTex;
	    }

	    var customToTex;

	    switch (_typeof$b(latexConverter)) {
	      case 'function':
	        // a callback function
	        customToTex = latexConverter(this, options);
	        break;

	      case 'string':
	        // a template string
	        customToTex = expandTemplate(latexConverter, this, options);
	        break;

	      case 'object':
	        // an object with different "converters" for different numbers of arguments
	        switch (_typeof$b(latexConverter[args.length])) {
	          case 'function':
	            customToTex = latexConverter[args.length](this, options);
	            break;

	          case 'string':
	            customToTex = expandTemplate(latexConverter[args.length], this, options);
	            break;
	        }

	    }

	    if (typeof customToTex !== 'undefined') {
	      return customToTex;
	    }

	    return expandTemplate(latex$1.defaultTemplate, this, options);
	  };
	  /**
	   * Get identifier.
	   * @return {string}
	   */


	  FunctionNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.name;
	  };

	  return FunctionNode;
	}

	var name$15 = 'FunctionNode';
	var path$r = 'expression.node';
	var math$9 = true; // request access to the math namespace as 5th argument of the factory function

	var factory_1$1e = factory$1e;

	var FunctionNode = {
		name: name$15,
		path: path$r,
		math: math$9,
		factory: factory_1$1e
	};

	function factory$1f(type, config, load, typed) {
	  var Node = load(Node$1);
	  /**
	   * @constructor RangeNode
	   * @extends {Node}
	   * create a range
	   * @param {Node} start  included lower-bound
	   * @param {Node} end    included upper-bound
	   * @param {Node} [step] optional step
	   */

	  function RangeNode(start, end, step) {
	    if (!(this instanceof RangeNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    } // validate inputs


	    if (!type.isNode(start)) throw new TypeError('Node expected');
	    if (!type.isNode(end)) throw new TypeError('Node expected');
	    if (step && !type.isNode(step)) throw new TypeError('Node expected');
	    if (arguments.length > 3) throw new Error('Too many arguments');
	    this.start = start; // included lower-bound

	    this.end = end; // included upper-bound

	    this.step = step || null; // optional step
	  }

	  RangeNode.prototype = new Node();
	  RangeNode.prototype.type = 'RangeNode';
	  RangeNode.prototype.isRangeNode = true;
	  /**
	   * Check whether the RangeNode needs the `end` symbol to be defined.
	   * This end is the size of the Matrix in current dimension.
	   * @return {boolean}
	   */

	  RangeNode.prototype.needsEnd = function () {
	    // find all `end` symbols in this RangeNode
	    var endSymbols = this.filter(function (node) {
	      return type.isSymbolNode(node) && node.name === 'end';
	    });
	    return endSymbols.length > 0;
	  };
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */


	  RangeNode.prototype._compile = function (math, argNames) {
	    var range = math.range;

	    var evalStart = this.start._compile(math, argNames);

	    var evalEnd = this.end._compile(math, argNames);

	    if (this.step) {
	      var evalStep = this.step._compile(math, argNames);

	      return function evalRangeNode(scope, args, context) {
	        return range(evalStart(scope, args, context), evalEnd(scope, args, context), evalStep(scope, args, context));
	      };
	    } else {
	      return function evalRangeNode(scope, args, context) {
	        return range(evalStart(scope, args, context), evalEnd(scope, args, context));
	      };
	    }
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  RangeNode.prototype.forEach = function (callback) {
	    callback(this.start, 'start', this);
	    callback(this.end, 'end', this);

	    if (this.step) {
	      callback(this.step, 'step', this);
	    }
	  };
	  /**
	   * Create a new RangeNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {RangeNode} Returns a transformed copy of the node
	   */


	  RangeNode.prototype.map = function (callback) {
	    return new RangeNode(this._ifNode(callback(this.start, 'start', this)), this._ifNode(callback(this.end, 'end', this)), this.step && this._ifNode(callback(this.step, 'step', this)));
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {RangeNode}
	   */


	  RangeNode.prototype.clone = function () {
	    return new RangeNode(this.start, this.end, this.step && this.step);
	  };
	  /**
	   * Calculate the necessary parentheses
	   * @param {Node} node
	   * @param {string} parenthesis
	   * @return {Object} parentheses
	   * @private
	   */


	  function calculateNecessaryParentheses(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var parens = {};
	    var startPrecedence = operators.getPrecedence(node.start, parenthesis);
	    parens.start = startPrecedence !== null && startPrecedence <= precedence || parenthesis === 'all';

	    if (node.step) {
	      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
	      parens.step = stepPrecedence !== null && stepPrecedence <= precedence || parenthesis === 'all';
	    }

	    var endPrecedence = operators.getPrecedence(node.end, parenthesis);
	    parens.end = endPrecedence !== null && endPrecedence <= precedence || parenthesis === 'all';
	    return parens;
	  }
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  RangeNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

	    var str;
	    var start = this.start.toString(options);

	    if (parens.start) {
	      start = '(' + start + ')';
	    }

	    str = start;

	    if (this.step) {
	      var step = this.step.toString(options);

	      if (parens.step) {
	        step = '(' + step + ')';
	      }

	      str += ':' + step;
	    }

	    var end = this.end.toString(options);

	    if (parens.end) {
	      end = '(' + end + ')';
	    }

	    str += ':' + end;
	    return str;
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  RangeNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'RangeNode',
	      start: this.start,
	      end: this.end,
	      step: this.step
	    };
	  };
	  /**
	   * Instantiate an RangeNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "RangeNode", "start": ..., "end": ..., "step": ...}`,
	   *                       where mathjs is optional
	   * @returns {RangeNode}
	   */


	  RangeNode.fromJSON = function (json) {
	    return new RangeNode(json.start, json.end, json.step);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  RangeNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis); // format string as start:step:stop

	    var str;
	    var start = this.start.toHTML(options);

	    if (parens.start) {
	      start = '<span class="math-parenthesis math-round-parenthesis">(</span>' + start + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    str = start;

	    if (this.step) {
	      var step = this.step.toHTML(options);

	      if (parens.step) {
	        step = '<span class="math-parenthesis math-round-parenthesis">(</span>' + step + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	      }

	      str += '<span class="math-operator math-range-operator">:</span>' + step;
	    }

	    var end = this.end.toHTML(options);

	    if (parens.end) {
	      end = '<span class="math-parenthesis math-round-parenthesis">(</span>' + end + '<span class="math-parenthesis math-round-parenthesis">)</span>';
	    }

	    str += '<span class="math-operator math-range-operator">:</span>' + end;
	    return str;
	  };
	  /**
	   * Get LaTeX representation
	   * @params {Object} options
	   * @return {string} str
	   */


	  RangeNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);
	    var str = this.start.toTex(options);

	    if (parens.start) {
	      str = "\\left(".concat(str, "\\right)");
	    }

	    if (this.step) {
	      var step = this.step.toTex(options);

	      if (parens.step) {
	        step = "\\left(".concat(step, "\\right)");
	      }

	      str += ':' + step;
	    }

	    var end = this.end.toTex(options);

	    if (parens.end) {
	      end = "\\left(".concat(end, "\\right)");
	    }

	    str += ':' + end;
	    return str;
	  };

	  return RangeNode;
	}

	var name$16 = 'RangeNode';
	var path$s = 'expression.node';
	var factory_1$1f = factory$1f;

	var RangeNode = {
		name: name$16,
		path: path$s,
		factory: factory_1$1f
	};

	var escape$6 = string.escape;

	function factory$1g(type, config, load, typed) {
	  var Node = load(Node$1);

	  var getSafeProperty = customs.getSafeProperty;
	  /**
	   * A node representing a chained conditional expression, such as 'x > y > z'
	   *
	   * @param {String[]} conditionals   An array of conditional operators used to compare the parameters
	   * @param {Node[]} params   The parameters that will be compared
	   *
	   * @constructor RelationalNode
	   * @extends {Node}
	   */


	  function RelationalNode(conditionals, params) {
	    if (!(this instanceof RelationalNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
	    if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
	    if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
	    this.conditionals = conditionals;
	    this.params = params;
	  }

	  RelationalNode.prototype = new Node();
	  RelationalNode.prototype.type = 'RelationalNode';
	  RelationalNode.prototype.isRelationalNode = true;
	  /**
	   * Compile a node into a JavaScript function.
	   * This basically pre-calculates as much as possible and only leaves open
	   * calculations which depend on a dynamic scope with variables.
	   * @param {Object} math     Math.js namespace with functions and constants.
	   * @param {Object} argNames An object with argument names as key and `true`
	   *                          as value. Used in the SymbolNode to optimize
	   *                          for arguments from user assigned functions
	   *                          (see FunctionAssignmentNode) or special symbols
	   *                          like `end` (see IndexNode).
	   * @return {function} Returns a function which can be called like:
	   *                        evalNode(scope: Object, args: Object, context: *)
	   */

	  RelationalNode.prototype._compile = function (math, argNames) {
	    var self = this;
	    var compiled = this.params.map(function (p) {
	      return p._compile(math, argNames);
	    });
	    return function evalRelationalNode(scope, args, context) {
	      var evalLhs;
	      var evalRhs = compiled[0](scope, args, context);

	      for (var i = 0; i < self.conditionals.length; i++) {
	        evalLhs = evalRhs;
	        evalRhs = compiled[i + 1](scope, args, context);
	        var condFn = getSafeProperty(math, self.conditionals[i]);

	        if (!condFn(evalLhs, evalRhs)) {
	          return false;
	        }
	      }

	      return true;
	    };
	  };
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */


	  RelationalNode.prototype.forEach = function (callback) {
	    var _this = this;

	    this.params.forEach(function (n, i) {
	      return callback(n, 'params[' + i + ']', _this);
	    }, this);
	  };
	  /**
	   * Create a new RelationalNode having its childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {RelationalNode} Returns a transformed copy of the node
	   */


	  RelationalNode.prototype.map = function (callback) {
	    var _this2 = this;

	    return new RelationalNode(this.conditionals.slice(), this.params.map(function (n, i) {
	      return _this2._ifNode(callback(n, 'params[' + i + ']', _this2));
	    }, this));
	  };
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {RelationalNode}
	   */


	  RelationalNode.prototype.clone = function () {
	    return new RelationalNode(this.conditionals, this.params);
	  };
	  /**
	   * Get string representation.
	   * @param {Object} options
	   * @return {string} str
	   */


	  RelationalNode.prototype._toString = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis);
	    var paramStrings = this.params.map(function (p, index) {
	      var paramPrecedence = operators.getPrecedence(p, parenthesis);
	      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);
	    });
	    var operatorMap = {
	      'equal': '==',
	      'unequal': '!=',
	      'smaller': '<',
	      'larger': '>',
	      'smallerEq': '<=',
	      'largerEq': '>='
	    };
	    var ret = paramStrings[0];

	    for (var i = 0; i < this.conditionals.length; i++) {
	      ret += ' ' + operatorMap[this.conditionals[i]] + ' ' + paramStrings[i + 1];
	    }

	    return ret;
	  };
	  /**
	   * Get a JSON representation of the node
	   * @returns {Object}
	   */


	  RelationalNode.prototype.toJSON = function () {
	    return {
	      mathjs: 'RelationalNode',
	      conditionals: this.conditionals,
	      params: this.params
	    };
	  };
	  /**
	   * Instantiate a RelationalNode from its JSON representation
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "RelationalNode", "condition": ..., "trueExpr": ..., "falseExpr": ...}`,
	   *                       where mathjs is optional
	   * @returns {RelationalNode}
	   */


	  RelationalNode.fromJSON = function (json) {
	    return new RelationalNode(json.conditionals, json.params);
	  };
	  /**
	   * Get HTML representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  RelationalNode.prototype.toHTML = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis);
	    var paramStrings = this.params.map(function (p, index) {
	      var paramPrecedence = operators.getPrecedence(p, parenthesis);
	      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + p.toHTML(options) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : p.toHTML(options);
	    });
	    var operatorMap = {
	      'equal': '==',
	      'unequal': '!=',
	      'smaller': '<',
	      'larger': '>',
	      'smallerEq': '<=',
	      'largerEq': '>='
	    };
	    var ret = paramStrings[0];

	    for (var i = 0; i < this.conditionals.length; i++) {
	      ret += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + escape$6(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];
	    }

	    return ret;
	  };
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */


	  RelationalNode.prototype._toTex = function (options) {
	    var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis);
	    var paramStrings = this.params.map(function (p, index) {
	      var paramPrecedence = operators.getPrecedence(p, parenthesis);
	      return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\left(' + p.toTex(options) + '\right)' : p.toTex(options);
	    });
	    var ret = paramStrings[0];

	    for (var i = 0; i < this.conditionals.length; i++) {
	      ret += latex.operators[this.conditionals[i]] + paramStrings[i + 1];
	    }

	    return ret;
	  };

	  return RelationalNode;
	}

	var name$17 = 'RelationalNode';
	var path$t = 'expression.node';
	var factory_1$1g = factory$1g;

	var RelationalNode = {
		name: name$17,
		path: path$t,
		factory: factory_1$1g
	};

	function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }





	function factory$1h(type, config, load, typed) {
	  var numeric$1 = load(numeric);
	  var AccessorNode$1 = load(AccessorNode);
	  var ArrayNode$1 = load(ArrayNode);
	  var AssignmentNode$1 = load(AssignmentNode);
	  var BlockNode$1 = load(BlockNode);
	  var ConditionalNode$1 = load(ConditionalNode);
	  var ConstantNode$1 = load(ConstantNode);
	  var FunctionAssignmentNode$1 = load(FunctionAssignmentNode);
	  var IndexNode$1 = load(IndexNode);
	  var ObjectNode$1 = load(ObjectNode);
	  var OperatorNode$1 = load(OperatorNode);
	  var ParenthesisNode$1 = load(ParenthesisNode);
	  var FunctionNode$1 = load(FunctionNode);
	  var RangeNode$1 = load(RangeNode);
	  var RelationalNode$1 = load(RelationalNode);
	  var SymbolNode$1 = load(SymbolNode);
	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval().
	   *
	   * Syntax:
	   *
	   *     parse(expr)
	   *     parse(expr, options)
	   *     parse([expr1, expr2, expr3, ...])
	   *     parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     const node = parse('sqrt(3^2 + 4^2)')
	   *     node.compile(math).eval() // 5
	   *
	   *     let scope = {a:3, b:4}
	   *     const node = parse('a * b') // 12
	   *     const code = node.compile(math)
	   *     code.eval(scope) // 12
	   *     scope.a = 5
	   *     code.eval(scope) // 20
	   *
	   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
	   *     nodes[2].compile(math).eval() // 12
	   *
	   * @param {string | string[] | Matrix} expr
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */

	  function parse(expr, options) {
	    if (arguments.length !== 1 && arguments.length !== 2) {
	      throw new ArgumentsError_1('parse', arguments.length, 1, 2);
	    } // pass extra nodes


	    var extraNodes = options && options.nodes ? options.nodes : {};

	    if (typeof expr === 'string') {
	      // parse a single expression
	      return parseStart(expr, extraNodes);
	    } else if (Array.isArray(expr) || expr instanceof type.Matrix) {
	      // parse an array or matrix with expressions
	      return deepMap(expr, function (elem) {
	        if (typeof elem !== 'string') throw new TypeError('String expected');
	        return parseStart(elem, extraNodes);
	      });
	    } else {
	      // oops
	      throw new TypeError('String or matrix expected');
	    }
	  } // token types enumeration


	  var TOKENTYPE = {
	    NULL: 0,
	    DELIMITER: 1,
	    NUMBER: 2,
	    SYMBOL: 3,
	    UNKNOWN: 4 // map with all delimiters

	  };
	  var DELIMITERS = {
	    ',': true,
	    '(': true,
	    ')': true,
	    '[': true,
	    ']': true,
	    '{': true,
	    '}': true,
	    '"': true,
	    '\'': true,
	    ';': true,
	    '+': true,
	    '-': true,
	    '*': true,
	    '.*': true,
	    '/': true,
	    './': true,
	    '%': true,
	    '^': true,
	    '.^': true,
	    '~': true,
	    '!': true,
	    '&': true,
	    '|': true,
	    '^|': true,
	    '=': true,
	    ':': true,
	    '?': true,
	    '==': true,
	    '!=': true,
	    '<': true,
	    '>': true,
	    '<=': true,
	    '>=': true,
	    '<<': true,
	    '>>': true,
	    '>>>': true // map with all named delimiters

	  };
	  var NAMED_DELIMITERS = {
	    'mod': true,
	    'to': true,
	    'in': true,
	    'and': true,
	    'xor': true,
	    'or': true,
	    'not': true
	  };
	  var CONSTANTS = {
	    'true': true,
	    'false': false,
	    'null': null,
	    'undefined': undefined
	  };
	  var NUMERIC_CONSTANTS = ['NaN', 'Infinity'];

	  function initialState() {
	    return {
	      extraNodes: {},
	      // current extra nodes, must be careful not to mutate
	      expression: '',
	      // current expression
	      comment: '',
	      // last parsed comment
	      index: 0,
	      // current index in expr
	      token: '',
	      // current token
	      tokenType: TOKENTYPE.NULL,
	      // type of the token
	      nestingLevel: 0,
	      // level of nesting inside parameters, used to ignore newline characters
	      conditionalLevel: null // when a conditional is being parsed, the level of the conditional is stored here

	    };
	  }
	  /**
	   * View upto `length` characters of the expression starting at the current character.
	   *
	   * @param {State} state
	   * @param {number} [length=1] Number of characters to view
	   * @returns {string}
	   * @private
	   */


	  function currentString(state, length) {
	    return state.expression.substr(state.index, length);
	  }
	  /**
	   * View the current character. Returns '' if end of expression is reached.
	   *
	   * @param {State} state
	   * @returns {string}
	   * @private
	   */


	  function currentCharacter(state) {
	    return currentString(state, 1);
	  }
	  /**
	   * Get the next character from the expression.
	   * The character is stored into the char c. If the end of the expression is
	   * reached, the function puts an empty string in c.
	   * @private
	   */


	  function next(state) {
	    state.index++;
	  }
	  /**
	   * Preview the previous character from the expression.
	   * @return {string} cNext
	   * @private
	   */


	  function prevCharacter(state) {
	    return state.expression.charAt(state.index - 1);
	  }
	  /**
	   * Preview the next character from the expression.
	   * @return {string} cNext
	   * @private
	   */


	  function nextCharacter(state) {
	    return state.expression.charAt(state.index + 1);
	  }
	  /**
	   * Get next token in the current string expr.
	   * The token and token type are available as token and tokenType
	   * @private
	   */


	  function getToken(state) {
	    state.tokenType = TOKENTYPE.NULL;
	    state.token = '';
	    state.comment = ''; // skip over whitespaces
	    // space, tab, and newline when inside parameters

	    while (parse.isWhitespace(currentCharacter(state), state.nestingLevel)) {
	      next(state);
	    } // skip comment


	    if (currentCharacter(state) === '#') {
	      while (currentCharacter(state) !== '\n' && currentCharacter(state) !== '') {
	        state.comment += currentCharacter(state);
	        next(state);
	      }
	    } // check for end of expression


	    if (currentCharacter(state) === '') {
	      // token is still empty
	      state.tokenType = TOKENTYPE.DELIMITER;
	      return;
	    } // check for new line character


	    if (currentCharacter(state) === '\n' && !state.nestingLevel) {
	      state.tokenType = TOKENTYPE.DELIMITER;
	      state.token = currentCharacter(state);
	      next(state);
	      return;
	    }

	    var c1 = currentCharacter(state);
	    var c2 = currentString(state, 2);
	    var c3 = currentString(state, 3);

	    if (c3.length === 3 && DELIMITERS[c3]) {
	      state.tokenType = TOKENTYPE.DELIMITER;
	      state.token = c3;
	      next(state);
	      next(state);
	      next(state);
	      return;
	    } // check for delimiters consisting of 2 characters


	    if (c2.length === 2 && DELIMITERS[c2]) {
	      state.tokenType = TOKENTYPE.DELIMITER;
	      state.token = c2;
	      next(state);
	      next(state);
	      return;
	    } // check for delimiters consisting of 1 character


	    if (DELIMITERS[c1]) {
	      state.tokenType = TOKENTYPE.DELIMITER;
	      state.token = c1;
	      next(state);
	      return;
	    } // check for a number


	    if (parse.isDigitDot(c1)) {
	      state.tokenType = TOKENTYPE.NUMBER; // get number, can have a single dot

	      if (currentCharacter(state) === '.') {
	        state.token += currentCharacter(state);
	        next(state);

	        if (!parse.isDigit(currentCharacter(state))) {
	          // this is no number, it is just a dot (can be dot notation)
	          state.tokenType = TOKENTYPE.DELIMITER;
	        }
	      } else {
	        while (parse.isDigit(currentCharacter(state))) {
	          state.token += currentCharacter(state);
	          next(state);
	        }

	        if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
	          state.token += currentCharacter(state);
	          next(state);
	        }
	      }

	      while (parse.isDigit(currentCharacter(state))) {
	        state.token += currentCharacter(state);
	        next(state);
	      } // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"


	      if (currentCharacter(state) === 'E' || currentCharacter(state) === 'e') {
	        if (parse.isDigit(nextCharacter(state)) || nextCharacter(state) === '-' || nextCharacter(state) === '+') {
	          state.token += currentCharacter(state);
	          next(state);

	          if (currentCharacter(state) === '+' || currentCharacter(state) === '-') {
	            state.token += currentCharacter(state);
	            next(state);
	          } // Scientific notation MUST be followed by an exponent


	          if (!parse.isDigit(currentCharacter(state))) {
	            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
	          }

	          while (parse.isDigit(currentCharacter(state))) {
	            state.token += currentCharacter(state);
	            next(state);
	          }

	          if (parse.isDecimalMark(currentCharacter(state), nextCharacter(state))) {
	            throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
	          }
	        } else if (nextCharacter(state) === '.') {
	          next(state);
	          throw createSyntaxError(state, 'Digit expected, got "' + currentCharacter(state) + '"');
	        }
	      }

	      return;
	    } // check for variables, functions, named operators


	    if (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state))) {
	      while (parse.isAlpha(currentCharacter(state), prevCharacter(state), nextCharacter(state)) || parse.isDigit(currentCharacter(state))) {
	        state.token += currentCharacter(state);
	        next(state);
	      }

	      if (NAMED_DELIMITERS.hasOwnProperty(state.token)) {
	        state.tokenType = TOKENTYPE.DELIMITER;
	      } else {
	        state.tokenType = TOKENTYPE.SYMBOL;
	      }

	      return;
	    } // something unknown is found, wrong characters -> a syntax error


	    state.tokenType = TOKENTYPE.UNKNOWN;

	    while (currentCharacter(state) !== '') {
	      state.token += currentCharacter(state);
	      next(state);
	    }

	    throw createSyntaxError(state, 'Syntax error in part "' + state.token + '"');
	  }
	  /**
	   * Get next token and skip newline tokens
	   */


	  function getTokenSkipNewline(state) {
	    do {
	      getToken(state);
	    } while (state.token === '\n'); // eslint-disable-line no-unmodified-loop-condition

	  }
	  /**
	   * Open parameters.
	   * New line characters will be ignored until closeParams(state) is called
	   */


	  function openParams(state) {
	    state.nestingLevel++;
	  }
	  /**
	   * Close parameters.
	   * New line characters will no longer be ignored
	   */


	  function closeParams(state) {
	    state.nestingLevel--;
	  }
	  /**
	   * Checks whether the current character `c` is a valid alpha character:
	   *
	   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
	   * - An underscore                        Ascii: _
	   * - A dollar sign                        Ascii: $
	   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
	   * - A greek letter                       Unicode: \u0370 - \u03FF
	   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
	   *
	   * The previous and next characters are needed to determine whether
	   * this character is part of a unicode surrogate pair.
	   *
	   * @param {string} c      Current character in the expression
	   * @param {string} cPrev  Previous character
	   * @param {string} cNext  Next character
	   * @return {boolean}
	   */


	  parse.isAlpha = function isAlpha(c, cPrev, cNext) {
	    return parse.isValidLatinOrGreek(c) || parse.isValidMathSymbol(c, cNext) || parse.isValidMathSymbol(cPrev, c);
	  };
	  /**
	   * Test whether a character is a valid latin, greek, or letter-like character
	   * @param {string} c
	   * @return {boolean}
	   */


	  parse.isValidLatinOrGreek = function isValidLatinOrGreek(c) {
	    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
	  };
	  /**
	   * Test whether two given 16 bit characters form a surrogate pair of a
	   * unicode math symbol.
	   *
	   * http://unicode-table.com/en/
	   * http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
	   *
	   * Note: In ES6 will be unicode aware:
	   * http://stackoverflow.com/questions/280712/javascript-unicode-regexes
	   * https://mathiasbynens.be/notes/es6-unicode-regex
	   *
	   * @param {string} high
	   * @param {string} low
	   * @return {boolean}
	   */


	  parse.isValidMathSymbol = function isValidMathSymbol(high, low) {
	    return /^[\uD835]$/.test(high) && /^[\uDC00-\uDFFF]$/.test(low) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
	  };
	  /**
	   * Check whether given character c is a white space character: space, tab, or enter
	   * @param {string} c
	   * @param {number} nestingLevel
	   * @return {boolean}
	   */


	  parse.isWhitespace = function isWhitespace(c, nestingLevel) {
	    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
	    return c === ' ' || c === '\t' || c === '\n' && nestingLevel > 0;
	  };
	  /**
	   * Test whether the character c is a decimal mark (dot).
	   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
	   * @param {string} c
	   * @param {string} cNext
	   * @return {boolean}
	   */


	  parse.isDecimalMark = function isDecimalMark(c, cNext) {
	    return c === '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
	  };
	  /**
	   * checks if the given char c is a digit or dot
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   */


	  parse.isDigitDot = function isDigitDot(c) {
	    return c >= '0' && c <= '9' || c === '.';
	  };
	  /**
	   * checks if the given char c is a digit
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   */


	  parse.isDigit = function isDigit(c) {
	    return c >= '0' && c <= '9';
	  };
	  /**
	   * Start of the parse levels below, in order of precedence
	   * @return {Node} node
	   * @private
	   */


	  function parseStart(expression, extraNodes) {
	    var state = initialState();

	    _extends$2(state, {
	      expression: expression,
	      extraNodes: extraNodes
	    });

	    getToken(state);
	    var node = parseBlock(state); // check for garbage at the end of the expression
	    // an expression ends with a empty character '' and tokenType DELIMITER

	    if (state.token !== '') {
	      if (state.tokenType === TOKENTYPE.DELIMITER) {
	        // user entered a not existing operator like "//"
	        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean !== ?"
	        throw createError(state, 'Unexpected operator ' + state.token);
	      } else {
	        throw createSyntaxError(state, 'Unexpected part "' + state.token + '"');
	      }
	    }

	    return node;
	  }
	  /**
	   * Parse a block with expressions. Expressions can be separated by a newline
	   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
	   * of the preceding line is returned.
	   * @return {Node} node
	   * @private
	   */


	  function parseBlock(state) {
	    var node;
	    var blocks = [];
	    var visible;

	    if (state.token !== '' && state.token !== '\n' && state.token !== ';') {
	      node = parseAssignment(state);
	      node.comment = state.comment;
	    } // TODO: simplify this loop


	    while (state.token === '\n' || state.token === ';') {
	      // eslint-disable-line no-unmodified-loop-condition
	      if (blocks.length === 0 && node) {
	        visible = state.token !== ';';
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }

	      getToken(state);

	      if (state.token !== '\n' && state.token !== ';' && state.token !== '') {
	        node = parseAssignment(state);
	        node.comment = state.comment;
	        visible = state.token !== ';';
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }
	    }

	    if (blocks.length > 0) {
	      return new BlockNode$1(blocks);
	    } else {
	      if (!node) {
	        node = new ConstantNode$1(undefined);
	        node.comment = state.comment;
	      }

	      return node;
	    }
	  }
	  /**
	   * Assignment of a function or variable,
	   * - can be a variable like 'a=2.3'
	   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
	   * - defining a function like 'f(x) = x^2'
	   * @return {Node} node
	   * @private
	   */


	  function parseAssignment(state) {
	    var name, args, value, valid;
	    var node = parseConditional(state);

	    if (state.token === '=') {
	      if (type.isSymbolNode(node)) {
	        // parse a variable assignment like 'a = 2/3'
	        name = node.name;
	        getTokenSkipNewline(state);
	        value = parseAssignment(state);
	        return new AssignmentNode$1(new SymbolNode$1(name), value);
	      } else if (type.isAccessorNode(node)) {
	        // parse a matrix subset assignment like 'A[1,2] = 4'
	        getTokenSkipNewline(state);
	        value = parseAssignment(state);
	        return new AssignmentNode$1(node.object, node.index, value);
	      } else if (type.isFunctionNode(node) && type.isSymbolNode(node.fn)) {
	        // parse function assignment like 'f(x) = x^2'
	        valid = true;
	        args = [];
	        name = node.name;
	        node.args.forEach(function (arg, index) {
	          if (type.isSymbolNode(arg)) {
	            args[index] = arg.name;
	          } else {
	            valid = false;
	          }
	        });

	        if (valid) {
	          getTokenSkipNewline(state);
	          value = parseAssignment(state);
	          return new FunctionAssignmentNode$1(name, args, value);
	        }
	      }

	      throw createSyntaxError(state, 'Invalid left hand side of assignment operator =');
	    }

	    return node;
	  }
	  /**
	   * conditional operation
	   *
	   *     condition ? truePart : falsePart
	   *
	   * Note: conditional operator is right-associative
	   *
	   * @return {Node} node
	   * @private
	   */


	  function parseConditional(state) {
	    var node = parseLogicalOr(state);

	    while (state.token === '?') {
	      // eslint-disable-line no-unmodified-loop-condition
	      // set a conditional level, the range operator will be ignored as long
	      // as conditionalLevel === state.nestingLevel.
	      var prev = state.conditionalLevel;
	      state.conditionalLevel = state.nestingLevel;
	      getTokenSkipNewline(state);
	      var condition = node;
	      var trueExpr = parseAssignment(state);
	      if (state.token !== ':') throw createSyntaxError(state, 'False part of conditional expression expected');
	      state.conditionalLevel = null;
	      getTokenSkipNewline(state);
	      var falseExpr = parseAssignment(state); // Note: check for conditional operator again, right associativity

	      node = new ConditionalNode$1(condition, trueExpr, falseExpr); // restore the previous conditional level

	      state.conditionalLevel = prev;
	    }

	    return node;
	  }
	  /**
	   * logical or, 'x or y'
	   * @return {Node} node
	   * @private
	   */


	  function parseLogicalOr(state) {
	    var node = parseLogicalXor(state);

	    while (state.token === 'or') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$1('or', 'or', [node, parseLogicalXor(state)]);
	    }

	    return node;
	  }
	  /**
	   * logical exclusive or, 'x xor y'
	   * @return {Node} node
	   * @private
	   */


	  function parseLogicalXor(state) {
	    var node = parseLogicalAnd(state);

	    while (state.token === 'xor') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$1('xor', 'xor', [node, parseLogicalAnd(state)]);
	    }

	    return node;
	  }
	  /**
	   * logical and, 'x and y'
	   * @return {Node} node
	   * @private
	   */


	  function parseLogicalAnd(state) {
	    var node = parseBitwiseOr(state);

	    while (state.token === 'and') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$1('and', 'and', [node, parseBitwiseOr(state)]);
	    }

	    return node;
	  }
	  /**
	   * bitwise or, 'x | y'
	   * @return {Node} node
	   * @private
	   */


	  function parseBitwiseOr(state) {
	    var node = parseBitwiseXor(state);

	    while (state.token === '|') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$1('|', 'bitOr', [node, parseBitwiseXor(state)]);
	    }

	    return node;
	  }
	  /**
	   * bitwise exclusive or (xor), 'x ^| y'
	   * @return {Node} node
	   * @private
	   */


	  function parseBitwiseXor(state) {
	    var node = parseBitwiseAnd(state);

	    while (state.token === '^|') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$1('^|', 'bitXor', [node, parseBitwiseAnd(state)]);
	    }

	    return node;
	  }
	  /**
	   * bitwise and, 'x & y'
	   * @return {Node} node
	   * @private
	   */


	  function parseBitwiseAnd(state) {
	    var node = parseRelational(state);

	    while (state.token === '&') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getTokenSkipNewline(state);
	      node = new OperatorNode$1('&', 'bitAnd', [node, parseRelational(state)]);
	    }

	    return node;
	  }
	  /**
	   * Parse a chained conditional, like 'a > b >= c'
	   * @return {Node} node
	   */


	  function parseRelational(state) {
	    var params = [parseShift(state)];
	    var conditionals = [];
	    var operators = {
	      '==': 'equal',
	      '!=': 'unequal',
	      '<': 'smaller',
	      '>': 'larger',
	      '<=': 'smallerEq',
	      '>=': 'largerEq'
	    };

	    while (operators.hasOwnProperty(state.token)) {
	      // eslint-disable-line no-unmodified-loop-condition
	      var cond = {
	        name: state.token,
	        fn: operators[state.token]
	      };
	      conditionals.push(cond);
	      getTokenSkipNewline(state);
	      params.push(parseShift(state));
	    }

	    if (params.length === 1) {
	      return params[0];
	    } else if (params.length === 2) {
	      return new OperatorNode$1(conditionals[0].name, conditionals[0].fn, params);
	    } else {
	      return new RelationalNode$1(conditionals.map(function (c) {
	        return c.fn;
	      }), params);
	    }
	  }
	  /**
	   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
	   * @return {Node} node
	   * @private
	   */


	  function parseShift(state) {
	    var node, operators, name, fn, params;
	    node = parseConversion(state);
	    operators = {
	      '<<': 'leftShift',
	      '>>': 'rightArithShift',
	      '>>>': 'rightLogShift'
	    };

	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];
	      getTokenSkipNewline(state);
	      params = [node, parseConversion(state)];
	      node = new OperatorNode$1(name, fn, params);
	    }

	    return node;
	  }
	  /**
	   * conversion operators 'to' and 'in'
	   * @return {Node} node
	   * @private
	   */


	  function parseConversion(state) {
	    var node, operators, name, fn, params;
	    node = parseRange(state);
	    operators = {
	      'to': 'to',
	      'in': 'to' // alias of 'to'

	    };

	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];
	      getTokenSkipNewline(state);

	      if (name === 'in' && state.token === '') {
	        // end of expression -> this is the unit 'in' ('inch')
	        node = new OperatorNode$1('*', 'multiply', [node, new SymbolNode$1('in')], true);
	      } else {
	        // operator 'a to b' or 'a in b'
	        params = [node, parseRange(state)];
	        node = new OperatorNode$1(name, fn, params);
	      }
	    }

	    return node;
	  }
	  /**
	   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
	   * @return {Node} node
	   * @private
	   */


	  function parseRange(state) {
	    var node;
	    var params = [];

	    if (state.token === ':') {
	      // implicit start=1 (one-based)
	      node = new ConstantNode$1(1);
	    } else {
	      // explicit start
	      node = parseAddSubtract(state);
	    }

	    if (state.token === ':' && state.conditionalLevel !== state.nestingLevel) {
	      // we ignore the range operator when a conditional operator is being processed on the same level
	      params.push(node); // parse step and end

	      while (state.token === ':' && params.length < 3) {
	        // eslint-disable-line no-unmodified-loop-condition
	        getTokenSkipNewline(state);

	        if (state.token === ')' || state.token === ']' || state.token === ',' || state.token === '') {
	          // implicit end
	          params.push(new SymbolNode$1('end'));
	        } else {
	          // explicit end
	          params.push(parseAddSubtract(state));
	        }
	      }

	      if (params.length === 3) {
	        // params = [start, step, end]
	        node = new RangeNode$1(params[0], params[2], params[1]); // start, end, step
	      } else {
	        // length === 2
	        // params = [start, end]
	        node = new RangeNode$1(params[0], params[1]); // start, end
	      }
	    }

	    return node;
	  }
	  /**
	   * add or subtract
	   * @return {Node} node
	   * @private
	   */


	  function parseAddSubtract(state) {
	    var node, operators, name, fn, params;
	    node = parseMultiplyDivide(state);
	    operators = {
	      '+': 'add',
	      '-': 'subtract'
	    };

	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];
	      getTokenSkipNewline(state);
	      params = [node, parseMultiplyDivide(state)];
	      node = new OperatorNode$1(name, fn, params);
	    }

	    return node;
	  }
	  /**
	   * multiply, divide, modulus
	   * @return {Node} node
	   * @private
	   */


	  function parseMultiplyDivide(state) {
	    var node, last, operators, name, fn;
	    node = parseImplicitMultiplication(state);
	    last = node;
	    operators = {
	      '*': 'multiply',
	      '.*': 'dotMultiply',
	      '/': 'divide',
	      './': 'dotDivide',
	      '%': 'mod',
	      'mod': 'mod'
	    };

	    while (true) {
	      if (operators.hasOwnProperty(state.token)) {
	        // explicit operators
	        name = state.token;
	        fn = operators[name];
	        getTokenSkipNewline(state);
	        last = parseImplicitMultiplication(state);
	        node = new OperatorNode$1(name, fn, [node, last]);
	      } else {
	        break;
	      }
	    }

	    return node;
	  }
	  /**
	   * implicit multiplication
	   * @return {Node} node
	   * @private
	   */


	  function parseImplicitMultiplication(state) {
	    var node, last;
	    node = parseRule2(state);
	    last = node;

	    while (true) {
	      if (state.tokenType === TOKENTYPE.SYMBOL || state.token === 'in' && type.isConstantNode(node) || state.tokenType === TOKENTYPE.NUMBER && !type.isConstantNode(last) && (!type.isOperatorNode(last) || last.op === '!') || state.token === '(') {
	        // parse implicit multiplication
	        //
	        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
	        // number:      implicit multiplication like '(2+3)2'
	        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
	        last = parseRule2(state);
	        node = new OperatorNode$1('*', 'multiply', [node, last], true
	        /* implicit */
	        );
	      } else {
	        break;
	      }
	    }

	    return node;
	  }
	  /**
	   * Infamous "rule 2" as described in https://github.com/josdejong/mathjs/issues/792#issuecomment-361065370
	   * Explicit division gets higher precedence than implicit multiplication
	   * when the division matches this pattern: [number] / [number] [symbol]
	   * @return {Node} node
	   * @private
	   */


	  function parseRule2(state) {
	    var node = parseUnary(state);
	    var last = node;
	    var tokenStates = [];

	    while (true) {
	      // Match the "number /" part of the pattern "number / number symbol"
	      if (state.token === '/' && type.isConstantNode(last)) {
	        // Look ahead to see if the next token is a number
	        tokenStates.push(_extends$2({}, state));
	        getTokenSkipNewline(state); // Match the "number / number" part of the pattern

	        if (state.tokenType === TOKENTYPE.NUMBER) {
	          // Look ahead again
	          tokenStates.push(_extends$2({}, state));
	          getTokenSkipNewline(state); // Match the "symbol" part of the pattern, or a left parenthesis

	          if (state.tokenType === TOKENTYPE.SYMBOL || state.token === '(') {
	            // We've matched the pattern "number / number symbol".
	            // Rewind once and build the "number / number" node; the symbol will be consumed later
	            _extends$2(state, tokenStates.pop());

	            tokenStates.pop();
	            last = parseUnary(state);
	            node = new OperatorNode$1('/', 'divide', [node, last]);
	          } else {
	            // Not a match, so rewind
	            tokenStates.pop();

	            _extends$2(state, tokenStates.pop());

	            break;
	          }
	        } else {
	          // Not a match, so rewind
	          _extends$2(state, tokenStates.pop());

	          break;
	        }
	      } else {
	        break;
	      }
	    }

	    return node;
	  }
	  /**
	   * Unary plus and minus, and logical and bitwise not
	   * @return {Node} node
	   * @private
	   */


	  function parseUnary(state) {
	    var name, params, fn;
	    var operators = {
	      '-': 'unaryMinus',
	      '+': 'unaryPlus',
	      '~': 'bitNot',
	      'not': 'not'
	    };

	    if (operators.hasOwnProperty(state.token)) {
	      fn = operators[state.token];
	      name = state.token;
	      getTokenSkipNewline(state);
	      params = [parseUnary(state)];
	      return new OperatorNode$1(name, fn, params);
	    }

	    return parsePow(state);
	  }
	  /**
	   * power
	   * Note: power operator is right associative
	   * @return {Node} node
	   * @private
	   */


	  function parsePow(state) {
	    var node, name, fn, params;
	    node = parseLeftHandOperators(state);

	    if (state.token === '^' || state.token === '.^') {
	      name = state.token;
	      fn = name === '^' ? 'pow' : 'dotPow';
	      getTokenSkipNewline(state);
	      params = [node, parseUnary(state)]; // Go back to unary, we can have '2^-3'

	      node = new OperatorNode$1(name, fn, params);
	    }

	    return node;
	  }
	  /**
	   * Left hand operators: factorial x!, ctranspose x'
	   * @return {Node} node
	   * @private
	   */


	  function parseLeftHandOperators(state) {
	    var node, operators, name, fn, params;
	    node = parseCustomNodes(state);
	    operators = {
	      '!': 'factorial',
	      '\'': 'ctranspose'
	    };

	    while (operators.hasOwnProperty(state.token)) {
	      name = state.token;
	      fn = operators[name];
	      getToken(state);
	      params = [node];
	      node = new OperatorNode$1(name, fn, params);
	      node = parseAccessors(state, node);
	    }

	    return node;
	  }
	  /**
	   * Parse a custom node handler. A node handler can be used to process
	   * nodes in a custom way, for example for handling a plot.
	   *
	   * A handler must be passed as second argument of the parse function.
	   * - must extend math.expression.node.Node
	   * - must contain a function _compile(defs: Object) : string
	   * - must contain a function find(filter: Object) : Node[]
	   * - must contain a function toString() : string
	   * - the constructor is called with a single argument containing all parameters
	   *
	   * For example:
	   *
	   *     nodes = {
	   *       'plot': PlotHandler
	   *     }
	   *
	   * The constructor of the handler is called as:
	   *
	   *     node = new PlotHandler(params)
	   *
	   * The handler will be invoked when evaluating an expression like:
	   *
	   *     node = math.parse('plot(sin(x), x)', nodes)
	   *
	   * @return {Node} node
	   * @private
	   */


	  function parseCustomNodes(state) {
	    var params = [];

	    if (state.tokenType === TOKENTYPE.SYMBOL && state.extraNodes.hasOwnProperty(state.token)) {
	      var CustomNode = state.extraNodes[state.token];
	      getToken(state); // parse parameters

	      if (state.token === '(') {
	        params = [];
	        openParams(state);
	        getToken(state);

	        if (state.token !== ')') {
	          params.push(parseAssignment(state)); // parse a list with parameters

	          while (state.token === ',') {
	            // eslint-disable-line no-unmodified-loop-condition
	            getToken(state);
	            params.push(parseAssignment(state));
	          }
	        }

	        if (state.token !== ')') {
	          throw createSyntaxError(state, 'Parenthesis ) expected');
	        }

	        closeParams(state);
	        getToken(state);
	      } // create a new custom node
	      // noinspection JSValidateTypes


	      return new CustomNode(params);
	    }

	    return parseSymbol(state);
	  }
	  /**
	   * parse symbols: functions, variables, constants, units
	   * @return {Node} node
	   * @private
	   */


	  function parseSymbol(state) {
	    var node, name;

	    if (state.tokenType === TOKENTYPE.SYMBOL || state.tokenType === TOKENTYPE.DELIMITER && state.token in NAMED_DELIMITERS) {
	      name = state.token;
	      getToken(state);

	      if (CONSTANTS.hasOwnProperty(name)) {
	        // true, false, null, ...
	        node = new ConstantNode$1(CONSTANTS[name]);
	      } else if (NUMERIC_CONSTANTS.indexOf(name) !== -1) {
	        // NaN, Infinity
	        node = new ConstantNode$1(numeric$1(name, 'number'));
	      } else {
	        node = new SymbolNode$1(name);
	      } // parse function parameters and matrix index


	      node = parseAccessors(state, node);
	      return node;
	    }

	    return parseDoubleQuotesString(state);
	  }
	  /**
	   * parse accessors:
	   * - function invocation in round brackets (...), for example sqrt(2)
	   * - index enclosed in square brackets [...], for example A[2,3]
	   * - dot notation for properties, like foo.bar
	   * @param {Node} node    Node on which to apply the parameters. If there
	   *                       are no parameters in the expression, the node
	   *                       itself is returned
	   * @param {string[]} [types]  Filter the types of notations
	   *                            can be ['(', '[', '.']
	   * @return {Node} node
	   * @private
	   */


	  function parseAccessors(state, node, types) {
	    var params;

	    while ((state.token === '(' || state.token === '[' || state.token === '.') && (!types || types.indexOf(state.token) !== -1)) {
	      // eslint-disable-line no-unmodified-loop-condition
	      params = [];

	      if (state.token === '(') {
	        if (type.isSymbolNode(node) || type.isAccessorNode(node)) {
	          // function invocation like fn(2, 3) or obj.fn(2, 3)
	          openParams(state);
	          getToken(state);

	          if (state.token !== ')') {
	            params.push(parseAssignment(state)); // parse a list with parameters

	            while (state.token === ',') {
	              // eslint-disable-line no-unmodified-loop-condition
	              getToken(state);
	              params.push(parseAssignment(state));
	            }
	          }

	          if (state.token !== ')') {
	            throw createSyntaxError(state, 'Parenthesis ) expected');
	          }

	          closeParams(state);
	          getToken(state);
	          node = new FunctionNode$1(node, params);
	        } else {
	          // implicit multiplication like (2+3)(4+5) or sqrt(2)(1+2)
	          // don't parse it here but let it be handled by parseImplicitMultiplication
	          // with correct precedence
	          return node;
	        }
	      } else if (state.token === '[') {
	        // index notation like variable[2, 3]
	        openParams(state);
	        getToken(state);

	        if (state.token !== ']') {
	          params.push(parseAssignment(state)); // parse a list with parameters

	          while (state.token === ',') {
	            // eslint-disable-line no-unmodified-loop-condition
	            getToken(state);
	            params.push(parseAssignment(state));
	          }
	        }

	        if (state.token !== ']') {
	          throw createSyntaxError(state, 'Parenthesis ] expected');
	        }

	        closeParams(state);
	        getToken(state);
	        node = new AccessorNode$1(node, new IndexNode$1(params));
	      } else {
	        // dot notation like variable.prop
	        getToken(state);

	        if (state.tokenType !== TOKENTYPE.SYMBOL) {
	          throw createSyntaxError(state, 'Property name expected after dot');
	        }

	        params.push(new ConstantNode$1(state.token));
	        getToken(state);
	        var dotNotation = true;
	        node = new AccessorNode$1(node, new IndexNode$1(params, dotNotation));
	      }
	    }

	    return node;
	  }
	  /**
	   * Parse a double quotes string.
	   * @return {Node} node
	   * @private
	   */


	  function parseDoubleQuotesString(state) {
	    var node, str;

	    if (state.token === '"') {
	      str = parseDoubleQuotesStringToken(state); // create constant

	      node = new ConstantNode$1(str); // parse index parameters

	      node = parseAccessors(state, node);
	      return node;
	    }

	    return parseSingleQuotesString(state);
	  }
	  /**
	   * Parse a string surrounded by double quotes "..."
	   * @return {string}
	   */


	  function parseDoubleQuotesStringToken(state) {
	    var str = '';

	    while (currentCharacter(state) !== '' && currentCharacter(state) !== '"') {
	      if (currentCharacter(state) === '\\') {
	        // escape character, immediately process the next
	        // character to prevent stopping at a next '\"'
	        str += currentCharacter(state);
	        next(state);
	      }

	      str += currentCharacter(state);
	      next(state);
	    }

	    getToken(state);

	    if (state.token !== '"') {
	      throw createSyntaxError(state, 'End of string " expected');
	    }

	    getToken(state);
	    return JSON.parse('"' + str + '"'); // unescape escaped characters
	  }
	  /**
	   * Parse a single quotes string.
	   * @return {Node} node
	   * @private
	   */


	  function parseSingleQuotesString(state) {
	    var node, str;

	    if (state.token === '\'') {
	      str = parseSingleQuotesStringToken(state); // create constant

	      node = new ConstantNode$1(str); // parse index parameters

	      node = parseAccessors(state, node);
	      return node;
	    }

	    return parseMatrix(state);
	  }
	  /**
	   * Parse a string surrounded by single quotes '...'
	   * @return {string}
	   */


	  function parseSingleQuotesStringToken(state) {
	    var str = '';

	    while (currentCharacter(state) !== '' && currentCharacter(state) !== '\'') {
	      if (currentCharacter(state) === '\\') {
	        // escape character, immediately process the next
	        // character to prevent stopping at a next '\''
	        str += currentCharacter(state);
	        next(state);
	      }

	      str += currentCharacter(state);
	      next(state);
	    }

	    getToken(state);

	    if (state.token !== '\'') {
	      throw createSyntaxError(state, 'End of string \' expected');
	    }

	    getToken(state);
	    return JSON.parse('"' + str + '"'); // unescape escaped characters
	  }
	  /**
	   * parse the matrix
	   * @return {Node} node
	   * @private
	   */


	  function parseMatrix(state) {
	    var array, params, rows, cols;

	    if (state.token === '[') {
	      // matrix [...]
	      openParams(state);
	      getToken(state);

	      if (state.token !== ']') {
	        // this is a non-empty matrix
	        var row = parseRow(state);

	        if (state.token === ';') {
	          // 2 dimensional array
	          rows = 1;
	          params = [row]; // the rows of the matrix are separated by dot-comma's

	          while (state.token === ';') {
	            // eslint-disable-line no-unmodified-loop-condition
	            getToken(state);
	            params[rows] = parseRow(state);
	            rows++;
	          }

	          if (state.token !== ']') {
	            throw createSyntaxError(state, 'End of matrix ] expected');
	          }

	          closeParams(state);
	          getToken(state); // check if the number of columns matches in all rows

	          cols = params[0].items.length;

	          for (var r = 1; r < rows; r++) {
	            if (params[r].items.length !== cols) {
	              throw createError(state, 'Column dimensions mismatch ' + '(' + params[r].items.length + ' !== ' + cols + ')');
	            }
	          }

	          array = new ArrayNode$1(params);
	        } else {
	          // 1 dimensional vector
	          if (state.token !== ']') {
	            throw createSyntaxError(state, 'End of matrix ] expected');
	          }

	          closeParams(state);
	          getToken(state);
	          array = row;
	        }
	      } else {
	        // this is an empty matrix "[ ]"
	        closeParams(state);
	        getToken(state);
	        array = new ArrayNode$1([]);
	      }

	      return parseAccessors(state, array);
	    }

	    return parseObject(state);
	  }
	  /**
	   * Parse a single comma-separated row from a matrix, like 'a, b, c'
	   * @return {ArrayNode} node
	   */


	  function parseRow(state) {
	    var params = [parseAssignment(state)];
	    var len = 1;

	    while (state.token === ',') {
	      // eslint-disable-line no-unmodified-loop-condition
	      getToken(state); // parse expression

	      params[len] = parseAssignment(state);
	      len++;
	    }

	    return new ArrayNode$1(params);
	  }
	  /**
	   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
	   * @return {Node} node
	   * @private
	   */


	  function parseObject(state) {
	    if (state.token === '{') {
	      openParams(state);
	      var key;
	      var properties = {};

	      do {
	        getToken(state);

	        if (state.token !== '}') {
	          // parse key
	          if (state.token === '"') {
	            key = parseDoubleQuotesStringToken(state);
	          } else if (state.token === '\'') {
	            key = parseSingleQuotesStringToken(state);
	          } else if (state.tokenType === TOKENTYPE.SYMBOL) {
	            key = state.token;
	            getToken(state);
	          } else {
	            throw createSyntaxError(state, 'Symbol or string expected as object key');
	          } // parse key/value separator


	          if (state.token !== ':') {
	            throw createSyntaxError(state, 'Colon : expected after object key');
	          }

	          getToken(state); // parse key

	          properties[key] = parseAssignment(state);
	        }
	      } while (state.token === ','); // eslint-disable-line no-unmodified-loop-condition


	      if (state.token !== '}') {
	        throw createSyntaxError(state, 'Comma , or bracket } expected after object value');
	      }

	      closeParams(state);
	      getToken(state);
	      var node = new ObjectNode$1(properties); // parse index parameters

	      node = parseAccessors(state, node);
	      return node;
	    }

	    return parseNumber(state);
	  }
	  /**
	   * parse a number
	   * @return {Node} node
	   * @private
	   */


	  function parseNumber(state) {
	    var numberStr;

	    if (state.tokenType === TOKENTYPE.NUMBER) {
	      // this is a number
	      numberStr = state.token;
	      getToken(state);
	      return new ConstantNode$1(numeric$1(numberStr, config.number));
	    }

	    return parseParentheses(state);
	  }
	  /**
	   * parentheses
	   * @return {Node} node
	   * @private
	   */


	  function parseParentheses(state) {
	    var node; // check if it is a parenthesized expression

	    if (state.token === '(') {
	      // parentheses (...)
	      openParams(state);
	      getToken(state);
	      node = parseAssignment(state); // start again

	      if (state.token !== ')') {
	        throw createSyntaxError(state, 'Parenthesis ) expected');
	      }

	      closeParams(state);
	      getToken(state);
	      node = new ParenthesisNode$1(node);
	      node = parseAccessors(state, node);
	      return node;
	    }

	    return parseEnd(state);
	  }
	  /**
	   * Evaluated when the expression is not yet ended but expected to end
	   * @return {Node} res
	   * @private
	   */


	  function parseEnd(state) {
	    if (state.token === '') {
	      // syntax error or unexpected end of expression
	      throw createSyntaxError(state, 'Unexpected end of expression');
	    } else {
	      throw createSyntaxError(state, 'Value expected');
	    }
	  }
	  /**
	   * Shortcut for getting the current row value (one based)
	   * Returns the line of the currently handled expression
	   * @private
	   */

	  /* TODO: implement keeping track on the row number
	  function row () {
	    return null
	  }
	  */

	  /**
	   * Shortcut for getting the current col value (one based)
	   * Returns the column (position) where the last state.token starts
	   * @private
	   */


	  function col(state) {
	    return state.index - state.token.length + 1;
	  }
	  /**
	   * Create an error
	   * @param {string} message
	   * @return {SyntaxError} instantiated error
	   * @private
	   */


	  function createSyntaxError(state, message) {
	    var c = col(state);
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;
	    return error;
	  }
	  /**
	   * Create an error
	   * @param {string} message
	   * @return {Error} instantiated error
	   * @private
	   */


	  function createError(state, message) {
	    var c = col(state);
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;
	    return error;
	  }

	  return parse;
	}

	var name$18 = 'parse';
	var path$u = 'expression';
	var factory_1$1h = factory$1h;

	var parse = {
		name: name$18,
		path: path$u,
		factory: factory_1$1h
	};

	function factory$1i(type, config, load, typed, math) {
	  var FunctionNode = math.expression.node.FunctionNode;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var SymbolNode = math.expression.node.SymbolNode; // TODO commutative/associative properties rely on the arguments
	  // e.g. multiply is not commutative for matrices
	  // The properties should be calculated from an argument to simplify, or possibly something in math.config
	  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments

	  var commutative = {
	    'add': true,
	    'multiply': true
	  };
	  var associative = {
	    'add': true,
	    'multiply': true
	  };

	  function isCommutative(node, context) {
	    if (!type.isOperatorNode(node)) {
	      return true;
	    }

	    var name = node.fn.toString();

	    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('commutative')) {
	      return context[name].commutative;
	    }

	    return commutative[name] || false;
	  }

	  function isAssociative(node, context) {
	    if (!type.isOperatorNode(node)) {
	      return false;
	    }

	    var name = node.fn.toString();

	    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('associative')) {
	      return context[name].associative;
	    }

	    return associative[name] || false;
	  }
	  /**
	   * Flatten all associative operators in an expression tree.
	   * Assumes parentheses have already been removed.
	   */


	  function flatten(node) {
	    if (!node.args || node.args.length === 0) {
	      return node;
	    }

	    node.args = allChildren(node);

	    for (var i = 0; i < node.args.length; i++) {
	      flatten(node.args[i]);
	    }
	  }
	  /**
	   * Get the children of a node as if it has been flattened.
	   * TODO implement for FunctionNodes
	   */


	  function allChildren(node) {
	    var op;
	    var children = [];

	    var findChildren = function findChildren(node) {
	      for (var i = 0; i < node.args.length; i++) {
	        var child = node.args[i];

	        if (type.isOperatorNode(child) && op === child.op) {
	          findChildren(child);
	        } else {
	          children.push(child);
	        }
	      }
	    };

	    if (isAssociative(node)) {
	      op = node.op;
	      findChildren(node);
	      return children;
	    } else {
	      return node.args;
	    }
	  }
	  /**
	   *  Unflatten all flattened operators to a right-heavy binary tree.
	   */


	  function unflattenr(node) {
	    if (!node.args || node.args.length === 0) {
	      return;
	    }

	    var makeNode = createMakeNodeFunction(node);
	    var l = node.args.length;

	    for (var i = 0; i < l; i++) {
	      unflattenr(node.args[i]);
	    }

	    if (l > 2 && isAssociative(node)) {
	      var curnode = node.args.pop();

	      while (node.args.length > 0) {
	        curnode = makeNode([node.args.pop(), curnode]);
	      }

	      node.args = curnode.args;
	    }
	  }
	  /**
	   *  Unflatten all flattened operators to a left-heavy binary tree.
	   */


	  function unflattenl(node) {
	    if (!node.args || node.args.length === 0) {
	      return;
	    }

	    var makeNode = createMakeNodeFunction(node);
	    var l = node.args.length;

	    for (var i = 0; i < l; i++) {
	      unflattenl(node.args[i]);
	    }

	    if (l > 2 && isAssociative(node)) {
	      var curnode = node.args.shift();

	      while (node.args.length > 0) {
	        curnode = makeNode([curnode, node.args.shift()]);
	      }

	      node.args = curnode.args;
	    }
	  }

	  function createMakeNodeFunction(node) {
	    if (type.isOperatorNode(node)) {
	      return function (args) {
	        try {
	          return new OperatorNode(node.op, node.fn, args, node.implicit);
	        } catch (err) {
	          console.error(err);
	          return [];
	        }
	      };
	    } else {
	      return function (args) {
	        return new FunctionNode(new SymbolNode(node.name), args);
	      };
	    }
	  }

	  return {
	    createMakeNodeFunction: createMakeNodeFunction,
	    isCommutative: isCommutative,
	    isAssociative: isAssociative,
	    flatten: flatten,
	    allChildren: allChildren,
	    unflattenr: unflattenr,
	    unflattenl: unflattenl
	  };
	}

	var factory_1$1i = factory$1i;
	var math$a = true;

	var util = {
		factory: factory_1$1i,
		math: math$a
	};

	function factory$1j(type, config, load, typed, math) {
	  var util$1 = load(util);
	  var isCommutative = util$1.isCommutative;
	  var isAssociative = util$1.isAssociative;
	  var allChildren = util$1.allChildren;
	  var createMakeNodeFunction = util$1.createMakeNodeFunction;
	  var ConstantNode = math.expression.node.ConstantNode;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var FunctionNode = math.expression.node.FunctionNode;

	  function simplifyConstant(expr, options) {
	    var res = foldFraction(expr, options);
	    return type.isNode(res) ? res : _toNode(res);
	  }

	  function _eval(fnname, args, options) {
	    try {
	      return _toNumber(math[fnname].apply(null, args), options);
	    } catch (ignore) {
	      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions
	      args = args.map(function (x) {
	        if (type.isFraction(x)) {
	          return x.valueOf();
	        }

	        return x;
	      });
	      return _toNumber(math[fnname].apply(null, args), options);
	    }
	  }

	  var _toNode = typed({
	    'Fraction': _fractionToNode,
	    'number': function number(n) {
	      if (n < 0) {
	        return unaryMinusNode(new ConstantNode(-n));
	      }

	      return new ConstantNode(n);
	    },
	    'BigNumber': function BigNumber(n) {
	      if (n < 0) {
	        return unaryMinusNode(new ConstantNode(-n));
	      }

	      return new ConstantNode(n); // old parameters: (n.toString(), 'number')
	    },
	    'Complex': function Complex(s) {
	      throw new Error('Cannot convert Complex number to Node');
	    }
	  }); // convert a number to a fraction only if it can be expressed exactly


	  function _exactFraction(n, options) {
	    var exactFractions = options && options.exactFractions !== false;

	    if (exactFractions && isFinite(n)) {
	      var f = math.fraction(n);

	      if (f.valueOf() === n) {
	        return f;
	      }
	    }

	    return n;
	  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex
	  // BigNumbers are left alone


	  var _toNumber = typed({
	    'string, Object': function stringObject(s, options) {
	      if (config.number === 'BigNumber') {
	        return math.bignumber(s);
	      } else if (config.number === 'Fraction') {
	        return math.fraction(s);
	      } else {
	        var n = parseFloat(s);
	        return _exactFraction(n, options);
	      }
	    },
	    'Fraction, Object': function FractionObject(s, options) {
	      return s;
	    },
	    // we don't need options here
	    'BigNumber, Object': function BigNumberObject(s, options) {
	      return s;
	    },
	    // we don't need options here
	    'number, Object': function numberObject(s, options) {
	      return _exactFraction(s, options);
	    },
	    'Complex, Object': function ComplexObject(s, options) {
	      if (s.im !== 0) {
	        return s;
	      }

	      return _exactFraction(s.re, options);
	    }
	  });

	  function unaryMinusNode(n) {
	    return new OperatorNode('-', 'unaryMinus', [n]);
	  }

	  function _fractionToNode(f) {
	    var n;
	    var vn = f.s * f.n;

	    if (vn < 0) {
	      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);
	    } else {
	      n = new ConstantNode(vn);
	    }

	    if (f.d === 1) {
	      return n;
	    }

	    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
	  }
	  /*
	   * Create a binary tree from a list of Fractions and Nodes.
	   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
	   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
	   * @param args - list of Fractions and Nodes
	   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
	   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
	   * if args.length is 1, returns args[0]
	   * @return - Either a Node representing a binary expression or Fraction
	   */


	  function foldOp(fn, args, makeNode, options) {
	    return args.reduce(function (a, b) {
	      if (!type.isNode(a) && !type.isNode(b)) {
	        try {
	          return _eval(fn, [a, b], options);
	        } catch (ignoreandcontinue) {}

	        a = _toNode(a);
	        b = _toNode(b);
	      } else if (!type.isNode(a)) {
	        a = _toNode(a);
	      } else if (!type.isNode(b)) {
	        b = _toNode(b);
	      }

	      return makeNode([a, b]);
	    });
	  } // destroys the original node and returns a folded one


	  function foldFraction(node, options) {
	    switch (node.type) {
	      case 'SymbolNode':
	        return node;

	      case 'ConstantNode':
	        if (typeof node.value === 'number' || !isNaN(node.value)) {
	          return _toNumber(node.value, options);
	        }

	        return node;

	      case 'FunctionNode':
	        if (math[node.name] && math[node.name].rawArgs) {
	          return node;
	        } // Process operators as OperatorNode


	        var operatorFunctions = ['add', 'multiply'];

	        if (operatorFunctions.indexOf(node.name) === -1) {
	          var _args = node.args.map(function (arg) {
	            return foldFraction(arg, options);
	          }); // If all args are numbers


	          if (!_args.some(type.isNode)) {
	            try {
	              return _eval(node.name, _args, options);
	            } catch (ignoreandcontine) {}
	          } // Convert all args to nodes and construct a symbolic function call


	          _args = _args.map(function (arg) {
	            return type.isNode(arg) ? arg : _toNode(arg);
	          });
	          return new FunctionNode(node.name, _args);
	        } // treat as operator

	        /* falls through */


	      case 'OperatorNode':
	        var fn = node.fn.toString();
	        var args;
	        var res;
	        var makeNode = createMakeNodeFunction(node);

	        if (node.isUnary()) {
	          args = [foldFraction(node.args[0], options)];

	          if (!type.isNode(args[0])) {
	            res = _eval(fn, args, options);
	          } else {
	            res = makeNode(args);
	          }
	        } else if (isAssociative(node)) {
	          args = allChildren(node);
	          args = args.map(function (arg) {
	            return foldFraction(arg, options);
	          });

	          if (isCommutative(fn)) {
	            // commutative binary operator
	            var consts = [];
	            var vars = [];

	            for (var i = 0; i < args.length; i++) {
	              if (!type.isNode(args[i])) {
	                consts.push(args[i]);
	              } else {
	                vars.push(args[i]);
	              }
	            }

	            if (consts.length > 1) {
	              res = foldOp(fn, consts, makeNode, options);
	              vars.unshift(res);
	              res = foldOp(fn, vars, makeNode, options);
	            } else {
	              // we won't change the children order since it's not neccessary
	              res = foldOp(fn, args, makeNode, options);
	            }
	          } else {
	            // non-commutative binary operator
	            res = foldOp(fn, args, makeNode, options);
	          }
	        } else {
	          // non-associative binary operator
	          args = node.args.map(function (arg) {
	            return foldFraction(arg, options);
	          });
	          res = foldOp(fn, args, makeNode, options);
	        }

	        return res;

	      case 'ParenthesisNode':
	        // remove the uneccessary parenthesis
	        return foldFraction(node.content, options);

	      case 'AccessorNode':
	      /* falls through */

	      case 'ArrayNode':
	      /* falls through */

	      case 'AssignmentNode':
	      /* falls through */

	      case 'BlockNode':
	      /* falls through */

	      case 'FunctionAssignmentNode':
	      /* falls through */

	      case 'IndexNode':
	      /* falls through */

	      case 'ObjectNode':
	      /* falls through */

	      case 'RangeNode':
	      /* falls through */

	      case 'UpdateNode':
	      /* falls through */

	      case 'ConditionalNode':
	      /* falls through */

	      default:
	        throw new Error("Unimplemented node type in simplifyConstant: ".concat(node.type));
	    }
	  }

	  return simplifyConstant;
	}

	var math$b = true;
	var name$19 = 'simplifyConstant';
	var path$v = 'algebra.simplify';
	var factory_1$1j = factory$1j;

	var simplifyConstant = {
		math: math$b,
		name: name$19,
		path: path$v,
		factory: factory_1$1j
	};

	function factory$1k(type, config, load, typed) {
	  /**
	   * Test whether a value is zero.
	   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
	   * `Complex`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isZero(x)
	   *
	   * Examples:
	   *
	   *    math.isZero(0)                     // returns true
	   *    math.isZero(2)                     // returns false
	   *    math.isZero(0.5)                   // returns false
	   *    math.isZero(math.bignumber(0))     // returns true
	   *    math.isZero(math.fraction(0))      // returns true
	   *    math.isZero(math.fraction(1,3))    // returns false
	   *    math.isZero(math.complex('2 - 4i') // returns false
	   *    math.isZero(math.complex('0i')     // returns true
	   *    math.isZero('0')                   // returns true
	   *    math.isZero('2')                   // returns false
	   *    math.isZero([2, 0, -3]')           // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isZero = typed('isZero', {
	    'number': function number(x) {
	      return x === 0;
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.isZero();
	    },
	    'Complex': function Complex(x) {
	      return x.re === 0 && x.im === 0;
	    },
	    'Fraction': function Fraction(x) {
	      return x.d === 1 && x.n === 0;
	    },
	    'Unit': function Unit(x) {
	      return isZero(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isZero);
	    }
	  });
	  return isZero;
	}

	var name$1a = 'isZero';
	var factory_1$1k = factory$1k;

	var isZero = {
		name: name$1a,
		factory: factory_1$1k
	};

	var object$4 = utils.object;

	function factory$1l(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var abs = load(abs$1);
	  var addScalar$1 = load(addScalar);
	  var divideScalar$1 = load(divideScalar);
	  var multiplyScalar$1 = load(multiplyScalar);
	  var subtract$1 = load(subtract);
	  var larger$1 = load(larger);
	  var equalScalar$1 = load(equalScalar);
	  var unaryMinus$1 = load(unaryMinus);
	  var SparseMatrix = type.SparseMatrix;
	  var DenseMatrix = type.DenseMatrix;
	  var Spa = type.Spa;
	  /**
	   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
	   * row permutation vector `p` where `A[p,:] = L * U`
	   *
	   * Syntax:
	   *
	   *    math.lup(A)
	   *
	   * Example:
	   *
	   *    const m = [[2, 1], [1, 4]]
	   *    const r = math.lup(m)
	   *    // r = {
	   *    //   L: [[1, 0], [0.5, 1]],
	   *    //   U: [[2, 1], [0, 3.5]],
	   *    //   P: [0, 1]
	   *    // }
	   *
	   * See also:
	   *
	   *    slu, lsolve, lusolve, usolve
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
	   *
	   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
	   */

	  var lup = typed('lup', {
	    'DenseMatrix': function DenseMatrix(m) {
	      return _denseLUP(m);
	    },
	    'SparseMatrix': function SparseMatrix(m) {
	      return _sparseLUP(m);
	    },
	    'Array': function Array(a) {
	      // create dense matrix from array
	      var m = matrix$1(a); // lup, use matrix implementation

	      var r = _denseLUP(m); // result


	      return {
	        L: r.L.valueOf(),
	        U: r.U.valueOf(),
	        p: r.p
	      };
	    }
	  });

	  function _denseLUP(m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1]; // minimum rows and columns

	    var n = Math.min(rows, columns); // matrix array, clone original data

	    var data = object$4.clone(m._data); // l matrix arrays

	    var ldata = [];
	    var lsize = [rows, n]; // u matrix arrays

	    var udata = [];
	    var usize = [n, columns]; // vars

	    var i, j, k; // permutation vector

	    var p = [];

	    for (i = 0; i < rows; i++) {
	      p[i] = i;
	    } // loop columns


	    for (j = 0; j < columns; j++) {
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows
	        for (i = 0; i < rows; i++) {
	          // min i,j
	          var min = Math.min(i, j); // v[i, j]

	          var s = 0; // loop up to min

	          for (k = 0; k < min; k++) {
	            // s = l[i, k] - data[k, j]
	            s = addScalar$1(s, multiplyScalar$1(data[i][k], data[k][j]));
	          }

	          data[i][j] = subtract$1(data[i][j], s);
	        }
	      } // row with larger value in cvector, row >= j


	      var pi = j;
	      var pabsv = 0;
	      var vjj = 0; // loop rows

	      for (i = j; i < rows; i++) {
	        // data @ i, j
	        var v = data[i][j]; // absolute value

	        var absv = abs(v); // value is greater than pivote value

	        if (larger$1(absv, pabsv)) {
	          // store row
	          pi = i; // update max value

	          pabsv = absv; // value @ [j, j]

	          vjj = v;
	        }
	      } // swap rows (j <-> pi)


	      if (j !== pi) {
	        // swap values j <-> pi in p
	        p[j] = [p[pi], p[pi] = p[j]][0]; // swap j <-> pi in data

	        DenseMatrix._swapRows(j, pi, data);
	      } // check column is in lower triangular matrix


	      if (j < rows) {
	        // loop rows (lower triangular matrix)
	        for (i = j + 1; i < rows; i++) {
	          // value @ i, j
	          var vij = data[i][j];

	          if (!equalScalar$1(vij, 0)) {
	            // update data
	            data[i][j] = divideScalar$1(data[i][j], vjj);
	          }
	        }
	      }
	    } // loop columns


	    for (j = 0; j < columns; j++) {
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // initialize row in arrays
	        if (j === 0) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i] = [];
	          } // L


	          ldata[i] = [];
	        } // check we are in the upper triangular matrix


	        if (i < j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          } // check column exists in lower triangular matrix


	          if (j < rows) {
	            // L
	            ldata[i][j] = 0;
	          }

	          continue;
	        } // diagonal value


	        if (i === j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          } // check column exists in lower triangular matrix


	          if (j < rows) {
	            // L
	            ldata[i][j] = 1;
	          }

	          continue;
	        } // check row exists in upper triangular matrix


	        if (i < columns) {
	          // U
	          udata[i][j] = 0;
	        } // check column exists in lower triangular matrix


	        if (j < rows) {
	          // L
	          ldata[i][j] = data[i][j];
	        }
	      }
	    } // l matrix


	    var l = new DenseMatrix({
	      data: ldata,
	      size: lsize
	    }); // u matrix

	    var u = new DenseMatrix({
	      data: udata,
	      size: usize
	    }); // p vector

	    var pv = [];

	    for (i = 0, n = p.length; i < n; i++) {
	      pv[p[i]] = i;
	    } // return matrices


	    return {
	      L: l,
	      U: u,
	      p: pv,
	      toString: function toString() {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  }

	  function _sparseLUP(m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1]; // minimum rows and columns

	    var n = Math.min(rows, columns); // matrix arrays (will not be modified, thanks to permutation vector)

	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr; // l matrix arrays

	    var lvalues = [];
	    var lindex = [];
	    var lptr = [];
	    var lsize = [rows, n]; // u matrix arrays

	    var uvalues = [];
	    var uindex = [];
	    var uptr = [];
	    var usize = [n, columns]; // vars

	    var i, j, k; // permutation vectors, (current index -> original index) and (original index -> current index)

	    var pvCo = [];
	    var pvOc = [];

	    for (i = 0; i < rows; i++) {
	      pvCo[i] = i;
	      pvOc[i] = i;
	    } // swap indices in permutation vectors (condition x < y)!


	    var swapIndeces = function swapIndeces(x, y) {
	      // find pv indeces getting data from x and y
	      var kx = pvOc[x];
	      var ky = pvOc[y]; // update permutation vector current -> original

	      pvCo[kx] = y;
	      pvCo[ky] = x; // update permutation vector original -> current

	      pvOc[x] = ky;
	      pvOc[y] = kx;
	    }; // loop columns


	    var _loop = function _loop() {
	      // sparse accumulator
	      var spa = new Spa(); // check lower triangular matrix has a value @ column j

	      if (j < rows) {
	        // update ptr
	        lptr.push(lvalues.length); // first value in j column for lower triangular matrix

	        lvalues.push(1);
	        lindex.push(j);
	      } // update ptr


	      uptr.push(uvalues.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]

	      var k0 = ptr[j];
	      var k1 = ptr[j + 1]; // copy column j into sparse accumulator

	      for (k = k0; k < k1; k++) {
	        // row
	        i = index[k]; // copy column values into sparse accumulator (use permutation vector)

	        spa.set(pvCo[i], values[k]);
	      } // skip first column in upper triangular matrix


	      if (j > 0) {
	        // loop rows in column j (above diagonal)
	        spa.forEach(0, j - 1, function (k, vkj) {
	          // loop rows in column k (L)
	          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
	            // check row is below k
	            if (i > k) {
	              // update spa value
	              spa.accumulate(i, unaryMinus$1(multiplyScalar$1(vik, vkj)));
	            }
	          });
	        });
	      } // row with larger value in spa, row >= j


	      var pi = j;
	      var vjj = spa.get(j);
	      var pabsv = abs(vjj); // loop values in spa (order by row, below diagonal)

	      spa.forEach(j + 1, rows - 1, function (x, v) {
	        // absolute value
	        var absv = abs(v); // value is greater than pivote value

	        if (larger$1(absv, pabsv)) {
	          // store row
	          pi = x; // update max value

	          pabsv = absv; // value @ [j, j]

	          vjj = v;
	        }
	      }); // swap rows (j <-> pi)

	      if (j !== pi) {
	        // swap values j <-> pi in L
	        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr); // swap values j <-> pi in U


	        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr); // swap values in spa


	        spa.swap(j, pi); // update permutation vector (swap values @ j, pi)

	        swapIndeces(j, pi);
	      } // loop values in spa (order by row)


	      spa.forEach(0, rows - 1, function (x, v) {
	        // check we are above diagonal
	        if (x <= j) {
	          // update upper triangular matrix
	          uvalues.push(v);
	          uindex.push(x);
	        } else {
	          // update value
	          v = divideScalar$1(v, vjj); // check value is non zero

	          if (!equalScalar$1(v, 0)) {
	            // update lower triangular matrix
	            lvalues.push(v);
	            lindex.push(x);
	          }
	        }
	      });
	    };

	    for (j = 0; j < columns; j++) {
	      _loop();
	    } // update ptrs


	    uptr.push(uvalues.length);
	    lptr.push(lvalues.length); // return matrices

	    return {
	      L: new SparseMatrix({
	        values: lvalues,
	        index: lindex,
	        ptr: lptr,
	        size: lsize
	      }),
	      U: new SparseMatrix({
	        values: uvalues,
	        index: uindex,
	        ptr: uptr,
	        size: usize
	      }),
	      p: pvCo,
	      toString: function toString() {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  }

	  return lup;
	}

	var name$1b = 'lup';
	var factory_1$1l = factory$1l;

	var lup = {
		name: name$1b,
		factory: factory_1$1l
	};

	var object$5 = utils.object;
	var string$6 = utils.string;

	function factory$1m(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var subtract$1 = load(subtract);
	  var multiply$1 = load(multiply);
	  var unaryMinus$1 = load(unaryMinus);
	  var lup$1 = load(lup);
	  /**
	   * Calculate the determinant of a matrix.
	   *
	   * Syntax:
	   *
	   *    math.det(x)
	   *
	   * Examples:
	   *
	   *    math.det([[1, 2], [3, 4]]) // returns -2
	   *
	   *    const A = [
	   *      [-2, 2, 3],
	   *      [-1, 1, 3],
	   *      [2, 0, -1]
	   *    ]
	   *    math.det(A) // returns 6
	   *
	   * See also:
	   *
	   *    inv
	   *
	   * @param {Array | Matrix} x  A matrix
	   * @return {number} The determinant of `x`
	   */

	  var det = typed('det', {
	    'any': function any(x) {
	      return object$5.clone(x);
	    },
	    'Array | Matrix': function det(x) {
	      var size;

	      if (type.isMatrix(x)) {
	        size = x.size();
	      } else if (Array.isArray(x)) {
	        x = matrix$1(x);
	        size = x.size();
	      } else {
	        // a scalar
	        size = [];
	      }

	      switch (size.length) {
	        case 0:
	          // scalar
	          return object$5.clone(x);

	        case 1:
	          // vector
	          if (size[0] === 1) {
	            return object$5.clone(x.valueOf()[0]);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string$6.format(size) + ')');
	          }

	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];

	          if (rows === cols) {
	            return _det(x.clone().valueOf(), rows);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string$6.format(size) + ')');
	          }

	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + string$6.format(size) + ')');
	      }
	    }
	  });
	  det.toTex = {
	    1: "\\det\\left(${args[0]}\\right)"
	  };
	  return det;
	  /**
	   * Calculate the determinant of a matrix
	   * @param {Array[]} matrix  A square, two dimensional matrix
	   * @param {number} rows     Number of rows of the matrix (zero-based)
	   * @param {number} cols     Number of columns of the matrix (zero-based)
	   * @returns {number} det
	   * @private
	   */

	  function _det(matrix, rows, cols) {
	    if (rows === 1) {
	      // this is a 1 x 1 matrix
	      return object$5.clone(matrix[0][0]);
	    } else if (rows === 2) {
	      // this is a 2 x 2 matrix
	      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
	      return subtract$1(multiply$1(matrix[0][0], matrix[1][1]), multiply$1(matrix[1][0], matrix[0][1]));
	    } else {
	      // Compute the LU decomposition
	      var decomp = lup$1(matrix); // The determinant is the product of the diagonal entries of U (and those of L, but they are all 1)

	      var _det2 = decomp.U[0][0];

	      for (var _i = 1; _i < rows; _i++) {
	        _det2 = multiply$1(_det2, decomp.U[_i][_i]);
	      } // The determinant will be multiplied by 1 or -1 depending on the parity of the permutation matrix.
	      // This can be determined by counting the cycles. This is roughly a linear time algorithm.


	      var evenCycles = 0;
	      var i = 0;
	      var visited = [];

	      while (true) {
	        while (visited[i]) {
	          i++;
	        }

	        if (i >= rows) break;
	        var j = i;
	        var cycleLen = 0;

	        while (!visited[decomp.p[j]]) {
	          visited[decomp.p[j]] = true;
	          j = decomp.p[j];
	          cycleLen++;
	        }

	        if (cycleLen % 2 === 0) {
	          evenCycles++;
	        }
	      }

	      return evenCycles % 2 === 0 ? _det2 : unaryMinus$1(_det2);
	    }
	  }
	}

	var name$1c = 'det';
	var factory_1$1m = factory$1m;

	var det = {
		name: name$1c,
		factory: factory_1$1m
	};

	function factory$1n(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var divideScalar$1 = load(divideScalar);
	  var addScalar$1 = load(addScalar);
	  var multiply$1 = load(multiply);
	  var unaryMinus$1 = load(unaryMinus);
	  var det$1 = load(det);
	  var identity$1 = load(identity);
	  var abs = load(abs$1);
	  /**
	   * Calculate the inverse of a square matrix.
	   *
	   * Syntax:
	   *
	   *     math.inv(x)
	   *
	   * Examples:
	   *
	   *     math.inv([[1, 2], [3, 4]])  // returns [[-2, 1], [1.5, -0.5]]
	   *     math.inv(4)                 // returns 0.25
	   *     1 / 4                       // returns 0.25
	   *
	   * See also:
	   *
	   *     det, transpose
	   *
	   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
	   * @return {number | Complex | Array | Matrix} The inverse of `x`.
	   */

	  var inv = typed('inv', {
	    'Array | Matrix': function ArrayMatrix(x) {
	      var size = type.isMatrix(x) ? x.size() : utils.array.size(x);

	      switch (size.length) {
	        case 1:
	          // vector
	          if (size[0] === 1) {
	            if (type.isMatrix(x)) {
	              return matrix$1([divideScalar$1(1, x.valueOf()[0])]);
	            } else {
	              return [divideScalar$1(1, x[0])];
	            }
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + utils.string.format(size) + ')');
	          }

	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];

	          if (rows === cols) {
	            if (type.isMatrix(x)) {
	              return matrix$1(_inv(x.valueOf(), rows, cols), x.storage());
	            } else {
	              // return an Array
	              return _inv(x, rows, cols);
	            }
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + utils.string.format(size) + ')');
	          }

	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' + '(size: ' + utils.string.format(size) + ')');
	      }
	    },
	    'any': function any(x) {
	      // scalar
	      return divideScalar$1(1, x); // FIXME: create a BigNumber one when configured for bignumbers
	    }
	  });
	  /**
	   * Calculate the inverse of a square matrix
	   * @param {Array[]} mat     A square matrix
	   * @param {number} rows     Number of rows
	   * @param {number} cols     Number of columns, must equal rows
	   * @return {Array[]} inv    Inverse matrix
	   * @private
	   */

	  function _inv(mat, rows, cols) {
	    var r, s, f, value, temp;

	    if (rows === 1) {
	      // this is a 1 x 1 matrix
	      value = mat[0][0];

	      if (value === 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }

	      return [[divideScalar$1(1, value)]];
	    } else if (rows === 2) {
	      // this is a 2 x 2 matrix
	      var d = det$1(mat);

	      if (d === 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }

	      return [[divideScalar$1(mat[1][1], d), divideScalar$1(unaryMinus$1(mat[0][1]), d)], [divideScalar$1(unaryMinus$1(mat[1][0]), d), divideScalar$1(mat[0][0], d)]];
	    } else {
	      // this is a matrix of 3 x 3 or larger
	      // calculate inverse using gauss-jordan elimination
	      //      http://en.wikipedia.org/wiki/Gaussian_elimination
	      //      http://mathworld.wolfram.com/MatrixInverse.html
	      //      http://math.uww.edu/~mcfarlat/inverse.htm
	      // make a copy of the matrix (only the arrays, not of the elements)
	      var A = mat.concat();

	      for (r = 0; r < rows; r++) {
	        A[r] = A[r].concat();
	      } // create an identity matrix which in the end will contain the
	      // matrix inverse


	      var B = identity$1(rows).valueOf(); // loop over all columns, and perform row reductions

	      for (var c = 0; c < cols; c++) {
	        // Pivoting: Swap row c with row r, where row r contains the largest element A[r][c]
	        var ABig = abs(A[c][c]);
	        var rBig = c;
	        r = c + 1;

	        while (r < rows) {
	          if (abs(A[r][c]) > ABig) {
	            ABig = abs(A[r][c]);
	            rBig = r;
	          }

	          r++;
	        }

	        if (ABig === 0) {
	          throw Error('Cannot calculate inverse, determinant is zero');
	        }

	        r = rBig;

	        if (r !== c) {
	          temp = A[c];
	          A[c] = A[r];
	          A[r] = temp;
	          temp = B[c];
	          B[c] = B[r];
	          B[r] = temp;
	        } // eliminate non-zero values on the other rows at column c


	        var Ac = A[c];
	        var Bc = B[c];

	        for (r = 0; r < rows; r++) {
	          var Ar = A[r];
	          var Br = B[r];

	          if (r !== c) {
	            // eliminate value at column c and row r
	            if (Ar[c] !== 0) {
	              f = divideScalar$1(unaryMinus$1(Ar[c]), Ac[c]); // add (f * row c) to row r to eliminate the value
	              // at column c

	              for (s = c; s < cols; s++) {
	                Ar[s] = addScalar$1(Ar[s], multiply$1(f, Ac[s]));
	              }

	              for (s = 0; s < cols; s++) {
	                Br[s] = addScalar$1(Br[s], multiply$1(f, Bc[s]));
	              }
	            }
	          } else {
	            // normalize value at Acc to 1,
	            // divide each value on row r with the value at Acc
	            f = Ac[c];

	            for (s = c; s < cols; s++) {
	              Ar[s] = divideScalar$1(Ar[s], f);
	            }

	            for (s = 0; s < cols; s++) {
	              Br[s] = divideScalar$1(Br[s], f);
	            }
	          }
	        }
	      }

	      return B;
	    }
	  }

	  inv.toTex = {
	    1: "\\left(${args[0]}\\right)^{-1}"
	  };
	  return inv;
	}

	var name$1d = 'inv';
	var factory_1$1n = factory$1n;

	var inv = {
		name: name$1d,
		factory: factory_1$1n
	};

	var extend$2 = object.extend;

	function factory$1o(type, config, load, typed) {
	  var divideScalar$1 = load(divideScalar);
	  var multiply$1 = load(multiply);
	  var inv$1 = load(inv);
	  var matrix$1 = load(matrix);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Divide two values, `x / y`.
	   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
	   *
	   * Syntax:
	   *
	   *    math.divide(x, y)
	   *
	   * Examples:
	   *
	   *    math.divide(2, 3)            // returns number 0.6666666666666666
	   *
	   *    const a = math.complex(5, 14)
	   *    const b = math.complex(4, 1)
	   *    math.divide(a, b)            // returns Complex 2 + 3i
	   *
	   *    const c = [[7, -6], [13, -4]]
	   *    const d = [[1, 2], [4, 3]]
	   *    math.divide(c, d)            // returns Array [[-9, 4], [-11, 6]]
	   *
	   *    const e = math.unit('18 km')
	   *    math.divide(e, 4.5)          // returns Unit 4 km
	   *
	   * See also:
	   *
	   *    multiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
	   */

	  var divide = typed('divide', extend$2({
	    // we extend the signatures of divideScalar with signatures dealing with matrices
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(x, y) {
	      // TODO: implement matrix right division using pseudo inverse
	      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html
	      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
	      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
	      return multiply$1(x, inv$1(y));
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, divideScalar$1, false);
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$1(x, y, divideScalar$1, false);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, divideScalar$1, false).valueOf();
	    },
	    'any, Array | Matrix': function anyArrayMatrix(x, y) {
	      return multiply$1(x, inv$1(y));
	    }
	  }, divideScalar$1.signatures));
	  divide.toTex = {
	    2: "\\frac{${args[0]}}{${args[1]}}"
	  };
	  return divide;
	}

	var name$1e = 'divide';
	var factory_1$1o = factory$1o;

	var divide$1 = {
		name: name$1e,
		factory: factory_1$1o
	};

	function factory$1p(type, config, load, typed, math) {
	  var equal$1 = load(equal);
	  var isZero$1 = load(isZero);
	  var add = load(add$1);
	  var subtract$1 = load(subtract);
	  var multiply$1 = load(multiply);
	  var divide = load(divide$1);
	  var pow = load(pow$1);
	  var ConstantNode = math.expression.node.ConstantNode;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var FunctionNode = math.expression.node.FunctionNode;
	  var ParenthesisNode = math.expression.node.ParenthesisNode;
	  var node0 = new ConstantNode(0);
	  var node1 = new ConstantNode(1);
	  /**
	   * simplifyCore() performs single pass simplification suitable for
	   * applications requiring ultimate performance. In contrast, simplify()
	   * extends simplifyCore() with additional passes to provide deeper
	   * simplification.
	   *
	   * Syntax:
	   *
	   *     simplify.simplifyCore(expr)
	   *
	   * Examples:
	   *
	   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
	   *     math.simplify.simpifyCore(f)                          // Node {2 * x}
	   *     math.simplify('2 * 1 * x ^ (2 - 1)', [math.simplify.simpifyCore]) // Node {2 * x}
	   *
	   * See also:
	   *
	   *     derivative
	   *
	   * @param {Node} node
	   *     The expression to be simplified
	   */

	  function simplifyCore(node) {
	    if (type.isOperatorNode(node) && node.isUnary()) {
	      var a0 = simplifyCore(node.args[0]);

	      if (node.op === '+') {
	        // unary plus
	        return a0;
	      }

	      if (node.op === '-') {
	        // unary minus
	        if (type.isOperatorNode(a0)) {
	          if (a0.isUnary() && a0.op === '-') {
	            return a0.args[0];
	          } else if (a0.isBinary() && a0.fn === 'subtract') {
	            return new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);
	          }
	        }

	        return new OperatorNode(node.op, node.fn, [a0]);
	      }
	    } else if (type.isOperatorNode(node) && node.isBinary()) {
	      var _a = simplifyCore(node.args[0]);

	      var a1 = simplifyCore(node.args[1]);

	      if (node.op === '+') {
	        if (type.isConstantNode(_a)) {
	          if (isZero$1(_a.value)) {
	            return a1;
	          } else if (type.isConstantNode(a1)) {
	            return new ConstantNode(add(_a.value, a1.value));
	          }
	        }

	        if (type.isConstantNode(a1) && isZero$1(a1.value)) {
	          return _a;
	        }

	        if (type.isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
	          return new OperatorNode('-', 'subtract', [_a, a1.args[0]]);
	        }

	        return new OperatorNode(node.op, node.fn, a1 ? [_a, a1] : [_a]);
	      } else if (node.op === '-') {
	        if (type.isConstantNode(_a) && a1) {
	          if (type.isConstantNode(a1)) {
	            return new ConstantNode(subtract$1(_a.value, a1.value));
	          } else if (isZero$1(_a.value)) {
	            return new OperatorNode('-', 'unaryMinus', [a1]);
	          }
	        } // if (node.fn === "subtract" && node.args.length === 2) {


	        if (node.fn === 'subtract') {
	          if (type.isConstantNode(a1) && isZero$1(a1.value)) {
	            return _a;
	          }

	          if (type.isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {
	            return simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]));
	          }

	          return new OperatorNode(node.op, node.fn, [_a, a1]);
	        }
	      } else if (node.op === '*') {
	        if (type.isConstantNode(_a)) {
	          if (isZero$1(_a.value)) {
	            return node0;
	          } else if (equal$1(_a.value, 1)) {
	            return a1;
	          } else if (type.isConstantNode(a1)) {
	            return new ConstantNode(multiply$1(_a.value, a1.value));
	          }
	        }

	        if (type.isConstantNode(a1)) {
	          if (isZero$1(a1.value)) {
	            return node0;
	          } else if (equal$1(a1.value, 1)) {
	            return _a;
	          } else if (type.isOperatorNode(_a) && _a.isBinary() && _a.op === node.op) {
	            var a00 = _a.args[0];

	            if (type.isConstantNode(a00)) {
	              var a00a1 = new ConstantNode(multiply$1(a00.value, a1.value));
	              return new OperatorNode(node.op, node.fn, [a00a1, _a.args[1]], node.implicit); // constants on left
	            }
	          }

	          return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left
	        }

	        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);
	      } else if (node.op === '/') {
	        if (type.isConstantNode(_a)) {
	          if (isZero$1(_a.value)) {
	            return node0;
	          } else if (type.isConstantNode(a1) && (equal$1(a1.value, 1) || equal$1(a1.value, 2) || equal$1(a1.value, 4))) {
	            return new ConstantNode(divide(_a.value, a1.value));
	          }
	        }

	        return new OperatorNode(node.op, node.fn, [_a, a1]);
	      } else if (node.op === '^') {
	        if (type.isConstantNode(a1)) {
	          if (isZero$1(a1.value)) {
	            return node1;
	          } else if (equal$1(a1.value, 1)) {
	            return _a;
	          } else {
	            if (type.isConstantNode(_a)) {
	              // fold constant
	              return new ConstantNode(pow(_a.value, a1.value));
	            } else if (type.isOperatorNode(_a) && _a.isBinary() && _a.op === '^') {
	              var a01 = _a.args[1];

	              if (type.isConstantNode(a01)) {
	                return new OperatorNode(node.op, node.fn, [_a.args[0], new ConstantNode(multiply$1(a01.value, a1.value))]);
	              }
	            }
	          }
	        }

	        return new OperatorNode(node.op, node.fn, [_a, a1]);
	      }
	    } else if (type.isParenthesisNode(node)) {
	      var c = simplifyCore(node.content);

	      if (type.isParenthesisNode(c) || type.isSymbolNode(c) || type.isConstantNode(c)) {
	        return c;
	      }

	      return new ParenthesisNode(c);
	    } else if (type.isFunctionNode(node)) {
	      var args = node.args.map(simplifyCore).map(function (arg) {
	        return type.isParenthesisNode(arg) ? arg.content : arg;
	      });
	      return new FunctionNode(simplifyCore(node.fn), args);
	    }

	    return node;
	  }

	  return simplifyCore;
	}

	var math$c = true;
	var name$1f = 'simplifyCore';
	var path$w = 'algebra.simplify';
	var factory_1$1p = factory$1p;

	var simplifyCore = {
		math: math$c,
		name: name$1f,
		path: path$w,
		factory: factory_1$1p
	};

	function factory$1q(type, config, load, typed, math) {
	  var Node = math.expression.node.Node;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var FunctionNode = math.expression.node.FunctionNode;
	  var ParenthesisNode = math.expression.node.ParenthesisNode;
	  /**
	   * resolve(expr, scope) replaces variable nodes with their scoped values
	   *
	   * Syntax:
	   *
	   *     simplify.resolve(expr, scope)
	   *
	   * Examples:
	   *
	   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}
	   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}
	   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // "6"
	   *
	   * @param {Node} node
	   *     The expression tree to be simplified
	   * @param {Object} scope with variables to be resolved
	   */

	  function resolve(node, scope) {
	    if (!scope) {
	      return node;
	    }

	    if (type.isSymbolNode(node)) {
	      var value = scope[node.name];

	      if (value instanceof Node) {
	        return resolve(value, scope);
	      } else if (typeof value === 'number') {
	        return math.parse(String(value));
	      }
	    } else if (type.isOperatorNode(node)) {
	      var args = node.args.map(function (arg) {
	        return resolve(arg, scope);
	      });
	      return new OperatorNode(node.op, node.fn, args, node.implicit);
	    } else if (type.isParenthesisNode(node)) {
	      return new ParenthesisNode(resolve(node.content, scope));
	    } else if (type.isFunctionNode(node)) {
	      var _args = node.args.map(function (arg) {
	        return resolve(arg, scope);
	      });

	      return new FunctionNode(node.name, _args);
	    }

	    return node;
	  }

	  return resolve;
	}

	var math$d = true;
	var name$1g = 'resolve';
	var path$x = 'algebra.simplify';
	var factory_1$1q = factory$1q;

	var resolve = {
		math: math$d,
		name: name$1g,
		path: path$x,
		factory: factory_1$1q
	};

	function _typeof$c(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$c = function _typeof(obj) { return typeof obj; }; } else { _typeof$c = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$c(obj); }

	function factory$1r(type, config, load, typed, math) {
	  var parse$1 = load(parse);
	  var equal$1 = load(equal);
	  var ConstantNode$1 = load(ConstantNode);
	  var FunctionNode$1 = load(FunctionNode);
	  var OperatorNode$1 = load(OperatorNode);
	  var ParenthesisNode$1 = load(ParenthesisNode);
	  var SymbolNode$1 = load(SymbolNode);
	  var simplifyConstant$1 = load(simplifyConstant);
	  var simplifyCore$1 = load(simplifyCore);
	  var resolve$1 = load(resolve);
	  var util$1 = load(util);
	  var isCommutative = util$1.isCommutative;
	  var isAssociative = util$1.isAssociative;
	  var flatten = util$1.flatten;
	  var unflattenr = util$1.unflattenr;
	  var unflattenl = util$1.unflattenl;
	  var createMakeNodeFunction = util$1.createMakeNodeFunction;
	  /**
	   * Simplify an expression tree.
	   *
	   * A list of rules are applied to an expression, repeating over the list until
	   * no further changes are made.
	   * It's possible to pass a custom set of rules to the function as second
	   * argument. A rule can be specified as an object, string, or function:
	   *
	   *     const rules = [
	   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
	   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
	   *       function (node) {
	   *         // ... return a new node or return the node unchanged
	   *         return node
	   *       }
	   *     ]
	   *
	   * String and object rules consist of a left and right pattern. The left is
	   * used to match against the expression and the right determines what matches
	   * are replaced with. The main difference between a pattern and a normal
	   * expression is that variables starting with the following characters are
	   * interpreted as wildcards:
	   *
	   * - 'n' - matches any Node
	   * - 'c' - matches any ConstantNode
	   * - 'v' - matches any Node that is not a ConstantNode
	   *
	   * The default list of rules is exposed on the function as `simplify.rules`
	   * and can be used as a basis to built a set of custom rules.
	   *
	   * For more details on the theory, see:
	   *
	   * - [Strategies for simplifying math expressions (Stackoverflow)](http://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
	   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
	   *
	   *  An optional `options` argument can be passed as last argument of `simplify`.
	   *  There is currently one option available: `exactFractions`, a boolean which
	   *  is `true` by default.
	   *
	   * Syntax:
	   *
	   *     simplify(expr)
	   *     simplify(expr, rules)
	   *     simplify(expr, rules)
	   *     simplify(expr, rules, scope)
	   *     simplify(expr, rules, scope, options)
	   *     simplify(expr, scope)
	   *     simplify(expr, scope, options)
	   *
	   * Examples:
	   *
	   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node "2 * x"
	   *     math.simplify('2 * 3 * x', {x: 4})        // Node "24"
	   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')
	   *     math.simplify(f)                          // Node "2 * x"
	   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node "x * 2 / 5"
	   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node "0.4 * x"
	   *
	   * See also:
	   *
	   *     derivative, parse, eval, rationalize
	   *
	   * @param {Node | string} expr
	   *            The expression to be simplified
	   * @param {Array<{l:string, r: string} | string | function>} [rules]
	   *            Optional list with custom rules
	   * @return {Node} Returns the simplified form of `expr`
	   */

	  var simplify = typed('simplify', {
	    'string': function string(expr) {
	      return simplify(parse$1(expr), simplify.rules, {}, {});
	    },
	    'string, Object': function stringObject(expr, scope) {
	      return simplify(parse$1(expr), simplify.rules, scope, {});
	    },
	    'string, Object, Object': function stringObjectObject(expr, scope, options) {
	      return simplify(parse$1(expr), simplify.rules, scope, options);
	    },
	    'string, Array': function stringArray(expr, rules) {
	      return simplify(parse$1(expr), rules, {}, {});
	    },
	    'string, Array, Object': function stringArrayObject(expr, rules, scope) {
	      return simplify(parse$1(expr), rules, scope, {});
	    },
	    'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {
	      return simplify(parse$1(expr), rules, scope, options);
	    },
	    'Node, Object': function NodeObject(expr, scope) {
	      return simplify(expr, simplify.rules, scope, {});
	    },
	    'Node, Object, Object': function NodeObjectObject(expr, scope, options) {
	      return simplify(expr, simplify.rules, scope, options);
	    },
	    'Node': function Node(expr) {
	      return simplify(expr, simplify.rules, {}, {});
	    },
	    'Node, Array': function NodeArray(expr, rules) {
	      return simplify(expr, rules, {}, {});
	    },
	    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {
	      return simplify(expr, rules, scope, {});
	    },
	    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {
	      rules = _buildRules(rules);
	      var res = resolve$1(expr, scope);
	      res = removeParens(res);
	      var visited = {};
	      var str = res.toString({
	        parenthesis: 'all'
	      });

	      while (!visited[str]) {
	        visited[str] = true;
	        _lastsym = 0; // counter for placeholder symbols

	        for (var i = 0; i < rules.length; i++) {
	          if (typeof rules[i] === 'function') {
	            res = rules[i](res, options);
	          } else {
	            flatten(res);
	            res = applyRule(res, rules[i]);
	          }

	          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
	        }

	        str = res.toString({
	          parenthesis: 'all'
	        });
	      }

	      return res;
	    }
	  });
	  simplify.simplifyCore = simplifyCore$1;
	  simplify.resolve = resolve$1;

	  function removeParens(node) {
	    return node.transform(function (node, path, parent) {
	      return type.isParenthesisNode(node) ? node.content : node;
	    });
	  } // All constants that are allowed in rules


	  var SUPPORTED_CONSTANTS = {
	    true: true,
	    false: true,
	    e: true,
	    i: true,
	    Infinity: true,
	    LN2: true,
	    LN10: true,
	    LOG2E: true,
	    LOG10E: true,
	    NaN: true,
	    phi: true,
	    pi: true,
	    SQRT1_2: true,
	    SQRT2: true,
	    tau: true // null: false,
	    // undefined: false,
	    // version: false,
	    // Array of strings, used to build the ruleSet.
	    // Each l (left side) and r (right side) are parsed by
	    // the expression parser into a node tree.
	    // Left hand sides are matched to subtrees within the
	    // expression to be parsed and replaced with the right
	    // hand side.
	    // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
	    // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
	    // It is possible to get into an infinite loop with conflicting rules

	  };
	  simplify.rules = [simplifyCore$1, // { l: 'n+0', r: 'n' },     // simplifyCore
	  // { l: 'n^0', r: '1' },     // simplifyCore
	  // { l: '0*n', r: '0' },     // simplifyCore
	  // { l: 'n/n', r: '1'},      // simplifyCore
	  // { l: 'n^1', r: 'n' },     // simplifyCore
	  // { l: '+n1', r:'n1' },     // simplifyCore
	  // { l: 'n--n1', r:'n+n1' }, // simplifyCore
	  {
	    l: 'log(e)',
	    r: '1'
	  }, // temporary rules
	  {
	    l: 'n-n1',
	    r: 'n+-n1'
	  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
	  {
	    l: '-(c*v)',
	    r: '(-c) * v'
	  }, // make non-constant terms positive
	  {
	    l: '-v',
	    r: '(-1) * v'
	  }, {
	    l: 'n/n1^n2',
	    r: 'n*n1^-n2'
	  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
	  {
	    l: 'n/n1',
	    r: 'n*n1^-1'
	  }, // expand nested exponentiation
	  {
	    l: '(n ^ n1) ^ n2',
	    r: 'n ^ (n1 * n2)'
	  }, // collect like factors
	  {
	    l: 'n*n',
	    r: 'n^2'
	  }, {
	    l: 'n * n^n1',
	    r: 'n^(n1+1)'
	  }, {
	    l: 'n^n1 * n^n2',
	    r: 'n^(n1+n2)'
	  }, // collect like terms
	  {
	    l: 'n+n',
	    r: '2*n'
	  }, {
	    l: 'n+-n',
	    r: '0'
	  }, {
	    l: 'n1*n2 + n2',
	    r: '(n1+1)*n2'
	  }, {
	    l: 'n1*n3 + n2*n3',
	    r: '(n1+n2)*n3'
	  }, // remove parenthesis in the case of negating a quantitiy
	  {
	    l: 'n1 + -1 * (n2 + n3)',
	    r: 'n1 + -1 * n2 + -1 * n3'
	  }, simplifyConstant$1, {
	    l: '(-n)*n1',
	    r: '-(n*n1)'
	  }, // make factors positive (and undo 'make non-constant terms positive')
	  // ordering of constants
	  {
	    l: 'c+v',
	    r: 'v+c',
	    context: {
	      'add': {
	        commutative: false
	      }
	    }
	  }, {
	    l: 'v*c',
	    r: 'c*v',
	    context: {
	      'multiply': {
	        commutative: false
	      }
	    }
	  }, // undo temporary rules
	  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant
	  {
	    l: 'n+-n1',
	    r: 'n-n1'
	  }, // undo replace 'subtract'
	  {
	    l: 'n*(n1^-1)',
	    r: 'n/n1'
	  }, // undo replace 'divide'
	  {
	    l: 'n*n1^-n2',
	    r: 'n/n1^n2'
	  }, {
	    l: 'n1^-1',
	    r: '1/n1'
	  }, {
	    l: 'n*(n1/n2)',
	    r: '(n*n1)/n2'
	  }, // '*' before '/'
	  {
	    l: 'n-(n1+n2)',
	    r: 'n-n1-n2'
	  }, // '-' before '+'
	  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
	  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
	  {
	    l: '1*n',
	    r: 'n' // this pattern can be produced by simplifyConstant

	  }];
	  /**
	   * Parse the string array of rules into nodes
	   *
	   * Example syntax for rules:
	   *
	   * Position constants to the left in a product:
	   * { l: 'n1 * c1', r: 'c1 * n1' }
	   * n1 is any Node, and c1 is a ConstantNode.
	   *
	   * Apply difference of squares formula:
	   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
	   * n1, n2 mean any Node.
	   *
	   * Short hand notation:
	   * 'n1 * c1 -> c1 * n1'
	   */

	  function _buildRules(rules) {
	    // Array of rules to be used to simplify expressions
	    var ruleSet = [];

	    for (var i = 0; i < rules.length; i++) {
	      var rule = rules[i];
	      var newRule = void 0;

	      var ruleType = _typeof$c(rule);

	      switch (ruleType) {
	        case 'string':
	          var lr = rule.split('->');

	          if (lr.length === 2) {
	            rule = {
	              l: lr[0],
	              r: lr[1]
	            };
	          } else {
	            throw SyntaxError('Could not parse rule: ' + rule);
	          }

	        /* falls through */

	        case 'object':
	          newRule = {
	            l: removeParens(parse$1(rule.l)),
	            r: removeParens(parse$1(rule.r))
	          };

	          if (rule.context) {
	            newRule.evaluate = rule.context;
	          }

	          if (rule.evaluate) {
	            newRule.evaluate = parse$1(rule.evaluate);
	          }

	          if (isAssociative(newRule.l)) {
	            var makeNode = createMakeNodeFunction(newRule.l);

	            var expandsym = _getExpandPlaceholderSymbol();

	            newRule.expanded = {};
	            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.
	            // This helps to match the newRule against nodes returned from getSplits() later on.

	            flatten(newRule.expanded.l);
	            unflattenr(newRule.expanded.l);
	            newRule.expanded.r = makeNode([newRule.r, expandsym]);
	          }

	          break;

	        case 'function':
	          newRule = rule;
	          break;

	        default:
	          throw TypeError('Unsupported type of rule: ' + ruleType);
	      } // console.log('Adding rule: ' + rules[i])
	      // console.log(newRule)


	      ruleSet.push(newRule);
	    }

	    return ruleSet;
	  }

	  var _lastsym = 0;

	  function _getExpandPlaceholderSymbol() {
	    return new SymbolNode$1('_p' + _lastsym++);
	  }
	  /**
	   * Returns a simplfied form of node, or the original node if no simplification was possible.
	   *
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
	   */


	  var applyRule = typed('applyRule', {
	    'Node, Object': function NodeObject(node, rule) {
	      // console.log('Entering applyRule(' + node.toString() + ')')
	      // Do not clone node unless we find a match
	      var res = node; // First replace our child nodes with their simplified versions
	      // If a child could not be simplified, the assignments will have
	      // no effect since the node is returned unchanged

	      if (res instanceof OperatorNode$1 || res instanceof FunctionNode$1) {
	        if (res.args) {
	          for (var i = 0; i < res.args.length; i++) {
	            res.args[i] = applyRule(res.args[i], rule);
	          }
	        }
	      } else if (res instanceof ParenthesisNode$1) {
	        if (res.content) {
	          res.content = applyRule(res.content, rule);
	        }
	      } // Try to match a rule against this node


	      var repl = rule.r;

	      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.
	      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.


	      if (!matches && rule.expanded) {
	        repl = rule.expanded.r;
	        matches = _ruleMatch(rule.expanded.l, res)[0];
	      }

	      if (matches) {
	        // const before = res.toString({parenthesis: 'all'})
	        // Create a new node by cloning the rhs of the matched rule
	        // we keep any implicit multiplication state if relevant
	        var implicit = res.implicit;
	        res = repl.clone();

	        if (implicit && 'implicit' in repl) {
	          res.implicit = true;
	        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes


	        var _transform = function _transform(node) {
	          if (node.isSymbolNode && matches.placeholders.hasOwnProperty(node.name)) {
	            return matches.placeholders[node.name].clone();
	          } else {
	            return node.map(_transform);
	          }
	        };

	        res = _transform(res); // const after = res.toString({parenthesis: 'all'})
	        // console.log('Simplified ' + before + ' to ' + after)
	      }

	      return res;
	    }
	  });
	  /**
	   * Get (binary) combinations of a flattened binary node
	   * e.g. +(node1, node2, node3) -> [
	   *        +(node1,  +(node2, node3)),
	   *        +(node2,  +(node1, node3)),
	   *        +(node3,  +(node1, node2))]
	   *
	   */

	  function getSplits(node, context) {
	    var res = [];
	    var right, rightArgs;
	    var makeNode = createMakeNodeFunction(node);

	    if (isCommutative(node, context)) {
	      for (var i = 0; i < node.args.length; i++) {
	        rightArgs = node.args.slice(0);
	        rightArgs.splice(i, 1);
	        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
	        res.push(makeNode([node.args[i], right]));
	      }
	    } else {
	      rightArgs = node.args.slice(1);
	      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);
	      res.push(makeNode([node.args[0], right]));
	    }

	    return res;
	  }
	  /**
	   * Returns the set union of two match-placeholders or null if there is a conflict.
	   */


	  function mergeMatch(match1, match2) {
	    var res = {
	      placeholders: {} // Some matches may not have placeholders; this is OK

	    };

	    if (!match1.placeholders && !match2.placeholders) {
	      return res;
	    } else if (!match1.placeholders) {
	      return match2;
	    } else if (!match2.placeholders) {
	      return match1;
	    } // Placeholders with the same key must match exactly


	    for (var key in match1.placeholders) {
	      res.placeholders[key] = match1.placeholders[key];

	      if (match2.placeholders.hasOwnProperty(key)) {
	        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {
	          return null;
	        }
	      }
	    }

	    for (var _key in match2.placeholders) {
	      res.placeholders[_key] = match2.placeholders[_key];
	    }

	    return res;
	  }
	  /**
	   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
	   * Each list represents matches found in one child of a node.
	   */


	  function combineChildMatches(list1, list2) {
	    var res = [];

	    if (list1.length === 0 || list2.length === 0) {
	      return res;
	    }

	    var merged;

	    for (var i1 = 0; i1 < list1.length; i1++) {
	      for (var i2 = 0; i2 < list2.length; i2++) {
	        merged = mergeMatch(list1[i1], list2[i2]);

	        if (merged) {
	          res.push(merged);
	        }
	      }
	    }

	    return res;
	  }
	  /**
	   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
	   * Each list represents matches found in one child of a node.
	   * Returns a list of unique matches.
	   */


	  function mergeChildMatches(childMatches) {
	    if (childMatches.length === 0) {
	      return childMatches;
	    }

	    var sets = childMatches.reduce(combineChildMatches);
	    var uniqueSets = [];
	    var unique = {};

	    for (var i = 0; i < sets.length; i++) {
	      var s = JSON.stringify(sets[i]);

	      if (!unique[s]) {
	        unique[s] = true;
	        uniqueSets.push(sets[i]);
	      }
	    }

	    return uniqueSets;
	  }
	  /**
	   * Determines whether node matches rule.
	   *
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @return {Object} Information about the match, if it exists.
	   */


	  function _ruleMatch(rule, node, isSplit) {
	    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')
	    //    console.log('rule = ' + rule)
	    //    console.log('node = ' + node)
	    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')
	    var res = [{
	      placeholders: {}
	    }];

	    if (rule instanceof OperatorNode$1 && node instanceof OperatorNode$1 || rule instanceof FunctionNode$1 && node instanceof FunctionNode$1) {
	      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
	      if (rule instanceof OperatorNode$1) {
	        if (rule.op !== node.op || rule.fn !== node.fn) {
	          return [];
	        }
	      } else if (rule instanceof FunctionNode$1) {
	        if (rule.name !== node.name) {
	          return [];
	        }
	      } // rule and node match. Search the children of rule and node.


	      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
	        // Expect non-associative operators to match exactly
	        var childMatches = [];

	        for (var i = 0; i < rule.args.length; i++) {
	          var childMatch = _ruleMatch(rule.args[i], node.args[i]);

	          if (childMatch.length === 0) {
	            // Child did not match, so stop searching immediately
	            return [];
	          } // The child matched, so add the information returned from the child to our result


	          childMatches.push(childMatch);
	        }

	        res = mergeChildMatches(childMatches);
	      } else if (node.args.length >= 2 && rule.args.length === 2) {
	        // node is flattened, rule is not
	        // Associative operators/functions can be split in different ways so we check if the rule matches each
	        // them and return their union.
	        var splits = getSplits(node, rule.context);
	        var splitMatches = [];

	        for (var _i = 0; _i < splits.length; _i++) {
	          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here


	          splitMatches = splitMatches.concat(matchSet);
	        }

	        return splitMatches;
	      } else if (rule.args.length > 2) {
	        throw Error('Unexpected non-binary associative function: ' + rule.toString());
	      } else {
	        // Incorrect number of arguments in rule and node, so no match
	        return [];
	      }
	    } else if (rule instanceof SymbolNode$1) {
	      // If the rule is a SymbolNode, then it carries a special meaning
	      // according to the first character of the symbol node name.
	      // c.* matches a ConstantNode
	      // n.* matches any node
	      if (rule.name.length === 0) {
	        throw new Error('Symbol in rule has 0 length...!?');
	      }

	      if (math.hasOwnProperty(rule.name)) {
	        if (!SUPPORTED_CONSTANTS[rule.name]) {
	          throw new Error('Built in constant: ' + rule.name + ' is not supported by simplify.');
	        } // built-in constant must match exactly


	        if (rule.name !== node.name) {
	          return [];
	        }
	      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {
	        // rule matches _anything_, so assign this node to the rule.name placeholder
	        // Assign node to the rule.name placeholder.
	        // Our parent will check for matches among placeholders.
	        res[0].placeholders[rule.name] = node;
	      } else if (rule.name[0] === 'v') {
	        // rule matches any variable thing (not a ConstantNode)
	        if (!type.isConstantNode(node)) {
	          res[0].placeholders[rule.name] = node;
	        } else {
	          // Mis-match: rule was expecting something other than a ConstantNode
	          return [];
	        }
	      } else if (rule.name[0] === 'c') {
	        // rule matches any ConstantNode
	        if (node instanceof ConstantNode$1) {
	          res[0].placeholders[rule.name] = node;
	        } else {
	          // Mis-match: rule was expecting a ConstantNode
	          return [];
	        }
	      } else {
	        throw new Error('Invalid symbol in rule: ' + rule.name);
	      }
	    } else if (rule instanceof ConstantNode$1) {
	      // Literal constant must match exactly
	      if (!equal$1(rule.value, node.value)) {
	        return [];
	      }
	    } else {
	      // Some other node was encountered which we aren't prepared for, so no match
	      return [];
	    } // It's a match!
	    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')


	    return res;
	  }
	  /**
	   * Determines whether p and q (and all their children nodes) are identical.
	   *
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
	   * @return {Object} Information about the match, if it exists.
	   */


	  function _exactMatch(p, q) {
	    if (p instanceof ConstantNode$1 && q instanceof ConstantNode$1) {
	      if (!equal$1(p.value, q.value)) {
	        return false;
	      }
	    } else if (p instanceof SymbolNode$1 && q instanceof SymbolNode$1) {
	      if (p.name !== q.name) {
	        return false;
	      }
	    } else if (p instanceof OperatorNode$1 && q instanceof OperatorNode$1 || p instanceof FunctionNode$1 && q instanceof FunctionNode$1) {
	      if (p instanceof OperatorNode$1) {
	        if (p.op !== q.op || p.fn !== q.fn) {
	          return false;
	        }
	      } else if (p instanceof FunctionNode$1) {
	        if (p.name !== q.name) {
	          return false;
	        }
	      }

	      if (p.args.length !== q.args.length) {
	        return false;
	      }

	      for (var i = 0; i < p.args.length; i++) {
	        if (!_exactMatch(p.args[i], q.args[i])) {
	          return false;
	        }
	      }
	    } else {
	      return false;
	    }

	    return true;
	  }

	  return simplify;
	}

	var math$e = true;
	var name$1h = 'simplify';
	var factory_1$1r = factory$1r;

	var simplify = {
		math: math$e,
		name: name$1h,
		factory: factory_1$1r
	};

	function factory$1s(type, config, load, typed) {
	  var parse$1 = load(parse);
	  var simplify$1 = load(simplify);
	  var equal$1 = load(equal);
	  var isZero$1 = load(isZero);
	  var getType = load(_typeof$4);
	  var numeric$1 = load(numeric);
	  var ConstantNode$1 = load(ConstantNode);
	  var FunctionNode$1 = load(FunctionNode);
	  var OperatorNode$1 = load(OperatorNode);
	  var ParenthesisNode$1 = load(ParenthesisNode);
	  var SymbolNode$1 = load(SymbolNode);
	  /**
	   * Takes the derivative of an expression expressed in parser Nodes.
	   * The derivative will be taken over the supplied variable in the
	   * second parameter. If there are multiple variables in the expression,
	   * it will return a partial derivative.
	   *
	   * This uses rules of differentiation which can be found here:
	   *
	   * - [Differentiation rules (Wikipedia)](http://en.wikipedia.org/wiki/Differentiation_rules)
	   *
	   * Syntax:
	   *
	   *     derivative(expr, variable)
	   *     derivative(expr, variable, options)
	   *
	   * Examples:
	   *
	   *     math.derivative('x^2', 'x')                     // Node {2 * x}
	   *     math.derivative('x^2', 'x', {simplify: false})  // Node {2 * 1 * x ^ (2 - 1)
	   *     math.derivative('sin(2x)', 'x'))                // Node {2 * cos(2 * x)}
	   *     math.derivative('2*x', 'x').eval()              // number 2
	   *     math.derivative('x^2', 'x').eval({x: 4})        // number 8
	   *     const f = math.parse('x^2')
	   *     const x = math.parse('x')
	   *     math.derivative(f, x)                           // Node {2 * x}
	   *
	   * See also:
	   *
	   *     simplify, parse, eval
	   *
	   * @param  {Node | string} expr           The expression to differentiate
	   * @param  {SymbolNode | string} variable The variable over which to differentiate
	   * @param  {{simplify: boolean}} [options]
	   *                         There is one option available, `simplify`, which
	   *                         is true by default. When false, output will not
	   *                         be simplified.
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
	   */

	  var derivative = typed('derivative', {
	    'Node, SymbolNode, Object': function NodeSymbolNodeObject(expr, variable, options) {
	      var constNodes = {};
	      constTag(constNodes, expr, variable.name);

	      var res = _derivative(expr, constNodes);

	      return options.simplify ? simplify$1(res) : res;
	    },
	    'Node, SymbolNode': function NodeSymbolNode(expr, variable) {
	      return derivative(expr, variable, {
	        simplify: true
	      });
	    },
	    'string, SymbolNode': function stringSymbolNode(expr, variable) {
	      return derivative(parse$1(expr), variable);
	    },
	    'string, SymbolNode, Object': function stringSymbolNodeObject(expr, variable, options) {
	      return derivative(parse$1(expr), variable, options);
	    },
	    'string, string': function stringString(expr, variable) {
	      return derivative(parse$1(expr), parse$1(variable));
	    },
	    'string, string, Object': function stringStringObject(expr, variable, options) {
	      return derivative(parse$1(expr), parse$1(variable), options);
	    },
	    'Node, string': function NodeString(expr, variable) {
	      return derivative(expr, parse$1(variable));
	    },
	    'Node, string, Object': function NodeStringObject(expr, variable, options) {
	      return derivative(expr, parse$1(variable), options);
	    } // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments

	    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
	    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
	      let res = expr
	      for (let i = 0; i < order; i++) {
	        let constNodes = {}
	        constTag(constNodes, expr, variable.name)
	        res = _derivative(res, constNodes)
	      }
	      return res
	    }
	    */

	  });
	  derivative._simplify = true;

	  derivative.toTex = function (deriv) {
	    return _derivTex.apply(null, deriv.args);
	  }; // NOTE: the optional "order" parameter here is currently unused


	  var _derivTex = typed('_derivTex', {
	    'Node, SymbolNode': function NodeSymbolNode(expr, x) {
	      if (type.isConstantNode(expr) && getType(expr.value) === 'string') {
	        return _derivTex(parse$1(expr.value).toString(), x.toString(), 1);
	      } else {
	        return _derivTex(expr.toString(), x.toString(), 1);
	      }
	    },
	    'Node, ConstantNode': function NodeConstantNode(expr, x) {
	      if (getType(x.value) === 'string') {
	        return _derivTex(expr, parse$1(x.value));
	      } else {
	        throw new Error("The second parameter to 'derivative' is a non-string constant");
	      }
	    },
	    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {
	      return _derivTex(expr.toString(), x.name, order.value);
	    },
	    'string, string, number': function stringStringNumber(expr, x, order) {
	      var d;

	      if (order === 1) {
	        d = '{d\\over d' + x + '}';
	      } else {
	        d = '{d^{' + order + '}\\over d' + x + '^{' + order + '}}';
	      }

	      return d + "\\left[".concat(expr, "\\right]");
	    }
	  });
	  /**
	   * Does a depth-first search on the expression tree to identify what Nodes
	   * are constants (e.g. 2 + 2), and stores the ones that are constants in
	   * constNodes. Classification is done as follows:
	   *
	   *   1. ConstantNodes are constants.
	   *   2. If there exists a SymbolNode, of which we are differentiating over,
	   *      in the subtree it is not constant.
	   *
	   * @param  {Object} constNodes  Holds the nodes that are constant
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @param  {string} varName     Variable that we are differentiating
	   * @return {boolean}  if node is constant
	   */
	  // TODO: can we rewrite constTag into a pure function?


	  var constTag = typed('constTag', {
	    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {
	      constNodes[node] = true;
	      return true;
	    },
	    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {
	      // Treat other variables like constants. For reasoning, see:
	      //   https://en.wikipedia.org/wiki/Partial_derivative
	      if (node.name !== varName) {
	        constNodes[node] = true;
	        return true;
	      }

	      return false;
	    },
	    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {
	      return constTag(constNodes, node.content, varName);
	    },
	    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {
	      if (node.params.indexOf(varName) === -1) {
	        constNodes[node] = true;
	        return true;
	      }

	      return constTag(constNodes, node.expr, varName);
	    },
	    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {
	      if (node.args.length > 0) {
	        var isConst = constTag(constNodes, node.args[0], varName);

	        for (var i = 1; i < node.args.length; ++i) {
	          isConst = constTag(constNodes, node.args[i], varName) && isConst;
	        }

	        if (isConst) {
	          constNodes[node] = true;
	          return true;
	        }
	      }

	      return false;
	    }
	  });
	  /**
	   * Applies differentiation rules.
	   *
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @param  {Object} constNodes  Holds the nodes that are constant
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
	   */

	  var _derivative = typed('_derivative', {
	    'ConstantNode, Object': function ConstantNodeObject(node) {
	      return createConstantNode(0);
	    },
	    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return createConstantNode(0);
	      }

	      return createConstantNode(1);
	    },
	    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {
	      return new ParenthesisNode$1(_derivative(node.content, constNodes));
	    },
	    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return createConstantNode(0);
	      }

	      return _derivative(node.expr, constNodes);
	    },
	    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {
	      if (node.args.length !== 1) {
	        funcArgsCheck(node);
	      }

	      if (constNodes[node] !== undefined) {
	        return createConstantNode(0);
	      }

	      var arg0 = node.args[0];
	      var arg1;
	      var div = false; // is output a fraction?

	      var negative = false; // is output negative?

	      var funcDerivative;

	      switch (node.name) {
	        case 'cbrt':
	          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
	          div = true;
	          funcDerivative = new OperatorNode$1('*', 'multiply', [createConstantNode(3), new OperatorNode$1('^', 'pow', [arg0, new OperatorNode$1('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);
	          break;

	        case 'sqrt':
	        case 'nthRoot':
	          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
	          if (node.args.length === 1) {
	            div = true;
	            funcDerivative = new OperatorNode$1('*', 'multiply', [createConstantNode(2), new FunctionNode$1('sqrt', [arg0])]);
	          } else if (node.args.length === 2) {
	            // Rearrange from nthRoot(x, a) -> x^(1/a)
	            arg1 = new OperatorNode$1('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?

	            constNodes[arg1] = constNodes[node.args[1]];
	            return _derivative(new OperatorNode$1('^', 'pow', [arg0, arg1]), constNodes);
	          }

	          break;

	        case 'log10':
	          arg1 = createConstantNode(10);

	        /* fall through! */

	        case 'log':
	          if (!arg1 && node.args.length === 1) {
	            // d/dx(log(x)) = 1 / x
	            funcDerivative = arg0.clone();
	            div = true;
	          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {
	            // d/dx(log(x, c)) = 1 / (x*ln(c))
	            funcDerivative = new OperatorNode$1('*', 'multiply', [arg0.clone(), new FunctionNode$1('log', [arg1 || node.args[1]])]);
	            div = true;
	          } else if (node.args.length === 2) {
	            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
	            return _derivative(new OperatorNode$1('/', 'divide', [new FunctionNode$1('log', [arg0]), new FunctionNode$1('log', [node.args[1]])]), constNodes);
	          }

	          break;

	        case 'exp':
	          // d/dx(e^x) = e^x
	          funcDerivative = new FunctionNode$1('exp', [arg0.clone()]);
	          break;

	        case 'sin':
	          // d/dx(sin(x)) = cos(x)
	          funcDerivative = new FunctionNode$1('cos', [arg0.clone()]);
	          break;

	        case 'cos':
	          // d/dx(cos(x)) = -sin(x)
	          funcDerivative = new OperatorNode$1('-', 'unaryMinus', [new FunctionNode$1('sin', [arg0.clone()])]);
	          break;

	        case 'tan':
	          // d/dx(tan(x)) = sec(x)^2
	          funcDerivative = new OperatorNode$1('^', 'pow', [new FunctionNode$1('sec', [arg0.clone()]), createConstantNode(2)]);
	          break;

	        case 'sec':
	          // d/dx(sec(x)) = sec(x)tan(x)
	          funcDerivative = new OperatorNode$1('*', 'multiply', [node, new FunctionNode$1('tan', [arg0.clone()])]);
	          break;

	        case 'csc':
	          // d/dx(csc(x)) = -csc(x)cot(x)
	          negative = true;
	          funcDerivative = new OperatorNode$1('*', 'multiply', [node, new FunctionNode$1('cot', [arg0.clone()])]);
	          break;

	        case 'cot':
	          // d/dx(cot(x)) = -csc(x)^2
	          negative = true;
	          funcDerivative = new OperatorNode$1('^', 'pow', [new FunctionNode$1('csc', [arg0.clone()]), createConstantNode(2)]);
	          break;

	        case 'asin':
	          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
	          div = true;
	          funcDerivative = new FunctionNode$1('sqrt', [new OperatorNode$1('-', 'subtract', [createConstantNode(1), new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
	          break;

	        case 'acos':
	          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
	          div = true;
	          negative = true;
	          funcDerivative = new FunctionNode$1('sqrt', [new OperatorNode$1('-', 'subtract', [createConstantNode(1), new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);
	          break;

	        case 'atan':
	          // d/dx(atan(x)) = 1 / (x^2 + 1)
	          div = true;
	          funcDerivative = new OperatorNode$1('+', 'add', [new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
	          break;

	        case 'asec':
	          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
	          div = true;
	          funcDerivative = new OperatorNode$1('*', 'multiply', [new FunctionNode$1('abs', [arg0.clone()]), new FunctionNode$1('sqrt', [new OperatorNode$1('-', 'subtract', [new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
	          break;

	        case 'acsc':
	          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$1('*', 'multiply', [new FunctionNode$1('abs', [arg0.clone()]), new FunctionNode$1('sqrt', [new OperatorNode$1('-', 'subtract', [new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
	          break;

	        case 'acot':
	          // d/dx(acot(x)) = -1 / (x^2 + 1)
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$1('+', 'add', [new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);
	          break;

	        case 'sinh':
	          // d/dx(sinh(x)) = cosh(x)
	          funcDerivative = new FunctionNode$1('cosh', [arg0.clone()]);
	          break;

	        case 'cosh':
	          // d/dx(cosh(x)) = sinh(x)
	          funcDerivative = new FunctionNode$1('sinh', [arg0.clone()]);
	          break;

	        case 'tanh':
	          // d/dx(tanh(x)) = sech(x)^2
	          funcDerivative = new OperatorNode$1('^', 'pow', [new FunctionNode$1('sech', [arg0.clone()]), createConstantNode(2)]);
	          break;

	        case 'sech':
	          // d/dx(sech(x)) = -sech(x)tanh(x)
	          negative = true;
	          funcDerivative = new OperatorNode$1('*', 'multiply', [node, new FunctionNode$1('tanh', [arg0.clone()])]);
	          break;

	        case 'csch':
	          // d/dx(csch(x)) = -csch(x)coth(x)
	          negative = true;
	          funcDerivative = new OperatorNode$1('*', 'multiply', [node, new FunctionNode$1('coth', [arg0.clone()])]);
	          break;

	        case 'coth':
	          // d/dx(coth(x)) = -csch(x)^2
	          negative = true;
	          funcDerivative = new OperatorNode$1('^', 'pow', [new FunctionNode$1('csch', [arg0.clone()]), createConstantNode(2)]);
	          break;

	        case 'asinh':
	          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
	          div = true;
	          funcDerivative = new FunctionNode$1('sqrt', [new OperatorNode$1('+', 'add', [new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
	          break;

	        case 'acosh':
	          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
	          div = true;
	          funcDerivative = new FunctionNode$1('sqrt', [new OperatorNode$1('-', 'subtract', [new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);
	          break;

	        case 'atanh':
	          // d/dx(atanh(x)) = 1 / (1 - x^2)
	          div = true;
	          funcDerivative = new OperatorNode$1('-', 'subtract', [createConstantNode(1), new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
	          break;

	        case 'asech':
	          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$1('*', 'multiply', [arg0.clone(), new FunctionNode$1('sqrt', [new OperatorNode$1('-', 'subtract', [createConstantNode(1), new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);
	          break;

	        case 'acsch':
	          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$1('*', 'multiply', [new FunctionNode$1('abs', [arg0.clone()]), new FunctionNode$1('sqrt', [new OperatorNode$1('+', 'add', [new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);
	          break;

	        case 'acoth':
	          // d/dx(acoth(x)) = -1 / (1 - x^2)
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode$1('-', 'subtract', [createConstantNode(1), new OperatorNode$1('^', 'pow', [arg0.clone(), createConstantNode(2)])]);
	          break;

	        case 'abs':
	          // d/dx(abs(x)) = abs(x)/x
	          funcDerivative = new OperatorNode$1('/', 'divide', [new FunctionNode$1(new SymbolNode$1('abs'), [arg0.clone()]), arg0.clone()]);
	          break;

	        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)

	        default:
	          throw new Error('Function "' + node.name + '" is not supported by derivative, or a wrong number of arguments is passed');
	      }

	      var op, func;

	      if (div) {
	        op = '/';
	        func = 'divide';
	      } else {
	        op = '*';
	        func = 'multiply';
	      }
	      /* Apply chain rule to all functions:
	         F(x)  = f(g(x))
	         F'(x) = g'(x)*f'(g(x)) */


	      var chainDerivative = _derivative(arg0, constNodes);

	      if (negative) {
	        chainDerivative = new OperatorNode$1('-', 'unaryMinus', [chainDerivative]);
	      }

	      return new OperatorNode$1(op, func, [chainDerivative, funcDerivative]);
	    },
	    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return createConstantNode(0);
	      }

	      if (node.op === '+') {
	        // d/dx(sum(f(x)) = sum(f'(x))
	        return new OperatorNode$1(node.op, node.fn, node.args.map(function (arg) {
	          return _derivative(arg, constNodes);
	        }));
	      }

	      if (node.op === '-') {
	        // d/dx(+/-f(x)) = +/-f'(x)
	        if (node.isUnary()) {
	          return new OperatorNode$1(node.op, node.fn, [_derivative(node.args[0], constNodes)]);
	        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)


	        if (node.isBinary()) {
	          return new OperatorNode$1(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);
	        }
	      }

	      if (node.op === '*') {
	        // d/dx(c*f(x)) = c*f'(x)
	        var constantTerms = node.args.filter(function (arg) {
	          return constNodes[arg] !== undefined;
	        });

	        if (constantTerms.length > 0) {
	          var nonConstantTerms = node.args.filter(function (arg) {
	            return constNodes[arg] === undefined;
	          });
	          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode$1('*', 'multiply', nonConstantTerms);
	          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));
	          return new OperatorNode$1('*', 'multiply', newArgs);
	        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)


	        return new OperatorNode$1('+', 'add', node.args.map(function (argOuter) {
	          return new OperatorNode$1('*', 'multiply', node.args.map(function (argInner) {
	            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();
	          }));
	        }));
	      }

	      if (node.op === '/' && node.isBinary()) {
	        var arg0 = node.args[0];
	        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c

	        if (constNodes[arg1] !== undefined) {
	          return new OperatorNode$1('/', 'divide', [_derivative(arg0, constNodes), arg1]);
	        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)


	        if (constNodes[arg0] !== undefined) {
	          return new OperatorNode$1('*', 'multiply', [new OperatorNode$1('-', 'unaryMinus', [arg0]), new OperatorNode$1('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode$1('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);
	        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2


	        return new OperatorNode$1('/', 'divide', [new OperatorNode$1('-', 'subtract', [new OperatorNode$1('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode$1('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode$1('^', 'pow', [arg1.clone(), createConstantNode(2)])]);
	      }

	      if (node.op === '^' && node.isBinary()) {
	        var _arg = node.args[0];
	        var _arg2 = node.args[1];

	        if (constNodes[_arg] !== undefined) {
	          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
	          if (type.isConstantNode(_arg) && (isZero$1(_arg.value) || equal$1(_arg.value, 1))) {
	            return createConstantNode(0);
	          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)


	          return new OperatorNode$1('*', 'multiply', [node, new OperatorNode$1('*', 'multiply', [new FunctionNode$1('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);
	        }

	        if (constNodes[_arg2] !== undefined) {
	          if (type.isConstantNode(_arg2)) {
	            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
	            if (isZero$1(_arg2.value)) {
	              return createConstantNode(0);
	            } // Ignore exponent; f(x)^1 = f(x)


	            if (equal$1(_arg2.value, 1)) {
	              return _derivative(_arg, constNodes);
	            }
	          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)


	          var powMinusOne = new OperatorNode$1('^', 'pow', [_arg.clone(), new OperatorNode$1('-', 'subtract', [_arg2, createConstantNode(1)])]);
	          return new OperatorNode$1('*', 'multiply', [_arg2.clone(), new OperatorNode$1('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);
	        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]


	        return new OperatorNode$1('*', 'multiply', [new OperatorNode$1('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode$1('+', 'add', [new OperatorNode$1('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode$1('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode$1('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode$1('log', [_arg.clone()])])])]);
	      }

	      throw new Error('Operator "' + node.op + '" is not supported by derivative, or a wrong number of arguments is passed');
	    }
	  });
	  /**
	   * Ensures the number of arguments for a function are correct,
	   * and will throw an error otherwise.
	   *
	   * @param {FunctionNode} node
	   */


	  function funcArgsCheck(node) {
	    // TODO add min, max etc
	    if ((node.name === 'log' || node.name === 'nthRoot') && node.args.length === 2) {
	      return;
	    } // There should be an incorrect number of arguments if we reach here
	    // Change all args to constants to avoid unidentified
	    // symbol error when compiling function


	    for (var i = 0; i < node.args.length; ++i) {
	      node.args[i] = createConstantNode(0);
	    }

	    node.compile().eval();
	    throw new Error('Expected TypeError, but none found');
	  }
	  /**
	   * Helper function to create a constant node with a specific type
	   * (number, BigNumber, Fraction)
	   * @param {number} value
	   * @param {string} [valueType]
	   * @return {ConstantNode}
	   */


	  function createConstantNode(value, valueType) {
	    return new ConstantNode$1(numeric$1(value, valueType || config.number));
	  }

	  return derivative;
	}

	var name$1i = 'derivative';
	var factory_1$1s = factory$1s;

	var derivative = {
		name: name$1i,
		factory: factory_1$1s
	};

	function factory$1t(type, config, load, typed) {
	  var parse$1 = load(parse);
	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval().
	   *
	   * Note the evaluating arbitrary expressions may involve security risks,
	   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.
	   *
	   * Syntax:
	   *
	   *     math.parse(expr)
	   *     math.parse(expr, options)
	   *     math.parse([expr1, expr2, expr3, ...])
	   *     math.parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     const node1 = math.parse('sqrt(3^2 + 4^2)')
	   *     node1.compile().eval() // 5
	   *
	   *     let scope = {a:3, b:4}
	   *     const node2 = math.parse('a * b') // 12
	   *     const code2 = node2.compile()
	   *     code2.eval(scope) // 12
	   *     scope.a = 5
	   *     code2.eval(scope) // 20
	   *
	   *     const nodes = math.parse(['a = 3', 'b = 4', 'a * b'])
	   *     nodes[2].compile().eval() // 12
	   *
	   * See also:
	   *
	   *     eval, compile
	   *
	   * @param {string | string[] | Matrix} expr          Expression to be parsed
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */

	  return typed('parse', {
	    'string | Array | Matrix': parse$1,
	    'string | Array | Matrix, Object': parse$1
	  });
	}

	var name$1j = 'parse';
	var factory_1$1t = factory$1t;

	var parse$1 = {
		name: name$1j,
		factory: factory_1$1t
	};

	function factory$1u(type, config, load, typed) {
	  var simplify$1 = load(simplify);
	  var simplifyCore$1 = load(simplifyCore);
	  var simplifyConstant$1 = load(simplifyConstant);
	  var parse = load(parse$1);

	  var number$1 = number;

	  var ConstantNode$1 = load(ConstantNode);
	  var OperatorNode$1 = load(OperatorNode);
	  var SymbolNode$1 = load(SymbolNode);
	  /**
	   * Transform a rationalizable expression in a rational fraction.
	   * If rational fraction is one variable polynomial then converts
	   * the numerator and denominator in canonical form, with decreasing
	   * exponents, returning the coefficients of numerator.
	   *
	   * Syntax:
	   *
	   *     rationalize(expr)
	   *     rationalize(expr, detailed)
	   *     rationalize(expr, scope)
	   *     rationalize(expr, scope, detailed)
	   *
	   * Examples:
	   *
	   *     math.rationalize('sin(x)+y')
	   *                   //  Error: There is an unsolved function call
	   *     math.rationalize('2x/y - y/(x+1)')
	   *                   // (2*x^2-y^2+2*x)/(x*y+y)
	   *     math.rationalize('(2x+1)^6')
	   *                   // 64*x^6+192*x^5+240*x^4+160*x^3+60*x^2+12*x+1
	   *     math.rationalize('2x/( (2x-1) / (3x+2) ) - 5x/ ( (3x+4) / (2x^2-5) ) + 3')
	   *                   // -20*x^4+28*x^3+104*x^2+6*x-12)/(6*x^2+5*x-4)
	   *     math.rationalize('x/(1-x)/(x-2)/(x-3)/(x-4) + 2x/ ( (1-2x)/(2-3x) )/ ((3-4x)/(4-5x) )') =
	   *                   // (-30*x^7+344*x^6-1506*x^5+3200*x^4-3472*x^3+1846*x^2-381*x)/
	   *                   //     (-8*x^6+90*x^5-383*x^4+780*x^3-797*x^2+390*x-72)
	   *
	   *     math.rationalize('x+x+x+y',{y:1}) // 3*x+1
	   *     math.rationalize('x+x+x+y',{})    // 3*x+y
	   *
	   *     const ret = math.rationalize('x+x+x+y',{},true)
	   *                   // ret.expression=3*x+y, ret.variables = ["x","y"]
	   *     const ret = math.rationalize('-2+5x^2',{},true)
	   *                   // ret.expression=5*x^2-2, ret.variables = ["x"], ret.coefficients=[-2,0,5]
	   *
	   * See also:
	   *
	   *     simplify
	   *
	   * @param  {Node|string} expr    The expression to check if is a polynomial expression
	   * @param  {Object|boolean}      optional scope of expression or true for already evaluated rational expression at input
	   * @param  {Boolean}  detailed   optional True if return an object, false if return expression node (default)
	   *
	   * @return {Object | Expression Node}    The rational polynomial of `expr` or na object
	   *            {Object}
	   *              {Expression Node} expression: node simplified expression
	   *              {Expression Node} numerator: simplified numerator of expression
	   *              {Expression Node | boolean} denominator: simplified denominator or false (if there is no denominator)
	   *              {Array}           variables:  variable names
	   *              {Array}           coefficients: coefficients of numerator sorted by increased exponent
	   *           {Expression Node}  node simplified expression
	   *
	   */

	  var rationalize = typed('rationalize', {
	    'string': function string(expr) {
	      return rationalize(parse(expr), {}, false);
	    },
	    'string, boolean': function stringBoolean(expr, detailed) {
	      return rationalize(parse(expr), {}, detailed);
	    },
	    'string, Object': function stringObject(expr, scope) {
	      return rationalize(parse(expr), scope, false);
	    },
	    'string, Object, boolean': function stringObjectBoolean(expr, scope, detailed) {
	      return rationalize(parse(expr), scope, detailed);
	    },
	    'Node': function Node(expr) {
	      return rationalize(expr, {}, false);
	    },
	    'Node, boolean': function NodeBoolean(expr, detailed) {
	      return rationalize(expr, {}, detailed);
	    },
	    'Node, Object': function NodeObject(expr, scope) {
	      return rationalize(expr, scope, false);
	    },
	    'Node, Object, boolean': function NodeObjectBoolean(expr, scope, detailed) {
	      var setRules = rulesRationalize(); // Rules for change polynomial in near canonical form

	      var polyRet = polynomial(expr, scope, true, setRules.firstRules); // Check if expression is a rationalizable polynomial

	      var nVars = polyRet.variables.length;
	      expr = polyRet.expression;

	      if (nVars >= 1) {
	        // If expression in not a constant
	        expr = expandPower(expr); // First expand power of polynomials (cannot be made from rules!)

	        var sBefore; // Previous expression

	        var rules;
	        var eDistrDiv = true;
	        var redoInic = false;
	        expr = simplify$1(expr, setRules.firstRules, {}, {
	          exactFractions: false
	        }); // Apply the initial rules, including succ div rules

	        var s;

	        while (true) {
	          // Apply alternately  successive division rules and distr.div.rules
	          rules = eDistrDiv ? setRules.distrDivRules : setRules.sucDivRules;
	          expr = simplify$1(expr, rules); // until no more changes

	          eDistrDiv = !eDistrDiv; // Swap between Distr.Div and Succ. Div. Rules

	          s = expr.toString();

	          if (s === sBefore) {
	            break; // No changes : end of the loop
	          }

	          redoInic = true;
	          sBefore = s;
	        }

	        if (redoInic) {
	          // Apply first rules again without succ div rules (if there are changes)
	          expr = simplify$1(expr, setRules.firstRulesAgain, {}, {
	            exactFractions: false
	          });
	        }

	        expr = simplify$1(expr, setRules.finalRules, {}, {
	          exactFractions: false
	        }); // Apply final rules
	      } // NVars >= 1


	      var coefficients = [];
	      var retRationalize = {};

	      if (expr.type === 'OperatorNode' && expr.isBinary() && expr.op === '/') {
	        // Separate numerator from denominator
	        if (nVars === 1) {
	          expr.args[0] = polyToCanonical(expr.args[0], coefficients);
	          expr.args[1] = polyToCanonical(expr.args[1]);
	        }

	        if (detailed) {
	          retRationalize.numerator = expr.args[0];
	          retRationalize.denominator = expr.args[1];
	        }
	      } else {
	        if (nVars === 1) {
	          expr = polyToCanonical(expr, coefficients);
	        }

	        if (detailed) {
	          retRationalize.numerator = expr;
	          retRationalize.denominator = null;
	        }
	      } // nVars


	      if (!detailed) return expr;
	      retRationalize.coefficients = coefficients;
	      retRationalize.variables = polyRet.variables;
	      retRationalize.expression = expr;
	      return retRationalize;
	    } // ^^^^^^^ end of rationalize ^^^^^^^^

	  }); // end of typed rationalize

	  /**
	   *  Function to simplify an expression using an optional scope and
	   *  return it if the expression is a polynomial expression, i.e.
	   *  an expression with one or more variables and the operators
	   *  +, -, *, and ^, where the exponent can only be a positive integer.
	   *
	   * Syntax:
	   *
	   *     polynomial(expr,scope,extended, rules)
	   *
	   * @param  {Node | string} expr     The expression to simplify and check if is polynomial expression
	   * @param  {object} scope           Optional scope for expression simplification
	   * @param  {boolean} extended       Optional. Default is false. When true allows divide operator.
	   * @param  {array}  rules           Optional. Default is no rule.
	   *
	   *
	   * @return {Object}
	   *            {Object} node:   node simplified expression
	   *            {Array}  variables:  variable names
	   */

	  function polynomial(expr, scope, extended, rules) {
	    var variables = [];
	    var node = simplify$1(expr, rules, scope, {
	      exactFractions: false
	    }); // Resolves any variables and functions with all defined parameters

	    extended = !!extended;
	    var oper = '+-*' + (extended ? '/' : '');
	    recPoly(node);
	    var retFunc = {};
	    retFunc.expression = node;
	    retFunc.variables = variables;
	    return retFunc; // -------------------------------------------------------------------------------------------------------

	    /**
	     *  Function to simplify an expression using an optional scope and
	     *  return it if the expression is a polynomial expression, i.e.
	     *  an expression with one or more variables and the operators
	     *  +, -, *, and ^, where the exponent can only be a positive integer.
	     *
	     * Syntax:
	     *
	     *     recPoly(node)
	     *
	     *
	     * @param  {Node} node               The current sub tree expression in recursion
	     *
	     * @return                           nothing, throw an exception if error
	     */

	    function recPoly(node) {
	      var tp = node.type; // node type

	      if (tp === 'FunctionNode') {
	        // No function call in polynomial expression
	        throw new Error('There is an unsolved function call');
	      } else if (tp === 'OperatorNode') {
	        if (node.op === '^') {
	          if (node.args[1].fn === 'unaryMinus') {
	            node = node.args[0];
	          }

	          if (node.args[1].type !== 'ConstantNode' || !number$1.isInteger(parseFloat(node.args[1].value))) {
	            throw new Error('There is a non-integer exponent');
	          } else {
	            recPoly(node.args[0]);
	          }
	        } else {
	          if (oper.indexOf(node.op) === -1) {
	            throw new Error('Operator ' + node.op + ' invalid in polynomial expression');
	          }

	          for (var i = 0; i < node.args.length; i++) {
	            recPoly(node.args[i]);
	          }
	        } // type of operator

	      } else if (tp === 'SymbolNode') {
	        var name = node.name; // variable name

	        var pos = variables.indexOf(name);

	        if (pos === -1) {
	          // new variable in expression
	          variables.push(name);
	        }
	      } else if (tp === 'ParenthesisNode') {
	        recPoly(node.content);
	      } else if (tp !== 'ConstantNode') {
	        throw new Error('type ' + tp + ' is not allowed in polynomial expression');
	      }
	    } // end of recPoly

	  } // end of polynomial
	  // ---------------------------------------------------------------------------------------

	  /**
	   * Return a rule set to rationalize an polynomial expression in rationalize
	   *
	   * Syntax:
	   *
	   *     rulesRationalize()
	   *
	   * @return {array}        rule set to rationalize an polynomial expression
	   */


	  function rulesRationalize() {
	    var oldRules = [simplifyCore$1, // sCore
	    {
	      l: 'n+n',
	      r: '2*n'
	    }, {
	      l: 'n+-n',
	      r: '0'
	    }, simplifyConstant$1, // sConstant
	    {
	      l: 'n*(n1^-1)',
	      r: 'n/n1'
	    }, {
	      l: 'n*n1^-n2',
	      r: 'n/n1^n2'
	    }, {
	      l: 'n1^-1',
	      r: '1/n1'
	    }, {
	      l: 'n*(n1/n2)',
	      r: '(n*n1)/n2'
	    }, {
	      l: '1*n',
	      r: 'n'
	    }];
	    var rulesFirst = [{
	      l: '(-n1)/(-n2)',
	      r: 'n1/n2'
	    }, // Unary division
	    {
	      l: '(-n1)*(-n2)',
	      r: 'n1*n2'
	    }, // Unary multiplication
	    {
	      l: 'n1--n2',
	      r: 'n1+n2'
	    }, // '--' elimination
	    {
	      l: 'n1-n2',
	      r: 'n1+(-n2)'
	    }, // Subtraction turn into add with unï¿½ry minus
	    {
	      l: '(n1+n2)*n3',
	      r: '(n1*n3 + n2*n3)'
	    }, // Distributive 1
	    {
	      l: 'n1*(n2+n3)',
	      r: '(n1*n2+n1*n3)'
	    }, // Distributive 2
	    {
	      l: 'c1*n + c2*n',
	      r: '(c1+c2)*n'
	    }, // Joining constants
	    {
	      l: 'c1*n + n',
	      r: '(c1+1)*n'
	    }, // Joining constants
	    {
	      l: 'c1*n - c2*n',
	      r: '(c1-c2)*n'
	    }, // Joining constants
	    {
	      l: 'c1*n - n',
	      r: '(c1-1)*n'
	    }, // Joining constants
	    {
	      l: 'v/c',
	      r: '(1/c)*v'
	    }, // variable/constant (new!)
	    {
	      l: 'v/-c',
	      r: '-(1/c)*v'
	    }, // variable/constant (new!)
	    {
	      l: '-v*-c',
	      r: 'c*v'
	    }, // Inversion constant and variable 1
	    {
	      l: '-v*c',
	      r: '-c*v'
	    }, // Inversion constant and variable 2
	    {
	      l: 'v*-c',
	      r: '-c*v'
	    }, // Inversion constant and variable 3
	    {
	      l: 'v*c',
	      r: 'c*v'
	    }, // Inversion constant and variable 4
	    {
	      l: '-(-n1*n2)',
	      r: '(n1*n2)'
	    }, // Unary propagation
	    {
	      l: '-(n1*n2)',
	      r: '(-n1*n2)'
	    }, // Unary propagation
	    {
	      l: '-(-n1+n2)',
	      r: '(n1-n2)'
	    }, // Unary propagation
	    {
	      l: '-(n1+n2)',
	      r: '(-n1-n2)'
	    }, // Unary propagation
	    {
	      l: '(n1^n2)^n3',
	      r: '(n1^(n2*n3))'
	    }, // Power to Power
	    {
	      l: '-(-n1/n2)',
	      r: '(n1/n2)'
	    }, // Division and Unary
	    {
	      l: '-(n1/n2)',
	      r: '(-n1/n2)'
	    }]; // Divisao and Unary

	    var rulesDistrDiv = [{
	      l: '(n1/n2 + n3/n4)',
	      r: '((n1*n4 + n3*n2)/(n2*n4))'
	    }, // Sum of fractions
	    {
	      l: '(n1/n2 + n3)',
	      r: '((n1 + n3*n2)/n2)'
	    }, // Sum fraction with number 1
	    {
	      l: '(n1 + n2/n3)',
	      r: '((n1*n3 + n2)/n3)'
	    }]; // Sum fraction with number 1

	    var rulesSucDiv = [{
	      l: '(n1/(n2/n3))',
	      r: '((n1*n3)/n2)'
	    }, // Division simplification
	    {
	      l: '(n1/n2/n3)',
	      r: '(n1/(n2*n3))'
	    }];
	    var setRules = {}; // rules set in 4 steps.
	    // All rules => infinite loop
	    // setRules.allRules =oldRules.concat(rulesFirst,rulesDistrDiv,rulesSucDiv)

	    setRules.firstRules = oldRules.concat(rulesFirst, rulesSucDiv); // First rule set

	    setRules.distrDivRules = rulesDistrDiv; // Just distr. div. rules

	    setRules.sucDivRules = rulesSucDiv; // Jus succ. div. rules

	    setRules.firstRulesAgain = oldRules.concat(rulesFirst); // Last rules set without succ. div.
	    // Division simplification
	    // Second rule set.
	    // There is no aggregate expression with parentesis, but the only variable can be scattered.

	    setRules.finalRules = [simplifyCore$1, // simplify.rules[0]
	    {
	      l: 'n*-n',
	      r: '-n^2'
	    }, // Joining multiply with power 1
	    {
	      l: 'n*n',
	      r: 'n^2'
	    }, // Joining multiply with power 2
	    simplifyConstant$1, // simplify.rules[14] old 3rd index in oldRules
	    {
	      l: 'n*-n^n1',
	      r: '-n^(n1+1)'
	    }, // Joining multiply with power 3
	    {
	      l: 'n*n^n1',
	      r: 'n^(n1+1)'
	    }, // Joining multiply with power 4
	    {
	      l: 'n^n1*-n^n2',
	      r: '-n^(n1+n2)'
	    }, // Joining multiply with power 5
	    {
	      l: 'n^n1*n^n2',
	      r: 'n^(n1+n2)'
	    }, // Joining multiply with power 6
	    {
	      l: 'n^n1*-n',
	      r: '-n^(n1+1)'
	    }, // Joining multiply with power 7
	    {
	      l: 'n^n1*n',
	      r: 'n^(n1+1)'
	    }, // Joining multiply with power 8
	    {
	      l: 'n^n1/-n',
	      r: '-n^(n1-1)'
	    }, // Joining multiply with power 8
	    {
	      l: 'n^n1/n',
	      r: 'n^(n1-1)'
	    }, // Joining division with power 1
	    {
	      l: 'n/-n^n1',
	      r: '-n^(1-n1)'
	    }, // Joining division with power 2
	    {
	      l: 'n/n^n1',
	      r: 'n^(1-n1)'
	    }, // Joining division with power 3
	    {
	      l: 'n^n1/-n^n2',
	      r: 'n^(n1-n2)'
	    }, // Joining division with power 4
	    {
	      l: 'n^n1/n^n2',
	      r: 'n^(n1-n2)'
	    }, // Joining division with power 5
	    {
	      l: 'n1+(-n2*n3)',
	      r: 'n1-n2*n3'
	    }, // Solving useless parenthesis 1
	    {
	      l: 'v*(-c)',
	      r: '-c*v'
	    }, // Solving useless unary 2
	    {
	      l: 'n1+-n2',
	      r: 'n1-n2'
	    }, // Solving +- together (new!)
	    {
	      l: 'v*c',
	      r: 'c*v'
	    }, // inversion constant with variable
	    {
	      l: '(n1^n2)^n3',
	      r: '(n1^(n2*n3))' // Power to Power

	    }];
	    return setRules;
	  } // End rulesRationalize
	  // ---------------------------------------------------------------------------------------

	  /**
	   *  Expand recursively a tree node for handling with expressions with exponents
	   *  (it's not for constants, symbols or functions with exponents)
	   *  PS: The other parameters are internal for recursion
	   *
	   * Syntax:
	   *
	   *     expandPower(node)
	   *
	   * @param  {Node} node         Current expression node
	   * @param  {node} parent       Parent current node inside the recursion
	   * @param  (int}               Parent number of chid inside the rercursion
	   *
	   * @return {node}        node expression with all powers expanded.
	   */


	  function expandPower(node, parent, indParent) {
	    var tp = node.type;
	    var internal = arguments.length > 1; // TRUE in internal calls

	    if (tp === 'OperatorNode' && node.isBinary()) {
	      var does = false;
	      var val;

	      if (node.op === '^') {
	        // First operator: Parenthesis or UnaryMinus
	        if ((node.args[0].type === 'ParenthesisNode' || node.args[0].type === 'OperatorNode') && node.args[1].type === 'ConstantNode') {
	          // Second operator: Constant
	          val = parseFloat(node.args[1].value);
	          does = val >= 2 && number$1.isInteger(val);
	        }
	      }

	      if (does) {
	        // Exponent >= 2
	        // Before:
	        //            operator A --> Subtree
	        // parent pow
	        //            constant
	        //
	        if (val > 2) {
	          // Exponent > 2,
	          // AFTER:  (exponent > 2)
	          //             operator A --> Subtree
	          // parent  *
	          //                 deep clone (operator A --> Subtree
	          //             pow
	          //                 constant - 1
	          //
	          var nEsqTopo = node.args[0];
	          var nDirTopo = new OperatorNode$1('^', 'pow', [node.args[0].cloneDeep(), new ConstantNode$1(val - 1)]);
	          node = new OperatorNode$1('*', 'multiply', [nEsqTopo, nDirTopo]);
	        } else {
	          // Expo = 2 - no power
	          // AFTER:  (exponent =  2)
	          //             operator A --> Subtree
	          // parent   oper
	          //            deep clone (operator A --> Subtree)
	          //
	          node = new OperatorNode$1('*', 'multiply', [node.args[0], node.args[0].cloneDeep()]);
	        }

	        if (internal) {
	          // Change parent references in internal recursive calls
	          if (indParent === 'content') {
	            parent.content = node;
	          } else {
	            parent.args[indParent] = node;
	          }
	        }
	      } // does

	    } // binary OperatorNode


	    if (tp === 'ParenthesisNode') {
	      // Recursion
	      expandPower(node.content, node, 'content');
	    } else if (tp !== 'ConstantNode' && tp !== 'SymbolNode') {
	      for (var i = 0; i < node.args.length; i++) {
	        expandPower(node.args[i], node, i);
	      }
	    }

	    if (!internal) {
	      // return the root node
	      return node;
	    }
	  } // End expandPower
	  // ---------------------------------------------------------------------------------------

	  /**
	   * Auxilary function for rationalize
	   * Convert near canonical polynomial in one variable in a canonical polynomial
	   * with one term for each exponent in decreasing order
	   *
	   * Syntax:
	   *
	   *     polyToCanonical(node [, coefficients])
	   *
	   * @param  {Node | string} expr       The near canonical polynomial expression to convert in a a canonical polynomial expression
	   *
	   *        The string or tree expression needs to be at below syntax, with free spaces:
	   *         (  (^(-)? | [+-]? )cte (*)? var (^expo)?  | cte )+
	   *       Where 'var' is one variable with any valid name
	   *             'cte' are real numeric constants with any value. It can be omitted if equal than 1
	   *             'expo' are integers greater than 0. It can be omitted if equal than 1.
	   *
	   * @param  {array}   coefficients             Optional returns coefficients sorted by increased exponent
	   *
	   *
	   * @return {node}        new node tree with one variable polynomial or string error.
	   */


	  function polyToCanonical(node, coefficients) {
	    if (coefficients === undefined) {
	      coefficients = [];
	    } // coefficients.


	    coefficients[0] = 0; // index is the exponent

	    var o = {};
	    o.cte = 1;
	    o.oper = '+'; // fire: mark with * or ^ when finds * or ^ down tree, reset to "" with + and -.
	    //       It is used to deduce the exponent: 1 for *, 0 for "".

	    o.fire = '';
	    var maxExpo = 0; // maximum exponent

	    var varname = ''; // variable name

	    recurPol(node, null, o);
	    maxExpo = coefficients.length - 1;
	    var first = true;
	    var no;

	    for (var i = maxExpo; i >= 0; i--) {
	      if (coefficients[i] === 0) continue;
	      var n1 = new ConstantNode$1(first ? coefficients[i] : Math.abs(coefficients[i]));
	      var op = coefficients[i] < 0 ? '-' : '+';

	      if (i > 0) {
	        // Is not a constant without variable
	        var n2 = new SymbolNode$1(varname);

	        if (i > 1) {
	          var n3 = new ConstantNode$1(i);
	          n2 = new OperatorNode$1('^', 'pow', [n2, n3]);
	        }

	        if (coefficients[i] === -1 && first) {
	          n1 = new OperatorNode$1('-', 'unaryMinus', [n2]);
	        } else if (Math.abs(coefficients[i]) === 1) {
	          n1 = n2;
	        } else {
	          n1 = new OperatorNode$1('*', 'multiply', [n1, n2]);
	        }
	      }

	      if (first) {
	        no = n1;
	      } else if (op === '+') {
	        no = new OperatorNode$1('+', 'add', [no, n1]);
	      } else {
	        no = new OperatorNode$1('-', 'subtract', [no, n1]);
	      }

	      first = false;
	    } // for


	    if (first) {
	      return new ConstantNode$1(0);
	    } else {
	      return no;
	    }
	    /**
	     * Recursive auxilary function inside polyToCanonical for
	     * converting expression in canonical form
	     *
	     * Syntax:
	     *
	     *     recurPol(node, noPai, obj)
	     *
	     * @param  {Node} node        The current subpolynomial expression
	     * @param  {Node | Null}  noPai   The current parent node
	     * @param  {object}    obj        Object with many internal flags
	     *
	     * @return {}                    No return. If error, throws an exception
	     */


	    function recurPol(node, noPai, o) {
	      var tp = node.type;

	      if (tp === 'FunctionNode') {
	        // ***** FunctionName *****
	        // No function call in polynomial expression
	        throw new Error('There is an unsolved function call');
	      } else if (tp === 'OperatorNode') {
	        // ***** OperatorName *****
	        if ('+-*^'.indexOf(node.op) === -1) throw new Error('Operator ' + node.op + ' invalid');

	        if (noPai !== null) {
	          // -(unary),^  : children of *,+,-
	          if ((node.fn === 'unaryMinus' || node.fn === 'pow') && noPai.fn !== 'add' && noPai.fn !== 'subtract' && noPai.fn !== 'multiply') {
	            throw new Error('Invalid ' + node.op + ' placing');
	          } // -,+,* : children of +,-


	          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'multiply') && noPai.fn !== 'add' && noPai.fn !== 'subtract') {
	            throw new Error('Invalid ' + node.op + ' placing');
	          } // -,+ : first child


	          if ((node.fn === 'subtract' || node.fn === 'add' || node.fn === 'unaryMinus') && o.noFil !== 0) {
	            throw new Error('Invalid ' + node.op + ' placing');
	          }
	        } // Has parent
	        // Firers: ^,*       Old:   ^,&,-(unary): firers


	        if (node.op === '^' || node.op === '*') {
	          o.fire = node.op;
	        }

	        for (var _i = 0; _i < node.args.length; _i++) {
	          // +,-: reset fire
	          if (node.fn === 'unaryMinus') o.oper = '-';

	          if (node.op === '+' || node.fn === 'subtract') {
	            o.fire = '';
	            o.cte = 1; // default if there is no constant

	            o.oper = _i === 0 ? '+' : node.op;
	          }

	          o.noFil = _i; // number of son

	          recurPol(node.args[_i], node, o);
	        } // for in children

	      } else if (tp === 'SymbolNode') {
	        // ***** SymbolName *****
	        if (node.name !== varname && varname !== '') {
	          throw new Error('There is more than one variable');
	        }

	        varname = node.name;

	        if (noPai === null) {
	          coefficients[1] = 1;
	          return;
	        } // ^: Symbol is First child


	        if (noPai.op === '^' && o.noFil !== 0) {
	          throw new Error('In power the variable should be the first parameter');
	        } // *: Symbol is Second child


	        if (noPai.op === '*' && o.noFil !== 1) {
	          throw new Error('In multiply the variable should be the second parameter');
	        } // Symbol: firers '',* => it means there is no exponent above, so it's 1 (cte * var)


	        if (o.fire === '' || o.fire === '*') {
	          if (maxExpo < 1) coefficients[1] = 0;
	          coefficients[1] += o.cte * (o.oper === '+' ? 1 : -1);
	          maxExpo = Math.max(1, maxExpo);
	        }
	      } else if (tp === 'ConstantNode') {
	        var valor = parseFloat(node.value);

	        if (noPai === null) {
	          coefficients[0] = valor;
	          return;
	        }

	        if (noPai.op === '^') {
	          // cte: second  child of power
	          if (o.noFil !== 1) throw new Error('Constant cannot be powered');

	          if (!number$1.isInteger(valor) || valor <= 0) {
	            throw new Error('Non-integer exponent is not allowed');
	          }

	          for (var _i2 = maxExpo + 1; _i2 < valor; _i2++) {
	            coefficients[_i2] = 0;
	          }

	          if (valor > maxExpo) coefficients[valor] = 0;
	          coefficients[valor] += o.cte * (o.oper === '+' ? 1 : -1);
	          maxExpo = Math.max(valor, maxExpo);
	          return;
	        }

	        o.cte = valor; // Cte: firer '' => There is no exponent and no multiplication, so the exponent is 0.

	        if (o.fire === '') {
	          coefficients[0] += o.cte * (o.oper === '+' ? 1 : -1);
	        }
	      } else {
	        throw new Error('Type ' + tp + ' is not allowed');
	      }
	    } // End of recurPol

	  } // End of polyToCanonical


	  return rationalize;
	} // end of factory


	var name$1k = 'rationalize';
	var factory_1$1u = factory$1u;

	var rationalize = {
		name: name$1k,
		factory: factory_1$1u
	};

	var nearlyEqual$4 = number.nearlyEqual;



	function factory$1v(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);

	  var latex$1 = latex;
	  /**
	   * Test whether two values are unequal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * larger than the configured epsilon. The function cannot be used to compare
	   * values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
	   * Strings are compared by their numerical value.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
	   * with everything except `null`, and `undefined` is unequal with everything
	   * except `undefined`.
	   *
	   * Syntax:
	   *
	   *    math.unequal(x, y)
	   *
	   * Examples:
	   *
	   *    math.unequal(2 + 2, 3)       // returns true
	   *    math.unequal(2 + 2, 4)       // returns false
	   *
	   *    const a = math.unit('50 cm')
	   *    const b = math.unit('5 m')
	   *    math.unequal(a, b)           // returns false
	   *
	   *    const c = [2, 5, 1]
	   *    const d = [2, 7, 1]
	   *
	   *    math.unequal(c, d)           // returns [false, true, false]
	   *    math.deepEqual(c, d)         // returns false
	   *
	   *    math.unequal(0, null)        // returns true
	   * See also:
	   *
	   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
	   */


	  var unequal = typed('unequal', {
	    'any, any': function anyAny(x, y) {
	      // strict equality for null and undefined?
	      if (x === null) {
	        return y !== null;
	      }

	      if (y === null) {
	        return x !== null;
	      }

	      if (x === undefined) {
	        return y !== undefined;
	      }

	      if (y === undefined) {
	        return x !== undefined;
	      }

	      return _unequal(x, y);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, _unequal);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, _unequal, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, _unequal, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, _unequal);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return unequal(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return unequal(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return unequal(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, _unequal, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, _unequal, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, _unequal, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, _unequal, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, _unequal, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, _unequal, true).valueOf();
	    }
	  });

	  var _unequal = typed('_unequal', {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x !== y;
	    },
	    'number, number': function numberNumber(x, y) {
	      return !nearlyEqual$4(x, y, config.epsilon);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return !x.equals(y);
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return !x.equals(y);
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }

	      return unequal(x.value, y.value);
	    }
	  });

	  unequal.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['unequal'], "${args[1]}\\right)")
	  };
	  return unequal;
	}

	var name$1l = 'unequal';
	var factory_1$1v = factory$1v;

	var unequal = {
		name: name$1l,
		factory: factory_1$1v
	};

	function factory$1w(type, config, load, typed) {
	  /**
	   * Compute the sign of a value. The sign of a value x is:
	   *
	   * -  1 when x > 0
	   * - -1 when x < 0
	   * -  0 when x == 0
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sign(x)
	   *
	   * Examples:
	   *
	   *    math.sign(3.5)               // returns 1
	   *    math.sign(-4.2)              // returns -1
	   *    math.sign(0)                 // returns 0
	   *
	   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]
	   *
	   * See also:
	   *
	   *    abs
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            The number for which to determine the sign
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
	   *            The sign of `x`
	   */
	  var sign = typed('sign', {
	    'number': number.sign,
	    'Complex': function Complex(x) {
	      return x.sign();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(x.cmp(0));
	    },
	    'Fraction': function Fraction(x) {
	      return new type.Fraction(x.s, 1);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sign(0) = 0
	      return deepMap(x, sign);
	    },
	    'Unit': function Unit(x) {
	      return sign(x.value);
	    }
	  });
	  sign.toTex = {
	    1: "\\mathrm{${name}}\\left(${args[0]}\\right)"
	  };
	  return sign;
	}

	var name$1m = 'sign';
	var factory_1$1w = factory$1w;

	var sign$1 = {
		name: name$1m,
		factory: factory_1$1w
	};

	function factory$1x(type, config, load, typed) {
	  /**
	   * Calculate the square root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sqrt(x)
	   *
	   * Examples:
	   *
	   *    math.sqrt(25)                // returns 5
	   *    math.square(5)               // returns 25
	   *    math.sqrt(-4)                // returns Complex 2i
	   *
	   * See also:
	   *
	   *    square, multiply, cube, cbrt, sqrtm
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
	   *            Value for which to calculate the square root.
	   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
	   *            Returns the square root of `x`
	   */
	  var sqrt = typed('sqrt', {
	    'number': _sqrtNumber,
	    'Complex': function Complex(x) {
	      return x.sqrt();
	    },
	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.sqrt();
	      } else {
	        // negative value -> downgrade to number to do complex value computation
	        return _sqrtNumber(x.toNumber());
	      }
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sqrt(0) = 0
	      return deepMap(x, sqrt);
	    },
	    'Unit': function Unit(x) {
	      // Someday will work for complex units when they are implemented
	      return x.pow(0.5);
	    }
	  });
	  /**
	   * Calculate sqrt for a number
	   * @param {number} x
	   * @returns {number | Complex} Returns the square root of x
	   * @private
	   */

	  function _sqrtNumber(x) {
	    if (isNaN(x)) {
	      return NaN;
	    } else if (x >= 0 || config.predictable) {
	      return Math.sqrt(x);
	    } else {
	      return new type.Complex(x, 0).sqrt();
	    }
	  }

	  sqrt.toTex = {
	    1: "\\sqrt{${args[0]}}"
	  };
	  return sqrt;
	}

	var name$1n = 'sqrt';
	var factory_1$1x = factory$1x;

	var sqrt$1 = {
		name: name$1n,
		factory: factory_1$1x
	};

	function factory$1y(type, config, load, typed) {
	  /**
	   * Compute the complex conjugate of a complex value.
	   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.conj(x)
	   *
	   * Examples:
	   *
	   *    math.conj(math.complex('2 + 3i'))  // returns Complex 2 - 3i
	   *    math.conj(math.complex('2 - 3i'))  // returns Complex 2 + 3i
	   *    math.conj(math.complex('-5.2i'))  // returns Complex 5.2i
	   *
	   * See also:
	   *
	   *    re, im, arg, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            The complex conjugate of x
	   */
	  var conj = typed('conj', {
	    'number': function number(x) {
	      return x;
	    },
	    'BigNumber': function BigNumber(x) {
	      return x;
	    },
	    'Complex': function Complex(x) {
	      return x.conjugate();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, conj);
	    }
	  });
	  conj.toTex = {
	    1: "\\left(${args[0]}\\right)^*"
	  };
	  return conj;
	}

	var name$1o = 'conj';
	var factory_1$1y = factory$1y;

	var conj = {
		name: name$1o,
		factory: factory_1$1y
	};

	function factory$1z(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var zeros$1 = load(zeros);
	  var identity$1 = load(identity);
	  var isZero$1 = load(isZero);
	  var unequal$1 = load(unequal);
	  var sign = load(sign$1);
	  var sqrt = load(sqrt$1);
	  var conj$1 = load(conj);
	  var unaryMinus$1 = load(unaryMinus);
	  var addScalar$1 = load(addScalar);
	  var divideScalar$1 = load(divideScalar);
	  var multiplyScalar$1 = load(multiplyScalar);
	  var subtract$1 = load(subtract);
	  /**
	   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in
	   * two matrices (`Q`, `R`) where `Q` is an
	   * orthogonal matrix and `R` is an upper triangular matrix.
	   *
	   * Syntax:
	   *
	   *    math.qr(A)
	   *
	   * Example:
	   *
	   *    const m = [
	   *      [1, -1,  4],
	   *      [1,  4, -2],
	   *      [1,  4,  2],
	   *      [1,  -1, 0]
	   *    ]
	   *    const result = math.qr(m)
	   *    // r = {
	   *    //   Q: [
	   *    //     [0.5, -0.5,   0.5],
	   *    //     [0.5,  0.5,  -0.5],
	   *    //     [0.5,  0.5,   0.5],
	   *    //     [0.5, -0.5,  -0.5],
	   *    //   ],
	   *    //   R: [
	   *    //     [2, 3,  2],
	   *    //     [0, 5, -2],
	   *    //     [0, 0,  4],
	   *    //     [0, 0,  0]
	   *    //   ]
	   *    // }
	   *
	   * See also:
	   *
	   *    lup, lusolve
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array
	   * for which to get the QR decomposition.
	   *
	   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
	   * matrix and R: the upper triangular matrix
	   */

	  var qr = typed('qr', {
	    'DenseMatrix': function DenseMatrix(m) {
	      return _denseQR(m);
	    },
	    'SparseMatrix': function SparseMatrix(m) {
	      return _sparseQR();
	    },
	    'Array': function Array(a) {
	      // create dense matrix from array
	      var m = matrix$1(a); // lup, use matrix implementation

	      var r = _denseQR(m); // result


	      return {
	        Q: r.Q.valueOf(),
	        R: r.R.valueOf()
	      };
	    }
	  });

	  function _denseQR(m) {
	    // rows & columns (m x n)
	    var rows = m._size[0]; // m

	    var cols = m._size[1]; // n

	    var Q = identity$1([rows], 'dense');
	    var Qdata = Q._data;
	    var R = m.clone();
	    var Rdata = R._data; // vars

	    var i, j, k;
	    var w = zeros$1([rows], '');

	    for (k = 0; k < Math.min(cols, rows); ++k) {
	      /*
	       * **k-th Household matrix**
	       *
	       * The matrix I - 2*v*transpose(v)
	       * x     = first column of A
	       * x1    = first element of x
	       * alpha = x1 / |x1| * |x|
	       * e1    = tranpose([1, 0, 0, ...])
	       * u     = x - alpha * e1
	       * v     = u / |u|
	       *
	       * Household matrix = I - 2 * v * tranpose(v)
	       *
	       *  * Initially Q = I and R = A.
	       *  * Household matrix is a reflection in a plane normal to v which
	       *    will zero out all but the top right element in R.
	       *  * Appplying reflection to both Q and R will not change product.
	       *  * Repeat this process on the (1,1) minor to get R as an upper
	       *    triangular matrix.
	       *  * Reflections leave the magnitude of the columns of Q unchanged
	       *    so Q remains othoganal.
	       *
	       */
	      var pivot = Rdata[k][k];
	      var sgn = unaryMinus$1(sign(pivot));
	      var conjSgn = conj$1(sgn);
	      var alphaSquared = 0;

	      for (i = k; i < rows; i++) {
	        alphaSquared = addScalar$1(alphaSquared, multiplyScalar$1(Rdata[i][k], conj$1(Rdata[i][k])));
	      }

	      var alpha = multiplyScalar$1(sgn, sqrt(alphaSquared));

	      if (!isZero$1(alpha)) {
	        // first element in vector u
	        var u1 = subtract$1(pivot, alpha); // w = v * u1 / |u|    (only elements k to (rows-1) are used)

	        w[k] = 1;

	        for (i = k + 1; i < rows; i++) {
	          w[i] = divideScalar$1(Rdata[i][k], u1);
	        } // tau = - conj(u1 / alpha)


	        var tau = unaryMinus$1(conj$1(divideScalar$1(u1, alpha)));
	        var s = void 0;
	        /*
	         * tau and w have been choosen so that
	         *
	         * 2 * v * tranpose(v) = tau * w * tranpose(w)
	         */

	        /*
	         * -- calculate R = R - tau * w * tranpose(w) * R --
	         * Only do calculation with rows k to (rows-1)
	         * Additionally columns 0 to (k-1) will not be changed by this
	         *   multiplication so do not bother recalculating them
	         */

	        for (j = k; j < cols; j++) {
	          s = 0.0; // calculate jth element of [tranpose(w) * R]

	          for (i = k; i < rows; i++) {
	            s = addScalar$1(s, multiplyScalar$1(conj$1(w[i]), Rdata[i][j]));
	          } // calculate the jth element of [tau * transpose(w) * R]


	          s = multiplyScalar$1(s, tau);

	          for (i = k; i < rows; i++) {
	            Rdata[i][j] = multiplyScalar$1(subtract$1(Rdata[i][j], multiplyScalar$1(w[i], s)), conjSgn);
	          }
	        }
	        /*
	         * -- calculate Q = Q - tau * Q * w * transpose(w) --
	         * Q is a square matrix (rows x rows)
	         * Only do calculation with columns k to (rows-1)
	         * Additionally rows 0 to (k-1) will not be changed by this
	         *   multiplication so do not bother recalculating them
	         */


	        for (i = 0; i < rows; i++) {
	          s = 0.0; // calculate ith element of [Q * w]

	          for (j = k; j < rows; j++) {
	            s = addScalar$1(s, multiplyScalar$1(Qdata[i][j], w[j]));
	          } // calculate the ith element of [tau * Q * w]


	          s = multiplyScalar$1(s, tau);

	          for (j = k; j < rows; ++j) {
	            Qdata[i][j] = divideScalar$1(subtract$1(Qdata[i][j], multiplyScalar$1(s, conj$1(w[j]))), conjSgn);
	          }
	        }
	      }
	    } // coerse almost zero elements to zero
	    // TODO I feel uneasy just zeroing these values


	    for (i = 0; i < rows; ++i) {
	      for (j = 0; j < i && j < cols; ++j) {
	        if (unequal$1(0, divideScalar$1(Rdata[i][j], 1e5))) {
	          throw new Error('math.qr(): unknown error - ' + 'R is not lower triangular (element (' + i + ', ' + j + ')  = ' + Rdata[i][j] + ')');
	        }

	        Rdata[i][j] = multiplyScalar$1(Rdata[i][j], 0);
	      }
	    } // return matrices


	    return {
	      Q: Q,
	      R: R,
	      toString: function toString() {
	        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
	      }
	    };
	  }

	  function _sparseQR(m) {
	    throw new Error('qr not implemented for sparse matrices yet');
	  }

	  return qr;
	}

	var name$1p = 'qr';
	var factory_1$1z = factory$1z;

	var qr = {
		name: name$1p,
		factory: factory_1$1z
	};

	function factory$1A() {
	  /**
	   * This function "flips" its input about the integer -1.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csFlip = function csFlip(i) {
	    // flip the value
	    return -i - 2;
	  };

	  return csFlip;
	}

	var name$1q = 'csFlip';
	var path$y = 'algebra.sparse';
	var factory_1$1A = factory$1A;

	var csFlip = {
		name: name$1q,
		path: path$y,
		factory: factory_1$1A
	};

	function factory$1B() {
	  /**
	   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
	   *
	   * @param {Matrix}   a              The sparse matrix
	   * @param {function} callback       The callback function, function will be invoked with the following args:
	   *                                    - The entry row
	   *                                    - The entry column
	   *                                    - The entry value
	   *                                    - The state parameter
	   * @param {any}      other          The state
	   *
	   * @return                          The number of nonzero elements in the matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csFkeep = function csFkeep(a, callback, other) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size; // columns

	    var n = asize[1]; // nonzero items

	    var nz = 0; // loop columns

	    for (var j = 0; j < n; j++) {
	      // get current location of col j
	      var p = aptr[j]; // record new location of col j

	      aptr[j] = nz;

	      for (; p < aptr[j + 1]; p++) {
	        // check we need to keep this item
	        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
	          // keep A(i,j)
	          aindex[nz] = aindex[p]; // check we need to process values (pattern only)

	          if (avalues) {
	            avalues[nz] = avalues[p];
	          } // increment nonzero items


	          nz++;
	        }
	      }
	    } // finalize A


	    aptr[n] = nz; // trim arrays

	    aindex.splice(nz, aindex.length - nz); // check we need to process values (pattern only)

	    if (avalues) {
	      avalues.splice(nz, avalues.length - nz);
	    } // return number of nonzero items


	    return nz;
	  };

	  return csFkeep;
	}

	var name$1r = 'csFkeep';
	var path$z = 'algebra.sparse';
	var factory_1$1B = factory$1B;

	var csFkeep = {
		name: name$1r,
		path: path$z,
		factory: factory_1$1B
	};

	function factory$1C() {
	  /**
	   * Depth-first search and postorder of a tree rooted at node j
	   *
	   * @param {Number}  j               The tree node
	   * @param {Number}  k
	   * @param {Array}   w               The workspace array
	   * @param {Number}  head            The index offset within the workspace for the head array
	   * @param {Number}  next            The index offset within the workspace for the next array
	   * @param {Array}   post            The post ordering array
	   * @param {Number}  stack           The index offset within the workspace for the stack array
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csTdfs = function csTdfs(j, k, w, head, next, post, stack) {
	    // variables
	    var top = 0; // place j on the stack

	    w[stack] = j; // while (stack is not empty)

	    while (top >= 0) {
	      // p = top of stack
	      var p = w[stack + top]; // i = youngest child of p

	      var i = w[head + p];

	      if (i === -1) {
	        // p has no unordered children left
	        top--; // node p is the kth postordered node

	        post[k++] = p;
	      } else {
	        // remove i from children of p
	        w[head + p] = w[next + i]; // increment top

	        ++top; // start dfs on child node i

	        w[stack + top] = i;
	      }
	    }

	    return k;
	  };

	  return csTdfs;
	}

	var name$1s = 'csTdfs';
	var path$A = 'algebra.sparse';
	var factory_1$1C = factory$1C;

	var csTdfs = {
		name: name$1s,
		path: path$A,
		factory: factory_1$1C
	};

	var clone$5 = object.clone;

	var format$4 = string.format;

	function factory$1D(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var DenseMatrix = type.DenseMatrix;
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Transpose a matrix. All values of the matrix are reflected over its
	   * main diagonal. Only applicable to two dimensional matrices containing
	   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
	   * vectors and scalars return the input unchanged.
	   *
	   * Syntax:
	   *
	   *     math.transpose(x)
	   *
	   * Examples:
	   *
	   *     const A = [[1, 2, 3], [4, 5, 6]]
	   *     math.transpose(A)               // returns [[1, 4], [2, 5], [3, 6]]
	   *
	   * See also:
	   *
	   *     diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be transposed
	   * @return {Array | Matrix}   The transposed matrix
	   */

	  var transpose = typed('transpose', {
	    'Array': function Array(x) {
	      // use dense matrix implementation
	      return transpose(matrix$1(x)).valueOf();
	    },
	    'Matrix': function Matrix(x) {
	      // matrix size
	      var size = x.size(); // result

	      var c; // process dimensions

	      switch (size.length) {
	        case 1:
	          // vector
	          c = x.clone();
	          break;

	        case 2:
	          // rows and columns
	          var rows = size[0];
	          var columns = size[1]; // check columns

	          if (columns === 0) {
	            // throw exception
	            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format$4(size) + ')');
	          } // process storage format


	          switch (x.storage()) {
	            case 'dense':
	              c = _denseTranspose(x, rows, columns);
	              break;

	            case 'sparse':
	              c = _sparseTranspose(x, rows, columns);
	              break;
	          }

	          break;

	        default:
	          // multi dimensional
	          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format$4(this._size) + ')');
	      }

	      return c;
	    },
	    // scalars
	    'any': function any(x) {
	      return clone$5(x);
	    }
	  });

	  function _denseTranspose(m, rows, columns) {
	    // matrix array
	    var data = m._data; // transposed matrix data

	    var transposed = [];
	    var transposedRow; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // initialize row
	      transposedRow = transposed[j] = []; // loop rows

	      for (var i = 0; i < rows; i++) {
	        // set data
	        transposedRow[i] = clone$5(data[i][j]);
	      }
	    } // return matrix


	    return new DenseMatrix({
	      data: transposed,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  }

	  function _sparseTranspose(m, rows, columns) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr; // result matrices

	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = []; // row counts

	    var w = [];

	    for (var x = 0; x < rows; x++) {
	      w[x] = 0;
	    } // vars


	    var p, l, j; // loop values in matrix

	    for (p = 0, l = index.length; p < l; p++) {
	      // number of values in row
	      w[index[p]]++;
	    } // cumulative sum


	    var sum = 0; // initialize cptr with the cummulative sum of row counts

	    for (var i = 0; i < rows; i++) {
	      // update cptr
	      cptr.push(sum); // update sum

	      sum += w[i]; // update w

	      w[i] = cptr[i];
	    } // update cptr


	    cptr.push(sum); // loop columns

	    for (j = 0; j < columns; j++) {
	      // values & index in column
	      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
	        // C values & index
	        var q = w[index[k]]++; // C[j, i] = A[i, j]

	        cindex[q] = j; // check we need to process values (pattern matrix)

	        if (values) {
	          cvalues[q] = clone$5(values[k]);
	        }
	      }
	    } // return matrix


	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  }

	  transpose.toTex = {
	    1: "\\left(${args[0]}\\right)".concat(latex$1.operators['transpose'])
	  };
	  return transpose;
	}

	var name$1t = 'transpose';
	var factory_1$1D = factory$1D;

	var transpose = {
		name: name$1t,
		factory: factory_1$1D
	};

	function factory$1E(type, config, load) {
	  var csFlip$1 = load(csFlip);
	  var csFkeep$1 = load(csFkeep);
	  var csTdfs$1 = load(csTdfs);
	  var add = load(add$1);
	  var multiply$1 = load(multiply);
	  var transpose$1 = load(transpose);
	  /**
	   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used
	   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
	   * than A. It is a gready method that selects the sparsest pivot row and column during the course
	   * of a right looking sparse Cholesky factorization.
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   *
	   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
	   * @param {Matrix} m        Sparse Matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csAmd = function csAmd(order, a) {
	    // check input parameters
	    if (!a || order <= 0 || order > 3) {
	      return null;
	    } // a matrix arrays


	    var asize = a._size; // rows and columns

	    var m = asize[0];
	    var n = asize[1]; // initialize vars

	    var lemax = 0; // dense threshold

	    var dense = Math.max(16, 10 * Math.sqrt(n));
	    dense = Math.min(n - 2, dense); // create target matrix C

	    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries


	    csFkeep$1(cm, _diag, null); // C matrix arrays

	    var cindex = cm._index;
	    var cptr = cm._ptr; // number of nonzero elements in C

	    var cnz = cptr[n]; // allocate result (n+1)

	    var P = []; // create workspace (8 * (n + 1))

	    var W = [];
	    var len = 0; // first n + 1 entries

	    var nv = n + 1; // next n + 1 entries

	    var next = 2 * (n + 1); // next n + 1 entries

	    var head = 3 * (n + 1); // next n + 1 entries

	    var elen = 4 * (n + 1); // next n + 1 entries

	    var degree = 5 * (n + 1); // next n + 1 entries

	    var w = 6 * (n + 1); // next n + 1 entries

	    var hhead = 7 * (n + 1); // last n + 1 entries
	    // use P as workspace for last

	    var last = P; // initialize quotient graph

	    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists


	    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node


	    var mindeg = 0; // vars

	    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do

	    while (nel < n) {
	      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
	      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
	      // many nodes have been eliminated.
	      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++) {
	      }

	      if (W[next + k] !== -1) {
	        last[W[next + k]] = -1;
	      } // remove k from degree list


	      W[head + mindeg] = W[next + k]; // elenk = |Ek|

	      var elenk = W[elen + k]; // # of nodes k represents

	      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated

	      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is
	      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
	      // degree lists. All elements e in Ek are absorved into element k.

	      var dk = 0; // flag k as in Lk

	      W[nv + k] = -nvk;
	      var p = cptr[k]; // do in place if W[elen + k] === 0

	      var pk1 = elenk === 0 ? p : cnz;
	      var pk2 = pk1;

	      for (k1 = 1; k1 <= elenk + 1; k1++) {
	        if (k1 > elenk) {
	          // search the nodes in k
	          e = k; // list of nodes starts at cindex[pj]

	          pj = p; // length of list of nodes in k

	          ln = W[len + k] - elenk;
	        } else {
	          // search the nodes in e
	          e = cindex[p++];
	          pj = cptr[e]; // length of list of nodes in e

	          ln = W[len + e];
	        }

	        for (k2 = 1; k2 <= ln; k2++) {
	          i = cindex[pj++]; // check  node i dead, or seen

	          if ((nvi = W[nv + i]) <= 0) {
	            continue;
	          } // W[degree + Lk] += size of node i


	          dk += nvi; // negate W[nv + i] to denote i in Lk

	          W[nv + i] = -nvi; // place i in Lk

	          cindex[pk2++] = i;

	          if (W[next + i] !== -1) {
	            last[W[next + i]] = last[i];
	          } // check we need to remove i from degree list


	          if (last[i] !== -1) {
	            W[next + last[i]] = W[next + i];
	          } else {
	            W[head + W[degree + i]] = W[next + i];
	          }
	        }

	        if (e !== k) {
	          // absorb e into k
	          cptr[e] = csFlip$1(k); // e is now a dead element

	          W[w + e] = 0;
	        }
	      } // cindex[cnz...nzmax] is free


	      if (elenk !== 0) {
	        cnz = pk2;
	      } // external degree of k - |Lk\i|


	      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]

	      cptr[k] = pk1;
	      W[len + k] = pk2 - pk1; // k is now an element

	      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
	      // scan, no entry in the w array is greater than or equal to mark.
	      // clear w if necessary

	      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\Lk|

	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk]; // check if W[elen + i] empty, skip it

	        if ((eln = W[elen + i]) <= 0) {
	          continue;
	        } // W[nv + i] was negated


	        nvi = -W[nv + i];
	        var wnvi = mark - nvi; // scan Ei

	        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
	          e = cindex[p];

	          if (W[w + e] >= mark) {
	            // decrement |Le\Lk|
	            W[w + e] -= nvi;
	          } else if (W[w + e] !== 0) {
	            // ensure e is a live element, 1st time e seen in scan 1
	            W[w + e] = W[degree + e] + wnvi;
	          }
	        }
	      } // degree update
	      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
	      // function h(i) for all nodes in Lk.
	      // scan2: degree update


	      for (pk = pk1; pk < pk2; pk++) {
	        // consider node i in Lk
	        i = cindex[pk];
	        p1 = cptr[i];
	        p2 = p1 + W[elen + i] - 1;
	        pn = p1; // scan Ei

	        for (h = 0, d = 0, p = p1; p <= p2; p++) {
	          e = cindex[p]; // check e is an unabsorbed element

	          if (W[w + e] !== 0) {
	            // dext = |Le\Lk|
	            var dext = W[w + e] - mark;

	            if (dext > 0) {
	              // sum up the set differences
	              d += dext; // keep e in Ei

	              cindex[pn++] = e; // compute the hash of node i

	              h += e;
	            } else {
	              // aggressive absorb. e->k
	              cptr[e] = csFlip$1(k); // e is a dead element

	              W[w + e] = 0;
	            }
	          }
	        } // W[elen + i] = |Ei|


	        W[elen + i] = pn - p1 + 1;
	        var p3 = pn;
	        var p4 = p1 + W[len + i]; // prune edges in Ai

	        for (p = p2 + 1; p < p4; p++) {
	          j = cindex[p]; // check node j dead or in Lk

	          var nvj = W[nv + j];

	          if (nvj <= 0) {
	            continue;
	          } // degree(i) += |j|


	          d += nvj; // place j in node list of i

	          cindex[pn++] = j; // compute hash for node i

	          h += j;
	        } // check for mass elimination


	        if (d === 0) {
	          // absorb i into k
	          cptr[i] = csFlip$1(k);
	          nvi = -W[nv + i]; // |Lk| -= |i|

	          dk -= nvi; // |k| += W[nv + i]

	          nvk += nvi;
	          nel += nvi;
	          W[nv + i] = 0; // node i is dead

	          W[elen + i] = -1;
	        } else {
	          // update degree(i)
	          W[degree + i] = Math.min(W[degree + i], d); // move first node to end

	          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei

	          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei

	          cindex[p1] = k; // new len of adj. list of node i

	          W[len + i] = pn - p1 + 1; // finalize hash of i

	          h = (h < 0 ? -h : h) % n; // place i in hash bucket

	          W[next + i] = W[hhead + h];
	          W[hhead + h] = i; // save hash of i in last[i]

	          last[i] = h;
	        }
	      } // finalize |Lk|


	      W[degree + k] = dk;
	      lemax = Math.max(lemax, dk); // clear w

	      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
	      // If two nodes have identical adjacency lists, their hash functions wil be identical.

	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk]; // check i is dead, skip it

	        if (W[nv + i] >= 0) {
	          continue;
	        } // scan hash bucket of node i


	        h = last[i];
	        i = W[hhead + h]; // hash bucket will be empty

	        W[hhead + h] = -1;

	        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {
	          ln = W[len + i];
	          eln = W[elen + i];

	          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {
	            W[w + cindex[p]] = mark;
	          }

	          var jlast = i; // compare i with all j

	          for (j = W[next + i]; j !== -1;) {
	            var ok = W[len + j] === ln && W[elen + j] === eln;

	            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
	              // compare i and j
	              if (W[w + cindex[p]] !== mark) {
	                ok = 0;
	              }
	            } // check i and j are identical


	            if (ok) {
	              // absorb j into i
	              cptr[j] = csFlip$1(i);
	              W[nv + i] += W[nv + j];
	              W[nv + j] = 0; // node j is dead

	              W[elen + j] = -1; // delete j from hash bucket

	              j = W[next + j];
	              W[next + jlast] = j;
	            } else {
	              // j and i are different
	              jlast = j;
	              j = W[next + j];
	            }
	          }
	        }
	      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
	      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.


	      for (p = pk1, pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk]; // check  i is dead, skip it

	        if ((nvi = -W[nv + i]) <= 0) {
	          continue;
	        } // restore W[nv + i]


	        W[nv + i] = nvi; // compute external degree(i)

	        d = W[degree + i] + dk - nvi;
	        d = Math.min(d, n - nel - nvi);

	        if (W[head + d] !== -1) {
	          last[W[head + d]] = i;
	        } // put i back in degree list


	        W[next + i] = W[head + d];
	        last[i] = -1;
	        W[head + d] = i; // find new minimum degree

	        mindeg = Math.min(mindeg, d);
	        W[degree + i] = d; // place i in Lk

	        cindex[p++] = i;
	      } // # nodes absorbed into k


	      W[nv + k] = nvk; // length of adj list of element k

	      if ((W[len + k] = p - pk1) === 0) {
	        // k is a root of the tree
	        cptr[k] = -1; // k is now a dead element

	        W[w + k] = 0;
	      }

	      if (elenk !== 0) {
	        // free unused space in Lk
	        cnz = p;
	      }
	    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left
	    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
	    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
	    // is computed. The tree is restored by unflipping all of ptr.
	    // fix assembly tree


	    for (i = 0; i < n; i++) {
	      cptr[i] = csFlip$1(cptr[i]);
	    }

	    for (j = 0; j <= n; j++) {
	      W[head + j] = -1;
	    } // place unordered nodes in lists


	    for (j = n; j >= 0; j--) {
	      // skip if j is an element
	      if (W[nv + j] > 0) {
	        continue;
	      } // place j in list of its parent


	      W[next + j] = W[head + cptr[j]];
	      W[head + cptr[j]] = j;
	    } // place elements in lists


	    for (e = n; e >= 0; e--) {
	      // skip unless e is an element
	      if (W[nv + e] <= 0) {
	        continue;
	      }

	      if (cptr[e] !== -1) {
	        // place e in list of its parent
	        W[next + e] = W[head + cptr[e]];
	        W[head + cptr[e]] = e;
	      }
	    } // postorder the assembly tree


	    for (k = 0, i = 0; i <= n; i++) {
	      if (cptr[i] === -1) {
	        k = csTdfs$1(i, k, W, head, next, P, w);
	      }
	    } // remove last item in array


	    P.splice(P.length - 1, 1); // return P

	    return P;
	  };
	  /**
	   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
	   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
	   *
	   * Order: 0
	   *   A natural ordering P=null matrix is returned.
	   *
	   * Order: 1
	   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
	   *   P = M + M'
	   *
	   * Order: 2
	   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
	   *   P = M' * M
	   *
	   * Order: 3
	   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
	   *   P = M' * M
	   */


	  function _createTargetMatrix(order, a, m, n, dense) {
	    // compute A'
	    var at = transpose$1(a); // check order = 1, matrix must be square

	    if (order === 1 && n === m) {
	      // C = A + A'
	      return add(a, at);
	    } // check order = 2, drop dense columns from M'


	    if (order === 2) {
	      // transpose arrays
	      var tindex = at._index;
	      var tptr = at._ptr; // new column index

	      var p2 = 0; // loop A' columns (rows)

	      for (var j = 0; j < m; j++) {
	        // column j of AT starts here
	        var p = tptr[j]; // new column j starts here

	        tptr[j] = p2; // skip dense col j

	        if (tptr[j + 1] - p > dense) {
	          continue;
	        } // map rows in column j of A


	        for (var p1 = tptr[j + 1]; p < p1; p++) {
	          tindex[p2++] = tindex[p];
	        }
	      } // finalize AT


	      tptr[m] = p2; // recreate A from new transpose matrix

	      a = transpose$1(at); // use A' * A

	      return multiply$1(at, a);
	    } // use A' * A, square or rectangular matrix


	    return multiply$1(at, a);
	  }
	  /**
	   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
	   *
	   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
	   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
	   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
	   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
	   */


	  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
	    // Initialize quotient graph
	    for (var k = 0; k < n; k++) {
	      W[len + k] = cptr[k + 1] - cptr[k];
	    }

	    W[len + n] = 0; // initialize workspace

	    for (var i = 0; i <= n; i++) {
	      // degree list i is empty
	      W[head + i] = -1;
	      last[i] = -1;
	      W[next + i] = -1; // hash list i is empty

	      W[hhead + i] = -1; // node i is just one node

	      W[nv + i] = 1; // node i is alive

	      W[w + i] = 1; // Ek of node i is empty

	      W[elen + i] = 0; // degree of node i

	      W[degree + i] = W[len + i];
	    } // clear w


	    var mark = _wclear(0, 0, W, w, n); // n is a dead element


	    W[elen + n] = -2; // n is a root of assembly tree

	    cptr[n] = -1; // n is a dead element

	    W[w + n] = 0; // return mark

	    return mark;
	  }
	  /**
	   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with
	   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
	   * output permutation p.
	   */


	  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
	    // result
	    var nel = 0; // loop columns

	    for (var i = 0; i < n; i++) {
	      // degree @ i
	      var d = W[degree + i]; // check node i is empty

	      if (d === 0) {
	        // element i is dead
	        W[elen + i] = -2;
	        nel++; // i is a root of assembly tree

	        cptr[i] = -1;
	        W[w + i] = 0;
	      } else if (d > dense) {
	        // absorb i into element n
	        W[nv + i] = 0; // node i is dead

	        W[elen + i] = -1;
	        nel++;
	        cptr[i] = csFlip$1(n);
	        W[nv + n]++;
	      } else {
	        var h = W[head + d];

	        if (h !== -1) {
	          last[h] = i;
	        } // put node i in degree list d


	        W[next + i] = W[head + d];
	        W[head + d] = i;
	      }
	    }

	    return nel;
	  }

	  function _wclear(mark, lemax, W, w, n) {
	    if (mark < 2 || mark + lemax < 0) {
	      for (var k = 0; k < n; k++) {
	        if (W[w + k] !== 0) {
	          W[w + k] = 1;
	        }
	      }

	      mark = 2;
	    } // at this point, W [0..n-1] < mark holds


	    return mark;
	  }

	  function _diag(i, j) {
	    return i !== j;
	  }

	  return csAmd;
	}

	var name$1u = 'csAmd';
	var path$B = 'algebra.sparse';
	var factory_1$1E = factory$1E;

	var csAmd = {
		name: name$1u,
		path: path$B,
		factory: factory_1$1E
	};

	function factory$1F(type) {
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Permutes a sparse matrix C = P * A * Q
	   *
	   * @param {Matrix}  a               The Matrix A
	   * @param {Array}   pinv            The row permutation vector
	   * @param {Array}   q               The column permutation vector
	   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
	   *
	   * @return {Matrix}                 C = P * A * Q, null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csPermute = function csPermute(a, pinv, q, values) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype; // rows & columns

	    var m = asize[0];
	    var n = asize[1]; // c arrays

	    var cvalues = values && a._values ? [] : null;
	    var cindex = []; // (aptr[n])

	    var cptr = []; // (n + 1)
	    // initialize vars

	    var nz = 0; // loop columns

	    for (var k = 0; k < n; k++) {
	      // column k of C is column q[k] of A
	      cptr[k] = nz; // apply column permutation

	      var j = q ? q[k] : k; // loop values in column j of A

	      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
	        // row i of A is row pinv[i] of C
	        var r = pinv ? pinv[aindex[t]] : aindex[t]; // index

	        cindex[nz] = r; // check we need to populate values

	        if (cvalues) {
	          cvalues[nz] = avalues[t];
	        } // increment number of nonzero elements


	        nz++;
	      }
	    } // finalize the last column of C


	    cptr[n] = nz; // return C matrix

	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [m, n],
	      datatype: adt
	    });
	  };

	  return csPermute;
	}

	var name$1v = 'csPermute';
	var path$C = 'algebra.sparse';
	var factory_1$1F = factory$1F;

	var csPermute = {
		name: name$1v,
		path: path$C,
		factory: factory_1$1F
	};

	function factory$1G() {
	  /**
	   * Computes the elimination tree of Matrix A (using triu(A)) or the
	   * elimination tree of A'A without forming A'A.
	   *
	   * @param {Matrix}  a               The A Matrix
	   * @param {boolean} ata             A value of true the function computes the etree of A'A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csEtree = function csEtree(a, ata) {
	    // check inputs
	    if (!a) {
	      return null;
	    } // a arrays


	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size; // rows & columns

	    var m = asize[0];
	    var n = asize[1]; // allocate result

	    var parent = []; // (n)
	    // allocate workspace

	    var w = []; // (n + (ata ? m : 0))

	    var ancestor = 0; // first n entries in w

	    var prev = n; // last m entries (ata = true)

	    var i, inext; // check we are calculating A'A

	    if (ata) {
	      // initialize workspace
	      for (i = 0; i < m; i++) {
	        w[prev + i] = -1;
	      }
	    } // loop columns


	    for (var k = 0; k < n; k++) {
	      // node k has no parent yet
	      parent[k] = -1; // nor does k have an ancestor

	      w[ancestor + k] = -1; // values in column k

	      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // row
	        var r = aindex[p]; // node

	        i = ata ? w[prev + r] : r; // traverse from i to k

	        for (; i !== -1 && i < k; i = inext) {
	          // inext = ancestor of i
	          inext = w[ancestor + i]; // path compression

	          w[ancestor + i] = k; // check no anc., parent is k

	          if (inext === -1) {
	            parent[i] = k;
	          }
	        }

	        if (ata) {
	          w[prev + r] = k;
	        }
	      }
	    }

	    return parent;
	  };

	  return csEtree;
	}

	var name$1w = 'csEtree';
	var path$D = 'algebra.sparse';
	var factory_1$1G = factory$1G;

	var csEtree = {
		name: name$1w,
		path: path$D,
		factory: factory_1$1G
	};

	function factory$1H(type, config, load) {
	  var csTdfs$1 = load(csTdfs);
	  /**
	   * Post order a tree of forest
	   *
	   * @param {Array}   parent          The tree or forest
	   * @param {Number}  n               Number of columns
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csPost = function csPost(parent, n) {
	    // check inputs
	    if (!parent) {
	      return null;
	    } // vars


	    var k = 0;
	    var j; // allocate result

	    var post = []; // (n)
	    // workspace, head: first n entries, next: next n entries, stack: last n entries

	    var w = []; // (3 * n)

	    var head = 0;
	    var next = n;
	    var stack = 2 * n; // initialize workspace

	    for (j = 0; j < n; j++) {
	      // empty linked lists
	      w[head + j] = -1;
	    } // traverse nodes in reverse order


	    for (j = n - 1; j >= 0; j--) {
	      // check j is a root
	      if (parent[j] === -1) {
	        continue;
	      } // add j to list of its parent


	      w[next + j] = w[head + parent[j]];
	      w[head + parent[j]] = j;
	    } // loop nodes


	    for (j = 0; j < n; j++) {
	      // skip j if it is not a root
	      if (parent[j] !== -1) {
	        continue;
	      } // depth-first search


	      k = csTdfs$1(j, k, w, head, next, post, stack);
	    }

	    return post;
	  };

	  return csPost;
	}

	var name$1x = 'csPost';
	var path$E = 'algebra.sparse';
	var factory_1$1H = factory$1H;

	var csPost = {
		name: name$1x,
		path: path$E,
		factory: factory_1$1H
	};

	function factory$1I() {
	  /**
	   * This function determines if j is a leaf of the ith row subtree.
	   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
	   *
	   * @param {Number}  i               The ith row subtree
	   * @param {Number}  j               The node to test
	   * @param {Array}   w               The workspace array
	   * @param {Number}  first           The index offset within the workspace for the first array
	   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
	   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
	   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
	   *
	   * @return {Object}
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csLeaf = function csLeaf(i, j, w, first, maxfirst, prevleaf, ancestor) {
	    var s, sparent, jprev; // our result

	    var jleaf = 0;
	    var q; // check j is a leaf

	    if (i <= j || w[first + j] <= w[maxfirst + i]) {
	      return -1;
	    } // update max first[j] seen so far


	    w[maxfirst + i] = w[first + j]; // jprev = previous leaf of ith subtree

	    jprev = w[prevleaf + i];
	    w[prevleaf + i] = j; // check j is first or subsequent leaf

	    if (jprev === -1) {
	      // 1st leaf, q = root of ith subtree
	      jleaf = 1;
	      q = i;
	    } else {
	      // update jleaf
	      jleaf = 2; // q = least common ancester (jprev,j)

	      for (q = jprev; q !== w[ancestor + q]; q = w[ancestor + q]) {
	      }

	      for (s = jprev; s !== q; s = sparent) {
	        // path compression
	        sparent = w[ancestor + s];
	        w[ancestor + s] = q;
	      }
	    }

	    return {
	      jleaf: jleaf,
	      q: q
	    };
	  };

	  return csLeaf;
	}

	var name$1y = 'csLeaf';
	var path$F = 'algebra.sparse';
	var factory_1$1I = factory$1I;

	var csLeaf = {
		name: name$1y,
		path: path$F,
		factory: factory_1$1I
	};

	function factory$1J(type, config, load) {
	  var transpose$1 = load(transpose);
	  var csLeaf$1 = load(csLeaf);
	  /**
	   * Computes the column counts using the upper triangular part of A.
	   * It transposes A internally, none of the input parameters are modified.
	   *
	   * @param {Matrix} a           The sparse matrix A
	   *
	   * @param {Matrix} ata         Count the columns of A'A instead
	   *
	   * @return                     An array of size n of the column counts or null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csCounts = function csCounts(a, parent, post, ata) {
	    // check inputs
	    if (!a || !parent || !post) {
	      return null;
	    } // a matrix arrays


	    var asize = a._size; // rows and columns

	    var m = asize[0];
	    var n = asize[1]; // variables

	    var i, j, k, J, p, p0, p1; // workspace size

	    var s = 4 * n + (ata ? n + m + 1 : 0); // allocate workspace

	    var w = []; // (s)

	    var ancestor = 0; // first n entries

	    var maxfirst = n; // next n entries

	    var prevleaf = 2 * n; // next n entries

	    var first = 3 * n; // next n entries

	    var head = 4 * n; // next n + 1 entries (used when ata is true)

	    var next = 5 * n + 1; // last entries in workspace
	    // clear workspace w[0..s-1]

	    for (k = 0; k < s; k++) {
	      w[k] = -1;
	    } // allocate result


	    var colcount = []; // (n)
	    // AT = A'

	    var at = transpose$1(a); // at arrays

	    var tindex = at._index;
	    var tptr = at._ptr; // find w[first + j]

	    for (k = 0; k < n; k++) {
	      j = post[k]; // colcount[j]=1 if j is a leaf

	      colcount[j] = w[first + j] === -1 ? 1 : 0;

	      for (; j !== -1 && w[first + j] === -1; j = parent[j]) {
	        w[first + j] = k;
	      }
	    } // initialize ata if needed


	    if (ata) {
	      // invert post
	      for (k = 0; k < n; k++) {
	        w[post[k]] = k;
	      } // loop rows (columns in AT)


	      for (i = 0; i < m; i++) {
	        // values in column i of AT
	        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) {
	          k = Math.min(k, w[tindex[p]]);
	        } // place row i in linked list k


	        w[next + i] = w[head + k];
	        w[head + k] = i;
	      }
	    } // each node in its own set


	    for (i = 0; i < n; i++) {
	      w[ancestor + i] = i;
	    }

	    for (k = 0; k < n; k++) {
	      // j is the kth node in postordered etree
	      j = post[k]; // check j is not a root

	      if (parent[j] !== -1) {
	        colcount[parent[j]]--;
	      } // J=j for LL'=A case


	      for (J = ata ? w[head + k] : j; J !== -1; J = ata ? w[next + J] : -1) {
	        for (p = tptr[J]; p < tptr[J + 1]; p++) {
	          i = tindex[p];
	          var r = csLeaf$1(i, j, w, first, maxfirst, prevleaf, ancestor); // check A(i,j) is in skeleton

	          if (r.jleaf >= 1) {
	            colcount[j]++;
	          } // check account for overlap in q


	          if (r.jleaf === 2) {
	            colcount[r.q]--;
	          }
	        }
	      }

	      if (parent[j] !== -1) {
	        w[ancestor + j] = parent[j];
	      }
	    } // sum up colcount's of each child


	    for (j = 0; j < n; j++) {
	      if (parent[j] !== -1) {
	        colcount[parent[j]] += colcount[j];
	      }
	    }

	    return colcount;
	  };

	  return csCounts;
	}

	var name$1z = 'csCounts';
	var path$G = 'algebra.sparse';
	var factory_1$1J = factory$1J;

	var csCounts = {
		name: name$1z,
		path: path$G,
		factory: factory_1$1J
	};

	function factory$1K(type, config, load) {
	  var csAmd$1 = load(csAmd);
	  var csPermute$1 = load(csPermute);
	  var csEtree$1 = load(csEtree);
	  var csPost$1 = load(csPost);
	  var csCounts$1 = load(csCounts);
	  /**
	   * Symbolic ordering and analysis for QR and LU decompositions.
	   *
	   * @param {Number}  order           The ordering strategy (see csAmd for more details)
	   * @param {Matrix}  a               The A matrix
	   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
	   *                                  symbolic ordering and analysis for LU decomposition (false)
	   *
	   * @return {Object}                 The Symbolic ordering and analysis for matrix A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csSqr = function csSqr(order, a, qr) {
	    // a arrays
	    var aptr = a._ptr;
	    var asize = a._size; // columns

	    var n = asize[1]; // vars

	    var k; // symbolic analysis result

	    var s = {}; // fill-reducing ordering

	    s.q = csAmd$1(order, a); // validate results

	    if (order && !s.q) {
	      return null;
	    } // QR symbolic analysis


	    if (qr) {
	      // apply permutations if needed
	      var c = order ? csPermute$1(a, null, s.q, 0) : a; // etree of C'*C, where C=A(:,q)

	      s.parent = csEtree$1(c, 1); // post order elimination tree

	      var post = csPost$1(s.parent, n); // col counts chol(C'*C)

	      s.cp = csCounts$1(c, s.parent, post, 1); // check we have everything needed to calculate number of nonzero elements

	      if (c && s.parent && s.cp && _vcount(c, s)) {
	        // calculate number of nonzero elements
	        for (s.unz = 0, k = 0; k < n; k++) {
	          s.unz += s.cp[k];
	        }
	      }
	    } else {
	      // for LU factorization only, guess nnz(L) and nnz(U)
	      s.unz = 4 * aptr[n] + n;
	      s.lnz = s.unz;
	    } // return result S


	    return s;
	  };
	  /**
	   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
	   */


	  function _vcount(a, s) {
	    // a arrays
	    var aptr = a._ptr;
	    var aindex = a._index;
	    var asize = a._size; // rows & columns

	    var m = asize[0];
	    var n = asize[1]; // initialize s arrays

	    s.pinv = []; // (m + n)

	    s.leftmost = []; // (m)
	    // vars

	    var parent = s.parent;
	    var pinv = s.pinv;
	    var leftmost = s.leftmost; // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries

	    var w = []; // (m + 3 * n)

	    var next = 0;
	    var head = m;
	    var tail = m + n;
	    var nque = m + 2 * n; // vars

	    var i, k, p, p0, p1; // initialize w

	    for (k = 0; k < n; k++) {
	      // queue k is empty
	      w[head + k] = -1;
	      w[tail + k] = -1;
	      w[nque + k] = 0;
	    } // initialize row arrays


	    for (i = 0; i < m; i++) {
	      leftmost[i] = -1;
	    } // loop columns backwards


	    for (k = n - 1; k >= 0; k--) {
	      // values & index for column k
	      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // leftmost[i] = min(find(A(i,:)))
	        leftmost[aindex[p]] = k;
	      }
	    } // scan rows in reverse order


	    for (i = m - 1; i >= 0; i--) {
	      // row i is not yet ordered
	      pinv[i] = -1;
	      k = leftmost[i]; // check row i is empty

	      if (k === -1) {
	        continue;
	      } // first row in queue k


	      if (w[nque + k]++ === 0) {
	        w[tail + k] = i;
	      } // put i at head of queue k


	      w[next + i] = w[head + k];
	      w[head + k] = i;
	    }

	    s.lnz = 0;
	    s.m2 = m; // find row permutation and nnz(V)

	    for (k = 0; k < n; k++) {
	      // remove row i from queue k
	      i = w[head + k]; // count V(k,k) as nonzero

	      s.lnz++; // add a fictitious row

	      if (i < 0) {
	        i = s.m2++;
	      } // associate row i with V(:,k)


	      pinv[i] = k; // skip if V(k+1:m,k) is empty

	      if (--nque[k] <= 0) {
	        continue;
	      } // nque[k] is nnz (V(k+1:m,k))


	      s.lnz += w[nque + k]; // move all rows to parent of k

	      var pa = parent[k];

	      if (pa !== -1) {
	        if (w[nque + pa] === 0) {
	          w[tail + pa] = w[tail + k];
	        }

	        w[next + w[tail + k]] = w[head + pa];
	        w[head + pa] = w[next + i];
	        w[nque + pa] += w[nque + k];
	      }
	    }

	    for (i = 0; i < m; i++) {
	      if (pinv[i] < 0) {
	        pinv[i] = k++;
	      }
	    }

	    return true;
	  }

	  return csSqr;
	}

	var name$1A = 'csSqr';
	var path$H = 'algebra.sparse';
	var factory_1$1K = factory$1K;

	var csSqr = {
		name: name$1A,
		path: path$H,
		factory: factory_1$1K
	};

	var nearlyEqual$5 = number.nearlyEqual;



	function factory$1L(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);

	  var latex$1 = latex;
	  /**
	   * Test whether value x is larger or equal to y.
	   *
	   * The function returns true when x is larger than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.largerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 1 + 1)         // returns false
	   *    math.largerEq(2, 1 + 1)       // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
	   */


	  var largerEq = typed('largerEq', {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x >= y;
	    },
	    'number, number': function numberNumber(x, y) {
	      return x >= y || nearlyEqual$5(x, y, config.epsilon);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.gte(y) || nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) !== -1;
	    },
	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }

	      return largerEq(x.value, y.value);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, largerEq);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, largerEq, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, largerEq, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, largerEq);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return largerEq(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return largerEq(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return largerEq(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, largerEq, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, largerEq, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, largerEq, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, largerEq, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, largerEq, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, largerEq, true).valueOf();
	    }
	  });
	  largerEq.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['largerEq'], "${args[1]}\\right)")
	  };
	  return largerEq;
	}

	var name$1B = 'largerEq';
	var factory_1$1L = factory$1L;

	var largerEq = {
		name: name$1B,
		factory: factory_1$1L
	};

	function factory$1M() {
	  /**
	   * Checks if the node at w[j] is marked
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var csMarked = function csMarked(w, j) {
	    // check node is marked
	    return w[j] < 0;
	  };

	  return csMarked;
	}

	var name$1C = 'csMarked';
	var path$I = 'algebra.sparse';
	var factory_1$1M = factory$1M;

	var csMarked = {
		name: name$1C,
		path: path$I,
		factory: factory_1$1M
	};

	function factory$1N(type, config, load) {
	  var csFlip$1 = load(csFlip);
	  /**
	   * Marks the node at w[j]
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csMark = function csMark(w, j) {
	    // mark w[j]
	    w[j] = csFlip$1(w[j]);
	  };

	  return csMark;
	}

	var name$1D = 'csMark';
	var path$J = 'algebra.sparse';
	var factory_1$1N = factory$1N;

	var csMark = {
		name: name$1D,
		path: path$J,
		factory: factory_1$1N
	};

	function factory$1O(type, config, load) {
	  var csFlip$1 = load(csFlip);
	  /**
	   * Flips the value if it is negative of returns the same value otherwise.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csUnflip = function csUnflip(i) {
	    // flip the value if it is negative
	    return i < 0 ? csFlip$1(i) : i;
	  };

	  return csUnflip;
	}

	var name$1E = 'csUnflip';
	var path$K = 'algebra.sparse';
	var factory_1$1O = factory$1O;

	var csUnflip = {
		name: name$1E,
		path: path$K,
		factory: factory_1$1O
	};

	function factory$1P(type, config, load) {
	  var csMarked$1 = load(csMarked);
	  var csMark$1 = load(csMark);
	  var csUnflip$1 = load(csUnflip);
	  /**
	   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
	   * at nodes in B (see csReach()).
	   *
	   * @param {Number}  j               The starting node for the DFS algorithm
	   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
	   * @param {Number}  top             Start index in stack xi[top..n-1]
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   *
	   * @return {Number}                 New value of top
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csDfs = function csDfs(j, g, top, xi, pinv) {
	    // g arrays
	    var index = g._index;
	    var ptr = g._ptr;
	    var size = g._size; // columns

	    var n = size[1]; // vars

	    var i, p, p2; // initialize head

	    var head = 0; // initialize the recursion stack

	    xi[0] = j; // loop

	    while (head >= 0) {
	      // get j from the top of the recursion stack
	      j = xi[head]; // apply permutation vector

	      var jnew = pinv ? pinv[j] : j; // check node j is marked

	      if (!csMarked$1(ptr, j)) {
	        // mark node j as visited
	        csMark$1(ptr, j); // update stack (last n entries in xi)

	        xi[n + head] = jnew < 0 ? 0 : csUnflip$1(ptr[jnew]);
	      } // node j done if no unvisited neighbors


	      var done = 1; // examine all neighbors of j, stack (last n entries in xi)

	      for (p = xi[n + head], p2 = jnew < 0 ? 0 : csUnflip$1(ptr[jnew + 1]); p < p2; p++) {
	        // consider neighbor node i
	        i = index[p]; // check we have visited node i, skip it

	        if (csMarked$1(ptr, i)) {
	          continue;
	        } // pause depth-first search of node j, update stack (last n entries in xi)


	        xi[n + head] = p; // start dfs at node i

	        xi[++head] = i; // node j is not done

	        done = 0; // break, to start dfs(i)

	        break;
	      } // check depth-first search at node j is done


	      if (done) {
	        // remove j from the recursion stack
	        head--; // and place in the output stack

	        xi[--top] = j;
	      }
	    }

	    return top;
	  };

	  return csDfs;
	}

	var name$1F = 'csDfs';
	var path$L = 'algebra.sparse';
	var factory_1$1P = factory$1P;

	var csDfs = {
		name: name$1F,
		path: path$L,
		factory: factory_1$1P
	};

	function factory$1Q(type, config, load) {
	  var csDfs$1 = load(csDfs);
	  var csMarked$1 = load(csMarked);
	  var csMark$1 = load(csMark);
	  /**
	   * The csReach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1
	   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
	   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csReach = function csReach(g, b, k, xi, pinv) {
	    // g arrays
	    var gptr = g._ptr;
	    var gsize = g._size; // b arrays

	    var bindex = b._index;
	    var bptr = b._ptr; // columns

	    var n = gsize[1]; // vars

	    var p, p0, p1; // initialize top

	    var top = n; // loop column indeces in B

	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
	      // node i
	      var i = bindex[p]; // check node i is marked

	      if (!csMarked$1(gptr, i)) {
	        // start a dfs at unmarked node i
	        top = csDfs$1(i, g, top, xi, pinv);
	      }
	    } // loop columns from top -> n - 1


	    for (p = top; p < n; p++) {
	      // restore G
	      csMark$1(gptr, xi[p]);
	    }

	    return top;
	  };

	  return csReach;
	}

	var name$1G = 'csReach';
	var path$M = 'algebra.sparse';
	var factory_1$1Q = factory$1Q;

	var csReach = {
		name: name$1G,
		path: path$M,
		factory: factory_1$1Q
	};

	function factory$1R(type, config, load) {
	  var divideScalar$1 = load(divideScalar);
	  var multiply$1 = load(multiply);
	  var subtract$1 = load(subtract);
	  var csReach$1 = load(csReach);
	  /**
	   * The function csSpsolve() computes the solution to G * x = bk, where bk is the
	   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
	   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U
	   * is upper triangular with the diagonal entry as the last entry in each column.
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   x               The soluton to the linear system G * x = b
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   * @param {boolean} lo              The lower (true) upper triangular (false) flag
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csSpsolve = function csSpsolve(g, b, k, xi, x, pinv, lo) {
	    // g arrays
	    var gvalues = g._values;
	    var gindex = g._index;
	    var gptr = g._ptr;
	    var gsize = g._size; // columns

	    var n = gsize[1]; // b arrays

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr; // vars

	    var p, p0, p1, q; // xi[top..n-1] = csReach(B(:,k))

	    var top = csReach$1(g, b, k, xi, pinv); // clear x

	    for (p = top; p < n; p++) {
	      x[xi[p]] = 0;
	    } // scatter b


	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
	      x[bindex[p]] = bvalues[p];
	    } // loop columns


	    for (var px = top; px < n; px++) {
	      // x array index for px
	      var j = xi[px]; // apply permutation vector (U x = b), j maps to column J of G

	      var J = pinv ? pinv[j] : j; // check column J is empty

	      if (J < 0) {
	        continue;
	      } // column value indeces in G, p0 <= p < p1


	      p0 = gptr[J];
	      p1 = gptr[J + 1]; // x(j) /= G(j,j)

	      x[j] = divideScalar$1(x[j], gvalues[lo ? p0 : p1 - 1]); // first entry L(j,j)

	      p = lo ? p0 + 1 : p0;
	      q = lo ? p1 : p1 - 1; // loop

	      for (; p < q; p++) {
	        // row
	        var i = gindex[p]; // x(i) -= G(i,j) * x(j)

	        x[i] = subtract$1(x[i], multiply$1(gvalues[p], x[j]));
	      }
	    } // return top of stack


	    return top;
	  };

	  return csSpsolve;
	}

	var name$1H = 'csSpsolve';
	var path$N = 'algebra.sparse';
	var factory_1$1R = factory$1R;

	var csSpsolve = {
		name: name$1H,
		path: path$N,
		factory: factory_1$1R
	};

	function factory$1S(type, config, load) {
	  var abs = load(abs$1);
	  var divideScalar$1 = load(divideScalar);
	  var multiply$1 = load(multiply);
	  var larger$1 = load(larger);
	  var largerEq$1 = load(largerEq);
	  var csSpsolve$1 = load(csSpsolve);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
	   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L
	   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
	   * L * U = A(p, q), where p is the inverse of pinv.
	   *
	   * @param {Matrix}  m               The A Matrix to factorize
	   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing
	   *                                  column ordering q
	   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Number}                 The numeric LU factorization of A or null
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */

	  var csLu = function csLu(m, s, tol) {
	    // validate input
	    if (!m) {
	      return null;
	    } // m arrays


	    var size = m._size; // columns

	    var n = size[1]; // symbolic analysis result

	    var q;
	    var lnz = 100;
	    var unz = 100; // update symbolic analysis parameters

	    if (s) {
	      q = s.q;
	      lnz = s.lnz || lnz;
	      unz = s.unz || unz;
	    } // L arrays


	    var lvalues = []; // (lnz)

	    var lindex = []; // (lnz)

	    var lptr = []; // (n + 1)
	    // L

	    var L = new SparseMatrix({
	      values: lvalues,
	      index: lindex,
	      ptr: lptr,
	      size: [n, n]
	    }); // U arrays

	    var uvalues = []; // (unz)

	    var uindex = []; // (unz)

	    var uptr = []; // (n + 1)
	    // U

	    var U = new SparseMatrix({
	      values: uvalues,
	      index: uindex,
	      ptr: uptr,
	      size: [n, n]
	    }); // inverse of permutation vector

	    var pinv = []; // (n)
	    // vars

	    var i, p; // allocate arrays

	    var x = []; // (n)

	    var xi = []; // (2 * n)
	    // initialize variables

	    for (i = 0; i < n; i++) {
	      // clear workspace
	      x[i] = 0; // no rows pivotal yet

	      pinv[i] = -1; // no cols of L yet

	      lptr[i + 1] = 0;
	    } // reset number of nonzero elements in L and U


	    lnz = 0;
	    unz = 0; // compute L(:,k) and U(:,k)

	    for (var k = 0; k < n; k++) {
	      // update ptr
	      lptr[k] = lnz;
	      uptr[k] = unz; // apply column permutations if needed

	      var col = q ? q[k] : k; // solve triangular system, x = L\A(:,col)

	      var top = csSpsolve$1(L, m, col, xi, x, pinv, 1); // find pivot

	      var ipiv = -1;
	      var a = -1; // loop xi[] from top -> n

	      for (p = top; p < n; p++) {
	        // x[i] is nonzero
	        i = xi[p]; // check row i is not yet pivotal

	        if (pinv[i] < 0) {
	          // absolute value of x[i]
	          var xabs = abs(x[i]); // check absoulte value is greater than pivot value

	          if (larger$1(xabs, a)) {
	            // largest pivot candidate so far
	            a = xabs;
	            ipiv = i;
	          }
	        } else {
	          // x(i) is the entry U(pinv[i],k)
	          uindex[unz] = pinv[i];
	          uvalues[unz++] = x[i];
	        }
	      } // validate we found a valid pivot


	      if (ipiv === -1 || a <= 0) {
	        return null;
	      } // update actual pivot column, give preference to diagonal value


	      if (pinv[col] < 0 && largerEq$1(abs(x[col]), multiply$1(a, tol))) {
	        ipiv = col;
	      } // the chosen pivot


	      var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)

	      uindex[unz] = k;
	      uvalues[unz++] = pivot; // ipiv is the kth pivot row

	      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1

	      lindex[lnz] = ipiv;
	      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot

	      for (p = top; p < n; p++) {
	        // row
	        i = xi[p]; // check x(i) is an entry in L(:,k)

	        if (pinv[i] < 0) {
	          // save unpermuted row in L
	          lindex[lnz] = i; // scale pivot column

	          lvalues[lnz++] = divideScalar$1(x[i], pivot);
	        } // x[0..n-1] = 0 for next k


	        x[i] = 0;
	      }
	    } // update ptr


	    lptr[n] = lnz;
	    uptr[n] = unz; // fix row indices of L for final pinv

	    for (p = 0; p < lnz; p++) {
	      lindex[p] = pinv[lindex[p]];
	    } // trim arrays


	    lvalues.splice(lnz, lvalues.length - lnz);
	    lindex.splice(lnz, lindex.length - lnz);
	    uvalues.splice(unz, uvalues.length - unz);
	    uindex.splice(unz, uindex.length - unz); // return LU factor

	    return {
	      L: L,
	      U: U,
	      pinv: pinv
	    };
	  };

	  return csLu;
	}

	var name$1I = 'csLu';
	var path$O = 'algebra.sparse';
	var factory_1$1S = factory$1S;

	var csLu = {
		name: name$1I,
		path: path$O,
		factory: factory_1$1S
	};

	var number$4 = utils.number;
	var isInteger$7 = number$4.isInteger;

	function factory$1T(type, config, load, typed) {
	  var csSqr$1 = load(csSqr);
	  var csLu$1 = load(csLu);
	  /**
	   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
	   *
	   * `P * A * Q = L * U`
	   *
	   * Syntax:
	   *
	   *    math.slu(A, order, threshold)
	   *
	   * Examples:
	   *
	   *    const A = math.sparse([[4,3], [6, 3]])
	   *    math.slu(A, 1, 0.001)
	   *    // returns:
	   *    // {
	   *    //   L: [[1, 0], [1.5, 1]]
	   *    //   U: [[4, 3], [0, -1.5]]
	   *    //   p: [0, 1]
	   *    //   q: [0, 1]
	   *    // }
	   *
	   * See also:
	   *
	   *    lup, lsolve, usolve, lusolve
	   *
	   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
	   * @param {Number}       order          The Symbolic Ordering and Analysis order:
	   *                                       0 - Natural ordering, no permutation vector q is returned
	   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
	   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'.
	   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
	   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
	   *                                           A dense row is a row with more than 10*sqr(columns) entries.
	   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
	   */

	  var slu = typed('slu', {
	    'SparseMatrix, number, number': function SparseMatrixNumberNumber(a, order, threshold) {
	      // verify order
	      if (!isInteger$7(order) || order < 0 || order > 3) {
	        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
	      } // verify threshold


	      if (threshold < 0 || threshold > 1) {
	        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
	      } // perform symbolic ordering and analysis


	      var s = csSqr$1(order, a, false); // perform lu decomposition

	      var f = csLu$1(a, s, threshold); // return decomposition

	      return {
	        L: f.L,
	        U: f.U,
	        p: f.pinv,
	        q: s.q,
	        toString: function toString() {
	          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
	        }
	      };
	    }
	  });
	  return slu;
	}

	var name$1J = 'slu';
	var factory_1$1T = factory$1T;

	var slu = {
		name: name$1J,
		factory: factory_1$1T
	};

	var string$7 = utils.string;
	var array$3 = utils.array;
	var isArray$3 = Array.isArray;

	function factory$1U(type) {
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Validates matrix and column vector b for backward/forward substitution algorithms.
	   *
	   * @param {Matrix} m            An N x N matrix
	   * @param {Array | Matrix} b    A column vector
	   * @param {Boolean} copy        Return a copy of vector b
	   *
	   * @return {DenseMatrix}        Dense column vector b
	   */

	  var solveValidation = function solveValidation(m, b, copy) {
	    // matrix size
	    var size = m.size(); // validate matrix dimensions

	    if (size.length !== 2) {
	      throw new RangeError('Matrix must be two dimensional (size: ' + string$7.format(size) + ')');
	    } // rows & columns


	    var rows = size[0];
	    var columns = size[1]; // validate rows & columns

	    if (rows !== columns) {
	      throw new RangeError('Matrix must be square (size: ' + string$7.format(size) + ')');
	    } // vars


	    var data, i, bdata; // check b is matrix

	    if (type.isMatrix(b)) {
	      // matrix size
	      var msize = b.size(); // vector

	      if (msize.length === 1) {
	        // check vector length
	        if (msize[0] !== rows) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        } // create data array


	        data = []; // matrix data (DenseMatrix)

	        bdata = b._data; // loop b data

	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [bdata[i]];
	        } // return Dense Matrix


	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      } // two dimensions


	      if (msize.length === 2) {
	        // array must be a column vector
	        if (msize[0] !== rows || msize[1] !== 1) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        } // check matrix type


	        if (type.isDenseMatrix(b)) {
	          // check a copy is needed
	          if (copy) {
	            // create data array
	            data = []; // matrix data (DenseMatrix)

	            bdata = b._data; // loop b data

	            for (i = 0; i < rows; i++) {
	              // row array
	              data[i] = [bdata[i][0]];
	            } // return Dense Matrix


	            return new DenseMatrix({
	              data: data,
	              size: [rows, 1],
	              datatype: b._datatype
	            });
	          } // b is already a column vector


	          return b;
	        } // create data array


	        data = [];

	        for (i = 0; i < rows; i++) {
	          data[i] = [0];
	        } // sparse matrix arrays


	        var values = b._values;
	        var index = b._index;
	        var ptr = b._ptr; // loop values in column 0

	        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
	          // row
	          i = index[k]; // add to data

	          data[i][0] = values[k];
	        } // return Dense Matrix


	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      } // throw error


	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	    } // check b is array


	    if (isArray$3(b)) {
	      // size
	      var asize = array$3.size(b); // check matrix dimensions, vector

	      if (asize.length === 1) {
	        // check vector length
	        if (asize[0] !== rows) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        } // create data array


	        data = []; // loop b

	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i]];
	        } // return Dense Matrix


	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }

	      if (asize.length === 2) {
	        // array must be a column vector
	        if (asize[0] !== rows || asize[1] !== 1) {
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        } // create data array


	        data = []; // loop b data

	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i][0]];
	        } // return Dense Matrix


	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      } // throw error


	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	    }
	  };

	  return solveValidation;
	}

	var factory_1$1U = factory$1U;

	var solveValidation = {
		factory: factory_1$1U
	};

	function factory$1V(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var divideScalar$1 = load(divideScalar);
	  var multiplyScalar$1 = load(multiplyScalar);
	  var subtract$1 = load(subtract);
	  var equalScalar$1 = load(equalScalar);
	  var solveValidation$1 = load(solveValidation);
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
	   *
	   * `L * x = b`
	   *
	   * Syntax:
	   *
	   *    math.lsolve(L, b)
	   *
	   * Examples:
	   *
	   *    const a = [[-2, 3], [2, 1]]
	   *    const b = [11, 9]
	   *    const x = lsolve(a, b)  // [[-5.5], [20]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} L       A N x N matrix or array (L)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */

	  var lsolve = typed('lsolve', {
	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _sparseForwardSubstitution(m, b);
	    },
	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _denseForwardSubstitution(m, b);
	    },
	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // create dense matrix from array
	      var m = matrix$1(a); // use matrix implementation

	      var r = _denseForwardSubstitution(m, b); // result


	      return r.valueOf();
	    }
	  });

	  function _denseForwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation$1(m, b, true); // column vector data

	    var bdata = b._data; // rows & columns

	    var rows = m._size[0];
	    var columns = m._size[1]; // result

	    var x = []; // data

	    var data = m._data; // forward solve m * x = b, loop columns

	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0; // x[j]

	      var xj = void 0; // forward substitution (outer product) avoids inner looping when bj === 0

	      if (!equalScalar$1(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j]; // check vjj

	        if (equalScalar$1(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        } // calculate xj


	        xj = divideScalar$1(bj, vjj); // loop rows

	        for (var i = j + 1; i < rows; i++) {
	          // update copy of b
	          bdata[i] = [subtract$1(bdata[i][0] || 0, multiplyScalar$1(xj, data[i][j]))];
	        }
	      } else {
	        // zero @ j
	        xj = 0;
	      } // update x


	      x[j] = [xj];
	    } // return vector


	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }

	  function _sparseForwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation$1(m, b, true); // column vector data

	    var bdata = b._data; // rows & columns

	    var rows = m._size[0];
	    var columns = m._size[1]; // matrix arrays

	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr; // vars

	    var i, k; // result

	    var x = []; // forward solve m * x = b, loop columns

	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0; // forward substitution (outer product) avoids inner looping when bj === 0

	      if (!equalScalar$1(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0; // lower triangular matrix values & index (column j)

	        var jvalues = [];
	        var jindex = []; // last index in column

	        var l = ptr[j + 1]; // values in column, find value @ [j, j]

	        for (k = ptr[j]; k < l; k++) {
	          // row
	          i = index[k]; // check row (rows are not sorted!)

	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          } else if (i > j) {
	            // store lower triangular
	            jvalues.push(values[k]);
	            jindex.push(i);
	          }
	        } // at this point we must have a value @ [j, j]


	        if (equalScalar$1(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        } // calculate xj


	        var xj = divideScalar$1(bj, vjj); // loop lower triangular

	        for (k = 0, l = jindex.length; k < l; k++) {
	          // row
	          i = jindex[k]; // update copy of b

	          bdata[i] = [subtract$1(bdata[i][0] || 0, multiplyScalar$1(xj, jvalues[k]))];
	        } // update x


	        x[j] = [xj];
	      } else {
	        // update x
	        x[j] = [0];
	      }
	    } // return vector


	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }

	  return lsolve;
	}

	var name$1K = 'lsolve';
	var factory_1$1V = factory$1V;

	var lsolve = {
		name: name$1K,
		factory: factory_1$1V
	};

	function factory$1W() {
	  /**
	   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
	   *
	   * @param {Array} p           The permutation vector of length n. null value denotes identity
	   * @param {Array} b           The input vector
	   *
	   * @return {Array}            The output vector x = P'b
	   */
	  function csIpvec(p, b) {
	    // vars
	    var k;
	    var n = b.length;
	    var x = []; // check permutation vector was provided, p = null denotes identity

	    if (p) {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // apply permutation
	        x[p[k]] = b[k];
	      }
	    } else {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // x[i] = b[i]
	        x[k] = b[k];
	      }
	    }

	    return x;
	  }

	  return csIpvec;
	}

	var name$1L = 'csIpvec';
	var path$P = 'algebra.sparse';
	var factory_1$1W = factory$1W;

	var csIpvec = {
		name: name$1L,
		path: path$P,
		factory: factory_1$1W
	};

	function factory$1X(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var divideScalar$1 = load(divideScalar);
	  var multiplyScalar$1 = load(multiplyScalar);
	  var subtract$1 = load(subtract);
	  var equalScalar$1 = load(equalScalar);
	  var solveValidation$1 = load(solveValidation);
	  var DenseMatrix = type.DenseMatrix;
	  /**
	   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
	   *
	   * `U * x = b`
	   *
	   * Syntax:
	   *
	   *    math.usolve(U, b)
	   *
	   * Examples:
	   *
	   *    const a = [[-2, 3], [2, 1]]
	   *    const b = [11, 9]
	   *    const x = usolve(a, b)  // [[8], [9]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} U       A N x N matrix or array (U)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */

	  var usolve = typed('usolve', {
	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _sparseBackwardSubstitution(m, b);
	    },
	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(m, b) {
	      // process matrix
	      return _denseBackwardSubstitution(m, b);
	    },
	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // create dense matrix from array
	      var m = matrix$1(a); // use matrix implementation

	      var r = _denseBackwardSubstitution(m, b); // result


	      return r.valueOf();
	    }
	  });

	  function _denseBackwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation$1(m, b, true); // column vector data

	    var bdata = b._data; // rows & columns

	    var rows = m._size[0];
	    var columns = m._size[1]; // result

	    var x = []; // arrays

	    var data = m._data; // backward solve m * x = b, loop columns (backwards)

	    for (var j = columns - 1; j >= 0; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0; // x[j]

	      var xj = void 0; // backward substitution (outer product) avoids inner looping when bj === 0

	      if (!equalScalar$1(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j]; // check vjj

	        if (equalScalar$1(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        } // calculate xj


	        xj = divideScalar$1(bj, vjj); // loop rows

	        for (var i = j - 1; i >= 0; i--) {
	          // update copy of b
	          bdata[i] = [subtract$1(bdata[i][0] || 0, multiplyScalar$1(xj, data[i][j]))];
	        }
	      } else {
	        // zero value @ j
	        xj = 0;
	      } // update x


	      x[j] = [xj];
	    } // return column vector


	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }

	  function _sparseBackwardSubstitution(m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation$1(m, b, true); // column vector data

	    var bdata = b._data; // rows & columns

	    var rows = m._size[0];
	    var columns = m._size[1]; // matrix arrays

	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr; // vars

	    var i, k; // result

	    var x = []; // backward solve m * x = b, loop columns (backwards)

	    for (var j = columns - 1; j >= 0; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0; // backward substitution (outer product) avoids inner looping when bj === 0

	      if (!equalScalar$1(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0; // upper triangular matrix values & index (column j)

	        var jvalues = [];
	        var jindex = []; // first & last indeces in column

	        var f = ptr[j];
	        var l = ptr[j + 1]; // values in column, find value @ [j, j], loop backwards

	        for (k = l - 1; k >= f; k--) {
	          // row
	          i = index[k]; // check row

	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          } else if (i < j) {
	            // store upper triangular
	            jvalues.push(values[k]);
	            jindex.push(i);
	          }
	        } // at this point we must have a value @ [j, j]


	        if (equalScalar$1(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        } // calculate xj


	        var xj = divideScalar$1(bj, vjj); // loop upper triangular

	        for (k = 0, l = jindex.length; k < l; k++) {
	          // row
	          i = jindex[k]; // update copy of b

	          bdata[i] = [subtract$1(bdata[i][0], multiplyScalar$1(xj, jvalues[k]))];
	        } // update x


	        x[j] = [xj];
	      } else {
	        // update x
	        x[j] = [0];
	      }
	    } // return vector


	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  }

	  return usolve;
	}

	var name$1M = 'usolve';
	var factory_1$1X = factory$1X;

	var usolve = {
		name: name$1M,
		factory: factory_1$1X
	};

	var isArray$4 = Array.isArray;

	function factory$1Y(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var lup$1 = load(lup);
	  var slu$1 = load(slu);
	  var csIpvec$1 = load(csIpvec);
	  var solveValidation$1 = load(solveValidation);
	  var usolve$1 = load(usolve);
	  var lsolve$1 = load(lsolve);
	  /**
	   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
	   *
	   * Syntax:
	   *
	   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
	   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
	   *
	   * Examples:
	   *
	   *    const m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]
	   *
	   *    const x = math.lusolve(m, [-1, -1, -1, -1])        // x = [[-1], [-0.5], [-1/3], [-0.25]]
	   *
	   *    const f = math.lup(m)
	   *    const x1 = math.lusolve(f, [-1, -1, -1, -1])       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
	   *    const x2 = math.lusolve(f, [1, 2, 1, -1])          // x2 = [[1], [1], [1/3], [-0.25]]
	   *
	   *    const a = [[-2, 3], [2, 1]]
	   *    const b = [11, 9]
	   *    const x = math.lusolve(a, b)  // [[2], [5]]
	   *
	   * See also:
	   *
	   *    lup, slu, lsolve, usolve
	   *
	   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
	   * @param {Matrix | Array} b               Column Vector
	   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
	   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
	   *
	   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
	   */

	  var lusolve = typed('lusolve', {
	    'Array, Array | Matrix': function ArrayArrayMatrix(a, b) {
	      // convert a to matrix
	      a = matrix$1(a); // matrix lup decomposition

	      var d = lup$1(a); // solve

	      var x = _lusolve(d.L, d.U, d.p, null, b); // convert result to array


	      return x.valueOf();
	    },
	    'DenseMatrix, Array | Matrix': function DenseMatrixArrayMatrix(a, b) {
	      // matrix lup decomposition
	      var d = lup$1(a); // solve

	      return _lusolve(d.L, d.U, d.p, null, b);
	    },
	    'SparseMatrix, Array | Matrix': function SparseMatrixArrayMatrix(a, b) {
	      // matrix lup decomposition
	      var d = lup$1(a); // solve

	      return _lusolve(d.L, d.U, d.p, null, b);
	    },
	    'SparseMatrix, Array | Matrix, number, number': function SparseMatrixArrayMatrixNumberNumber(a, b, order, threshold) {
	      // matrix lu decomposition
	      var d = slu$1(a, order, threshold); // solve

	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    },
	    'Object, Array | Matrix': function ObjectArrayMatrix(d, b) {
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    }
	  });

	  var _toMatrix = function _toMatrix(a) {
	    // check it is a matrix
	    if (type.isMatrix(a)) {
	      return a;
	    } // check array


	    if (isArray$4(a)) {
	      return matrix$1(a);
	    } // throw


	    throw new TypeError('Invalid Matrix LU decomposition');
	  };

	  function _lusolve(l, u, p, q, b) {
	    // verify L, U, P
	    l = _toMatrix(l);
	    u = _toMatrix(u); // validate matrix and vector

	    b = solveValidation$1(l, b, false); // apply row permutations if needed (b is a DenseMatrix)

	    if (p) {
	      b._data = csIpvec$1(p, b._data);
	    } // use forward substitution to resolve L * y = b


	    var y = lsolve$1(l, b); // use backward substitution to resolve U * x = y

	    var x = usolve$1(u, y); // apply column permutations if needed (x is a DenseMatrix)

	    if (q) {
	      x._data = csIpvec$1(q, x._data);
	    } // return solution


	    return x;
	  }

	  return lusolve;
	}

	var name$1N = 'lusolve';
	var factory_1$1Y = factory$1Y;

	var lusolve = {
		name: name$1N,
		factory: factory_1$1Y
	};

	var algebra = [derivative, // simplify
	simplify, // polynomial
	rationalize, // decomposition
	qr, lup, slu, // solver
	lsolve, lusolve, usolve];

	function factory$1Z(type, config, load, typed) {
	  /**
	   * Test whether a value is negative: smaller than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNegative(x)
	   *
	   * Examples:
	   *
	   *    math.isNegative(3)                     // returns false
	   *    math.isNegative(-2)                    // returns true
	   *    math.isNegative(0)                     // returns false
	   *    math.isNegative(-0)                    // returns false
	   *    math.isNegative(math.bignumber(2))     // returns false
	   *    math.isNegative(math.fraction(-2, 5))  // returns true
	   *    math.isNegative('-2')                  // returns true
	   *    math.isNegative([2, 0, -3]')           // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNegative = typed('isNegative', {
	    'number': function number(x) {
	      return x < 0;
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.isNeg() && !x.isZero() && !x.isNaN();
	    },
	    'Fraction': function Fraction(x) {
	      return x.s < 0; // It's enough to decide on the sign
	    },
	    'Unit': function Unit(x) {
	      return isNegative(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isNegative);
	    }
	  });
	  return isNegative;
	}

	var name$1O = 'isNegative';
	var factory_1$1Z = factory$1Z;

	var isNegative = {
		name: name$1O,
		factory: factory_1$1Z
	};

	function factory$1_(type, config, load, typed) {
	  var unaryMinus$1 = load(unaryMinus);
	  var isNegative$1 = load(isNegative);
	  var matrix$1 = load(matrix);
	  /**
	   * Calculate the cubic root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cbrt(x)
	   *    math.cbrt(x, allRoots)
	   *
	   * Examples:
	   *
	   *    math.cbrt(27)                  // returns 3
	   *    math.cube(3)                   // returns 27
	   *    math.cbrt(-64)                 // returns -4
	   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m
	   *    math.cbrt([27, 64, 125])       // returns [3, 4, 5]
	   *
	   *    const x = math.complex('8i')
	   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i
	   *    math.cbrt(x, true)             // returns Matrix [
	   *                                    //    1.7320508075689 + i
	   *                                    //   -1.7320508075689 + i
	   *                                    //   -2i
	   *                                    // ]
	   *
	   * See also:
	   *
	   *    square, sqrt, cube
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
	   *            Value for which to calculate the cubic root.
	   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
	   *            when `x` is a number or complex number. If true, all complex
	   *            roots are returned, if false (default) the principal root is
	   *            returned.
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
	   *            Returns the cubic root of `x`
	   */

	  var cbrt = typed('cbrt', {
	    'number': _cbrtNumber,
	    // note: signature 'number, boolean' is also supported,
	    //       created by typed as it knows how to convert number to Complex
	    'Complex': _cbrtComplex,
	    'Complex, boolean': _cbrtComplex,
	    'BigNumber': function BigNumber(x) {
	      return x.cbrt();
	    },
	    'Unit': _cbrtUnit,
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since cbrt(0) = 0
	      return deepMap(x, cbrt);
	    }
	  });
	  /**
	   * Calculate the cubic root for a complex number
	   * @param {Complex} x
	   * @param {boolean} [allRoots]   If true, the function will return an array
	   *                               with all three roots. If false or undefined,
	   *                               the principal root is returned.
	   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
	   * @private
	   */

	  function _cbrtComplex(x, allRoots) {
	    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
	    var arg3 = x.arg() / 3;
	    var abs = x.abs(); // principal root:

	    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3).exp());

	    if (allRoots) {
	      var all = [principal, new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3 + Math.PI * 2 / 3).exp()), new type.Complex(_cbrtNumber(abs), 0).mul(new type.Complex(0, arg3 - Math.PI * 2 / 3).exp())];
	      return config.matrix === 'Array' ? all : matrix$1(all);
	    } else {
	      return principal;
	    }
	  }
	  /**
	   * Calculate the cubic root for a Unit
	   * @param {Unit} x
	   * @return {Unit} Returns the cubic root of x
	   * @private
	   */


	  function _cbrtUnit(x) {
	    if (x.value && type.isComplex(x.value)) {
	      var result = x.clone();
	      result.value = 1.0;
	      result = result.pow(1.0 / 3); // Compute the units

	      result.value = _cbrtComplex(x.value); // Compute the value

	      return result;
	    } else {
	      var negate = isNegative$1(x.value);

	      if (negate) {
	        x.value = unaryMinus$1(x.value);
	      } // TODO: create a helper function for this


	      var third;

	      if (type.isBigNumber(x.value)) {
	        third = new type.BigNumber(1).div(3);
	      } else if (type.isFraction(x.value)) {
	        third = new type.Fraction(1, 3);
	      } else {
	        third = 1 / 3;
	      }

	      var _result = x.pow(third);

	      if (negate) {
	        _result.value = unaryMinus$1(_result.value);
	      }

	      return _result;
	    }
	  }

	  cbrt.toTex = {
	    1: "\\sqrt[3]{${args[0]}}"
	  };
	  return cbrt;
	}
	/**
	 * Calculate cbrt for a number
	 *
	 * Code from es6-shim.js:
	 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
	 *
	 * @param {number} x
	 * @returns {number | Complex} Returns the cubic root of x
	 * @private
	 */


	var _cbrtNumber = Math.cbrt || function (x) {
	  if (x === 0) {
	    return x;
	  }

	  var negate = x < 0;
	  var result;

	  if (negate) {
	    x = -x;
	  }

	  if (isFinite(x)) {
	    result = Math.exp(Math.log(x) / 3); // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods

	    result = (x / (result * result) + 2 * result) / 3;
	  } else {
	    result = x;
	  }

	  return negate ? -result : result;
	};

	var name$1P = 'cbrt';
	var factory_1$1_ = factory$1_;

	var cbrt$1 = {
		name: name$1P,
		factory: factory_1$1_
	};

	function factory$1$(type, config, load, typed) {
	  /**
	   * Round a value towards plus infinity
	   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.ceil(x)
	   *
	   * Examples:
	   *
	   *    math.ceil(3.2)               // returns number 4
	   *    math.ceil(3.8)               // returns number 4
	   *    math.ceil(-4.2)              // returns number -4
	   *    math.ceil(-4.7)              // returns number -4
	   *
	   *    const c = math.complex(3.2, -2.7)
	   *    math.ceil(c)                 // returns Complex 4 - 2i
	   *
	   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]
	   *
	   * See also:
	   *
	   *    floor, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var ceil = typed('ceil', {
	    'number': Math.ceil,
	    'Complex': function Complex(x) {
	      return x.ceil();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.ceil();
	    },
	    'Fraction': function Fraction(x) {
	      return x.ceil();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since ceil(0) = 0
	      return deepMap(x, ceil);
	    }
	  });
	  ceil.toTex = {
	    1: "\\left\\lceil${args[0]}\\right\\rceil"
	  };
	  return ceil;
	}

	var name$1Q = 'ceil';
	var factory_1$1$ = factory$1$;

	var ceil$1 = {
		name: name$1Q,
		factory: factory_1$1$
	};

	function factory$20(type, config, load, typed) {
	  /**
	   * Compute the cube of a value, `x * x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cube(x)
	   *
	   * Examples:
	   *
	   *    math.cube(2)            // returns number 8
	   *    math.pow(2, 3)          // returns number 8
	   *    math.cube(4)            // returns number 64
	   *    4 * 4 * 4               // returns number 64
	   *
	   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]
	   *
	   * See also:
	   *
	   *    multiply, square, pow, cbrt
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
	   */
	  var cube = typed('cube', {
	    'number': function number(x) {
	      return x * x * x;
	    },
	    'Complex': function Complex(x) {
	      return x.mul(x).mul(x); // Is faster than pow(x, 3)
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.times(x).times(x);
	    },
	    'Fraction': function Fraction(x) {
	      return x.pow(3); // Is faster than mul()mul()mul()
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since cube(0) = 0
	      return deepMap(x, cube);
	    },
	    'Unit': function Unit(x) {
	      return x.pow(3);
	    }
	  });
	  cube.toTex = {
	    1: "\\left(${args[0]}\\right)^3"
	  };
	  return cube;
	}

	var name$1R = 'cube';
	var factory_1$20 = factory$20;

	var cube = {
		name: name$1R,
		factory: factory_1$20
	};

	function factory$21(type, config, load, typed) {
	  var equalScalar$1 = load(equalScalar);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          â  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */

	  var algorithm02 = function algorithm02(denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype; // sparse matrix arrays

	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // sparse matrix cannot be a Pattern matrix


	    if (!bvalues) {
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result (SparseMatrix)


	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // loop columns in b

	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length; // values in column j

	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k]; // update C(i,j)

	        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero

	        if (!eq(cij, zero)) {
	          // push i & v
	          cindex.push(i);
	          cvalues.push(cij);
	        }
	      }
	    } // update cptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };

	  return algorithm02;
	}

	var name$1S = 'algorithm02';
	var factory_1$21 = factory$21;

	var algorithm02 = {
		name: name$1S,
		factory: factory_1$21
	};

	function factory$22(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var divideScalar$1 = load(divideScalar);

	  var latex$1 = latex;

	  var algorithm02$1 = load(algorithm02);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Divide two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotDivide(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotDivide(2, 4)   // returns 0.5
	   *
	   *    a = [[9, 5], [6, 1]]
	   *    b = [[3, 2], [5, 2]]
	   *
	   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]
	   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]
	   *
	   * See also:
	   *
	   *    divide, multiply, dotMultiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
	   */

	  var dotDivide = typed('dotDivide', {
	    'any, any': divideScalar$1,
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, divideScalar$1, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, divideScalar$1, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, divideScalar$1, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, divideScalar$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotDivide(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotDivide(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotDivide(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$1(x, y, divideScalar$1, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, divideScalar$1, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, divideScalar$1, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, divideScalar$1, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, divideScalar$1, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, divideScalar$1, true).valueOf();
	    }
	  });
	  dotDivide.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['dotDivide'], "${args[1]}\\right)")
	  };
	  return dotDivide;
	}

	var name$1T = 'dotDivide';
	var factory_1$22 = factory$22;

	var dotDivide = {
		name: name$1T,
		factory: factory_1$22
	};

	function factory$23(type, config, load, typed) {
	  var equalScalar$1 = load(equalScalar);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).
	   * Callback function invoked NZA times, number of nonzero elements in A.
	   *
	   *
	   *          â  f(Aij, Bij)  ; A(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */

	  var algorithm09 = function algorithm09(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype; // sparse matrix arrays

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = []; // matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    }); // workspaces

	    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

	    var w = []; // vars

	    var i, j, k, k0, k1; // loop columns

	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length; // column mark

	      var mark = j + 1; // check we need to process values

	      if (x) {
	        // loop B(:,j)
	        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	          // row
	          i = bindex[k]; // update workspace

	          w[i] = mark;
	          x[i] = bvalues[k];
	        }
	      } // loop A(:,j)


	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k]; // check we need to process values

	        if (x) {
	          // b value @ i,j
	          var vb = w[i] === mark ? x[i] : zero; // invoke f

	          var vc = cf(avalues[k], vb); // check zero value

	          if (!eq(vc, zero)) {
	            // push index
	            cindex.push(i); // push value

	            cvalues.push(vc);
	          }
	        } else {
	          // push index
	          cindex.push(i);
	        }
	      }
	    } // update cptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return c;
	  };

	  return algorithm09;
	}

	var name$1U = 'algorithm09';
	var factory_1$23 = factory$23;

	var algorithm09 = {
		name: name$1U,
		factory: factory_1$23
	};

	function factory$24(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var multiplyScalar$1 = load(multiplyScalar);

	  var latex$1 = latex;

	  var algorithm02$1 = load(algorithm02);
	  var algorithm09$1 = load(algorithm09);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Multiply two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotMultiply(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotMultiply(2, 4) // returns 8
	   *
	   *    a = [[9, 5], [6, 1]]
	   *    b = [[3, 2], [5, 2]]
	   *
	   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]
	   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]
	   *
	   * See also:
	   *
	   *    multiply, divide, dotDivide
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
	   */

	  var dotMultiply = typed('dotMultiply', {
	    'any, any': multiplyScalar$1,
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm09$1(x, y, multiplyScalar$1, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, multiplyScalar$1, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm02$1(x, y, multiplyScalar$1, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, multiplyScalar$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotMultiply(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$1(x, y, multiplyScalar$1, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, multiplyScalar$1, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm11$1(y, x, multiplyScalar$1, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, multiplyScalar$1, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, multiplyScalar$1, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, multiplyScalar$1, true).valueOf();
	    }
	  });
	  dotMultiply.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['dotMultiply'], "${args[1]}\\right)")
	  };
	  return dotMultiply;
	}

	var name$1V = 'dotMultiply';
	var factory_1$24 = factory$24;

	var dotMultiply = {
		name: name$1V,
		factory: factory_1$24
	};

	function factory$25(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var pow = load(pow$1);

	  var latex$1 = latex;

	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Calculates the power of x to y element wise.
	   *
	   * Syntax:
	   *
	   *    math.dotPow(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotPow(2, 3)            // returns number 8
	   *
	   *    const a = [[1, 2], [4, 3]]
	   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]
	   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    pow, sqrt, multiply
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
	   */

	  var dotPow = typed('dotPow', {
	    'any, any': pow,
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, pow, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, pow, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, pow, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, pow);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return dotPow(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return dotPow(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return dotPow(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$1(x, y, dotPow, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, dotPow, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, dotPow, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, dotPow, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, dotPow, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, dotPow, true).valueOf();
	    }
	  });
	  dotPow.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['dotPow'], "${args[1]}\\right)")
	  };
	  return dotPow;
	}

	var name$1W = 'dotPow';
	var factory_1$25 = factory$25;

	var dotPow = {
		name: name$1W,
		factory: factory_1$25
	};

	function factory$26(type, config, load, typed) {
	  /**
	   * Calculate the exponent of a value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.exp(x)
	   *
	   * Examples:
	   *
	   *    math.exp(2)                  // returns number 7.3890560989306495
	   *    math.pow(math.e, 2)          // returns number 7.3890560989306495
	   *    math.log(math.exp(2))        // returns number 2
	   *
	   *    math.exp([1, 2, 3])
	   *    // returns Array [
	   *    //   2.718281828459045,
	   *    //   7.3890560989306495,
	   *    //   20.085536923187668
	   *    // ]
	   *
	   * See also:
	   *
	   *    expm1, log, pow
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
	   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
	   */
	  var exp = typed('exp', {
	    'number': Math.exp,
	    'Complex': function Complex(x) {
	      return x.exp();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.exp();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
	      return deepMap(x, exp);
	    }
	  });
	  exp.toTex = {
	    1: "\\exp\\left(${args[0]}\\right)"
	  };
	  return exp;
	}

	var name$1X = 'exp';
	var factory_1$26 = factory$26;

	var exp$1 = {
		name: name$1X,
		factory: factory_1$26
	};

	function factory$27(type, config, load, typed) {
	  var latex$1 = latex;
	  /**
	   * Calculate the value of subtracting 1 from the exponential value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.expm1(x)
	   *
	   * Examples:
	   *
	   *    math.expm1(2)                      // returns number 6.38905609893065
	   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495
	   *    math.log(math.expm1(2) + 1)        // returns number 2
	   *
	   *    math.expm1([1, 2, 3])
	   *    // returns Array [
	   *    //   1.718281828459045,
	   *    //   6.3890560989306495,
	   *    //   19.085536923187668
	   *    // ]
	   *
	   * See also:
	   *
	   *    exp, log, pow
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1
	   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
	   */


	  var expm1 = typed('expm1', {
	    'number': Math.expm1 || _expm1,
	    'Complex': function Complex(x) {
	      var r = Math.exp(x.re);
	      return new type.Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.exp().minus(1);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, expm1);
	    }
	  });
	  /**
	   * Calculates exponentiation minus 1.
	   * @param {number} x
	   * @return {number} res
	   * @private
	   */

	  function _expm1(x) {
	    return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;
	  }

	  expm1.toTex = "\\left(e".concat(latex$1.operators['pow'], "{${args[0]}}-1\\right)");
	  return expm1;
	}

	var name$1Y = 'expm1';
	var factory_1$27 = factory$27;

	var expm1 = {
		name: name$1Y,
		factory: factory_1$27
	};

	function factory$28(type, config, load, typed) {
	  /**
	   * Round a value towards minus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.floor(x)
	   *
	   * Examples:
	   *
	   *    math.floor(3.2)              // returns number 3
	   *    math.floor(3.8)              // returns number 3
	   *    math.floor(-4.2)             // returns number -5
	   *    math.floor(-4.7)             // returns number -5
	   *
	   *    const c = math.complex(3.2, -2.7)
	   *    math.floor(c)                // returns Complex 3 - 3i
	   *
	   *    math.floor([3.2, 3.8, -4.7]) // returns Array [3, 3, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var floor = typed('floor', {
	    'number': Math.floor,
	    'Complex': function Complex(x) {
	      return x.floor();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.floor();
	    },
	    'Fraction': function Fraction(x) {
	      return x.floor();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since floor(0) = 0
	      return deepMap(x, floor);
	    }
	  });
	  floor.toTex = {
	    1: "\\left\\lfloor${args[0]}\\right\\rfloor"
	  };
	  return floor;
	}

	var name$1Z = 'floor';
	var factory_1$28 = factory$28;

	var floor$1 = {
		name: name$1Z,
		factory: factory_1$28
	};

	var isInteger$8 = number.isInteger;

	function factory$29(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm01$1 = load(algorithm01);
	  var algorithm04$1 = load(algorithm04);
	  var algorithm10$1 = load(algorithm10);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Calculate the greatest common divisor for two or more values or arrays.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gcd(a, b)
	   *    math.gcd(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.gcd(8, 12)              // returns 4
	   *    math.gcd(-4, 6)              // returns 2
	   *    math.gcd(25, 15, -10)        // returns 5
	   *
	   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]
	   *
	   * See also:
	   *
	   *    lcm, xgcd
	   *
	   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
	   */

	  var gcd = typed('gcd', {
	    'number, number': _gcd,
	    'BigNumber, BigNumber': _gcdBigNumber,
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.gcd(y);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm04$1(x, y, gcd);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm01$1(y, x, gcd, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$1(x, y, gcd, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, gcd);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return gcd(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return gcd(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return gcd(x, matrix$1(y));
	    },
	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm10$1(x, y, gcd, false);
	    },
	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$1(x, y, gcd, false);
	    },
	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      return algorithm10$1(y, x, gcd, true);
	    },
	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      return algorithm14$1(y, x, gcd, true);
	    },
	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, gcd, false).valueOf();
	    },
	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, gcd, true).valueOf();
	    },
	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
	      var res = gcd(a, b);

	      for (var i = 0; i < args.length; i++) {
	        res = gcd(res, args[i]);
	      }

	      return res;
	    }
	  });
	  gcd.toTex = "\\gcd\\left(${args}\\right)";
	  return gcd;
	  /**
	   * Calculate gcd for BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns greatest common denominator of a and b
	   * @private
	   */

	  function _gcdBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function gcd must be integer numbers');
	    } // http://en.wikipedia.org/wiki/Euclidean_algorithm


	    var zero = new type.BigNumber(0);

	    while (!b.isZero()) {
	      var r = a.mod(b);
	      a = b;
	      b = r;
	    }

	    return a.lt(zero) ? a.neg() : a;
	  }
	}
	/**
	 * Calculate gcd for numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the greatest common denominator of a and b
	 * @private
	 */


	function _gcd(a, b) {
	  if (!isInteger$8(a) || !isInteger$8(b)) {
	    throw new Error('Parameters in function gcd must be integer numbers');
	  } // http://en.wikipedia.org/wiki/Euclidean_algorithm


	  var r;

	  while (b !== 0) {
	    r = a % b;
	    a = b;
	    b = r;
	  }

	  return a < 0 ? -a : a;
	}

	var name$1_ = 'gcd';
	var factory_1$29 = factory$29;

	var gcd = {
		name: name$1_,
		factory: factory_1$29
	};

	function factory$2a(type, config, load, typed) {
	  /**
	   * Test whether a value is positive: larger than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPositive(x)
	   *
	   * Examples:
	   *
	   *    math.isPositive(3)                     // returns true
	   *    math.isPositive(-2)                    // returns false
	   *    math.isPositive(0)                     // returns false
	   *    math.isPositive(-0)                    // returns false
	   *    math.isPositive(0.5)                   // returns true
	   *    math.isPositive(math.bignumber(2))     // returns true
	   *    math.isPositive(math.fraction(-2, 5))  // returns false
	   *    math.isPositive(math.fraction(1,3))    // returns false
	   *    math.isPositive('2')                   // returns true
	   *    math.isPositive([2, 0, -3])            // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPositive = typed('isPositive', {
	    'number': function number(x) {
	      return x > 0;
	    },
	    'BigNumber': function BigNumber(x) {
	      return !x.isNeg() && !x.isZero() && !x.isNaN();
	    },
	    'Fraction': function Fraction(x) {
	      return x.s > 0 && x.n > 0;
	    },
	    'Unit': function Unit(x) {
	      return isPositive(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isPositive);
	    }
	  });
	  return isPositive;
	}

	var name$1$ = 'isPositive';
	var factory_1$2a = factory$2a;

	var isPositive = {
		name: name$1$,
		factory: factory_1$2a
	};

	var flatten = array.flatten;

	function factory$2b(type, config, load, typed) {
	  var abs = load(abs$1);
	  var add = load(addScalar);
	  var divide = load(divideScalar);
	  var multiply = load(multiplyScalar);
	  var sqrt = load(sqrt$1);
	  var smaller$1 = load(smaller);
	  var isPositive$1 = load(isPositive);
	  /**
	   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
	   *
	   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
	   *
	   * For matrix input, the hypotenusa is calculated for all values in the matrix.
	   *
	   * Syntax:
	   *
	   *     math.hypot(a, b, ...)
	   *     math.hypot([a, b, c, ...])
	   *
	   * Examples:
	   *
	   *     math.hypot(3, 4)      // 5
	   *     math.hypot(3, 4, 5)   // 7.0710678118654755
	   *     math.hypot([3, 4, 5]) // 7.0710678118654755
	   *     math.hypot(-2)        // 2
	   *
	   * See also:
	   *
	   *     abs, norm
	   *
	   * @param {... number | BigNumber | Array | Matrix} args    A list with numeric values or an Array or Matrix.
	   *                                                          Matrix and Array input is flattened and returns a
	   *                                                          single number for the whole matrix.
	   * @return {number | BigNumber} Returns the hypothenusa of the input values.
	   */

	  var hypot = typed('hypot', {
	    '... number | BigNumber': _hypot,
	    'Array': function Array(x) {
	      return hypot.apply(hypot, flatten(x));
	    },
	    'Matrix': function Matrix(x) {
	      return hypot.apply(hypot, flatten(x.toArray()));
	    }
	  });
	  /**
	   * Calculate the hypotenusa for an Array with values
	   * @param {Array.<number | BigNumber>} args
	   * @return {number | BigNumber} Returns the result
	   * @private
	   */

	  function _hypot(args) {
	    // code based on `hypot` from es6-shim:
	    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
	    var result = 0;
	    var largest = 0;

	    for (var i = 0; i < args.length; i++) {
	      var value = abs(args[i]);

	      if (smaller$1(largest, value)) {
	        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
	        result = add(result, 1);
	        largest = value;
	      } else {
	        result = add(result, isPositive$1(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
	      }
	    }

	    return multiply(largest, sqrt(result));
	  }

	  hypot.toTex = "\\hypot\\left(${args}\\right)";
	  return hypot;
	}

	var name$20 = 'hypot';
	var factory_1$2b = factory$2b;

	var hypot$1 = {
		name: name$20,
		factory: factory_1$2b
	};

	var scatter = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
	  // a arrays
	  var avalues = a._values;
	  var aindex = a._index;
	  var aptr = a._ptr; // c arrays

	  var cindex = c._index; // vars

	  var k, k0, k1, i; // check we need to process values (pattern matrix)

	  if (x) {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k]; // check value exists in current j

	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark; // add i to pattern of C

	        cindex.push(i); // x(i) = A, check we need to call function this time

	        if (update) {
	          // copy value to workspace calling callback function
	          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]); // function was called on current row

	          u[i] = mark;
	        } else {
	          // copy value to workspace
	          x[i] = avalues[k];
	        }
	      } else {
	        // i exists in C already
	        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]); // function was called on current row

	        u[i] = mark;
	      }
	    }
	  } else {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k]; // check value exists in current j

	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark; // add i to pattern of C

	        cindex.push(i);
	      } else {
	        // indicate function was called on current row
	        u[i] = mark;
	      }
	    }
	  }
	};

	function factory$2c(type, config, load, typed) {
	  var equalScalar$1 = load(equalScalar);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
	   *
	   *
	   *          â  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = â¤
	   *          â  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */

	  var algorithm06 = function algorithm06(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var asize = a._size;
	    var adt = a._datatype; // sparse matrix arrays

	    var bvalues = b._values;
	    var bsize = b._size;
	    var bdt = b._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = []; // matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    }); // workspaces

	    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column

	    var w = []; // marks indicating value in a given row has been updated

	    var u = []; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length; // columns mark

	      var mark = j + 1; // scatter the values of A(:,j) into workspace

	      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace

	      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)

	      if (x) {
	        // initialize first index in j
	        var k = cptr[j]; // loop index in j

	        while (k < cindex.length) {
	          // row
	          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)

	          if (u[i] === mark) {
	            // value @ i
	            var v = x[i]; // check for zero value

	            if (!eq(v, zero)) {
	              // push value
	              cvalues.push(v); // increment pointer

	              k++;
	            } else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          } else {
	            // remove value @ i, do not increment pointer
	            cindex.splice(k, 1);
	          }
	        }
	      } else {
	        // initialize first index in j
	        var p = cptr[j]; // loop index in j

	        while (p < cindex.length) {
	          // row
	          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)

	          if (u[r] !== mark) {
	            // remove value @ i, do not increment pointer
	            cindex.splice(p, 1);
	          } else {
	            // increment pointer
	            p++;
	          }
	        }
	      }
	    } // update cptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return c;
	  };

	  return algorithm06;
	}

	var name$21 = 'algorithm06';
	var factory_1$2c = factory$2c;

	var algorithm06 = {
		name: name$21,
		factory: factory_1$2c
	};

	var isInteger$9 = number.isInteger;

	function factory$2d(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm02$1 = load(algorithm02);
	  var algorithm06$1 = load(algorithm06);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Calculate the least common multiple for two or more values or arrays.
	   *
	   * lcm is defined as:
	   *
	   *     lcm(a, b) = abs(a * b) / gcd(a, b)
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.lcm(a, b)
	   *    math.lcm(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.lcm(4, 6)               // returns 12
	   *    math.lcm(6, 21)              // returns 42
	   *    math.lcm(6, 21, 5)           // returns 210
	   *
	   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]
	   *
	   * See also:
	   *
	   *    gcd, xgcd
	   *
	   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
	   */

	  var lcm = typed('lcm', {
	    'number, number': _lcm,
	    'BigNumber, BigNumber': _lcmBigNumber,
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.lcm(y);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm06$1(x, y, lcm);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, lcm, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm02$1(x, y, lcm, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, lcm);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return lcm(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return lcm(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return lcm(x, matrix$1(y));
	    },
	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm11$1(x, y, lcm, false);
	    },
	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$1(x, y, lcm, false);
	    },
	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      return algorithm11$1(y, x, lcm, true);
	    },
	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      return algorithm14$1(y, x, lcm, true);
	    },
	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, lcm, false).valueOf();
	    },
	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, lcm, true).valueOf();
	    },
	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumberArrayMatrixNumberBigNumberArrayMatrixNumberBigNumber(a, b, args) {
	      var res = lcm(a, b);

	      for (var i = 0; i < args.length; i++) {
	        res = lcm(res, args[i]);
	      }

	      return res;
	    }
	  });
	  lcm.toTex = undefined; // use default template

	  return lcm;
	  /**
	   * Calculate lcm for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns the least common multiple of a and b
	   * @private
	   */

	  function _lcmBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function lcm must be integer numbers');
	    }

	    if (a.isZero() || b.isZero()) {
	      return new type.BigNumber(0);
	    } // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    // evaluate lcm here inline to reduce overhead


	    var prod = a.times(b);

	    while (!b.isZero()) {
	      var t = b;
	      b = a.mod(t);
	      a = t;
	    }

	    return prod.div(a).abs();
	  }
	}
	/**
	 * Calculate lcm for two numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the least common multiple of a and b
	 * @private
	 */


	function _lcm(a, b) {
	  if (!isInteger$9(a) || !isInteger$9(b)) {
	    throw new Error('Parameters in function lcm must be integer numbers');
	  }

	  if (a === 0 || b === 0) {
	    return 0;
	  } // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  // evaluate lcm here inline to reduce overhead


	  var t;
	  var prod = a * b;

	  while (b !== 0) {
	    t = b;
	    b = a % t;
	    a = t;
	  }

	  return Math.abs(prod / a);
	}

	var name$22 = 'lcm';
	var factory_1$2d = factory$2d;

	var lcm = {
		name: name$22,
		factory: factory_1$2d
	};

	function factory$2e(type, config, load, typed) {
	  var divideScalar$1 = load(divideScalar);
	  /**
	   * Calculate the logarithm of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log(x)
	   *    math.log(x, base)
	   *
	   * Examples:
	   *
	   *    math.log(3.5)                  // returns 1.252762968495368
	   *    math.exp(math.log(2.4))        // returns 2.4
	   *
	   *    math.pow(10, 4)                // returns 10000
	   *    math.log(10000, 10)            // returns 4
	   *    math.log(10000) / math.log(10) // returns 4
	   *
	   *    math.log(1024, 2)              // returns 10
	   *    math.pow(2, 10)                // returns 1024
	   *
	   * See also:
	   *
	   *    exp, log2, log10, log1p
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @param {number | BigNumber | Complex} [base=e]
	   *            Optional base for the logarithm. If not provided, the natural
	   *            logarithm of `x` is calculated.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the logarithm of `x`
	   */

	  var log = typed('log', {
	    'number': function number(x) {
	      if (x >= 0 || config.predictable) {
	        return Math.log(x);
	      } else {
	        // negative value -> complex value computation
	        return new type.Complex(x, 0).log();
	      }
	    },
	    'Complex': function Complex(x) {
	      return x.log();
	    },
	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.ln();
	      } else {
	        // downgrade to number, return Complex valued result
	        return new type.Complex(x.toNumber(), 0).log();
	      }
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log);
	    },
	    'any, any': function anyAny(x, base) {
	      // calculate logarithm for a specified base, log(x, base)
	      return divideScalar$1(log(x), log(base));
	    }
	  });
	  log.toTex = {
	    1: "\\ln\\left(${args[0]}\\right)",
	    2: "\\log_{${args[1]}}\\left(${args[0]}\\right)"
	  };
	  return log;
	}

	var name$23 = 'log';
	var factory_1$2e = factory$2e;

	var log$1 = {
		name: name$23,
		factory: factory_1$2e
	};

	function factory$2f(type, config, load, typed) {
	  /**
	   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log10(x)
	   *
	   * Examples:
	   *
	   *    math.log10(0.00001)            // returns -5
	   *    math.log10(10000)              // returns 4
	   *    math.log(10000) / math.log(10) // returns 4
	   *    math.pow(10, 4)                // returns 10000
	   *
	   * See also:
	   *
	   *    exp, log, log1p, log2
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the 10-base logarithm of `x`
	   */
	  var log10 = typed('log10', {
	    'number': function number(x) {
	      if (x >= 0 || config.predictable) {
	        return _log10(x);
	      } else {
	        // negative value -> complex value computation
	        return new type.Complex(x, 0).log().div(Math.LN10);
	      }
	    },
	    'Complex': function Complex(x) {
	      return new type.Complex(x).log().div(Math.LN10);
	    },
	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.log();
	      } else {
	        // downgrade to number, return Complex valued result
	        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
	      }
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log10);
	    }
	  });
	  log10.toTex = {
	    1: "\\log_{10}\\left(${args[0]}\\right)"
	  };
	  return log10;
	}
	/**
	 * Calculate the 10-base logarithm of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */


	var _log10 = Math.log10 || function (x) {
	  return Math.log(x) / Math.LN10;
	};

	var name$24 = 'log10';
	var factory_1$2f = factory$2f;

	var log10$1 = {
		name: name$24,
		factory: factory_1$2f
	};

	function factory$2g(type, config, load, typed) {
	  var divideScalar$1 = load(divideScalar);
	  var log = load(log$1);
	  /**
	   * Calculate the logarithm of a `value+1`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log1p(x)
	   *    math.log1p(x, base)
	   *
	   * Examples:
	   *
	   *    math.log1p(2.5)                 // returns 1.252762968495368
	   *    math.exp(math.log1p(1.4))       // returns 2.4
	   *
	   *    math.pow(10, 4)                 // returns 10000
	   *    math.log1p(9999, 10)            // returns 4
	   *    math.log1p(9999) / math.log(10) // returns 4
	   *
	   * See also:
	   *
	   *    exp, log, log2, log10
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm of `x+1`.
	   * @param {number | BigNumber | Complex} [base=e]
	   *            Optional base for the logarithm. If not provided, the natural
	   *            logarithm of `x+1` is calculated.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the logarithm of `x+1`
	   */

	  var log1p = typed('log1p', {
	    'number': _log1pNumber,
	    'Complex': _log1pComplex,
	    'BigNumber': function BigNumber(x) {
	      var y = x.plus(1);

	      if (!y.isNegative() || config.predictable) {
	        return y.ln();
	      } else {
	        // downgrade to number, return Complex valued result
	        return _log1pComplex(new type.Complex(x.toNumber(), 0));
	      }
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log1p);
	    },
	    'any, any': function anyAny(x, base) {
	      // calculate logarithm for a specified base, log1p(x, base)
	      return divideScalar$1(log1p(x), log(base));
	    }
	  });
	  /**
	   * Calculate the natural logarithm of a `number+1`
	   * @param {number} x
	   * @returns {number | Complex}
	   * @private
	   */

	  function _log1pNumber(x) {
	    if (x >= -1 || config.predictable) {
	      return Math.log1p ? Math.log1p(x) : Math.log(x + 1);
	    } else {
	      // negative value -> complex value computation
	      return _log1pComplex(new type.Complex(x, 0));
	    }
	  }
	  /**
	   * Calculate the natural logarithm of a complex number + 1
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */


	  function _log1pComplex(x) {
	    var xRe1p = x.re + 1;
	    return new type.Complex(Math.log(Math.sqrt(xRe1p * xRe1p + x.im * x.im)), Math.atan2(x.im, xRe1p));
	  }

	  log1p.toTex = {
	    1: "\\ln\\left(${args[0]}+1\\right)",
	    2: "\\log_{${args[1]}}\\left(${args[0]}+1\\right)"
	  };
	  return log1p;
	}

	var name$25 = 'log1p';
	var factory_1$2g = factory$2g;

	var log1p = {
		name: name$25,
		factory: factory_1$2g
	};

	function factory$2h(type, config, load, typed) {
	  /**
	   * Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log2(x)
	   *
	   * Examples:
	   *
	   *    math.log2(0.03125)           // returns -5
	   *    math.log2(16)                // returns 4
	   *    math.log2(16) / math.log2(2) // returns 4
	   *    math.pow(2, 4)               // returns 16
	   *
	   * See also:
	   *
	   *    exp, log, log1p, log10
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the 2-base logarithm of `x`
	   */
	  var log2 = typed('log2', {
	    'number': function number(x) {
	      if (x >= 0 || config.predictable) {
	        return Math.log2 ? Math.log2(x) : Math.log(x) / Math.LN2;
	      } else {
	        // negative value -> complex value computation
	        return _log2Complex(new type.Complex(x, 0));
	      }
	    },
	    'Complex': _log2Complex,
	    'BigNumber': function BigNumber(x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.log(2);
	      } else {
	        // downgrade to number, return Complex valued result
	        return _log2Complex(new type.Complex(x.toNumber(), 0));
	      }
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, log2);
	    }
	  });
	  /**
	   * Calculate log2 for a complex value
	   * @param {Complex} x
	   * @returns {Complex}
	   * @private
	   */

	  function _log2Complex(x) {
	    var newX = Math.sqrt(x.re * x.re + x.im * x.im);
	    return new type.Complex(Math.log2 ? Math.log2(newX) : Math.log(newX) / Math.LN2, Math.atan2(x.im, x.re) / Math.LN2);
	  }

	  log2.toTex = "\\log_{2}\\left(${args[0]}\\right)";
	  return log2;
	}

	var name$26 = 'log2';
	var factory_1$2h = factory$2h;

	var log2$1 = {
		name: name$26,
		factory: factory_1$2h
	};

	function factory$2i(type, config, load, typed) {
	  var matrix$1 = load(matrix);

	  var latex$1 = latex;

	  var algorithm02$1 = load(algorithm02);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm05$1 = load(algorithm05);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Calculates the modulus, the remainder of an integer division.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * The modulus is defined as:
	   *
	   *     x - y * floor(x / y)
	   *
	   * See http://en.wikipedia.org/wiki/Modulo_operation.
	   *
	   * Syntax:
	   *
	   *    math.mod(x, y)
	   *
	   * Examples:
	   *
	   *    math.mod(8, 3)                // returns 2
	   *    math.mod(11, 2)               // returns 1
	   *
	   *    function isOdd(x) {
	   *      return math.mod(x, 2) != 0
	   *    }
	   *
	   *    isOdd(2)                      // returns false
	   *    isOdd(3)                      // returns true
	   *
	   * See also:
	   *
	   *    divide
	   *
	   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
	   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
	   */

	  var mod = typed('mod', {
	    'number, number': _mod,
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return y.isZero() ? x : x.mod(y);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.mod(y);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm05$1(x, y, mod, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, mod, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, mod, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, mod);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return mod(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return mod(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return mod(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$1(x, y, mod, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, mod, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, mod, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, mod, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, mod, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, mod, true).valueOf();
	    }
	  });
	  mod.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['mod'], "${args[1]}\\right)")
	  };
	  return mod;
	  /**
	   * Calculate the modulus of two numbers
	   * @param {number} x
	   * @param {number} y
	   * @returns {number} res
	   * @private
	   */

	  function _mod(x, y) {
	    if (y > 0) {
	      // We don't use JavaScript's % operator here as this doesn't work
	      // correctly for x < 0 and x === 0
	      // see http://en.wikipedia.org/wiki/Modulo_operation
	      return x - y * Math.floor(x / y);
	    } else if (y === 0) {
	      return x;
	    } else {
	      // y < 0
	      // TODO: implement mod for a negative divisor
	      throw new Error('Cannot calculate mod for a negative divisor');
	    }
	  }
	}

	var name$27 = 'mod';
	var factory_1$2i = factory$2i;

	var mod$1 = {
		name: name$27,
		factory: factory_1$2i
	};

	function factory$2j(type, config, load, typed) {
	  var abs = load(abs$1);
	  var add = load(add$1);
	  var pow = load(pow$1);
	  var conj$1 = load(conj);
	  var sqrt = load(sqrt$1);
	  var multiply$1 = load(multiply);
	  var equalScalar$1 = load(equalScalar);
	  var larger$1 = load(larger);
	  var smaller$1 = load(smaller);
	  var matrix$1 = load(matrix);
	  /**
	   * Calculate the norm of a number, vector or matrix.
	   *
	   * The second parameter p is optional. If not provided, it defaults to 2.
	   *
	   * Syntax:
	   *
	   *    math.norm(x)
	   *    math.norm(x, p)
	   *
	   * Examples:
	   *
	   *    math.abs(-3.5)                         // returns 3.5
	   *    math.norm(-3.5)                        // returns 3.5
	   *
	   *    math.norm(math.complex(3, -4))         // returns 5
	   *
	   *    math.norm([1, 2, -3], Infinity)        // returns 3
	   *    math.norm([1, 2, -3], -Infinity)       // returns 1
	   *
	   *    math.norm([3, 4], 2)                   // returns 5
	   *
	   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
	   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7
	   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661
	   *
	   * See also:
	   *
	   *    abs, hypot
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the norm
	   * @param  {number | BigNumber | string} [p=2]
	   *            Vector space.
	   *            Supported numbers include Infinity and -Infinity.
	   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
	   * @return {number | BigNumber} the p-norm
	   */

	  var norm = typed('norm', {
	    'number': Math.abs,
	    'Complex': function Complex(x) {
	      return x.abs();
	    },
	    'BigNumber': function BigNumber(x) {
	      // norm(x) = abs(x)
	      return x.abs();
	    },
	    'boolean': function boolean(x) {
	      // norm(x) = abs(x)
	      return Math.abs(x);
	    },
	    'Array': function Array(x) {
	      return _norm(matrix$1(x), 2);
	    },
	    'Matrix': function Matrix(x) {
	      return _norm(x, 2);
	    },
	    'number | Complex | BigNumber | boolean, number | BigNumber | string': function numberComplexBigNumberBooleanNumberBigNumberString(x) {
	      // ignore second parameter, TODO: remove the option of second parameter for these types
	      return norm(x);
	    },
	    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {
	      return _norm(matrix$1(x), p);
	    },
	    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {
	      return _norm(x, p);
	    }
	  });
	  /**
	   * Calculate the norm for an array
	   * @param {Matrix} x
	   * @param {number | string} p
	   * @returns {number} Returns the norm
	   * @private
	   */

	  function _norm(x, p) {
	    // size
	    var sizeX = x.size(); // check if it is a vector

	    if (sizeX.length === 1) {
	      // check p
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x, Infinity) = max(abs(x))
	        var pinf = 0; // skip zeros since abs(0) === 0

	        x.forEach(function (value) {
	          var v = abs(value);

	          if (larger$1(v, pinf)) {
	            pinf = v;
	          }
	        }, true);
	        return pinf;
	      }

	      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
	        // norm(x, -Infinity) = min(abs(x))
	        var ninf; // skip zeros since abs(0) === 0

	        x.forEach(function (value) {
	          var v = abs(value);

	          if (!ninf || smaller$1(v, ninf)) {
	            ninf = v;
	          }
	        }, true);
	        return ninf || 0;
	      }

	      if (p === 'fro') {
	        return _norm(x, 2);
	      }

	      if (typeof p === 'number' && !isNaN(p)) {
	        // check p != 0
	        if (!equalScalar$1(p, 0)) {
	          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
	          var n = 0; // skip zeros since abs(0) === 0

	          x.forEach(function (value) {
	            n = add(pow(abs(value), p), n);
	          }, true);
	          return pow(n, 1 / p);
	        }

	        return Number.POSITIVE_INFINITY;
	      } // invalid parameter value


	      throw new Error('Unsupported parameter value');
	    } // MxN matrix


	    if (sizeX.length === 2) {
	      // check p
	      if (p === 1) {
	        // norm(x) = the largest column sum
	        var c = []; // result

	        var maxc = 0; // skip zeros since abs(0) == 0

	        x.forEach(function (value, index) {
	          var j = index[1];
	          var cj = add(c[j] || 0, abs(value));

	          if (larger$1(cj, maxc)) {
	            maxc = cj;
	          }

	          c[j] = cj;
	        }, true);
	        return maxc;
	      }

	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x) = the largest row sum
	        var r = []; // result

	        var maxr = 0; // skip zeros since abs(0) == 0

	        x.forEach(function (value, index) {
	          var i = index[0];
	          var ri = add(r[i] || 0, abs(value));

	          if (larger$1(ri, maxr)) {
	            maxr = ri;
	          }

	          r[i] = ri;
	        }, true);
	        return maxr;
	      }

	      if (p === 'fro') {
	        // norm(x) = sqrt(sum(diag(x'x)))
	        var fro = 0;
	        x.forEach(function (value, index) {
	          fro = add(fro, multiply$1(value, conj$1(value)));
	        });
	        return abs(sqrt(fro));
	      }

	      if (p === 2) {
	        // not implemented
	        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
	      } // invalid parameter value


	      throw new Error('Unsupported parameter value');
	    }
	  }

	  norm.toTex = {
	    1: "\\left\\|${args[0]}\\right\\|",
	    2: undefined // use default template

	  };
	  return norm;
	}

	var name$28 = 'norm';
	var factory_1$2j = factory$2j;

	var norm = {
		name: name$28,
		factory: factory_1$2j
	};

	function factory$2k(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm01$1 = load(algorithm01);
	  var algorithm02$1 = load(algorithm02);
	  var algorithm06$1 = load(algorithm06);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Calculate the nth root of a value.
	   * The principal nth root of a positive real number A, is the positive real
	   * solution of the equation
	   *
	   *     x^root = A
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *     math.nthRoot(a)
	   *     math.nthRoot(a, root)
	   *
	   * Examples:
	   *
	   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9
	   *     math.sqrt(9)          // returns 3, as 3^2 == 9
	   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64
	   *
	   * See also:
	   *
	   *     sqrt, pow
	   *
	   * @param {number | BigNumber | Array | Matrix | Complex} a
	   *              Value for which to calculate the nth root
	   * @param {number | BigNumber} [root=2]    The root.
	   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
	   */

	  var complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';
	  var nthRoot = typed('nthRoot', {
	    'number': function number(x) {
	      return _nthRoot(x, 2);
	    },
	    'number, number': _nthRoot,
	    'BigNumber': function BigNumber(x) {
	      return _bigNthRoot(x, new type.BigNumber(2));
	    },
	    'Complex': function Complex(x) {
	      throw new Error(complexErr);
	    },
	    'Complex, number': function ComplexNumber(x, y) {
	      throw new Error(complexErr);
	    },
	    'BigNumber, BigNumber': _bigNthRoot,
	    'Array | Matrix': function ArrayMatrix(x) {
	      return nthRoot(x, 2);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      // density must be one (no zeros in matrix)
	      if (y.density() === 1) {
	        // sparse + sparse
	        return algorithm06$1(x, y, nthRoot);
	      } else {
	        // throw exception
	        throw new Error('Root must be non-zero');
	      }
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, nthRoot, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      // density must be one (no zeros in matrix)
	      if (y.density() === 1) {
	        // dense + sparse
	        return algorithm01$1(x, y, nthRoot, false);
	      } else {
	        // throw exception
	        throw new Error('Root must be non-zero');
	      }
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, nthRoot);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix$1(y));
	    },
	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm11$1(x, y, nthRoot, false);
	    },
	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$1(x, y, nthRoot, false);
	    },
	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // density must be one (no zeros in matrix)
	      if (y.density() === 1) {
	        // sparse - scalar
	        return algorithm11$1(y, x, nthRoot, true);
	      } else {
	        // throw exception
	        throw new Error('Root must be non-zero');
	      }
	    },
	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      return algorithm14$1(y, x, nthRoot, true);
	    },
	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return nthRoot(matrix$1(x), y).valueOf();
	    },
	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix$1(y)).valueOf();
	    }
	  });
	  nthRoot.toTex = {
	    2: "\\sqrt[${args[1]}]{${args[0]}}"
	  };
	  return nthRoot;
	  /**
	   * Calculate the nth root of a for BigNumbers, solve x^root == a
	   * http://rosettacode.org/wiki/Nth_root#JavaScript
	   * @param {BigNumber} a
	   * @param {BigNumber} root
	   * @private
	   */

	  function _bigNthRoot(a, root) {
	    var precision = type.BigNumber.precision;
	    var Big = type.BigNumber.clone({
	      precision: precision + 2
	    });
	    var zero = new type.BigNumber(0);
	    var one = new Big(1);
	    var inv = root.isNegative();

	    if (inv) {
	      root = root.neg();
	    }

	    if (root.isZero()) {
	      throw new Error('Root must be non-zero');
	    }

	    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
	      throw new Error('Root must be odd when a is negative.');
	    } // edge cases zero and infinity


	    if (a.isZero()) {
	      return inv ? new Big(Infinity) : 0;
	    }

	    if (!a.isFinite()) {
	      return inv ? zero : a;
	    }

	    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,
	    // so (-1) ^ (1/root) = -1

	    x = a.isNeg() ? x.neg() : x;
	    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
	  }
	}
	/**
	 * Calculate the nth root of a, solve x^root == a
	 * http://rosettacode.org/wiki/Nth_root#JavaScript
	 * @param {number} a
	 * @param {number} root
	 * @private
	 */


	function _nthRoot(a, root) {
	  var inv = root < 0;

	  if (inv) {
	    root = -root;
	  }

	  if (root === 0) {
	    throw new Error('Root must be non-zero');
	  }

	  if (a < 0 && Math.abs(root) % 2 !== 1) {
	    throw new Error('Root must be odd when a is negative.');
	  } // edge cases zero and infinity


	  if (a === 0) {
	    return inv ? Infinity : 0;
	  }

	  if (!isFinite(a)) {
	    return inv ? 0 : a;
	  }

	  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,
	  // so (-1) ^ (1/root) = -1

	  x = a < 0 ? -x : x;
	  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).
	  // Newton's method has some well-known problems at times:
	  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis

	  /*
	  let x = 1 // Initial guess
	  let xPrev = 1
	  let i = 0
	  const iMax = 10000
	  do {
	    const delta = (a / Math.pow(x, root - 1) - x) / root
	    xPrev = x
	    x = x + delta
	    i++
	  }
	  while (xPrev !== x && i < iMax)
	   if (xPrev !== x) {
	    throw new Error('Function nthRoot failed to converge')
	  }
	   return inv ? 1 / x : x
	  */
	}

	var name$29 = 'nthRoot';
	var factory_1$2k = factory$2k;

	var nthRoot = {
		name: name$29,
		factory: factory_1$2k
	};

	var complex$3 = Complex_1.factory('Complex', {}, '', typed, {
	  on: function on(x, y) {}
	});

	function factory$2l(type, config, load, typed) {
	  /**
	   * Calculate the nth roots of a value.
	   * An nth root of a positive real number A,
	   * is a positive real solution of the equation "x^root = A".
	   * This function returns an array of complex values.
	   *
	   * Syntax:
	   *
	   *    math.nthRoots(x)
	   *    math.nthRoots(x, root)
	   *
	   * Examples:
	   *
	   *    math.nthRoots(1)
	   *    // returns [
	   *    //   {re: 1, im: 0},
	   *    //   {re: -1, im: 0}
	   *    // ]
	   *    nthRoots(1, 3)
	   *    // returns [
	   *    //   { re: 1, im: 0 },
	   *    //   { re: -0.4999999999999998, im: 0.8660254037844387 },
	   *    //   { re: -0.5000000000000004, im: -0.8660254037844385 }
	   *    ]
	   *
	   * See also:
	   *
	   *    nthRoot, pow, sqrt
	   *
	   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
	   */
	  var nthRoots = typed('nthRoots', {
	    'Complex': function Complex(x) {
	      return _nthComplexRoots(x, 2);
	    },
	    'Complex, number': _nthComplexRoots
	  });
	  nthRoots.toTex = {
	    2: "\\{y : $y^{args[1]} = {${args[0]}}\\}"
	  };
	  return nthRoots;
	}
	/**
	 * Each function here returns a real multiple of i as a Complex value.
	 * @param  {number} val
	 * @return {Complex} val, i*val, -val or -i*val for index 0, 1, 2, 3
	 */
	// This is used to fix float artifacts for zero-valued components.


	var _calculateExactResult = [function realPos(val) {
	  return complex$3(val);
	}, function imagPos(val) {
	  return complex$3(0, val);
	}, function realNeg(val) {
	  return complex$3(-val);
	}, function imagNeg(val) {
	  return complex$3(0, -val);
	}];
	/**
	 * Calculate the nth root of a Complex Number a using De Movire's Theorem.
	 * @param  {Complex} a
	 * @param  {number} root
	 * @return {Array} array of n Complex Roots
	 */

	function _nthComplexRoots(a, root) {
	  if (root < 0) throw new Error('Root must be greater than zero');
	  if (root === 0) throw new Error('Root must be non-zero');
	  if (root % 1 !== 0) throw new Error('Root must be an integer');
	  if (a === 0 || a.abs() === 0) return [complex$3(0)];
	  var aIsNumeric = typeof a === 'number';
	  var offset; // determine the offset (argument of a)/(pi/2)

	  if (aIsNumeric || a.re === 0 || a.im === 0) {
	    if (aIsNumeric) {
	      offset = 2 * +(a < 0); // numeric value on the real axis
	    } else if (a.im === 0) {
	      offset = 2 * +(a.re < 0); // complex value on the real axis
	    } else {
	      offset = 2 * +(a.im < 0) + 1; // complex value on the imaginary axis
	    }
	  }

	  var arg = a.arg();
	  var abs = a.abs();
	  var roots = [];
	  var r = Math.pow(abs, 1 / root);

	  for (var k = 0; k < root; k++) {
	    var halfPiFactor = (offset + 4 * k) / root;
	    /**
	     * If (offset + 4*k)/root is an integral multiple of pi/2
	     * then we can produce a more exact result.
	     */

	    if (halfPiFactor === Math.round(halfPiFactor)) {
	      roots.push(_calculateExactResult[halfPiFactor % 4](r));
	      continue;
	    }

	    roots.push(complex$3({
	      r: r,
	      phi: (arg + 2 * Math.PI * k) / root
	    }));
	  }

	  return roots;
	}

	var name$2a = 'nthRoots';
	var factory_1$2l = factory$2l;

	var nthRoots = {
		name: name$2a,
		factory: factory_1$2l
	};

	function factory$2m(type, config, load, typed) {
	  /**
	   * Compute the square of a value, `x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.square(x)
	   *
	   * Examples:
	   *
	   *    math.square(2)           // returns number 4
	   *    math.square(3)           // returns number 9
	   *    math.pow(3, 2)           // returns number 9
	   *    math.multiply(3, 3)      // returns number 9
	   *
	   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]
	   *
	   * See also:
	   *
	   *    multiply, cube, sqrt, pow
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            Number for which to calculate the square
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Squared value
	   */
	  var square = typed('square', {
	    'number': function number(x) {
	      return x * x;
	    },
	    'Complex': function Complex(x) {
	      return x.mul(x);
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.times(x);
	    },
	    'Fraction': function Fraction(x) {
	      return x.mul(x);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since square(0) = 0
	      return deepMap(x, square);
	    },
	    'Unit': function Unit(x) {
	      return x.pow(2);
	    }
	  });
	  square.toTex = {
	    1: "\\left(${args[0]}\\right)^2"
	  };
	  return square;
	}

	var name$2b = 'square';
	var factory_1$2m = factory$2m;

	var square = {
		name: name$2b,
		factory: factory_1$2m
	};

	function factory$2n(type, config, load, typed) {
	  var latex$1 = latex;
	  /**
	   * Unary plus operation.
	   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.unaryPlus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryPlus(3.5)      // returns 3.5
	   *    math.unaryPlus(1)     // returns 1
	   *
	   * See also:
	   *
	   *    unaryMinus, add, subtract
	   *
	   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
	   *            Input value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns the input value when numeric, converts to a number when input is non-numeric.
	   */


	  var unaryPlus = typed('unaryPlus', {
	    'number': function number(x) {
	      return x;
	    },
	    'Complex': function Complex(x) {
	      return x; // complex numbers are immutable
	    },
	    'BigNumber': function BigNumber(x) {
	      return x; // bignumbers are immutable
	    },
	    'Fraction': function Fraction(x) {
	      return x; // fractions are immutable
	    },
	    'Unit': function Unit(x) {
	      return x.clone();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since unaryPlus(0) = 0
	      return deepMap(x, unaryPlus);
	    },
	    'boolean | string': function booleanString(x) {
	      // convert to a number or bignumber
	      return config.number === 'BigNumber' ? new type.BigNumber(+x) : +x;
	    }
	  });
	  unaryPlus.toTex = {
	    1: "".concat(latex$1.operators['unaryPlus'], "\\left(${args[0]}\\right)")
	  };
	  return unaryPlus;
	}

	var name$2c = 'unaryPlus';
	var factory_1$2n = factory$2n;

	var unaryPlus = {
		name: name$2c,
		factory: factory_1$2n
	};

	var isInteger$a = number.isInteger;

	function factory$2o(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Calculate the extended greatest common divisor for two values.
	   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
	   *
	   * Syntax:
	   *
	   *    math.xgcd(a, b)
	   *
	   * Examples:
	   *
	   *    math.xgcd(8, 12)             // returns [4, -1, 1]
	   *    math.gcd(8, 12)              // returns 4
	   *    math.xgcd(36163, 21199)      // returns [1247, -7, 12]
	   *
	   * See also:
	   *
	   *    gcd, lcm
	   *
	   * @param {number | BigNumber} a  An integer number
	   * @param {number | BigNumber} b  An integer number
	   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
	   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
	   */

	  var xgcd = typed('xgcd', {
	    'number, number': _xgcd,
	    'BigNumber, BigNumber': _xgcdBigNumber // TODO: implement support for Fraction

	  });
	  xgcd.toTex = undefined; // use default template

	  return xgcd;
	  /**
	   * Calculate xgcd for two numbers
	   * @param {number} a
	   * @param {number} b
	   * @return {number} result
	   * @private
	   */

	  function _xgcd(a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var t; // used to swap two variables

	    var q; // quotient

	    var r; // remainder

	    var x = 0;
	    var lastx = 1;
	    var y = 1;
	    var lasty = 0;

	    if (!isInteger$a(a) || !isInteger$a(b)) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }

	    while (b) {
	      q = Math.floor(a / b);
	      r = a - q * b;
	      t = x;
	      x = lastx - q * x;
	      lastx = t;
	      t = y;
	      y = lasty - q * y;
	      lasty = t;
	      a = b;
	      b = r;
	    }

	    var res;

	    if (a < 0) {
	      res = [-a, -lastx, -lasty];
	    } else {
	      res = [a, a ? lastx : 0, lasty];
	    }

	    return config.matrix === 'Array' ? res : matrix$1(res);
	  }
	  /**
	   * Calculate xgcd for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @return {BigNumber[]} result
	   * @private
	   */


	  function _xgcdBigNumber(a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var // used to swap two variables
	    t;
	    var // quotient
	    q;
	    var // remainder
	    r;
	    var zero = new type.BigNumber(0);
	    var one = new type.BigNumber(1);
	    var x = zero;
	    var lastx = one;
	    var y = one;
	    var lasty = zero;

	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }

	    while (!b.isZero()) {
	      q = a.div(b).floor();
	      r = a.mod(b);
	      t = x;
	      x = lastx.minus(q.times(x));
	      lastx = t;
	      t = y;
	      y = lasty.minus(q.times(y));
	      lasty = t;
	      a = b;
	      b = r;
	    }

	    var res;

	    if (a.lt(zero)) {
	      res = [a.neg(), lastx.neg(), lasty.neg()];
	    } else {
	      res = [a, !a.isZero() ? lastx : 0, lasty];
	    }

	    return config.matrix === 'Array' ? res : matrix$1(res);
	  }
	}

	var name$2d = 'xgcd';
	var factory_1$2o = factory$2o;

	var xgcd = {
		name: name$2d,
		factory: factory_1$2o
	};

	var arithmetic = [abs$1, add$1, addScalar, cbrt$1, ceil$1, cube, divide$1, dotDivide, dotMultiply, dotPow, exp$1, expm1, fix, floor$1, gcd, hypot$1, lcm, log$1, log10$1, log1p, log2$1, mod$1, multiply, norm, nthRoot, nthRoots, pow$1, round$1, sign$1, sqrt$1, square, subtract, unaryMinus, unaryPlus, xgcd];

	/**
	 * Bitwise not
	 * @param {BigNumber} x
	 * @return {BigNumber} Result of ~`x`, fully precise
	 *
	 */

	var bitNot = function bitNot(x) {
	  if (x.isFinite() && !x.isInteger()) {
	    throw new Error('Integer expected in function bitNot');
	  }

	  var BigNumber = x.constructor;
	  var prevPrec = BigNumber.precision;
	  BigNumber.config({
	    precision: 1E9
	  });
	  var result = x.plus(new BigNumber(1));
	  result.s = -result.s || null;
	  BigNumber.config({
	    precision: prevPrec
	  });
	  return result;
	};

	/**
	 * Applies bitwise function to numbers
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @param {function (a, b)} func
	 * @return {BigNumber}
	 */


	var bitwise = function bitwise(x, y, func) {
	  var BigNumber = x.constructor;
	  var xBits, yBits;
	  var xSign = +(x.s < 0);
	  var ySign = +(y.s < 0);

	  if (xSign) {
	    xBits = decCoefficientToBinaryString(bitNot(x));

	    for (var i = 0; i < xBits.length; ++i) {
	      xBits[i] ^= 1;
	    }
	  } else {
	    xBits = decCoefficientToBinaryString(x);
	  }

	  if (ySign) {
	    yBits = decCoefficientToBinaryString(bitNot(y));

	    for (var _i = 0; _i < yBits.length; ++_i) {
	      yBits[_i] ^= 1;
	    }
	  } else {
	    yBits = decCoefficientToBinaryString(y);
	  }

	  var minBits, maxBits, minSign;

	  if (xBits.length <= yBits.length) {
	    minBits = xBits;
	    maxBits = yBits;
	    minSign = xSign;
	  } else {
	    minBits = yBits;
	    maxBits = xBits;
	    minSign = ySign;
	  }

	  var shortLen = minBits.length;
	  var longLen = maxBits.length;
	  var expFuncVal = func(xSign, ySign) ^ 1;
	  var outVal = new BigNumber(expFuncVal ^ 1);
	  var twoPower = new BigNumber(1);
	  var two = new BigNumber(2);
	  var prevPrec = BigNumber.precision;
	  BigNumber.config({
	    precision: 1E9
	  });

	  while (shortLen > 0) {
	    if (func(minBits[--shortLen], maxBits[--longLen]) === expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }

	    twoPower = twoPower.times(two);
	  }

	  while (longLen > 0) {
	    if (func(minSign, maxBits[--longLen]) === expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }

	    twoPower = twoPower.times(two);
	  }

	  BigNumber.config({
	    precision: prevPrec
	  });

	  if (expFuncVal === 0) {
	    outVal.s = -outVal.s;
	  }

	  return outVal;
	};
	/* Extracted from decimal.js, and edited to specialize. */


	function decCoefficientToBinaryString(x) {
	  // Convert to string
	  var a = x.d; // array with digits

	  var r = a[0] + '';

	  for (var i = 1; i < a.length; ++i) {
	    var s = a[i] + '';

	    for (var z = 7 - s.length; z--;) {
	      s = '0' + s;
	    }

	    r += s;
	  }

	  var j = r.length;

	  while (r.charAt(j) === '0') {
	    j--;
	  }

	  var xe = x.e;
	  var str = r.slice(0, j + 1 || 1);
	  var strL = str.length;

	  if (xe > 0) {
	    if (++xe > strL) {
	      // Append zeros.
	      xe -= strL;

	      while (xe--) {
	        str += '0';
	      }
	    } else if (xe < strL) {
	      str = str.slice(0, xe) + '.' + str.slice(xe);
	    }
	  } // Convert from base 10 (decimal) to base 2


	  var arr = [0];

	  for (var _i2 = 0; _i2 < str.length;) {
	    var arrL = arr.length;

	    while (arrL--) {
	      arr[arrL] *= 10;
	    }

	    arr[0] += parseInt(str.charAt(_i2++)); // convert to int

	    for (var _j = 0; _j < arr.length; ++_j) {
	      if (arr[_j] > 1) {
	        if (arr[_j + 1] === null || arr[_j + 1] === undefined) {
	          arr[_j + 1] = 0;
	        }

	        arr[_j + 1] += arr[_j] >> 1;
	        arr[_j] &= 1;
	      }
	    }
	  }

	  return arr.reverse();
	}

	/**
	 * Bitwise and for Bignumbers
	 *
	 * Special Cases:
	 *   N &  n =  N
	 *   n &  0 =  0
	 *   n & -1 =  n
	 *   n &  n =  n
	 *   I &  I =  I
	 *  -I & -I = -I
	 *   I & -I =  0
	 *   I &  n =  n
	 *   I & -n =  I
	 *  -I &  n =  0
	 *  -I & -n = -I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` & `y`, is fully precise
	 * @private
	 */


	var bitAnd = function bitAnd(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitAnd');
	  }

	  var BigNumber = x.constructor;

	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  if (x.isZero() || y.eq(-1) || x.eq(y)) {
	    return x;
	  }

	  if (y.isZero() || x.eq(-1)) {
	    return y;
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      if (x.isNegative() === y.isNegative()) {
	        return x;
	      }

	      return new BigNumber(0);
	    }

	    if (!x.isFinite()) {
	      if (y.isNegative()) {
	        return x;
	      }

	      if (x.isNegative()) {
	        return new BigNumber(0);
	      }

	      return y;
	    }

	    if (!y.isFinite()) {
	      if (x.isNegative()) {
	        return y;
	      }

	      if (y.isNegative()) {
	        return new BigNumber(0);
	      }

	      return x;
	    }
	  }

	  return bitwise(x, y, function (a, b) {
	    return a & b;
	  });
	};

	var isInteger$b = number.isInteger;



	function factory$2p(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var algorithm02$1 = load(algorithm02);
	  var algorithm06$1 = load(algorithm06);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Bitwise AND two values, `x & y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitAnd(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitAnd(53, 131)               // returns number 1
	   *
	   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]
	   *
	   * See also:
	   *
	   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to and
	   * @param  {number | BigNumber | Array | Matrix} y Second value to and
	   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
	   */

	  var bitAnd$1 = typed('bitAnd', {
	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$b(x) || !isInteger$b(y)) {
	        throw new Error('Integers expected in function bitAnd');
	      }

	      return x & y;
	    },
	    'BigNumber, BigNumber': bitAnd,
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm06$1(x, y, bitAnd$1, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, bitAnd$1, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm02$1(x, y, bitAnd$1, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, bitAnd$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitAnd$1(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitAnd$1(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitAnd$1(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm11$1(x, y, bitAnd$1, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, bitAnd$1, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm11$1(y, x, bitAnd$1, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, bitAnd$1, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, bitAnd$1, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, bitAnd$1, true).valueOf();
	    }
	  });
	  bitAnd$1.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['bitAnd'], "${args[1]}\\right)")
	  };
	  return bitAnd$1;
	}

	var name$2e = 'bitAnd';
	var factory_1$2p = factory$2p;

	var bitAnd$1 = {
		name: name$2e,
		factory: factory_1$2p
	};

	var isInteger$c = number.isInteger;

	function factory$2q(type, config, load, typed) {
	  var latex$1 = latex;
	  /**
	   * Bitwise NOT value, `~x`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.bitNot(x)
	   *
	   * Examples:
	   *
	   *    math.bitNot(1)               // returns number -2
	   *
	   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]
	   *
	   * See also:
	   *
	   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to not
	   * @return {number | BigNumber | Array | Matrix} NOT of `x`
	   */


	  var bitNot$1 = typed('bitNot', {
	    'number': function number(x) {
	      if (!isInteger$c(x)) {
	        throw new Error('Integer expected in function bitNot');
	      }

	      return ~x;
	    },
	    'BigNumber': bitNot,
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, bitNot$1);
	    }
	  });
	  bitNot$1.toTex = {
	    1: latex$1.operators['bitNot'] + "\\left(${args[0]}\\right)"
	  };
	  return bitNot$1;
	}

	var name$2f = 'bitNot';
	var factory_1$2q = factory$2q;

	var bitNot$1 = {
		name: name$2f,
		factory: factory_1$2q
	};

	/**
	 * Bitwise OR for BigNumbers
	 *
	 * Special Cases:
	 *   N |  n =  N
	 *   n |  0 =  n
	 *   n | -1 = -1
	 *   n |  n =  n
	 *   I |  I =  I
	 *  -I | -I = -I
	 *   I | -n = -1
	 *   I | -I = -1
	 *   I |  n =  I
	 *  -I |  n = -I
	 *  -I | -n = -n
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` | `y`, fully precise
	 */


	var bitOr = function bitOr(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitOr');
	  }

	  var BigNumber = x.constructor;

	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  var negOne = new BigNumber(-1);

	  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
	    return y;
	  }

	  if (y.isZero() || x.eq(negOne)) {
	    return x;
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !x.isNegative() && y.isNegative() || x.isNegative() && !y.isNegative() && !y.isFinite()) {
	      return negOne;
	    }

	    if (x.isNegative() && y.isNegative()) {
	      return x.isFinite() ? x : y;
	    }

	    return x.isFinite() ? y : x;
	  }

	  return bitwise(x, y, function (a, b) {
	    return a | b;
	  });
	};

	var isInteger$d = number.isInteger;



	function factory$2r(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var algorithm01$1 = load(algorithm01);
	  var algorithm04$1 = load(algorithm04);
	  var algorithm10$1 = load(algorithm10);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Bitwise OR two values, `x | y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the lowest print base.
	   *
	   * Syntax:
	   *
	   *    math.bitOr(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitOr(1, 2)               // returns number 3
	   *
	   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to or
	   * @param  {number | BigNumber | Array | Matrix} y Second value to or
	   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
	   */

	  var bitOr$1 = typed('bitOr', {
	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$d(x) || !isInteger$d(y)) {
	        throw new Error('Integers expected in function bitOr');
	      }

	      return x | y;
	    },
	    'BigNumber, BigNumber': bitOr,
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm04$1(x, y, bitOr$1);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm01$1(y, x, bitOr$1, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$1(x, y, bitOr$1, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, bitOr$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitOr$1(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitOr$1(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitOr$1(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm10$1(x, y, bitOr$1, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, bitOr$1, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm10$1(y, x, bitOr$1, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, bitOr$1, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, bitOr$1, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, bitOr$1, true).valueOf();
	    }
	  });
	  bitOr$1.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['bitOr'], "${args[1]}\\right)")
	  };
	  return bitOr$1;
	}

	var name$2g = 'bitOr';
	var factory_1$2r = factory$2r;

	var bitOr$1 = {
		name: name$2g,
		factory: factory_1$2r
	};

	/**
	 * Bitwise XOR for BigNumbers
	 *
	 * Special Cases:
	 *   N ^  n =  N
	 *   n ^  0 =  n
	 *   n ^  n =  0
	 *   n ^ -1 = ~n
	 *   I ^  n =  I
	 *   I ^ -n = -I
	 *   I ^ -I = -1
	 *  -I ^  n = -I
	 *  -I ^ -n =  I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` ^ `y`, fully precise
	 *
	 */


	var bitXor = function bitXor(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function bitXor');
	  }

	  var BigNumber = x.constructor;

	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }

	  if (x.isZero()) {
	    return y;
	  }

	  if (y.isZero()) {
	    return x;
	  }

	  if (x.eq(y)) {
	    return new BigNumber(0);
	  }

	  var negOne = new BigNumber(-1);

	  if (x.eq(negOne)) {
	    return bitNot(y);
	  }

	  if (y.eq(negOne)) {
	    return bitNot(x);
	  }

	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      return negOne;
	    }

	    return new BigNumber(x.isNegative() === y.isNegative() ? Infinity : -Infinity);
	  }

	  return bitwise(x, y, function (a, b) {
	    return a ^ b;
	  });
	};

	var isInteger$e = number.isInteger;



	function factory$2s(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Bitwise XOR two values, `x ^ y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitXor(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitXor(1, 2)               // returns number 3
	   *
	   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to xor
	   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
	   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
	   */

	  var bitXor$1 = typed('bitXor', {
	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$e(x) || !isInteger$e(y)) {
	        throw new Error('Integers expected in function bitXor');
	      }

	      return x ^ y;
	    },
	    'BigNumber, BigNumber': bitXor,
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, bitXor$1);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, bitXor$1, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, bitXor$1, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, bitXor$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return bitXor$1(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return bitXor$1(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return bitXor$1(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, bitXor$1, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, bitXor$1, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, bitXor$1, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, bitXor$1, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, bitXor$1, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, bitXor$1, true).valueOf();
	    }
	  });
	  bitXor$1.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['bitXor'], "${args[1]}\\right)")
	  };
	  return bitXor$1;
	}

	var name$2h = 'bitXor';
	var factory_1$2s = factory$2s;

	var bitXor$1 = {
		name: name$2h,
		factory: factory_1$2s
	};

	/**
	 * Bitwise left shift
	 *
	 * Special Cases:
	 *  n << -n = N
	 *  n <<  N = N
	 *  N <<  n = N
	 *  n <<  0 = n
	 *  0 <<  n = 0
	 *  I <<  I = N
	 *  I <<  n = I
	 *  n <<  I = I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` << `y`
	 *
	 */

	var leftShift = function leftShift(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function leftShift');
	  }

	  var BigNumber = x.constructor;

	  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
	    return new BigNumber(NaN);
	  }

	  if (x.isZero() || y.isZero()) {
	    return x;
	  }

	  if (!x.isFinite() && !y.isFinite()) {
	    return new BigNumber(NaN);
	  } // Math.pow(2, y) is fully precise for y < 55, and fast


	  if (y.lt(55)) {
	    return x.times(Math.pow(2, y.toNumber()) + '');
	  }

	  return x.times(new BigNumber(2).pow(y));
	};

	function factory$2t(type, config, load, typed) {
	  var equalScalar$1 = load(equalScalar);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          â  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = â¤  A(i,j)       ; A(i,j) !== 0
	   *          â  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */

	  var algorithm08 = function algorithm08(a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype; // sparse matrix arrays

	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype; // validate dimensions

	    if (asize.length !== bsize.length) {
	      throw new DimensionError_1(asize.length, bsize.length);
	    } // check rows & columns


	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	    } // sparse matrix cannot be a Pattern matrix


	    if (!avalues || !bvalues) {
	      throw new Error('Cannot perform operation on Pattern Sparse Matrices');
	    } // rows & columns


	    var rows = asize[0];
	    var columns = asize[1]; // datatype

	    var dt; // equal signature to use

	    var eq = equalScalar$1; // zero value

	    var zero = 0; // callback signature to use

	    var cf = callback; // process data types

	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt; // find signature that matches (dt, dt)

	      eq = typed.find(equalScalar$1, [dt, dt]); // convert 0 to the same datatype

	      zero = typed.convert(0, dt); // callback

	      cf = typed.find(callback, [dt, dt]);
	    } // result arrays


	    var cvalues = [];
	    var cindex = [];
	    var cptr = []; // matrix

	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    }); // workspace

	    var x = []; // marks indicating we have a value in x for a given column

	    var w = []; // vars

	    var k, k0, k1, i; // loop columns

	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length; // columns mark

	      var mark = j + 1; // loop values in a

	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k]; // mark workspace

	        w[i] = mark; // set value

	        x[i] = avalues[k]; // add index

	        cindex.push(i);
	      } // loop values in b


	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k]; // check value exists in workspace

	        if (w[i] === mark) {
	          // evaluate callback
	          x[i] = cf(x[i], bvalues[k]);
	        }
	      } // initialize first index in j


	      k = cptr[j]; // loop index in j

	      while (k < cindex.length) {
	        // row
	        i = cindex[k]; // value @ i

	        var v = x[i]; // check for zero value

	        if (!eq(v, zero)) {
	          // push value
	          cvalues.push(v); // increment pointer

	          k++;
	        } else {
	          // remove value @ i, do not increment pointer
	          cindex.splice(k, 1);
	        }
	      }
	    } // update cptr


	    cptr[columns] = cindex.length; // return sparse matrix

	    return c;
	  };

	  return algorithm08;
	}

	var name$2i = 'algorithm08';
	var factory_1$2t = factory$2t;

	var algorithm08 = {
		name: name$2i,
		factory: factory_1$2t
	};

	var isInteger$f = number.isInteger;



	function factory$2u(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var equalScalar$1 = load(equalScalar);
	  var zeros$1 = load(zeros);
	  var algorithm01$1 = load(algorithm01);
	  var algorithm02$1 = load(algorithm02);
	  var algorithm08$1 = load(algorithm08);
	  var algorithm10$1 = load(algorithm10);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.leftShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.leftShift(1, 2)               // returns number 4
	   *
	   *    math.leftShift([1, 2, 3], 4)       // returns Array [16, 32, 64]
	   *
	   * See also:
	   *
	   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
	   */

	  var leftShift$1 = typed('leftShift', {
	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$f(x) || !isInteger$f(y)) {
	        throw new Error('Integers expected in function leftShift');
	      }

	      return x << y;
	    },
	    'BigNumber, BigNumber': leftShift,
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm08$1(x, y, leftShift$1, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, leftShift$1, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$1(x, y, leftShift$1, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, leftShift$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return leftShift$1(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return leftShift$1(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return leftShift$1(x, matrix$1(y));
	    },
	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$1(y, 0)) {
	        return x.clone();
	      }

	      return algorithm11$1(x, y, leftShift$1, false);
	    },
	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$1(y, 0)) {
	        return x.clone();
	      }

	      return algorithm14$1(x, y, leftShift$1, false);
	    },
	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$1(x, 0)) {
	        return zeros$1(y.size(), y.storage());
	      }

	      return algorithm10$1(y, x, leftShift$1, true);
	    },
	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$1(x, 0)) {
	        return zeros$1(y.size(), y.storage());
	      }

	      return algorithm14$1(y, x, leftShift$1, true);
	    },
	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return leftShift$1(matrix$1(x), y).valueOf();
	    },
	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return leftShift$1(x, matrix$1(y)).valueOf();
	    }
	  });
	  leftShift$1.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['leftShift'], "${args[1]}\\right)")
	  };
	  return leftShift$1;
	}

	var name$2j = 'leftShift';
	var factory_1$2u = factory$2u;

	var leftShift$1 = {
		name: name$2j,
		factory: factory_1$2u
	};

	/*
	 * Special Cases:
	 *   n >> -n =  N
	 *   n >>  N =  N
	 *   N >>  n =  N
	 *   I >>  I =  N
	 *   n >>  0 =  n
	 *   I >>  n =  I
	 *  -I >>  n = -I
	 *  -I >>  I = -I
	 *   n >>  I =  I
	 *  -n >>  I = -1
	 *   0 >>  n =  0
	 *
	 * @param {BigNumber} value
	 * @param {BigNumber} value
	 * @return {BigNumber} Result of `x` >> `y`
	 *
	 */

	var rightArithShift = function rightArithShift(x, y) {
	  if (x.isFinite() && !x.isInteger() || y.isFinite() && !y.isInteger()) {
	    throw new Error('Integers expected in function rightArithShift');
	  }

	  var BigNumber = x.constructor;

	  if (x.isNaN() || y.isNaN() || y.isNegative() && !y.isZero()) {
	    return new BigNumber(NaN);
	  }

	  if (x.isZero() || y.isZero()) {
	    return x;
	  }

	  if (!y.isFinite()) {
	    if (x.isNegative()) {
	      return new BigNumber(-1);
	    }

	    if (!x.isFinite()) {
	      return new BigNumber(NaN);
	    }

	    return new BigNumber(0);
	  } // Math.pow(2, y) is fully precise for y < 55, and fast


	  if (y.lt(55)) {
	    return x.div(Math.pow(2, y.toNumber()) + '').floor();
	  }

	  return x.div(new BigNumber(2).pow(y)).floor();
	};

	var isInteger$g = number.isInteger;



	function factory$2v(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var equalScalar$1 = load(equalScalar);
	  var zeros$1 = load(zeros);
	  var algorithm01$1 = load(algorithm01);
	  var algorithm02$1 = load(algorithm02);
	  var algorithm08$1 = load(algorithm08);
	  var algorithm10$1 = load(algorithm10);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightArithShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightArithShift(4, 2)               // returns number 1
	   *
	   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
	   */

	  var rightArithShift$1 = typed('rightArithShift', {
	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$g(x) || !isInteger$g(y)) {
	        throw new Error('Integers expected in function rightArithShift');
	      }

	      return x >> y;
	    },
	    'BigNumber, BigNumber': rightArithShift,
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm08$1(x, y, rightArithShift$1, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, rightArithShift$1, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$1(x, y, rightArithShift$1, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, rightArithShift$1);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return rightArithShift$1(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return rightArithShift$1(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return rightArithShift$1(x, matrix$1(y));
	    },
	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$1(y, 0)) {
	        return x.clone();
	      }

	      return algorithm11$1(x, y, rightArithShift$1, false);
	    },
	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$1(y, 0)) {
	        return x.clone();
	      }

	      return algorithm14$1(x, y, rightArithShift$1, false);
	    },
	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$1(x, 0)) {
	        return zeros$1(y.size(), y.storage());
	      }

	      return algorithm10$1(y, x, rightArithShift$1, true);
	    },
	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$1(x, 0)) {
	        return zeros$1(y.size(), y.storage());
	      }

	      return algorithm14$1(y, x, rightArithShift$1, true);
	    },
	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return rightArithShift$1(matrix$1(x), y).valueOf();
	    },
	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return rightArithShift$1(x, matrix$1(y)).valueOf();
	    }
	  });
	  rightArithShift$1.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['rightArithShift'], "${args[1]}\\right)")
	  };
	  return rightArithShift$1;
	}

	var name$2k = 'rightArithShift';
	var factory_1$2v = factory$2v;

	var rightArithShift$1 = {
		name: name$2k,
		factory: factory_1$2v
	};

	var isInteger$h = number.isInteger;

	function factory$2w(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var equalScalar$1 = load(equalScalar);
	  var zeros$1 = load(zeros);
	  var algorithm01$1 = load(algorithm01);
	  var algorithm02$1 = load(algorithm02);
	  var algorithm08$1 = load(algorithm08);
	  var algorithm10$1 = load(algorithm10);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightLogShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightLogShift(4, 2)               // returns number 1
	   *
	   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
	   *
	   * @param  {number | Array | Matrix} x Value to be shifted
	   * @param  {number} y Amount of shifts
	   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
	   */

	  var rightLogShift = typed('rightLogShift', {
	    'number, number': function numberNumber(x, y) {
	      if (!isInteger$h(x) || !isInteger$h(y)) {
	        throw new Error('Integers expected in function rightLogShift');
	      }

	      return x >>> y;
	    },
	    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm08$1(x, y, rightLogShift, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, rightLogShift, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm01$1(x, y, rightLogShift, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, rightLogShift);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix$1(y));
	    },
	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$1(y, 0)) {
	        return x.clone();
	      }

	      return algorithm11$1(x, y, rightLogShift, false);
	    },
	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      // check scalar
	      if (equalScalar$1(y, 0)) {
	        return x.clone();
	      }

	      return algorithm14$1(x, y, rightLogShift, false);
	    },
	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$1(x, 0)) {
	        return zeros$1(y.size(), y.storage());
	      }

	      return algorithm10$1(y, x, rightLogShift, true);
	    },
	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      // check scalar
	      if (equalScalar$1(x, 0)) {
	        return zeros$1(y.size(), y.storage());
	      }

	      return algorithm14$1(y, x, rightLogShift, true);
	    },
	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix$1(x), y).valueOf();
	    },
	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix$1(y)).valueOf();
	    }
	  });
	  rightLogShift.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['rightLogShift'], "${args[1]}\\right)")
	  };
	  return rightLogShift;
	}

	var name$2l = 'rightLogShift';
	var factory_1$2w = factory$2w;

	var rightLogShift = {
		name: name$2l,
		factory: factory_1$2w
	};

	var bitwise$1 = [bitAnd$1, bitNot$1, bitOr$1, bitXor$1, leftShift$1, rightArithShift$1, rightLogShift];

	/** @param {integer} i
	 *  @param {integer} n
	 *  @returns : product of i to n
	 */
	function product(i, n) {
	  var half;

	  if (n < i) {
	    return 1;
	  }

	  if (n === i) {
	    return n;
	  }

	  half = n + i >> 1; // divide (n + i) by 2 and truncate to integer

	  return product(i, half) * product(half + 1, n);
	}

	var product_1 = product;

	var isInteger$i = number.isInteger;

	function factory$2x(type, config, load, typed) {
	  var multiply$1 = load(multiply);
	  var pow = load(pow$1);

	  var product = product_1;
	  /**
	   * Compute the gamma function of a value using Lanczos approximation for
	   * small values, and an extended Stirling approximation for large values.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gamma(n)
	   *
	   * Examples:
	   *
	   *    math.gamma(5)       // returns 24
	   *    math.gamma(-0.5)    // returns -3.5449077018110335
	   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i
	   *
	   * See also:
	   *
	   *    combinations, factorial, permutations
	   *
	   * @param {number | Array | Matrix} n   A real or complex number
	   * @return {number | Array | Matrix}    The gamma of `n`
	   */


	  var gamma = typed('gamma', {
	    'number': function number(n) {
	      var t, x;

	      if (isInteger$i(n)) {
	        if (n <= 0) {
	          return isFinite(n) ? Infinity : NaN;
	        }

	        if (n > 171) {
	          return Infinity; // Will overflow
	        }

	        return product(1, n - 1);
	      }

	      if (n < 0.5) {
	        return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
	      }

	      if (n >= 171.35) {
	        return Infinity; // will overflow
	      }

	      if (n > 85.0) {
	        // Extended Stirling Approx
	        var twoN = n * n;
	        var threeN = twoN * n;
	        var fourN = threeN * n;
	        var fiveN = fourN * n;
	        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
	      }

	      --n;
	      x = p[0];

	      for (var i = 1; i < p.length; ++i) {
	        x += p[i] / (n + i);
	      }

	      t = n + g + 0.5;
	      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
	    },
	    'Complex': function Complex(n) {
	      var t, x;

	      if (n.im === 0) {
	        return gamma(n.re);
	      }

	      n = new type.Complex(n.re - 1, n.im);
	      x = new type.Complex(p[0], 0);

	      for (var i = 1; i < p.length; ++i) {
	        var real = n.re + i; // x += p[i]/(n+i)

	        var den = real * real + n.im * n.im;

	        if (den !== 0) {
	          x.re += p[i] * real / den;
	          x.im += -(p[i] * n.im) / den;
	        } else {
	          x.re = p[i] < 0 ? -Infinity : Infinity;
	        }
	      }

	      t = new type.Complex(n.re + g + 0.5, n.im);
	      var twoPiSqrt = Math.sqrt(2 * Math.PI);
	      n.re += 0.5;
	      var result = pow(t, n);

	      if (result.im === 0) {
	        // sqrt(2*PI)*result
	        result.re *= twoPiSqrt;
	      } else if (result.re === 0) {
	        result.im *= twoPiSqrt;
	      } else {
	        result.re *= twoPiSqrt;
	        result.im *= twoPiSqrt;
	      }

	      var r = Math.exp(-t.re); // exp(-t)

	      t.re = r * Math.cos(-t.im);
	      t.im = r * Math.sin(-t.im);
	      return multiply$1(multiply$1(result, t), x);
	    },
	    'BigNumber': function BigNumber(n) {
	      if (n.isInteger()) {
	        return n.isNegative() || n.isZero() ? new type.BigNumber(Infinity) : bigFactorial(n.minus(1));
	      }

	      if (!n.isFinite()) {
	        return new type.BigNumber(n.isNegative() ? NaN : Infinity);
	      }

	      throw new Error('Integer BigNumber expected');
	    },
	    'Array | Matrix': function ArrayMatrix(n) {
	      return deepMap(n, gamma);
	    }
	  });
	  /**
	   * Calculate factorial for a BigNumber
	   * @param {BigNumber} n
	   * @returns {BigNumber} Returns the factorial of n
	   */

	  function bigFactorial(n) {
	    if (n.isZero()) {
	      return new type.BigNumber(1); // 0! is per definition 1
	    }

	    var precision = config.precision + (Math.log(n.toNumber()) | 0);
	    var Big = type.BigNumber.clone({
	      precision: precision
	    });
	    var res = new Big(n);
	    var value = n.toNumber() - 1; // number

	    while (value > 1) {
	      res = res.times(value);
	      value--;
	    }

	    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
	  }

	  gamma.toTex = {
	    1: "\\Gamma\\left(${args[0]}\\right)"
	  };
	  return gamma;
	} // TODO: comment on the variables g and p


	var g = 4.7421875;
	var p = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];
	var name$2m = 'gamma';
	var factory_1$2x = factory$2x;

	var gamma = {
		name: name$2m,
		factory: factory_1$2x
	};

	function factory$2y(type, config, load, typed) {
	  var gamma$1 = load(gamma);

	  var latex$1 = latex;
	  /**
	   * Compute the factorial of a value
	   *
	   * Factorial only supports an integer value as argument.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.factorial(n)
	   *
	   * Examples:
	   *
	   *    math.factorial(5)    // returns 120
	   *    math.factorial(3)    // returns 6
	   *
	   * See also:
	   *
	   *    combinations, gamma, permutations
	   *
	   * @param {number | BigNumber | Array | Matrix} n   An integer number
	   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
	   */


	  var factorial = typed('factorial', {
	    'number': function number(n) {
	      if (n < 0) {
	        throw new Error('Value must be non-negative');
	      }

	      return gamma$1(n + 1);
	    },
	    'BigNumber': function BigNumber(n) {
	      if (n.isNegative()) {
	        throw new Error('Value must be non-negative');
	      }

	      return gamma$1(n.plus(1));
	    },
	    'Array | Matrix': function ArrayMatrix(n) {
	      return deepMap(n, factorial);
	    }
	  });
	  factorial.toTex = {
	    1: "\\left(${args[0]}\\right)".concat(latex$1.operators['factorial'])
	  };
	  return factorial;
	}

	var name$2n = 'factorial';
	var factory_1$2y = factory$2y;

	var factorial = {
		name: name$2n,
		factory: factory_1$2y
	};

	var isInteger$j = number.isInteger;



	function factory$2z(type, config, load, typed) {
	  /**
	   * Compute the number of ways of picking `k` unordered outcomes from `n`
	   * possibilities.
	   *
	   * Combinations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.combinations(n, k)
	   *
	   * Examples:
	   *
	   *    math.combinations(7, 5) // returns 21
	   *
	   * See also:
	   *
	   *    permutations, factorial
	   *
	   * @param {number | BigNumber} n    Total number of objects in the set
	   * @param {number | BigNumber} k    Number of objects in the subset
	   * @return {number | BigNumber}     Number of possible combinations.
	   */
	  var combinations = typed('combinations', {
	    'number, number': function numberNumber(n, k) {
	      var prodrange, nMinusk;

	      if (!isInteger$j(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }

	      if (!isInteger$j(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }

	      if (k > n) {
	        throw new TypeError('k must be less than or equal to n');
	      }

	      nMinusk = n - k;

	      if (k < nMinusk) {
	        prodrange = product_1(nMinusk + 1, n);
	        return prodrange / product_1(1, k);
	      }

	      prodrange = product_1(k + 1, n);
	      return prodrange / product_1(1, nMinusk);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
	      var max, result, i, ii;
	      var one = new type.BigNumber(1);

	      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }

	      if (k.gt(n)) {
	        throw new TypeError('k must be less than n in function combinations');
	      }

	      max = n.minus(k);
	      if (k.lt(max)) max = k;
	      result = one;

	      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
	        result = result.times(max.plus(i)).dividedBy(i);
	      }

	      return result;
	    } // TODO: implement support for collection in combinations

	  });
	  combinations.toTex = {
	    2: "\\binom{${args[0]}}{${args[1]}}"
	  };
	  return combinations;
	}
	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */


	function isPositiveInteger(n) {
	  return n.isInteger() && n.gte(0);
	}

	var name$2o = 'combinations';
	var factory_1$2z = factory$2z;

	var combinations = {
		name: name$2o,
		factory: factory_1$2z
	};

	function factory$2A(type, config, load, typed) {
	  /**
	   * Test whether a value is an integer number.
	   * The function supports `number`, `BigNumber`, and `Fraction`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isInteger(x)
	   *
	   * Examples:
	   *
	   *    math.isInteger(2)                     // returns true
	   *    math.isInteger(0)                     // returns true
	   *    math.isInteger(0.5)                   // returns false
	   *    math.isInteger(math.bignumber(500))   // returns true
	   *    math.isInteger(math.fraction(4))      // returns true
	   *    math.isInteger('3')                   // returns true
	   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]
	   *    math.isInteger(math.complex('2-4i')   // throws an error
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isZero
	   *
	   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
	   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isInteger = typed('isInteger', {
	    'number': number.isInteger,
	    // TODO: what to do with isInteger(add(0.1, 0.2))  ?
	    'BigNumber': function BigNumber(x) {
	      return x.isInt();
	    },
	    'Fraction': function Fraction(x) {
	      return x.d === 1 && isFinite(x.n);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isInteger);
	    }
	  });
	  return isInteger;
	}

	var name$2p = 'isInteger';
	var factory_1$2A = factory$2A;

	var isInteger$k = {
		name: name$2p,
		factory: factory_1$2A
	};

	function factory$2B(type, config, load, typed) {
	  var add = load(add$1);
	  var subtract$1 = load(subtract);
	  var multiply$1 = load(multiply);
	  var divide = load(divide$1);
	  var pow = load(pow$1);
	  var factorial$1 = load(factorial);
	  var combinations$1 = load(combinations);
	  var isNegative$1 = load(isNegative);
	  var isInteger = load(isInteger$k);
	  var larger$1 = load(larger);
	  /**
	   * The Stirling numbers of the second kind, counts the number of ways to partition
	   * a set of n labelled objects into k nonempty unlabelled subsets.
	   * stirlingS2 only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   *  If n = k or k = 1, then s(n,k) = 1
	   *
	   * Syntax:
	   *
	   *   math.stirlingS2(n, k)
	   *
	   * Examples:
	   *
	   *    math.stirlingS2(5, 3) //returns 25
	   *
	   * See also:
	   *
	   *    bellNumbers
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     S(n,k)
	   */

	  var stirlingS2 = typed('stirlingS2', {
	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
	      if (!isInteger(n) || isNegative$1(n) || !isInteger(k) || isNegative$1(k)) {
	        throw new TypeError('Non-negative integer value expected in function stirlingS2');
	      } else if (larger$1(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function stirlingS2');
	      } // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]


	      var kFactorial = factorial$1(k);
	      var result = 0;

	      for (var i = 0; i <= k; i++) {
	        var negativeOne = pow(-1, subtract$1(k, i));
	        var kChooseI = combinations$1(k, i);
	        var iPower = pow(i, n);
	        result = add(result, multiply$1(multiply$1(kChooseI, iPower), negativeOne));
	      }

	      return divide(result, kFactorial);
	    }
	  });
	  stirlingS2.toTex = {
	    2: "\\mathrm{S}\\left(${args}\\right)"
	  };
	  return stirlingS2;
	}

	var name$2q = 'stirlingS2';
	var factory_1$2B = factory$2B;

	var stirlingS2 = {
		name: name$2q,
		factory: factory_1$2B
	};

	function factory$2C(type, config, load, typed) {
	  var add = load(add$1);
	  var stirlingS2$1 = load(stirlingS2);
	  var isNegative$1 = load(isNegative);
	  var isInteger = load(isInteger$k);
	  /**
	   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
	   * bellNumbers only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.bellNumbers(n)
	   *
	   * Examples:
	   *
	   *    math.bellNumbers(3) // returns 5
	   *    math.bellNumbers(8) // returns 4140
	   *
	   * See also:
	   *
	   *    stirlingS2
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @return {Number | BigNumber}     B(n)
	   */

	  var bellNumbers = typed('bellNumbers', {
	    'number | BigNumber': function numberBigNumber(n) {
	      if (!isInteger(n) || isNegative$1(n)) {
	        throw new TypeError('Non-negative integer value expected in function bellNumbers');
	      } // Sum (k=0, n) S(n,k).


	      var result = 0;

	      for (var i = 0; i <= n; i++) {
	        result = add(result, stirlingS2$1(n, i));
	      }

	      return result;
	    }
	  });
	  bellNumbers.toTex = {
	    1: "\\mathrm{B}_{${args[0]}}"
	  };
	  return bellNumbers;
	}

	var name$2r = 'bellNumbers';
	var factory_1$2C = factory$2C;

	var bellNumbers = {
		name: name$2r,
		factory: factory_1$2C
	};

	function factory$2D(type, config, load, typed) {
	  var combinations$1 = load(combinations);
	  var add = load(addScalar);
	  var isPositive$1 = load(isPositive);
	  var isInteger = load(isInteger$k);
	  var larger$1 = load(larger);
	  /**
	   * The composition counts of n into k parts.
	   *
	   * composition only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *   math.composition(n, k)
	   *
	   * Examples:
	   *
	   *    math.composition(5, 3) // returns 6
	   *
	   * See also:
	   *
	   *    combinations
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
	   */

	  var composition = typed('composition', {
	    'number | BigNumber, number | BigNumber': function numberBigNumberNumberBigNumber(n, k) {
	      if (!isInteger(n) || !isPositive$1(n) || !isInteger(k) || !isPositive$1(k)) {
	        throw new TypeError('Positive integer value expected in function composition');
	      } else if (larger$1(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function composition');
	      }

	      return combinations$1(add(n, -1), add(k, -1));
	    }
	  });
	  composition.toTex = undefined; // use default template

	  return composition;
	}

	var name$2s = 'composition';
	var factory_1$2D = factory$2D;

	var composition = {
		name: name$2s,
		factory: factory_1$2D
	};

	function factory$2E(type, config, load, typed) {
	  var add = load(add$1);
	  var divide = load(divide$1);
	  var multiply$1 = load(multiply);
	  var combinations$1 = load(combinations);
	  var isNegative$1 = load(isNegative);
	  var isInteger = load(isInteger$k);
	  /**
	   * The Catalan Numbers enumerate combinatorial structures of many different types.
	   * catalan only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.catalan(n)
	   *
	   * Examples:
	   *
	   *    math.catalan(3) // returns 5
	   *    math.catalan(8) // returns 1430
	   *
	   * See also:
	   *
	   *    bellNumbers
	   *
	   * @param {Number | BigNumber} n    nth Catalan number
	   * @return {Number | BigNumber}     Cn(n)
	   */

	  var catalan = typed('catalan', {
	    'number | BigNumber': function numberBigNumber(n) {
	      if (!isInteger(n) || isNegative$1(n)) {
	        throw new TypeError('Non-negative integer value expected in function catalan');
	      }

	      return divide(combinations$1(multiply$1(n, 2), n), add(n, 1));
	    }
	  });
	  catalan.toTex = {
	    1: "\\mathrm{C}_{${args[0]}}"
	  };
	  return catalan;
	}

	var name$2t = 'catalan';
	var factory_1$2E = factory$2E;

	var catalan = {
		name: name$2t,
		factory: factory_1$2E
	};

	var combinatorics = [bellNumbers, composition, stirlingS2, catalan];

	function factory$2F(type, config, load, typed) {
	  /**
	   * Compute the argument of a complex value.
	   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.arg(x)
	   *
	   * Examples:
	   *
	   *    const a = math.complex(2, 2)
	   *    math.arg(a) / math.pi          // returns number 0.25
	   *
	   *    const b = math.complex('2 + 3i')
	   *    math.arg(b)                    // returns number 0.982793723247329
	   *    math.atan2(3, 2)               // returns number 0.982793723247329
	   *
	   * See also:
	   *
	   *    re, im, conj, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The argument of x
	   */
	  var arg = typed('arg', {
	    'number': function number(x) {
	      return Math.atan2(0, x);
	    },
	    'BigNumber': function BigNumber(x) {
	      return type.BigNumber.atan2(0, x);
	    },
	    'Complex': function Complex(x) {
	      return x.arg();
	    },
	    // TODO: implement BigNumber support for function arg
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, arg);
	    }
	  });
	  arg.toTex = {
	    1: "\\arg\\left(${args[0]}\\right)"
	  };
	  return arg;
	}

	var name$2u = 'arg';
	var factory_1$2F = factory$2F;

	var arg = {
		name: name$2u,
		factory: factory_1$2F
	};

	function factory$2G(type, config, load, typed) {
	  /**
	   * Get the imaginary part of a complex number.
	   * For a complex number `a + bi`, the function returns `b`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.im(x)
	   *
	   * Examples:
	   *
	   *    const a = math.complex(2, 3)
	   *    math.re(a)                     // returns number 2
	   *    math.im(a)                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')) // returns number -5.2
	   *    math.re(math.complex(2.4))     // returns number 0
	   *
	   * See also:
	   *
	   *    re, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
	   */
	  var im = typed('im', {
	    'number': function number(x) {
	      return 0;
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(0);
	    },
	    'Complex': function Complex(x) {
	      return x.im;
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, im);
	    }
	  });
	  im.toTex = {
	    1: "\\Im\\left\\lbrace${args[0]}\\right\\rbrace"
	  };
	  return im;
	}

	var name$2v = 'im';
	var factory_1$2G = factory$2G;

	var im = {
		name: name$2v,
		factory: factory_1$2G
	};

	function factory$2H(type, config, load, typed) {
	  /**
	   * Get the real part of a complex number.
	   * For a complex number `a + bi`, the function returns `a`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.re(x)
	   *
	   * Examples:
	   *
	   *    const a = math.complex(2, 3)
	   *    math.re(a)                     // returns number 2
	   *    math.im(a)                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')) // returns number 0
	   *    math.re(math.complex(2.4))     // returns number 2.4
	   *
	   * See also:
	   *
	   *    im, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The real part of x
	   */
	  var re = typed('re', {
	    'number': function number(x) {
	      return x;
	    },
	    'BigNumber': function BigNumber(x) {
	      return x;
	    },
	    'Complex': function Complex(x) {
	      return x.re;
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, re);
	    }
	  });
	  re.toTex = {
	    1: "\\Re\\left\\lbrace${args[0]}\\right\\rbrace"
	  };
	  return re;
	}

	var name$2w = 're';
	var factory_1$2H = factory$2H;

	var re = {
		name: name$2w,
		factory: factory_1$2H
	};

	var complex$4 = [arg, conj, im, re];

	function factory$2I(type, config, load, typed) {
	  var abs = load(abs$1);
	  var add = load(add$1);
	  var addScalar$1 = load(addScalar);
	  var matrix$1 = load(matrix);
	  var multiply$1 = load(multiply);
	  var multiplyScalar$1 = load(multiplyScalar);
	  var divideScalar$1 = load(divideScalar);
	  var subtract$1 = load(subtract);
	  var smaller$1 = load(smaller);
	  var equalScalar$1 = load(equalScalar);
	  /**
	   * Calculates the point of intersection of two lines in two or three dimensions
	   * and of a line and a plane in three dimensions. The inputs are in the form of
	   * arrays or 1 dimensional matrices. The line intersection functions return null
	   * if the lines do not meet.
	   *
	   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
	   *
	   * Syntax:
	   *
	   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
	   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
	   *
	   * Examples:
	   *
	   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]
	   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]
	   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]
	   *
	   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
	   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
	   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
	   *                              OR Co-efficients of the plane's equation
	   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
	   *                              OR null if the calculation is for line and plane
	   * @return {Array}              Returns the point of intersection of lines/lines-planes
	   */

	  var intersect = typed('intersect', {
	    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {
	      if (!_3d(x)) {
	        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	      }

	      if (!_3d(y)) {
	        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	      }

	      if (!_4d(plane)) {
	        throw new TypeError('Array with 4 numbers expected as third argument');
	      }

	      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
	    },
	    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {
	      if (w.length === 2) {
	        if (!_2d(w)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }

	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
	        }

	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
	        }

	        if (!_2d(z)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');
	        }

	        return _intersect2d(w, x, y, z);
	      } else if (w.length === 3) {
	        if (!_3d(w)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	        }

	        if (!_3d(x)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	        }

	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');
	        }

	        if (!_3d(z)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');
	        }

	        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
	      } else {
	        throw new TypeError('Arrays with two or thee dimensional points expected');
	      }
	    },
	    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {
	      return matrix$1(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
	    },
	    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {
	      // TODO: output matrix type should match input matrix type
	      return matrix$1(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
	    }
	  });

	  function _isNumber(a) {
	    // intersect supports numbers and bignumbers
	    return typeof a === 'number' || type.isBigNumber(a);
	  }

	  function _2d(x) {
	    return x.length === 2 && _isNumber(x[0]) && _isNumber(x[1]);
	  }

	  function _3d(x) {
	    return x.length === 3 && _isNumber(x[0]) && _isNumber(x[1]) && _isNumber(x[2]);
	  }

	  function _4d(x) {
	    return x.length === 4 && _isNumber(x[0]) && _isNumber(x[1]) && _isNumber(x[2]) && _isNumber(x[3]);
	  }

	  function _intersect2d(p1a, p1b, p2a, p2b) {
	    var o1 = p1a;
	    var o2 = p2a;
	    var d1 = subtract$1(o1, p1b);
	    var d2 = subtract$1(o2, p2b);
	    var det = subtract$1(multiplyScalar$1(d1[0], d2[1]), multiplyScalar$1(d2[0], d1[1]));

	    if (smaller$1(abs(det), config.epsilon)) {
	      return null;
	    }

	    var d20o11 = multiplyScalar$1(d2[0], o1[1]);
	    var d21o10 = multiplyScalar$1(d2[1], o1[0]);
	    var d20o21 = multiplyScalar$1(d2[0], o2[1]);
	    var d21o20 = multiplyScalar$1(d2[1], o2[0]);
	    var t = divideScalar$1(addScalar$1(subtract$1(subtract$1(d20o11, d21o10), d20o21), d21o20), det);
	    return add(multiply$1(d1, t), o1);
	  }

	  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {
	    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)
	    var add1 = multiplyScalar$1(subtract$1(a, b), subtract$1(c, d));
	    var add2 = multiplyScalar$1(subtract$1(e, f), subtract$1(g, h));
	    var add3 = multiplyScalar$1(subtract$1(i, j), subtract$1(k, l));
	    return addScalar$1(addScalar$1(add1, add2), add3);
	  }

	  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {
	    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);

	    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);

	    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);

	    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);

	    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);

	    var ta = divideScalar$1(subtract$1(multiplyScalar$1(d1343, d4321), multiplyScalar$1(d1321, d4343)), subtract$1(multiplyScalar$1(d2121, d4343), multiplyScalar$1(d4321, d4321)));
	    var tb = divideScalar$1(addScalar$1(d1343, multiplyScalar$1(ta, d4321)), d4343);
	    var pax = addScalar$1(x1, multiplyScalar$1(ta, subtract$1(x2, x1)));
	    var pay = addScalar$1(y1, multiplyScalar$1(ta, subtract$1(y2, y1)));
	    var paz = addScalar$1(z1, multiplyScalar$1(ta, subtract$1(z2, z1)));
	    var pbx = addScalar$1(x3, multiplyScalar$1(tb, subtract$1(x4, x3)));
	    var pby = addScalar$1(y3, multiplyScalar$1(tb, subtract$1(y4, y3)));
	    var pbz = addScalar$1(z3, multiplyScalar$1(tb, subtract$1(z4, z3)));

	    if (equalScalar$1(pax, pbx) && equalScalar$1(pay, pby) && equalScalar$1(paz, pbz)) {
	      return [pax, pay, paz];
	    } else {
	      return null;
	    }
	  }

	  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {
	    var x1x = multiplyScalar$1(x1, x);
	    var x2x = multiplyScalar$1(x2, x);
	    var y1y = multiplyScalar$1(y1, y);
	    var y2y = multiplyScalar$1(y2, y);
	    var z1z = multiplyScalar$1(z1, z);
	    var z2z = multiplyScalar$1(z2, z);
	    var t = divideScalar$1(subtract$1(subtract$1(subtract$1(c, x1x), y1y), z1z), subtract$1(subtract$1(subtract$1(addScalar$1(addScalar$1(x2x, y2y), z2z), x1x), y1y), z1z));
	    var px = addScalar$1(x1, multiplyScalar$1(t, subtract$1(x2, x1)));
	    var py = addScalar$1(y1, multiplyScalar$1(t, subtract$1(y2, y1)));
	    var pz = addScalar$1(z1, multiplyScalar$1(t, subtract$1(z2, z1)));
	    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:
	    //       (a) no intersection,
	    //       (b) line contained in plane
	  }

	  return intersect;
	}

	var name$2x = 'intersect';
	var factory_1$2I = factory$2I;

	var intersect = {
		name: name$2x,
		factory: factory_1$2I
	};

	function factory$2J(type, config, load, typed) {
	  var add = load(addScalar);
	  var subtract$1 = load(subtract);
	  var multiply = load(multiplyScalar);
	  var divide = load(divideScalar);
	  var negate = load(unaryMinus);
	  var sqrt = load(sqrt$1);
	  var abs = load(abs$1);
	  /**
	    * Calculates:
	    *    The eucledian distance between two points in 2 and 3 dimensional spaces.
	    *    Distance between point and a line in 2 and 3 dimensional spaces.
	    *    Pairwise distance between a set of 2D or 3D points
	    * NOTE:
	    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
	    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (xâx0, yây0, zâz0) = t(a, b, c)
	    *
	    * Syntax:
	    *    math.distance([x1, y1], [x2, y2])
	    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
	    *    math.distance([x1, y1, z1], [x2, y2, z2])
	    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
	    *    math.distance([[A], [B], [C]...])
	    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
	    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
	    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
	    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
	    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
	    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
	    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
	    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
	    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
	    *
	    * Examples:
	    *    math.distance([0,0], [4,4])                     // Returns 5.6569
	    *    math.distance(
	    *     {pointOneX: 0, pointOneY: 0},
	    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
	    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
	    *    math.distance(
	    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
	    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
	    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
	    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
	    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
	    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
	    *    math.distance(
	    *     {pointX: 1, pointY: 4},
	    *     {lineOnePtX: 6, lineOnePtY: 3},
	    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
	    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
	    *    math.distance(
	    *     {pointX: 2, pointY: 3, pointZ: 1},
	    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
	    *
	    * @param {Array | Matrix | Object} x    Co-ordinates of first point
	    * @param {Array | Matrix | Object} y    Co-ordinates of second point
	    * @return {Number | BigNumber} Returns the distance from two/three points
	  */

	  var distance = typed('distance', {
	    'Array, Array, Array': function ArrayArrayArray(x, y, z) {
	      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)
	      if (x.length === 2 && y.length === 2 && z.length === 2) {
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }

	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
	        }

	        if (!_2d(z)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');
	        }

	        var m = divide(subtract$1(z[1], z[0]), subtract$1(y[1], y[0]));
	        var xCoeff = multiply(multiply(m, m), y[0]);
	        var yCoeff = negate(multiply(m, y[0]));
	        var constant = x[1];
	        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object, Object': function ObjectObjectObject(x, y, z) {
	      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
	        }

	        if (!_2d(y)) {
	          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');
	        }

	        if (!_2d(z)) {
	          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');
	        }

	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') && y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')) {
	          var m = divide(subtract$1(z.lineTwoPtY, z.lineTwoPtX), subtract$1(y.lineOnePtY, y.lineOnePtX));
	          var xCoeff = multiply(multiply(m, m), y.lineOnePtX);
	          var yCoeff = negate(multiply(m, y.lineOnePtX));
	          var constant = x.pointX;
	          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
	      if (x.length === 2 && y.length === 3) {
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }

	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	        }

	        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
	      } else if (x.length === 3 && y.length === 6) {
	        // Point to Line 3D
	        if (!_3d(x)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	        }

	        if (!_parametricLine(y)) {
	          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');
	        }

	        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
	      } else if (x.length === 2 && y.length === 2) {
	        // Point to Point 2D
	        if (!_2d(x)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');
	        }

	        if (!_2d(y)) {
	          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');
	        }

	        return _distance2d(x[0], x[1], y[0], y[1]);
	      } else if (x.length === 3 && y.length === 3) {
	        // Point to Point 3D
	        if (!_3d(x)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');
	        }

	        if (!_3d(y)) {
	          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');
	        }

	        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object': function ObjectObject(x, y) {
	      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');
	        }

	        if (!_3d(y)) {
	          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');
	        }

	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') && y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('constant')) {
	          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {
	        // Point to Line 3D
	        if (!_3d(x)) {
	          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');
	        }

	        if (!_parametricLine(y)) {
	          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');
	        }

	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') && y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') && y.hasOwnProperty('b') && y.hasOwnProperty('c')) {
	          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {
	        // Point to Point 2D
	        if (!_2d(x)) {
	          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');
	        }

	        if (!_2d(y)) {
	          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');
	        }

	        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')) {
	          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {
	        // Point to Point 3D
	        if (!_3d(x)) {
	          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');
	        }

	        if (!_3d(y)) {
	          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');
	        }

	        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') && y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')) {
	          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
	        } else {
	          throw new TypeError('Key names do not match');
	        }
	      } else {
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Array': function Array(arr) {
	      if (!_pairwise(arr)) {
	        throw new TypeError('Incorrect array format entered for pairwise distance calculation');
	      }

	      return _distancePairwise(arr);
	    }
	  });

	  function _isNumber(a) {
	    // distance supports numbers and bignumbers
	    return typeof a === 'number' || type.isBigNumber(a);
	  }

	  function _2d(a) {
	    // checks if the number of arguments are correct in count and are valid (should be numbers)
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }

	    return _isNumber(a[0]) && _isNumber(a[1]);
	  }

	  function _3d(a) {
	    // checks if the number of arguments are correct in count and are valid (should be numbers)
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }

	    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);
	  }

	  function _parametricLine(a) {
	    if (a.constructor !== Array) {
	      a = _objectToArray(a);
	    }

	    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);
	  }

	  function _objectToArray(o) {
	    var keys = Object.keys(o);
	    var a = [];

	    for (var i = 0; i < keys.length; i++) {
	      a.push(o[keys[i]]);
	    }

	    return a;
	  }

	  function _pairwise(a) {
	    // checks for valid arguments passed to _distancePairwise(Array)
	    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {
	      for (var i in a) {
	        if (a[i].length !== 2 || !_isNumber(a[i][0]) || !_isNumber(a[i][1])) {
	          return false;
	        }
	      }
	    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {
	      for (var _i in a) {
	        if (a[_i].length !== 3 || !_isNumber(a[_i][0]) || !_isNumber(a[_i][1]) || !_isNumber(a[_i][2])) {
	          return false;
	        }
	      }
	    } else {
	      return false;
	    }

	    return true;
	  }

	  function _distancePointLine2D(x, y, a, b, c) {
	    var num = abs(add(add(multiply(a, x), multiply(b, y)), c));
	    var den = sqrt(add(multiply(a, a), multiply(b, b)));
	    var result = divide(num, den);
	    return result;
	  }

	  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {
	    var num = [subtract$1(multiply(subtract$1(y0, y), c), multiply(subtract$1(z0, z), b)), subtract$1(multiply(subtract$1(z0, z), a), multiply(subtract$1(x0, x), c)), subtract$1(multiply(subtract$1(x0, x), b), multiply(subtract$1(y0, y), a))];
	    num = sqrt(add(add(multiply(num[0], num[0]), multiply(num[1], num[1])), multiply(num[2], num[2])));
	    var den = sqrt(add(add(multiply(a, a), multiply(b, b)), multiply(c, c)));
	    var result = divide(num, den);
	    return result;
	  }

	  function _distance2d(x1, y1, x2, y2) {
	    var yDiff = subtract$1(y2, y1);
	    var xDiff = subtract$1(x2, x1);
	    var radicant = add(multiply(yDiff, yDiff), multiply(xDiff, xDiff));
	    var result = sqrt(radicant);
	    return result;
	  }

	  function _distance3d(x1, y1, z1, x2, y2, z2) {
	    var zDiff = subtract$1(z2, z1);
	    var yDiff = subtract$1(y2, y1);
	    var xDiff = subtract$1(x2, x1);
	    var radicant = add(add(multiply(zDiff, zDiff), multiply(yDiff, yDiff)), multiply(xDiff, xDiff));
	    var result = sqrt(radicant);
	    return result;
	  }

	  function _distancePairwise(a) {
	    var result = [];

	    for (var i = 0; i < a.length - 1; i++) {
	      for (var j = i + 1; j < a.length; j++) {
	        if (a[0].length === 2) {
	          result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
	        } else if (a[0].length === 3) {
	          result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
	        }
	      }
	    }

	    return result;
	  }

	  return distance;
	}

	var name$2y = 'distance';
	var factory_1$2J = factory$2J;

	var distance = {
		name: name$2y,
		factory: factory_1$2J
	};

	var geometry = [intersect, distance];

	function factory$2K(type, config, load, typed) {
	  var latex$1 = latex;
	  /**
	   * Logical `not`. Flips boolean value of a given parameter.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.not(x)
	   *
	   * Examples:
	   *
	   *    math.not(2)      // returns false
	   *    math.not(0)      // returns true
	   *    math.not(true)   // returns false
	   *
	   *    a = [2, -7, 0]
	   *    math.not(a)      // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    and, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when input is a zero or empty value.
	   */


	  var not = typed('not', {
	    'number': function number(x) {
	      return !x;
	    },
	    'Complex': function Complex(x) {
	      return x.re === 0 && x.im === 0;
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.isZero() || x.isNaN();
	    },
	    'Unit': function Unit(x) {
	      return x.value !== null ? not(x.value) : true;
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, not);
	    }
	  });
	  not.toTex = {
	    1: latex$1.operators['not'] + "\\left(${args[0]}\\right)"
	  };
	  return not;
	}

	var name$2z = 'not';
	var factory_1$2K = factory$2K;

	var not = {
		name: name$2z,
		factory: factory_1$2K
	};

	function factory$2L(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var zeros$1 = load(zeros);
	  var not$1 = load(not);
	  var algorithm02$1 = load(algorithm02);
	  var algorithm06$1 = load(algorithm06);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.and(x, y)
	   *
	   * Examples:
	   *
	   *    math.and(2, 4)   // returns true
	   *
	   *    a = [2, 0, 0]
	   *    b = [3, 7, 0]
	   *    c = 0
	   *
	   *    math.and(a, b)   // returns [true, false, false]
	   *    math.and(a, c)   // returns [false, false, false]
	   *
	   * See also:
	   *
	   *    not, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when both inputs are defined with a nonzero/nonempty value.
	   */

	  var and = typed('and', {
	    'number, number': function numberNumber(x, y) {
	      return !!(x && y);
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      return and(x.value || 0, y.value || 0);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm06$1(x, y, and, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm02$1(y, x, and, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm02$1(x, y, and, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, and);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return and(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return and(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return and(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      // check scalar
	      if (not$1(y)) {
	        // return zero matrix
	        return zeros$1(x.size(), x.storage());
	      }

	      return algorithm11$1(x, y, and, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      // check scalar
	      if (not$1(y)) {
	        // return zero matrix
	        return zeros$1(x.size(), x.storage());
	      }

	      return algorithm14$1(x, y, and, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      // check scalar
	      if (not$1(x)) {
	        // return zero matrix
	        return zeros$1(x.size(), x.storage());
	      }

	      return algorithm11$1(y, x, and, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      // check scalar
	      if (not$1(x)) {
	        // return zero matrix
	        return zeros$1(x.size(), x.storage());
	      }

	      return algorithm14$1(y, x, and, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return and(matrix$1(x), y).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return and(x, matrix$1(y)).valueOf();
	    }
	  });
	  and.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['and'], "${args[1]}\\right)")
	  };
	  return and;
	}

	var name$2A = 'and';
	var factory_1$2L = factory$2L;

	var and = {
		name: name$2A,
		factory: factory_1$2L
	};

	function factory$2M(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm05$1 = load(algorithm05);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.or(x, y)
	   *
	   * Examples:
	   *
	   *    math.or(2, 4)   // returns true
	   *
	   *    a = [2, 5, 0]
	   *    b = [0, 22, 0]
	   *    c = 0
	   *
	   *    math.or(a, b)   // returns [true, true, false]
	   *    math.or(b, c)   // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    and, not, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
	   */

	  var or = typed('or', {
	    'number, number': function numberNumber(x, y) {
	      return !!(x || y);
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      return or(x.value || 0, y.value || 0);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm05$1(x, y, or);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, or, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, or, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, or);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return or(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return or(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return or(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, or, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, or, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, or, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, or, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, or, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, or, true).valueOf();
	    }
	  });
	  or.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['or'], "${args[1]}\\right)")
	  };
	  return or;
	}

	var name$2B = 'or';
	var factory_1$2M = factory$2M;

	var or = {
		name: name$2B,
		factory: factory_1$2M
	};

	function factory$2N(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.xor(x, y)
	   *
	   * Examples:
	   *
	   *    math.xor(2, 4)   // returns false
	   *
	   *    a = [2, 0, 0]
	   *    b = [2, 7, 0]
	   *    c = 0
	   *
	   *    math.xor(a, b)   // returns [false, true, false]
	   *    math.xor(a, c)   // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    and, not, or
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
	   */

	  var xor = typed('xor', {
	    'number, number': function numberNumber(x, y) {
	      return !!x !== !!y;
	    },
	    'Complex, Complex': function ComplexComplex(x, y) {
	      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      return xor(x.value || 0, y.value || 0);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, xor);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, xor, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, xor, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, xor);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return xor(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return xor(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return xor(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, xor, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, xor, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, xor, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, xor, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, xor, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, xor, true).valueOf();
	    }
	  });
	  xor.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['xor'], "${args[1]}\\right)")
	  };
	  return xor;
	}

	var name$2C = 'xor';
	var factory_1$2N = factory$2N;

	var xor = {
		name: name$2C,
		factory: factory_1$2N
	};

	var logical = [and, not, or, xor];

	var clone$6 = object.clone;







	function factory$2O(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var isInteger = load(isInteger$k);
	  /**
	   * Concatenate two or more matrices.
	   *
	   * Syntax:
	   *
	   *     math.concat(A, B, C, ...)
	   *     math.concat(A, B, C, ..., dim)
	   *
	   * Where:
	   *
	   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
	   *   By default the last dimension of the matrices.
	   *
	   * Examples:
	   *
	   *    const A = [[1, 2], [5, 6]]
	   *    const B = [[3, 4], [7, 8]]
	   *
	   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
	   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
	   *    math.concat('hello', ' ', 'world') // returns 'hello world'
	   *
	   * See also:
	   *
	   *    size, squeeze, subset, transpose
	   *
	   * @param {... Array | Matrix} args     Two or more matrices
	   * @return {Array | Matrix} Concatenated matrix
	   */

	  var concat = typed('concat', {
	    // TODO: change signature to '...Array | Matrix, dim?' when supported
	    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {
	      var i;
	      var len = args.length;
	      var dim = -1; // zero-based dimension

	      var prevDim;
	      var asMatrix = false;
	      var matrices = []; // contains multi dimensional arrays

	      for (i = 0; i < len; i++) {
	        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)

	        if (type.isMatrix(arg)) {
	          asMatrix = true;
	        }

	        if (type.isNumber(arg) || type.isBigNumber(arg)) {
	          if (i !== len - 1) {
	            throw new Error('Dimension must be specified as last argument');
	          } // last argument contains the dimension on which to concatenate


	          prevDim = dim;
	          dim = arg.valueOf(); // change BigNumber to number

	          if (!isInteger(dim)) {
	            throw new TypeError('Integer number expected for dimension');
	          }

	          if (dim < 0 || i > 0 && dim > prevDim) {
	            // TODO: would be more clear when throwing a DimensionError here
	            throw new IndexError_1(dim, prevDim + 1);
	          }
	        } else {
	          // this is a matrix or array
	          var m = clone$6(arg).valueOf();
	          var size = array.size(m);
	          matrices[i] = m;
	          prevDim = dim;
	          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions

	          if (i > 0 && dim !== prevDim) {
	            throw new DimensionError_1(prevDim + 1, dim + 1);
	          }
	        }
	      }

	      if (matrices.length === 0) {
	        throw new SyntaxError('At least one matrix expected');
	      }

	      var res = matrices.shift();

	      while (matrices.length) {
	        res = _concat(res, matrices.shift(), dim, 0);
	      }

	      return asMatrix ? matrix$1(res) : res;
	    },
	    '...string': function string(args) {
	      return args.join('');
	    }
	  });
	  concat.toTex = undefined; // use default template

	  return concat;
	}
	/**
	 * Recursively concatenate two matrices.
	 * The contents of the matrices is not cloned.
	 * @param {Array} a             Multi dimensional array
	 * @param {Array} b             Multi dimensional array
	 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
	 * @param {number} dim          The current dim (zero-based)
	 * @return {Array} c            The concatenated matrix
	 * @private
	 */


	function _concat(a, b, concatDim, dim) {
	  if (dim < concatDim) {
	    // recurse into next dimension
	    if (a.length !== b.length) {
	      throw new DimensionError_1(a.length, b.length);
	    }

	    var c = [];

	    for (var i = 0; i < a.length; i++) {
	      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
	    }

	    return c;
	  } else {
	    // concatenate this dimension
	    return a.concat(b);
	  }
	}

	var name$2D = 'concat';
	var factory_1$2O = factory$2O;

	var concat = {
		name: name$2D,
		factory: factory_1$2O
	};

	function factory$2P(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var subtract$1 = load(subtract);
	  var multiply$1 = load(multiply);
	  /**
	   * Calculate the cross product for two vectors in three dimensional space.
	   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
	   * as:
	   *
	   *    cross(A, B) = [
	   *      a2 * b3 - a3 * b2,
	   *      a3 * b1 - a1 * b3,
	   *      a1 * b2 - a2 * b1
	   *    ]
	   *
	   * If one of the input vectors has a dimension greater than 1, the output
	   * vector will be a 1x3 (2-dimensional) matrix.
	   *
	   * Syntax:
	   *
	   *    math.cross(x, y)
	   *
	   * Examples:
	   *
	   *    math.cross([1, 1, 0],   [0, 1, 1])       // Returns [1, -1, 1]
	   *    math.cross([3, -3, 1],  [4, 9, 2])       // Returns [-15, -2, 39]
	   *    math.cross([2, 3, 4],   [5, 6, 7])       // Returns [-3, 6, -3]
	   *    math.cross([[1, 2, 3]], [[4], [5], [6]]) // Returns [[-3, 6, -3]]
	   *
	   * See also:
	   *
	   *    dot, multiply
	   *
	   * @param  {Array | Matrix} x   First vector
	   * @param  {Array | Matrix} y   Second vector
	   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
	   */

	  var cross = typed('cross', {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return matrix$1(_cross(x.toArray(), y.toArray()));
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      return matrix$1(_cross(x.toArray(), y));
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return matrix$1(_cross(x, y.toArray()));
	    },
	    'Array, Array': _cross
	  });
	  cross.toTex = {
	    2: "\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)"
	  };
	  return cross;
	  /**
	   * Calculate the cross product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {Array} Returns the cross product of x and y
	   * @private
	   */

	  function _cross(x, y) {
	    var highestDimension = Math.max(array.size(x).length, array.size(y).length);
	    x = array.squeeze(x);
	    y = array.squeeze(y);
	    var xSize = array.size(x);
	    var ySize = array.size(y);

	    if (xSize.length !== 1 || ySize.length !== 1 || xSize[0] !== 3 || ySize[0] !== 3) {
	      throw new RangeError('Vectors with length 3 expected ' + '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
	    }

	    var product = [subtract$1(multiply$1(x[1], y[2]), multiply$1(x[2], y[1])), subtract$1(multiply$1(x[2], y[0]), multiply$1(x[0], y[2])), subtract$1(multiply$1(x[0], y[1]), multiply$1(x[1], y[0]))];

	    if (highestDimension > 1) {
	      return [product];
	    } else {
	      return product;
	    }
	  }
	}

	var name$2E = 'cross';
	var factory_1$2P = factory$2P;

	var cross = {
		name: name$2E,
		factory: factory_1$2P
	};

	function factory$2Q(type, config, load, typed) {
	  var transpose$1 = load(transpose);
	  var conj$1 = load(conj);

	  var latex$1 = latex;
	  /**
	   * Transpose and complex conjugate a matrix. All values of the matrix are
	   * reflected over its main diagonal and then the complex conjugate is
	   * taken. This is equivalent to complex conjugation for scalars and
	   * vectors.
	   *
	   * Syntax:
	   *
	   *     math.ctranspose(x)
	   *
	   * Examples:
	   *
	   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]
	   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]
	   *
	   * See also:
	   *
	   *     transpose, diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be ctransposed
	   * @return {Array | Matrix}   The ctransposed matrix
	   */


	  var ctranspose = typed('ctranspose', {
	    'any': function any(x) {
	      return conj$1(transpose$1(x));
	    }
	  });
	  ctranspose.toTex = {
	    1: "\\left(${args[0]}\\right)".concat(latex$1.operators['ctranspose'])
	  };
	  return ctranspose;
	}

	var name$2F = 'ctranspose';
	var factory_1$2Q = factory$2Q;

	var ctranspose = {
		name: name$2F,
		factory: factory_1$2Q
	};

	var isInteger$l = number.isInteger;

	function factory$2R(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Create a diagonal matrix or retrieve the diagonal of a matrix
	   *
	   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
	   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
	   * When k is positive, the values are placed on the super diagonal.
	   * When k is negative, the values are placed on the sub diagonal.
	   *
	   * Syntax:
	   *
	   *     math.diag(X)
	   *     math.diag(X, format)
	   *     math.diag(X, k)
	   *     math.diag(X, k, format)
	   *
	   * Examples:
	   *
	   *     // create a diagonal matrix
	   *     math.diag([1, 2, 3])      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *     math.diag([1, 2, 3], 1)   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
	   *     math.diag([1, 2, 3], -1)  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *
	   *    // retrieve the diagonal from a matrix
	   *    const a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
	   *    math.diag(a)   // returns [1, 5, 9]
	   *
	   * See also:
	   *
	   *     ones, zeros, identity
	   *
	   * @param {Matrix | Array} x          A two dimensional matrix or a vector
	   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
	   *                                    in or retrieved.
	   * @param {string} [format='dense']   The matrix storage format.
	   *
	   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
	   */

	  var diag = typed('diag', {
	    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
	    'Array': function Array(x) {
	      return _diag(x, 0, array.size(x), null);
	    },
	    'Array, number': function ArrayNumber(x, k) {
	      return _diag(x, k, array.size(x), null);
	    },
	    'Array, BigNumber': function ArrayBigNumber(x, k) {
	      return _diag(x, k.toNumber(), array.size(x), null);
	    },
	    'Array, string': function ArrayString(x, format) {
	      return _diag(x, 0, array.size(x), format);
	    },
	    'Array, number, string': function ArrayNumberString(x, k, format) {
	      return _diag(x, k, array.size(x), format);
	    },
	    'Array, BigNumber, string': function ArrayBigNumberString(x, k, format) {
	      return _diag(x, k.toNumber(), array.size(x), format);
	    },
	    'Matrix': function Matrix(x) {
	      return _diag(x, 0, x.size(), x.storage());
	    },
	    'Matrix, number': function MatrixNumber(x, k) {
	      return _diag(x, k, x.size(), x.storage());
	    },
	    'Matrix, BigNumber': function MatrixBigNumber(x, k) {
	      return _diag(x, k.toNumber(), x.size(), x.storage());
	    },
	    'Matrix, string': function MatrixString(x, format) {
	      return _diag(x, 0, x.size(), format);
	    },
	    'Matrix, number, string': function MatrixNumberString(x, k, format) {
	      return _diag(x, k, x.size(), format);
	    },
	    'Matrix, BigNumber, string': function MatrixBigNumberString(x, k, format) {
	      return _diag(x, k.toNumber(), x.size(), format);
	    }
	  });
	  diag.toTex = undefined; // use default template

	  return diag;
	  /**
	   * Creeate diagonal matrix from a vector or vice versa
	   * @param {Array | Matrix} x
	   * @param {number} k
	   * @param {string} format Storage format for matrix. If null,
	   *                          an Array is returned
	   * @returns {Array | Matrix}
	   * @private
	   */

	  function _diag(x, k, size, format) {
	    if (!isInteger$l(k)) {
	      throw new TypeError('Second parameter in function diag must be an integer');
	    }

	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0; // check dimensions

	    switch (size.length) {
	      case 1:
	        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);

	      case 2:
	        return _getDiagonal(x, k, format, size, kSub, kSuper);
	    }

	    throw new RangeError('Matrix for function diag must be 2 dimensional');
	  }

	  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
	    // matrix size
	    var ms = [l + kSub, l + kSuper]; // get matrix constructor

	    var F = type.Matrix.storage(format || 'dense'); // create diagonal matrix

	    var m = F.diagonal(ms, x, k); // check we need to return a matrix

	    return format !== null ? m : m.valueOf();
	  }

	  function _getDiagonal(x, k, format, s, kSub, kSuper) {
	    // check x is a Matrix
	    if (type.isMatrix(x)) {
	      // get diagonal matrix
	      var dm = x.diagonal(k); // check we need to return a matrix

	      if (format !== null) {
	        // check we need to change matrix format
	        if (format !== dm.storage()) {
	          return matrix$1(dm, format);
	        }

	        return dm;
	      }

	      return dm.valueOf();
	    } // vector size


	    var n = Math.min(s[0] - kSub, s[1] - kSuper); // diagonal values

	    var vector = []; // loop diagonal

	    for (var i = 0; i < n; i++) {
	      vector[i] = x[i + kSub][i + kSuper];
	    } // check we need to return a matrix


	    return format !== null ? matrix$1(vector) : vector;
	  }
	}

	var name$2G = 'diag';
	var factory_1$2R = factory$2R;

	var diag = {
		name: name$2G,
		factory: factory_1$2R
	};

	var size$1 = array.size;

	function factory$2S(type, config, load, typed) {
	  var add = load(add$1);
	  var multiply$1 = load(multiply);
	  /**
	   * Calculate the dot product of two vectors. The dot product of
	   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
	   *
	   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
	   *
	   * Syntax:
	   *
	   *    math.dot(x, y)
	   *
	   * Examples:
	   *
	   *    math.dot([2, 4, 1], [2, 2, 3])       // returns number 15
	   *    math.multiply([2, 4, 1], [2, 2, 3])  // returns number 15
	   *
	   * See also:
	   *
	   *    multiply, cross
	   *
	   * @param  {Array | Matrix} x     First vector
	   * @param  {Array | Matrix} y     Second vector
	   * @return {number}               Returns the dot product of `x` and `y`
	   */

	  var dot = typed('dot', {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return _dot(x.toArray(), y.toArray());
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      return _dot(x.toArray(), y);
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return _dot(x, y.toArray());
	    },
	    'Array, Array': _dot
	  });
	  dot.toTex = {
	    2: "\\left(${args[0]}\\cdot${args[1]}\\right)"
	  };
	  return dot;
	  /**
	   * Calculate the dot product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {number} Returns the dot product of x and y
	   * @private
	   */
	  // TODO: double code with math.multiply

	  function _dot(x, y) {
	    var xSize = size$1(x);
	    var ySize = size$1(y);
	    var len = xSize[0];
	    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message

	    if (xSize[0] !== ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
	    if (len === 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
	    var prod = 0;

	    for (var i = 0; i < len; i++) {
	      prod = add(prod, multiply$1(x[i], y[i]));
	    }

	    return prod;
	  }
	}

	var name$2H = 'dot';
	var factory_1$2S = factory$2S;

	var dot = {
		name: name$2H,
		factory: factory_1$2S
	};

	function factory$2T(type, config, load, typed) {
	  return function eye() {
	    throw new Error('Function "eye" is renamed to "identity" since mathjs version 5.0.0. ' + 'To keep eye working, create an alias for it using "math.import({eye: math.identity}, {override: true})"');
	  };
	}

	var name$2I = 'eye';
	var factory_1$2T = factory$2T;

	var eye = {
		name: name$2I,
		factory: factory_1$2T
	};

	var format$5 = string.format;

	function factory$2U(type, config, load, typed) {
	  var abs = load(abs$1);
	  var add = load(add$1);
	  var identity$1 = load(identity);
	  var inv$1 = load(inv);
	  var multiply$1 = load(multiply);
	  var SparseMatrix = type.SparseMatrix;
	  /**
	   * Compute the matrix exponential, expm(A) = e^A. The matrix must be square.
	   * Not to be confused with exp(a), which performs element-wise
	   * exponentiation.
	   *
	   * The exponential is calculated using the PadÃ© approximant with scaling and
	   * squaring; see "Nineteen Dubious Ways to Compute the Exponential of a
	   * Matrix," by Moler and Van Loan.
	   *
	   * Syntax:
	   *
	   *     math.expm(x)
	   *
	   * Examples:
	   *
	   *     const A = [[0,2],[0,0]]
	   *     math.expm(A)        // returns [[1,2],[0,1]]
	   *
	   * See also:
	   *
	   *     exp
	   *
	   * @param {Matrix} x  A square Matrix
	   * @return {Matrix}   The exponential of x
	   */

	  var expm = typed('expm', {
	    'Matrix': function Matrix(A) {
	      // Check matrix size
	      var size = A.size();

	      if (size.length !== 2 || size[0] !== size[1]) {
	        throw new RangeError('Matrix must be square ' + '(size: ' + format$5(size) + ')');
	      }

	      var n = size[0]; // Desired accuracy of the approximant (The actual accuracy
	      // will be affected by round-off error)

	      var eps = 1e-15; // The PadÃ© approximant is not so accurate when the values of A
	      // are "large", so scale A by powers of two. Then compute the
	      // exponential, and square the result repeatedly according to
	      // the identity e^A = (e^(A/m))^m
	      // Compute infinity-norm of A, ||A||, to see how "big" it is

	      var infNorm = infinityNorm(A); // Find the optimal scaling factor and number of terms in the
	      // PadÃ© approximant to reach the desired accuracy

	      var params = findParams(infNorm, eps);
	      var q = params.q;
	      var j = params.j; // The Pade approximation to e^A is:
	      // Rqq(A) = Dqq(A) ^ -1 * Nqq(A)
	      // where
	      // Nqq(A) = sum(i=0, q, (2q-i)!p! / [ (2q)!i!(q-i)! ] A^i
	      // Dqq(A) = sum(i=0, q, (2q-i)!q! / [ (2q)!i!(q-i)! ] (-A)^i
	      // Scale A by 1 / 2^j

	      var Apos = multiply$1(A, Math.pow(2, -j)); // The i=0 term is just the identity matrix

	      var N = identity$1(n);
	      var D = identity$1(n); // Initialization (i=0)

	      var factor = 1; // Initialization (i=1)

	      var AposToI = Apos; // Cloning not necessary

	      var alternate = -1;

	      for (var i = 1; i <= q; i++) {
	        if (i > 1) {
	          AposToI = multiply$1(AposToI, Apos);
	          alternate = -alternate;
	        }

	        factor = factor * (q - i + 1) / ((2 * q - i + 1) * i);
	        N = add(N, multiply$1(factor, AposToI));
	        D = add(D, multiply$1(factor * alternate, AposToI));
	      }

	      var R = multiply$1(inv$1(D), N); // Square j times

	      for (var _i = 0; _i < j; _i++) {
	        R = multiply$1(R, R);
	      }

	      return type.isSparseMatrix(A) ? new SparseMatrix(R) : R;
	    }
	  });

	  function infinityNorm(A) {
	    var n = A.size()[0];
	    var infNorm = 0;

	    for (var i = 0; i < n; i++) {
	      var rowSum = 0;

	      for (var j = 0; j < n; j++) {
	        rowSum += abs(A.get([i, j]));
	      }

	      infNorm = Math.max(rowSum, infNorm);
	    }

	    return infNorm;
	  }
	  /**
	   * Find the best parameters for the Pade approximant given
	   * the matrix norm and desired accuracy. Returns the first acceptable
	   * combination in order of increasing computational load.
	   */


	  function findParams(infNorm, eps) {
	    var maxSearchSize = 30;

	    for (var k = 0; k < maxSearchSize; k++) {
	      for (var q = 0; q <= k; q++) {
	        var j = k - q;

	        if (errorEstimate(infNorm, q, j) < eps) {
	          return {
	            q: q,
	            j: j
	          };
	        }
	      }
	    }

	    throw new Error('Could not find acceptable parameters to compute the matrix exponential (try increasing maxSearchSize in expm.js)');
	  }
	  /**
	   * Returns the estimated error of the Pade approximant for the given
	   * parameters.
	   */


	  function errorEstimate(infNorm, q, j) {
	    var qfac = 1;

	    for (var i = 2; i <= q; i++) {
	      qfac *= i;
	    }

	    var twoqfac = qfac;

	    for (var _i2 = q + 1; _i2 <= 2 * q; _i2++) {
	      twoqfac *= _i2;
	    }

	    var twoqp1fac = twoqfac * (2 * q + 1);
	    return 8.0 * Math.pow(infNorm / Math.pow(2, j), 2 * q) * qfac * qfac / (twoqfac * twoqp1fac);
	  }

	  expm.toTex = {
	    1: "\\exp\\left(${args[0]}\\right)"
	  };
	  return expm;
	}

	var name$2J = 'expm';
	var factory_1$2U = factory$2U;

	var expm = {
		name: name$2J,
		factory: factory_1$2U
	};

	var filter = array.filter;

	var filterRegExp = array.filterRegExp;

	var maxArgumentCount$1 = _function.maxArgumentCount;

	function factory$2V(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Filter the items in an array or one dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.filter(x, test)
	   *
	   * Examples:
	   *
	   *    function isPositive (x) {
	   *      return x > 0
	   *    }
	   *    math.filter([6, -2, -1, 4, 3], isPositive) // returns [6, 4, 3]
	   *
	   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/) // returns ["23", "100", "55"]
	   *
	   * See also:
	   *
	   *    forEach, map, sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
	   * @param {Function | RegExp} test
	   *        A function or regular expression to test items.
	   *        All entries for which `test` returns true are returned.
	   *        When `test` is a function, it is invoked with three parameters:
	   *        the value of the element, the index of the element, and the
	   *        matrix/array being traversed. The function must return a boolean.
	   * @return {Matrix | Array} Returns the filtered matrix.
	   */

	  var filter = typed('filter', {
	    'Array, function': _filterCallback,
	    'Matrix, function': function MatrixFunction(x, test) {
	      return matrix$1(_filterCallback(x.toArray(), test));
	    },
	    'Array, RegExp': filterRegExp,
	    'Matrix, RegExp': function MatrixRegExp(x, test) {
	      return matrix$1(filterRegExp(x.toArray(), test));
	    }
	  });
	  filter.toTex = undefined; // use default template

	  return filter;
	}
	/**
	 * Filter values in a callback given a callback function
	 * @param {Array} x
	 * @param {Function} callback
	 * @return {Array} Returns the filtered array
	 * @private
	 */


	function _filterCallback(x, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount$1(callback);
	  return filter(x, function (value, index, array) {
	    // invoke the callback function with the right number of arguments
	    if (args === 1) {
	      return callback(value);
	    } else if (args === 2) {
	      return callback(value, [index]);
	    } else {
	      // 3 or -1
	      return callback(value, [index], array);
	    }
	  });
	}

	var name$2K = 'filter';
	var factory_1$2V = factory$2V;

	var filter_1 = {
		name: name$2K,
		factory: factory_1$2V
	};

	var clone$7 = object.clone;

	var _flatten = array.flatten;

	function factory$2W(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Flatten a multi dimensional matrix into a single dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.flatten(x)
	   *
	   * Examples:
	   *
	   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]
	   *
	   * See also:
	   *
	   *    concat, resize, size, squeeze
	   *
	   * @param {Matrix | Array} x   Matrix to be flattened
	   * @return {Matrix | Array} Returns the flattened matrix
	   */

	  var flatten = typed('flatten', {
	    'Array': function Array(x) {
	      return _flatten(clone$7(x));
	    },
	    'Matrix': function Matrix(x) {
	      var flat = _flatten(clone$7(x.toArray())); // TODO: return the same matrix type as x


	      return matrix$1(flat);
	    }
	  });
	  flatten.toTex = undefined; // use default template

	  return flatten;
	}

	var name$2L = 'flatten';
	var factory_1$2W = factory$2W;

	var flatten$1 = {
		name: name$2L,
		factory: factory_1$2W
	};

	var maxArgumentCount$2 = _function.maxArgumentCount;

	var forEach$2 = array.forEach;

	function factory$2X(type, config, load, typed) {
	  /**
	   * Iterate over all elements of a matrix/array, and executes the given callback function.
	   *
	   * Syntax:
	   *
	   *    math.forEach(x, callback)
	   *
	   * Examples:
	   *
	   *    math.forEach([1, 2, 3], function(value) {
	   *      console.log(value)
	   *    })
	   *    // outputs 1, 2, 3
	   *
	   * See also:
	   *
	   *    filter, map, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix/array being traversed.
	   */
	  var forEach = typed('forEach', {
	    'Array, function': _forEach,
	    'Matrix, function': function MatrixFunction(x, callback) {
	      return x.forEach(callback);
	    }
	  });
	  forEach.toTex = undefined; // use default template

	  return forEach;
	}
	/**
	 * forEach for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @private
	 */


	function _forEach(array, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount$2(callback);

	  var recurse = function recurse(value, index) {
	    if (Array.isArray(value)) {
	      forEach$2(value, function (child, i) {
	        // we create a copy of the index array and append the new index value
	        recurse(child, index.concat(i));
	      });
	    } else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        callback(value);
	      } else if (args === 2) {
	        callback(value, index);
	      } else {
	        // 3 or -1
	        callback(value, index, array);
	      }
	    }
	  };

	  recurse(array, []);
	}

	var name$2M = 'forEach';
	var factory_1$2X = factory$2X;

	var forEach_1 = {
		name: name$2M,
		factory: factory_1$2X
	};

	var size$2 = array.size;

	function factory$2Y(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var multiplyScalar$1 = load(multiplyScalar);
	  /**
	     * Calculates the kronecker product of 2 matrices or vectors.
	     *
	     * NOTE: If a one dimensional vector / matrix is given, it will be
	     * wrapped so its two dimensions.
	     * See the examples.
	     *
	     * Syntax:
	     *
	     *    math.kron(x, y)
	     *
	     * Examples:
	     *
	     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
	     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
	     *
	     *    math.kron([1,1], [2,3,4])
	     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
	     *
	     * See also:
	     *
	     *    multiply, dot, cross
	     *
	     * @param  {Array | Matrix} x     First vector
	     * @param  {Array | Matrix} y     Second vector
	     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
	     */

	  var kron = typed('kron', {
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      return matrix$1(_kron(x.toArray(), y.toArray()));
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      return matrix$1(_kron(x.toArray(), y));
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return matrix$1(_kron(x, y.toArray()));
	    },
	    'Array, Array': _kron
	  });
	  return kron;
	  /**
	     * Calculate the kronecker product of two matrices / vectors
	     * @param {Array} a  First vector
	     * @param {Array} b  Second vector
	     * @returns {Array} Returns the kronecker product of x and y
	     * @private
	     */

	  function _kron(a, b) {
	    // Deal with the dimensions of the matricies.
	    if (size$2(a).length === 1) {
	      // Wrap it in a 2D Matrix
	      a = [a];
	    }

	    if (size$2(b).length === 1) {
	      // Wrap it in a 2D Matrix
	      b = [b];
	    }

	    if (size$2(a).length > 2 || size$2(b).length > 2) {
	      throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' + '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
	    }

	    var t = [];
	    var r = [];
	    return a.map(function (a) {
	      return b.map(function (b) {
	        r = [];
	        t.push(r);
	        return a.map(function (y) {
	          return b.map(function (x) {
	            return r.push(multiplyScalar$1(y, x));
	          });
	        });
	      });
	    }) && t;
	  }
	}

	var name$2N = 'kron';
	var factory_1$2Y = factory$2Y;

	var kron = {
		name: name$2N,
		factory: factory_1$2Y
	};

	var maxArgumentCount$3 = _function.maxArgumentCount;

	function factory$2Z(type, config, load, typed) {
	  /**
	   * Create a new matrix or array with the results of the callback function executed on
	   * each entry of the matrix/array.
	   *
	   * Syntax:
	   *
	   *    math.map(x, callback)
	   *
	   * Examples:
	   *
	   *    math.map([1, 2, 3], function(value) {
	   *      return value * value
	   *    })  // returns [1, 4, 9]
	   *
	   * See also:
	   *
	   *    filter, forEach, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the matrix being traversed.
	   * @return {Matrix | array}     Transformed map of x
	   */
	  var map = typed('map', {
	    'Array, function': _map,
	    'Matrix, function': function MatrixFunction(x, callback) {
	      return x.map(callback);
	    }
	  });
	  map.toTex = undefined; // use default template

	  return map;
	}
	/**
	 * Map for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @return {Array}
	 * @private
	 */


	function _map(array, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount$3(callback);

	  var recurse = function recurse(value, index) {
	    if (Array.isArray(value)) {
	      return value.map(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i));
	      });
	    } else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        return callback(value);
	      } else if (args === 2) {
	        return callback(value, index);
	      } else {
	        // 3 or -1
	        return callback(value, index, array);
	      }
	    }
	  };

	  return recurse(array, []);
	}

	var name$2O = 'map';
	var factory_1$2Z = factory$2Z;

	var map$5 = {
		name: name$2O,
		factory: factory_1$2Z
	};

	var isInteger$m = number.isInteger;

	var resize$1 = array.resize;

	function factory$2_(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Create a matrix filled with ones. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.ones(m)
	   *    math.ones(m, format)
	   *    math.ones(m, n)
	   *    math.ones(m, n, format)
	   *    math.ones([m, n])
	   *    math.ones([m, n], format)
	   *    math.ones([m, n, p, ...])
	   *    math.ones([m, n, p, ...], format)
	   *
	   * Examples:
	   *
	   *    math.ones(3)                   // returns [1, 1, 1]
	   *    math.ones(3, 2)                // returns [[1, 1], [1, 1], [1, 1]]
	   *    math.ones(3, 2, 'dense')       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
	   *
	   *    const A = [[1, 2, 3], [4, 5, 6]]
	   *    math.ones(math.size(A))       // returns [[1, 1, 1], [1, 1, 1]]
	   *
	   * See also:
	   *
	   *    zeros, identity, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix | number}  A matrix filled with ones
	   */

	  var ones = typed('ones', {
	    '': function _() {
	      return config.matrix === 'Array' ? _ones([]) : _ones([], 'default');
	    },
	    // math.ones(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function numberBigNumberString(size) {
	      var last = size[size.length - 1];

	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _ones(size, format);
	      } else if (config.matrix === 'Array') {
	        return _ones(size);
	      } else {
	        return _ones(size, 'default');
	      }
	    },
	    'Array': _ones,
	    'Matrix': function Matrix(size) {
	      var format = size.storage();
	      return _ones(size.valueOf(), format);
	    },
	    'Array | Matrix, string': function ArrayMatrixString(size, format) {
	      return _ones(size.valueOf(), format);
	    }
	  });
	  ones.toTex = undefined; // use default template

	  return ones;
	  /**
	   * Create an Array or Matrix with ones
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */

	  function _ones(size, format) {
	    var hasBigNumbers = _normalize(size);

	    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;

	    _validate(size);

	    if (format) {
	      // return a matrix
	      var m = matrix$1(format);

	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }

	      return m;
	    } else {
	      // return an Array
	      var arr = [];

	      if (size.length > 0) {
	        return resize$1(arr, size, defaultValue);
	      }

	      return arr;
	    }
	  } // replace BigNumbers with numbers, returns true if size contained BigNumbers


	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (type.isBigNumber(value)) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  } // validate arguments


	  function _validate(size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger$m(value) || value < 0) {
	        throw new Error('Parameters in function ones must be positive integers');
	      }
	    });
	  }
	}

	var name$2P = 'ones';
	var factory_1$2_ = factory$2_;

	var ones = {
		name: name$2P,
		factory: factory_1$2_
	};

	function factory$2$(type, config, load, typed) {
	  /**
	   * Test whether a value is NaN (not a number).
	   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNaN(x)
	   *
	   * Examples:
	   *
	   *    math.isNaN(3)                     // returns false
	   *    math.isNaN(NaN)                   // returns true
	   *    math.isNaN(0)                     // returns false
	   *    math.isNaN(math.bignumber(NaN))   // returns true
	   *    math.isNaN(math.bignumber(0))     // returns false
	   *    math.isNaN(math.fraction(-2, 5))  // returns false
	   *    math.isNaN('-2')                  // returns false
	   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isNegative, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is NaN.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNaN = typed('isNaN', {
	    'number': function number(x) {
	      return Number.isNaN(x);
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.isNaN();
	    },
	    'Fraction': function Fraction(x) {
	      return false;
	    },
	    'Complex': function Complex(x) {
	      return x.isNaN();
	    },
	    'Unit': function Unit(x) {
	      return Number.isNaN(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, Number.isNaN);
	    }
	  });
	  return isNaN;
	}

	var name$2Q = 'isNaN';
	var factory_1$2$ = factory$2$;

	var _isNaN = {
		name: name$2Q,
		factory: factory_1$2$
	};

	var nearlyEqual$6 = number.nearlyEqual;



	function factory$30(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm05$1 = load(algorithm05);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
	   *
	   * x and y are considered equal when the relative difference between x and y
	   * is smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.compare(x, y)
	   *
	   * Examples:
	   *
	   *    math.compare(6, 1)           // returns 1
	   *    math.compare(2, 3)           // returns -1
	   *    math.compare(7, 7)           // returns 0
	   *    math.compare('10', '2')      // returns 1
	   *    math.compare('1000', '1e3')  // returns 0
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('40 mm')
	   *    math.compare(a, b)           // returns 1
	   *
	   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText
	   *
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:
	   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.
	   */

	  var compare = typed('compare', {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x === y ? 0 : x > y ? 1 : -1;
	    },
	    'number, number': function numberNumber(x, y) {
	      return x === y || nearlyEqual$6(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.eq(y) || nearlyEqual(x, y, config.epsilon) ? new type.BigNumber(0) : new type.BigNumber(x.cmp(y));
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return new type.Fraction(x.compare(y));
	    },
	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }

	      return compare(x.value, y.value);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm05$1(x, y, compare);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, compare, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, compare, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, compare);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return compare(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return compare(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return compare(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, compare, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, compare, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, compare, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, compare, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, compare, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, compare, true).valueOf();
	    }
	  });
	  compare.toTex = undefined; // use default template

	  return compare;
	}

	var name$2R = 'compare';
	var factory_1$30 = factory$30;

	var compare = {
		name: name$2R,
		factory: factory_1$30
	};

	var isInteger$n = number.isInteger;

	function factory$31(type, config, load, typed) {
	  var isNumeric$1 = load(isNumeric);
	  var isNaN = load(_isNaN);
	  var asc = load(compare);

	  function desc(a, b) {
	    return -asc(a, b);
	  }
	  /**
	   * Partition-based selection of an array or 1D matrix.
	   * Will find the kth smallest value, and mutates the input array.
	   * Uses Quickselect.
	   *
	   * Syntax:
	   *
	   *    math.partitionSelect(x, k)
	   *    math.partitionSelect(x, k, compare)
	   *
	   * Examples:
	   *
	   *    math.partitionSelect([5, 10, 1], 2)           // returns 10
	   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1) // returns 'B'
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length
	   *    }
	   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength) // returns 'Langdon'
	   *
	   * See also:
	   *
	   *    sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Number} k            The kth smallest value to be retrieved zero-based index
	   * @param {Function | 'asc' | 'desc'} [compare='asc']
	   *        An optional comparator function. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {*} Returns the kth lowest value.
	   */


	  return typed('partitionSelect', {
	    'Array | Matrix, number': function ArrayMatrixNumber(x, k) {
	      return _partitionSelect(x, k, asc);
	    },
	    'Array | Matrix, number, string': function ArrayMatrixNumberString(x, k, compare) {
	      if (compare === 'asc') {
	        return _partitionSelect(x, k, asc);
	      } else if (compare === 'desc') {
	        return _partitionSelect(x, k, desc);
	      } else {
	        throw new Error('Compare string must be "asc" or "desc"');
	      }
	    },
	    'Array | Matrix, number, function': _partitionSelect
	  });

	  function _partitionSelect(x, k, compare) {
	    if (!isInteger$n(k) || k < 0) {
	      throw new Error('k must be a non-negative integer');
	    }

	    if (type.isMatrix(x)) {
	      var size = x.size();

	      if (size.length > 1) {
	        throw new Error('Only one dimensional matrices supported');
	      }

	      return quickSelect(x.valueOf(), k, compare);
	    }

	    if (Array.isArray(x)) {
	      return quickSelect(x, k, compare);
	    }
	  }
	  /**
	   * Quickselect algorithm.
	   * Code adapted from:
	   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
	   *
	   * @param {Array} arr
	   * @param {Number} k
	   * @param {Function} compare
	   * @private
	   */


	  function quickSelect(arr, k, compare) {
	    if (k >= arr.length) {
	      throw new Error('k out of bounds');
	    } // check for NaN values since these can cause an infinite while loop


	    for (var i = 0; i < arr.length; i++) {
	      if (isNumeric$1(arr[i]) && isNaN(arr[i])) {
	        return arr[i]; // return NaN
	      }
	    }

	    var from = 0;
	    var to = arr.length - 1; // if from == to we reached the kth element

	    while (from < to) {
	      var r = from;
	      var w = to;
	      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from]; // stop if the reader and writer meets

	      while (r < w) {
	        // arr[r] >= pivot
	        if (compare(arr[r], pivot) >= 0) {
	          // put the large values at the end
	          var tmp = arr[w];
	          arr[w] = arr[r];
	          arr[r] = tmp;
	          --w;
	        } else {
	          // the value is smaller than the pivot, skip
	          ++r;
	        }
	      } // if we stepped up (r++) we need to step one down (arr[r] > pivot)


	      if (compare(arr[r], pivot) > 0) {
	        --r;
	      } // the r pointer is on the end of the first k elements


	      if (k <= r) {
	        to = r;
	      } else {
	        from = r + 1;
	      }
	    }

	    return arr[k];
	  }
	}

	var name$2S = 'partitionSelect';
	var factory_1$31 = factory$31;

	var partitionSelect = {
		name: name$2S,
		factory: factory_1$31
	};

	function factory$32(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var ZERO = new type.BigNumber(0);
	  var ONE = new type.BigNumber(1);
	  /**
	   * Create an array from a range.
	   * By default, the range end is excluded. This can be customized by providing
	   * an extra parameter `includeEnd`.
	   *
	   * Syntax:
	   *
	   *     math.range(str [, includeEnd])               // Create a range from a string,
	   *                                                  // where the string contains the
	   *                                                  // start, optional step, and end,
	   *                                                  // separated by a colon.
	   *     math.range(start, end [, includeEnd])        // Create a range with start and
	   *                                                  // end and a step size of 1.
	   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
	   *                                                  // and end.
	   *
	   * Where:
	   *
	   * - `str: string`
	   *   A string 'start:end' or 'start:step:end'
	   * - `start: {number | BigNumber}`
	   *   Start of the range
	   * - `end: number | BigNumber`
	   *   End of the range, excluded by default, included when parameter includeEnd=true
	   * - `step: number | BigNumber`
	   *   Step size. Default value is 1.
	   * - `includeEnd: boolean`
	   *   Option to specify whether to include the end or not. False by default.
	   *
	   * Examples:
	   *
	   *     math.range(2, 6)        // [2, 3, 4, 5]
	   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]
	   *     math.range('2:1:6')     // [2, 3, 4, 5]
	   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]
	   *
	   * See also:
	   *
	   *     ones, zeros, size, subset
	   *
	   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
	   * @return {Array | Matrix} range
	   */

	  var range = typed('range', {
	    // TODO: simplify signatures when typed-function supports default values and optional arguments
	    // TODO: a number or boolean should not be converted to string here
	    'string': _strRange,
	    'string, boolean': _strRange,
	    'number, number': function numberNumber(start, end) {
	      return _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number': function numberNumberNumber(start, end, step) {
	      return _out(_rangeEx(start, end, step));
	    },
	    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {
	      return includeEnd ? _out(_rangeInc(start, end, 1)) : _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {
	      return includeEnd ? _out(_rangeInc(start, end, step)) : _out(_rangeEx(start, end, step));
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {
	      return _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {
	      return _out(_bigRangeEx(start, end, step));
	    },
	    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {
	      return includeEnd ? _out(_bigRangeInc(start, end, ONE)) : _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {
	      return includeEnd ? _out(_bigRangeInc(start, end, step)) : _out(_bigRangeEx(start, end, step));
	    }
	  });
	  range.toTex = undefined; // use default template

	  return range;

	  function _out(arr) {
	    return config.matrix === 'Array' ? arr : matrix$1(arr);
	  }

	  function _strRange(str, includeEnd) {
	    var r = _parse(str);

	    if (!r) {
	      throw new SyntaxError('String "' + str + '" is no valid range');
	    }

	    var fn;

	    if (config.number === 'BigNumber') {
	      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
	      return _out(fn(new type.BigNumber(r.start), new type.BigNumber(r.end), new type.BigNumber(r.step)));
	    } else {
	      fn = includeEnd ? _rangeInc : _rangeEx;
	      return _out(fn(r.start, r.end, r.step));
	    }
	  }
	  /**
	   * Create a range with numbers. End is excluded
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */


	  function _rangeEx(start, end, step) {
	    var array = [];
	    var x = start;

	    if (step > 0) {
	      while (x < end) {
	        array.push(x);
	        x += step;
	      }
	    } else if (step < 0) {
	      while (x > end) {
	        array.push(x);
	        x += step;
	      }
	    }

	    return array;
	  }
	  /**
	   * Create a range with numbers. End is included
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */


	  function _rangeInc(start, end, step) {
	    var array = [];
	    var x = start;

	    if (step > 0) {
	      while (x <= end) {
	        array.push(x);
	        x += step;
	      }
	    } else if (step < 0) {
	      while (x >= end) {
	        array.push(x);
	        x += step;
	      }
	    }

	    return array;
	  }
	  /**
	   * Create a range with big numbers. End is excluded
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */


	  function _bigRangeEx(start, end, step) {
	    var array = [];
	    var x = start;

	    if (step.gt(ZERO)) {
	      while (x.lt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    } else if (step.lt(ZERO)) {
	      while (x.gt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }

	    return array;
	  }
	  /**
	   * Create a range with big numbers. End is included
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */


	  function _bigRangeInc(start, end, step) {
	    var array = [];
	    var x = start;

	    if (step.gt(ZERO)) {
	      while (x.lte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    } else if (step.lt(ZERO)) {
	      while (x.gte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }

	    return array;
	  }
	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @param {string} str
	   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
	   * @private
	   */


	  function _parse(str) {
	    var args = str.split(':'); // number

	    var nums = args.map(function (arg) {
	      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
	      return Number(arg);
	    });
	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });

	    if (invalid) {
	      return null;
	    }

	    switch (nums.length) {
	      case 2:
	        return {
	          start: nums[0],
	          end: nums[1],
	          step: 1
	        };

	      case 3:
	        return {
	          start: nums[0],
	          end: nums[2],
	          step: nums[1]
	        };

	      default:
	        return null;
	    }
	  }
	}

	var name$2T = 'range';
	var factory_1$32 = factory$32;

	var range = {
		name: name$2T,
		factory: factory_1$32
	};

	function factory$33(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var isInteger = load(isInteger$k);
	  /**
	   * Reshape a multi dimensional array to fit the specified dimensions
	   *
	   * Syntax:
	   *
	   *     math.reshape(x, sizes)
	   *
	   * Examples:
	   *
	   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3])
	   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
	   *
	   *     math.reshape([[1, 2], [3, 4]], [1, 4])
	   *     // returns Array  [[1, 2, 3, 4]]
	   *
	   *     math.reshape([[1, 2], [3, 4]], [4])
	   *     // returns Array [1, 2, 3, 4]
	   *
	   *     const x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8])
	   *     math.reshape(x, [2, 2, 2])
	   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
	   *
	   * See also:
	   *
	   *     size, squeeze, resize
	   *
	   * @param {Array | Matrix | *} x  Matrix to be reshaped
	   * @param {number[]} sizes        One dimensional array with integral sizes for
	   *                                each dimension
	   *
	   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
	   *
	   * @throws {TypeError}            If `sizes` does not contain solely integers
	   * @throws {DimensionError}       If the product of the new dimension sizes does
	   *                                not equal that of the old ones
	   */

	  var reshape = typed('reshape', {
	    'Matrix, Array': function MatrixArray(x, sizes) {
	      if (x.reshape) {
	        return x.reshape(sizes);
	      } else {
	        return matrix$1(array.reshape(x.valueOf(), sizes));
	      }
	    },
	    'Array, Array': function ArrayArray(x, sizes) {
	      sizes.forEach(function (size) {
	        if (!isInteger(size)) {
	          throw new TypeError('Invalid size for dimension: ' + size);
	        }
	      });
	      return array.reshape(x, sizes);
	    }
	  });
	  reshape.toTex = undefined; // use default template

	  return reshape;
	}

	var name$2U = 'reshape';
	var factory_1$33 = factory$33;

	var reshape = {
		name: name$2U,
		factory: factory_1$33
	};

	var isInteger$o = number.isInteger;

	var format$6 = string.format;

	var clone$8 = object.clone;



	function factory$34(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Resize a matrix
	   *
	   * Syntax:
	   *
	   *     math.resize(x, size)
	   *     math.resize(x, size, defaultValue)
	   *
	   * Examples:
	   *
	   *     math.resize([1, 2, 3, 4, 5], [3]) // returns Array  [1, 2, 3]
	   *     math.resize([1, 2, 3], [5], 0)    // returns Array  [1, 2, 3, 0, 0]
	   *     math.resize(2, [2, 3], 0)         // returns Matrix [[2, 0, 0], [0, 0, 0]]
	   *     math.resize("hello", [8], "!")    // returns string 'hello!!!'
	   *
	   * See also:
	   *
	   *     size, squeeze, subset, reshape
	   *
	   * @param {Array | Matrix | *} x             Matrix to be resized
	   * @param {Array | Matrix} size              One dimensional array with numbers
	   * @param {number | string} [defaultValue=0] Zero by default, except in
	   *                                           case of a string, in that case
	   *                                           defaultValue = ' '
	   * @return {* | Array | Matrix} A resized clone of matrix `x`
	   */
	  // TODO: rework resize to a typed-function

	  var resize = function resize(x, size, defaultValue) {
	    if (arguments.length !== 2 && arguments.length !== 3) {
	      throw new ArgumentsError_1('resize', arguments.length, 2, 3);
	    }

	    if (type.isMatrix(size)) {
	      size = size.valueOf(); // get Array
	    }

	    if (type.isBigNumber(size[0])) {
	      // convert bignumbers to numbers
	      size = size.map(function (value) {
	        return type.isBigNumber(value) ? value.toNumber() : value;
	      });
	    } // check x is a Matrix


	    if (type.isMatrix(x)) {
	      // use optimized matrix implementation, return copy
	      return x.resize(size, defaultValue, true);
	    }

	    if (typeof x === 'string') {
	      // resize string
	      return _resizeString(x, size, defaultValue);
	    } // check result should be a matrix


	    var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';

	    if (size.length === 0) {
	      // output a scalar
	      while (Array.isArray(x)) {
	        x = x[0];
	      }

	      return clone$8(x);
	    } else {
	      // output an array/matrix
	      if (!Array.isArray(x)) {
	        x = [x];
	      }

	      x = clone$8(x);
	      var res = array.resize(x, size, defaultValue);
	      return asMatrix ? matrix$1(res) : res;
	    }
	  };

	  resize.toTex = undefined; // use default template

	  return resize;
	  /**
	   * Resize a string
	   * @param {string} str
	   * @param {number[]} size
	   * @param {string} [defaultChar=' ']
	   * @private
	   */

	  function _resizeString(str, size, defaultChar) {
	    if (defaultChar !== undefined) {
	      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    } else {
	      defaultChar = ' ';
	    }

	    if (size.length !== 1) {
	      throw new DimensionError_1(size.length, 1);
	    }

	    var len = size[0];

	    if (typeof len !== 'number' || !isInteger$o(len)) {
	      throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format$6(size) + ')');
	    }

	    if (str.length > len) {
	      return str.substring(0, len);
	    } else if (str.length < len) {
	      var res = str;

	      for (var i = 0, ii = len - str.length; i < ii; i++) {
	        res += defaultChar;
	      }

	      return res;
	    } else {
	      return str;
	    }
	  }
	}

	var name$2V = 'resize';
	var factory_1$34 = factory$34;

	var resize$2 = {
		name: name$2V,
		factory: factory_1$34
	};

	function factory$35(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Calculate the size of a matrix or scalar.
	   *
	   * Syntax:
	   *
	   *     math.size(x)
	   *
	   * Examples:
	   *
	   *     math.size(2.3)                  // returns []
	   *     math.size('hello world')        // returns [11]
	   *
	   *     const A = [[1, 2, 3], [4, 5, 6]]
	   *     math.size(A)                    // returns [2, 3]
	   *     math.size(math.range(1,6))      // returns [5]
	   *
	   * See also:
	   *
	   *     resize, squeeze, subset
	   *
	   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
	   * @return {Array | Matrix} A vector with size of `x`.
	   */

	  var size = typed('size', {
	    'Matrix': function Matrix(x) {
	      // TODO: return the same matrix type as the input
	      return matrix$1(x.size());
	    },
	    'Array': array.size,
	    'string': function string(x) {
	      return config.matrix === 'Array' ? [x.length] : matrix$1([x.length]);
	    },
	    'number | Complex | BigNumber | Unit | boolean | null': function numberComplexBigNumberUnitBooleanNull(x) {
	      // scalar
	      return config.matrix === 'Array' ? [] : matrix$1([]);
	    }
	  });
	  size.toTex = undefined; // use default template

	  return size;
	}

	var name$2W = 'size';
	var factory_1$35 = factory$35;

	var size$3 = {
		name: name$2W,
		factory: factory_1$35
	};

	/*
	 * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
	 * Author: Jim Palmer (based on chunking idea from Dave Koelle)
	 */
	/*jshint unused:false */
	var naturalSort = function naturalSort (a, b) {
		var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi,
			sre = /(^[ ]*|[ ]*$)/g,
			dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
			hre = /^0x[0-9a-f]+$/i,
			ore = /^0/,
			i = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },
			// convert all to strings strip whitespace
			x = i(a).replace(sre, '') || '',
			y = i(b).replace(sre, '') || '',
			// chunk/tokenize
			xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
			yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
			// numeric, hex or date detection
			xD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
			yD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,
			oFxNcL, oFyNcL;
		// first try and sort Hex codes or Dates
		if (yD) {
			if ( xD < yD ) { return -1; }
			else if ( xD > yD ) { return 1; }
		}
		// natural sorting through split numeric strings and default strings
		for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
			// find floats not starting with '0', string or 0 if not defined (Clint Priest)
			oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
			oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
			// handle numeric vs string comparison - number < string - (Kyle Adams)
			if (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }
			// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
			else if (typeof oFxNcL !== typeof oFyNcL) {
				oFxNcL += '';
				oFyNcL += '';
			}
			if (oFxNcL < oFyNcL) { return -1; }
			if (oFxNcL > oFyNcL) { return 1; }
		}
		return 0;
	};

	function factory$36(type, config, load, typed) {
	  var getTypeOf = load(_typeof$4);
	  var compare$1 = load(compare);
	  var compareBooleans = compare$1.signatures['boolean,boolean'];
	  /**
	   * Compare two values of any type in a deterministic, natural way.
	   *
	   * For numeric values, the function works the same as `math.compare`.
	   * For types of values that can't be compared mathematically,
	   * the function compares in a natural way.
	   *
	   * For numeric values, x and y are considered equal when the relative
	   * difference between x and y is smaller than the configured epsilon.
	   * The function cannot be used to compare values smaller than
	   * approximately 2.22e-16.
	   *
	   * For Complex numbers, first the real parts are compared. If equal,
	   * the imaginary parts are compared.
	   *
	   * Strings are compared with a natural sorting algorithm, which
	   * orders strings in a "logic" way following some heuristics.
	   * This differs from the function `compare`, which converts the string
	   * into a numeric value and compares that. The function `compareText`
	   * on the other hand compares text lexically.
	   *
	   * Arrays and Matrices are compared value by value until there is an
	   * unequal pair of values encountered. Objects are compared by sorted
	   * keys until the keys or their values are unequal.
	   *
	   * Syntax:
	   *
	   *    math.compareNatural(x, y)
	   *
	   * Examples:
	   *
	   *    math.compareNatural(6, 1)              // returns 1
	   *    math.compareNatural(2, 3)              // returns -1
	   *    math.compareNatural(7, 7)              // returns 0
	   *
	   *    math.compareNatural('10', '2')         // returns 1
	   *    math.compareText('10', '2')            // returns -1
	   *    math.compare('10', '2')                // returns 1
	   *
	   *    math.compareNatural('Answer: 10', 'Answer: 2') // returns 1
	   *    math.compareText('Answer: 10', 'Answer: 2')    // returns -1
	   *    math.compare('Answer: 10', 'Answer: 2')
	   *        // Error: Cannot convert "Answer: 10" to a number
	   *
	   *    const a = math.unit('5 cm')
	   *    const b = math.unit('40 mm')
	   *    math.compareNatural(a, b)              // returns 1
	   *
	   *    const c = math.complex('2 + 3i')
	   *    const d = math.complex('2 + 4i')
	   *    math.compareNatural(c, d)              // returns -1
	   *
	   *    math.compareNatural([1, 2, 4], [1, 2, 3]) // returns 1
	   *    math.compareNatural([1, 2, 3], [1, 2])    // returns 1
	   *    math.compareNatural([1, 5], [1, 2, 3])    // returns 1
	   *    math.compareNatural([1, 2], [1, 2])       // returns 0
	   *
	   *    math.compareNatural({a: 2}, {a: 4})       // returns -1
	   *
	   * See also:
	   *
	   *    compare, compareText
	   *
	   * @param  {*} x First value to compare
	   * @param  {*} y Second value to compare
	   * @return {number} Returns the result of the comparison:
	   *                  1 when x > y, -1 when x < y, and 0 when x == y.
	   */

	  var compareNatural = typed('compareNatural', {
	    'any, any': function anyAny(x, y) {
	      var typeX = getTypeOf(x);
	      var typeY = getTypeOf(y);
	      var c; // numeric types

	      if ((typeX === 'number' || typeX === 'BigNumber' || typeX === 'Fraction') && (typeY === 'number' || typeY === 'BigNumber' || typeY === 'Fraction')) {
	        c = compare$1(x, y);

	        if (c.toString() !== '0') {
	          // c can be number, BigNumber, or Fraction
	          return c > 0 ? 1 : -1; // return a number
	        } else {
	          return naturalSort(typeX, typeY);
	        }
	      } // matrix types


	      if (typeX === 'Array' || typeX === 'Matrix' || typeY === 'Array' || typeY === 'Matrix') {
	        c = compareMatricesAndArrays(x, y);

	        if (c !== 0) {
	          return c;
	        } else {
	          return naturalSort(typeX, typeY);
	        }
	      } // in case of different types, order by name of type, i.e. 'BigNumber' < 'Complex'


	      if (typeX !== typeY) {
	        return naturalSort(typeX, typeY);
	      }

	      if (typeX === 'Complex') {
	        return compareComplexNumbers(x, y);
	      }

	      if (typeX === 'Unit') {
	        if (x.equalBase(y)) {
	          return compareNatural(x.value, y.value);
	        } // compare by units


	        return compareArrays(x.formatUnits(), y.formatUnits());
	      }

	      if (typeX === 'boolean') {
	        return compareBooleans(x, y);
	      }

	      if (typeX === 'string') {
	        return naturalSort(x, y);
	      }

	      if (typeX === 'Object') {
	        return compareObjects(x, y);
	      }

	      if (typeX === 'null') {
	        return 0;
	      }

	      if (typeX === 'undefined') {
	        return 0;
	      } // this should not occur...


	      throw new TypeError('Unsupported type of value "' + typeX + '"');
	    }
	  });
	  compareNatural.toTex = undefined; // use default template

	  /**
	   * Compare mixed matrix/array types, by converting to same-shaped array.
	   * This comparator is non-deterministic regarding input types.
	   * @param {Array | SparseMatrix | DenseMatrix | *} x
	   * @param {Array | SparseMatrix | DenseMatrix | *} y
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */

	  function compareMatricesAndArrays(x, y) {
	    if (type.isSparseMatrix(x) && type.isSparseMatrix(y)) {
	      return compareArrays(x.toJSON().values, y.toJSON().values);
	    }

	    if (type.isSparseMatrix(x)) {
	      // note: convert to array is expensive
	      return compareMatricesAndArrays(x.toArray(), y);
	    }

	    if (type.isSparseMatrix(y)) {
	      // note: convert to array is expensive
	      return compareMatricesAndArrays(x, y.toArray());
	    } // convert DenseArray into Array


	    if (type.isDenseMatrix(x)) {
	      return compareMatricesAndArrays(x.toJSON().data, y);
	    }

	    if (type.isDenseMatrix(y)) {
	      return compareMatricesAndArrays(x, y.toJSON().data);
	    } // convert scalars to array


	    if (!Array.isArray(x)) {
	      return compareMatricesAndArrays([x], y);
	    }

	    if (!Array.isArray(y)) {
	      return compareMatricesAndArrays(x, [y]);
	    }

	    return compareArrays(x, y);
	  }
	  /**
	   * Compare two Arrays
	   *
	   * - First, compares value by value
	   * - Next, if all corresponding values are equal,
	   *   look at the length: longest array will be considered largest
	   *
	   * @param {Array} x
	   * @param {Array} y
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */


	  function compareArrays(x, y) {
	    // compare each value
	    for (var i = 0, ii = Math.min(x.length, y.length); i < ii; i++) {
	      var v = compareNatural(x[i], y[i]);

	      if (v !== 0) {
	        return v;
	      }
	    } // compare the size of the arrays


	    if (x.length > y.length) {
	      return 1;
	    }

	    if (x.length < y.length) {
	      return -1;
	    } // both Arrays have equal size and content


	    return 0;
	  }
	  /**
	   * Compare two objects
	   *
	   * - First, compare sorted property names
	   * - Next, compare the property values
	   *
	   * @param {Object} x
	   * @param {Object} y
	   * @returns {number} Returns the comparison result: -1, 0, or 1
	   */


	  function compareObjects(x, y) {
	    var keysX = Object.keys(x);
	    var keysY = Object.keys(y); // compare keys

	    keysX.sort(naturalSort);
	    keysY.sort(naturalSort);
	    var c = compareArrays(keysX, keysY);

	    if (c !== 0) {
	      return c;
	    } // compare values


	    for (var i = 0; i < keysX.length; i++) {
	      var v = compareNatural(x[keysX[i]], y[keysY[i]]);

	      if (v !== 0) {
	        return v;
	      }
	    }

	    return 0;
	  }

	  return compareNatural;
	}
	/**
	 * Compare two complex numbers, `x` and `y`:
	 *
	 * - First, compare the real values of `x` and `y`
	 * - If equal, compare the imaginary values of `x` and `y`
	 *
	 * @params {Complex} x
	 * @params {Complex} y
	 * @returns {number} Returns the comparison result: -1, 0, or 1
	 */


	function compareComplexNumbers(x, y) {
	  if (x.re > y.re) {
	    return 1;
	  }

	  if (x.re < y.re) {
	    return -1;
	  }

	  if (x.im > y.im) {
	    return 1;
	  }

	  if (x.im < y.im) {
	    return -1;
	  }

	  return 0;
	}

	var name$2X = 'compareNatural';
	var factory_1$36 = factory$36;

	var compareNatural = {
		name: name$2X,
		factory: factory_1$36
	};

	var size$4 = array.size;

	function factory$37(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var compareAsc = load(compare);

	  var compareDesc = function compareDesc(a, b) {
	    return -compareAsc(a, b);
	  };

	  var compareNatural$1 = load(compareNatural);
	  /**
	   * Sort the items in a matrix.
	   *
	   * Syntax:
	   *
	   *    math.sort(x)
	   *    math.sort(x, compare)
	   *
	   * Examples:
	   *
	   *    math.sort([5, 10, 1]) // returns [1, 5, 10]
	   *    math.sort(['C', 'B', 'A', 'D'], math.compareNatural)
	   *    // returns ['A', 'B', 'C', 'D']
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length
	   *    }
	   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength)
	   *    // returns ['Tom', 'Sara', 'Langdon']
	   *
	   * See also:
	   *
	   *    filter, forEach, map, compare, compareNatural
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Function | 'asc' | 'desc' | 'natural'} [compare='asc']
	   *        An optional _comparator function or name. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {Matrix | Array} Returns the sorted matrix.
	   */

	  var sort = typed('sort', {
	    'Array': function Array(x) {
	      _arrayIsVector(x);

	      return x.sort(compareAsc);
	    },
	    'Matrix': function Matrix(x) {
	      _matrixIsVector(x);

	      return matrix$1(x.toArray().sort(compareAsc), x.storage());
	    },
	    'Array, function': function ArrayFunction(x, _comparator) {
	      _arrayIsVector(x);

	      return x.sort(_comparator);
	    },
	    'Matrix, function': function MatrixFunction(x, _comparator) {
	      _matrixIsVector(x);

	      return matrix$1(x.toArray().sort(_comparator), x.storage());
	    },
	    'Array, string': function ArrayString(x, order) {
	      _arrayIsVector(x);

	      return x.sort(_comparator(order));
	    },
	    'Matrix, string': function MatrixString(x, order) {
	      _matrixIsVector(x);

	      return matrix$1(x.toArray().sort(_comparator(order)), x.storage());
	    }
	  });
	  sort.toTex = undefined; // use default template

	  /**
	   * Get the comparator for given order ('asc', 'desc', 'natural')
	   * @param {'asc' | 'desc' | 'natural'} order
	   * @return {Function} Returns a _comparator function
	   */

	  function _comparator(order) {
	    if (order === 'asc') {
	      return compareAsc;
	    } else if (order === 'desc') {
	      return compareDesc;
	    } else if (order === 'natural') {
	      return compareNatural$1;
	    } else {
	      throw new Error('String "asc", "desc", or "natural" expected');
	    }
	  }
	  /**
	   * Validate whether an array is one dimensional
	   * Throws an error when this is not the case
	   * @param {Array} array
	   * @private
	   */


	  function _arrayIsVector(array) {
	    if (size$4(array).length !== 1) {
	      throw new Error('One dimensional array expected');
	    }
	  }
	  /**
	   * Validate whether a matrix is one dimensional
	   * Throws an error when this is not the case
	   * @param {Matrix} matrix
	   * @private
	   */


	  function _matrixIsVector(matrix) {
	    if (matrix.size().length !== 1) {
	      throw new Error('One dimensional matrix expected');
	    }
	  }

	  return sort;
	}

	var name$2Y = 'sort';
	var factory_1$37 = factory$37;

	var sort = {
		name: name$2Y,
		factory: factory_1$37
	};

	/**
	 * Recursively loop over all elements in a given multi dimensional array
	 * and invoke the callback on each of the elements.
	 * @param {Array | Matrix} array
	 * @param {Function} callback     The callback method is invoked with one
	 *                                parameter: the current element in the array
	 */


	var deepForEach = function deepForEach(array, callback) {
	  if (isMatrix(array)) {
	    array = array.valueOf();
	  }

	  for (var i = 0, ii = array.length; i < ii; i++) {
	    var value = array[i];

	    if (Array.isArray(value)) {
	      deepForEach(value, callback);
	    } else {
	      callback(value);
	    }
	  }
	};

	var arraySize = array.size;




	/**
	 * Reduce a given matrix or array to a new matrix or
	 * array with one less dimension, applying the given
	 * callback in the selected dimension.
	 * @param {Array | Matrix} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @return {Array | Matrix} res
	 */


	var reduce = function (mat, dim, callback) {
	  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();

	  if (dim < 0 || dim >= size.length) {
	    // TODO: would be more clear when throwing a DimensionError here
	    throw new IndexError_1(dim, size.length);
	  }

	  if (isMatrix(mat)) {
	    return mat.create(_reduce(mat.valueOf(), dim, callback));
	  } else {
	    return _reduce(mat, dim, callback);
	  }
	};
	/**
	 * Recursively reduce a matrix
	 * @param {Array} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @returns {Array} ret
	 * @private
	 */


	function _reduce(mat, dim, callback) {
	  var i, ret, val, tran;

	  if (dim <= 0) {
	    if (!Array.isArray(mat[0])) {
	      val = mat[0];

	      for (i = 1; i < mat.length; i++) {
	        val = callback(val, mat[i]);
	      }

	      return val;
	    } else {
	      tran = _switch(mat);
	      ret = [];

	      for (i = 0; i < tran.length; i++) {
	        ret[i] = _reduce(tran[i], dim - 1, callback);
	      }

	      return ret;
	    }
	  } else {
	    ret = [];

	    for (i = 0; i < mat.length; i++) {
	      ret[i] = _reduce(mat[i], dim - 1, callback);
	    }

	    return ret;
	  }
	}
	/**
	 * Transpose a matrix
	 * @param {Array} mat
	 * @returns {Array} ret
	 * @private
	 */


	function _switch(mat) {
	  var I = mat.length;
	  var J = mat[0].length;
	  var i, j;
	  var ret = [];

	  for (j = 0; j < J; j++) {
	    var tmp = [];

	    for (i = 0; i < I; i++) {
	      tmp.push(mat[i][j]);
	    }

	    ret.push(tmp);
	  }

	  return ret;
	}

	/**
	 * Test whether a value is a collection: an Array or Matrix
	 * @param {*} x
	 * @returns {boolean} isCollection
	 */


	var isCollection = function isCollection(x) {
	  return Array.isArray(x) || isMatrix(x);
	};

	/**
	 * Test whether an array contains collections
	 * @param {Array} array
	 * @returns {boolean} Returns true when the array contains one or multiple
	 *                    collections (Arrays or Matrices). Returns false otherwise.
	 */


	var containsCollections = function containsCollections(array) {
	  for (var i = 0; i < array.length; i++) {
	    if (isCollection(array[i])) {
	      return true;
	    }
	  }

	  return false;
	};

	function factory$38(type, config, load, typed) {
	  var getType = load(_typeof$4);
	  /**
	   * Improve error messages for statistics functions. Errors are typically
	   * thrown in an internally used function like larger, causing the error
	   * not to mention the function (like max) which is actually used by the user.
	   *
	   * @param {Error} err
	   * @param {String} fnName
	   * @param {*} [value]
	   * @return {Error}
	   */

	  return function improveErrorMessage(err, fnName, value) {
	    // TODO: add information with the index (also needs transform in expression parser)
	    var details;

	    if (String(err).indexOf('Unexpected type') !== -1) {
	      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : ' (type: ' + err.data.actual + ')';
	      return new TypeError('Cannot calculate ' + fnName + ', unexpected type of argument' + details);
	    }

	    if (String(err).indexOf('complex numbers') !== -1) {
	      details = arguments.length > 2 ? ' (type: ' + getType(value) + ', value: ' + JSON.stringify(value) + ')' : '';
	      return new TypeError('Cannot calculate ' + fnName + ', no ordering relation is defined for complex numbers' + details);
	    }

	    return err;
	  };
	}

	var factory_1$38 = factory$38;

	var improveErrorMessage = {
		factory: factory_1$38
	};

	function factory$39(type, config, load, typed) {
	  var larger$1 = load(larger);
	  var improveErrorMessage$1 = load(improveErrorMessage);
	  /**
	   * Compute the maximum value of a matrix or a  list with values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.max(a, b, c, ...)
	   *     math.max(A)
	   *     math.max(A, dim)
	   *
	   * Examples:
	   *
	   *     math.max(2, 1, 4, 3)                  // returns 4
	   *     math.max([2, 1, 4, 3])                // returns 4
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.max([[2, 5], [4, 3], [1, 7]], 0) // returns [4, 7]
	   *     math.max([[2, 5], [4, 3]], [1, 7], 1) // returns [5, 4, 7]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, min, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The maximum value
	   */

	  var max = typed('max', {
	    // max([a, b, c, d, ...])
	    'Array | Matrix': _max,
	    // max([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      return reduce(array, dim.valueOf(), _largest);
	    },
	    // max(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function max');
	      }

	      return _max(args);
	    }
	  });
	  max.toTex = "\\max\\left(${args}\\right)";
	  return max;
	  /**
	   * Return the largest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is largest, or y when y is largest
	   * @private
	   */

	  function _largest(x, y) {
	    try {
	      return larger$1(x, y) ? x : y;
	    } catch (err) {
	      throw improveErrorMessage$1(err, 'max', y);
	    }
	  }
	  /**
	   * Recursively calculate the maximum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} max
	   * @private
	   */


	  function _max(array) {
	    var max;
	    deepForEach(array, function (value) {
	      try {
	        if (isNaN(value) && typeof value === 'number') {
	          max = NaN;
	        } else if (max === undefined || larger$1(value, max)) {
	          max = value;
	        }
	      } catch (err) {
	        throw improveErrorMessage$1(err, 'max', value);
	      }
	    });

	    if (max === undefined) {
	      throw new Error('Cannot calculate max of an empty array');
	    }

	    return max;
	  }
	}

	var name$2Z = 'max';
	var factory_1$39 = factory$39;

	var max$1 = {
		name: name$2Z,
		factory: factory_1$39
	};

	function factory$3a(type, config, load, typed) {
	  var abs = load(abs$1);
	  var add = load(add$1);
	  var multiply$1 = load(multiply);
	  var sqrt = load(sqrt$1);
	  var subtract$1 = load(subtract);
	  var inv$1 = load(inv);
	  var size = load(size$3);
	  var max = load(max$1);
	  var identity$1 = load(identity);
	  /**
	   * Calculate the principal square root of a square matrix.
	   * The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
	   *
	   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix
	   *
	   * Syntax:
	   *
	   *     X = math.sqrtm(A)
	   *
	   * Examples:
	   *
	   *     math.sqrtm([[1, 2], [3, 4]]) // returns [[-2, 1], [1.5, -0.5]]
	   *
	   * See also:
	   *
	   *     sqrt, pow
	   *
	   * @param  {Array | Matrix} A   The square matrix `A`
	   * @return {Array | Matrix}     The principal square root of matrix `A`
	   */

	  var sqrtm = typed('sqrtm', {
	    'Array | Matrix': function ArrayMatrix(A) {
	      var size = type.isMatrix(A) ? A.size() : array.size(A);

	      switch (size.length) {
	        case 1:
	          // Single element Array | Matrix
	          if (size[0] === 1) {
	            return sqrt(A);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
	          }

	        case 2:
	          // Two-dimensional Array | Matrix
	          var rows = size[0];
	          var cols = size[1];

	          if (rows === cols) {
	            return _denmanBeavers(A);
	          } else {
	            throw new RangeError('Matrix must be square ' + '(size: ' + string.format(size) + ')');
	          }

	      }
	    }
	  });
	  var _maxIterations = 1e3;
	  var _tolerance = 1e-6;
	  /**
	   * Calculate the principal square root matrix using the DenmanâBeavers iterative method
	   *
	   * https://en.wikipedia.org/wiki/Square_root_of_a_matrix#By_DenmanâBeavers_iteration
	   *
	   * @param  {Array | Matrix} A   The square matrix `A`
	   * @return {Array | Matrix}     The principal square root of matrix `A`
	   * @private
	   */

	  function _denmanBeavers(A) {
	    var error;
	    var iterations = 0;
	    var Y = A;
	    var Z = identity$1(size(A));

	    do {
	      var Yk = Y;
	      Y = multiply$1(0.5, add(Yk, inv$1(Z)));
	      Z = multiply$1(0.5, add(Z, inv$1(Yk)));
	      error = max(abs(subtract$1(Y, Yk)));

	      if (error > _tolerance && ++iterations > _maxIterations) {
	        throw new Error('computing square root of matrix: iterative method could not converge');
	      }
	    } while (error > _tolerance);

	    return Y;
	  }

	  sqrtm.toTex = {
	    1: "{${args[0]}}".concat(latex.operators['pow'], "{\\frac{1}{2}}")
	  };
	  return sqrtm;
	}

	var name$2_ = 'sqrtm';
	var factory_1$3a = factory$3a;

	var sqrtm = {
		name: name$2_,
		factory: factory_1$3a
	};

	function factory$3b(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  /**
	   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
	   *
	   * Syntax:
	   *
	   *     math.squeeze(x)
	   *
	   * Examples:
	   *
	   *     math.squeeze([3])           // returns 3
	   *     math.squeeze([[3]])         // returns 3
	   *
	   *     const A = math.zeros(3, 1)    // returns [[0], [0], [0]] (size 3x1)
	   *     math.squeeze(A)             // returns [0, 0, 0] (size 3)
	   *
	   *     const B = math.zeros(1, 3)    // returns [[0, 0, 0]] (size 1x3)
	   *     math.squeeze(B)             // returns [0, 0, 0] (size 3)
	   *
	   *     // only inner and outer dimensions are removed
	   *     const C = math.zeros(2, 1, 3) // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *     math.squeeze(C)             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *
	   * See also:
	   *
	   *     subset
	   *
	   * @param {Matrix | Array} x      Matrix to be squeezed
	   * @return {Matrix | Array} Squeezed matrix
	   */

	  var squeeze = typed('squeeze', {
	    'Array': function Array(x) {
	      return array.squeeze(object.clone(x));
	    },
	    'Matrix': function Matrix(x) {
	      var res = array.squeeze(x.toArray()); // FIXME: return the same type of matrix as the input

	      return Array.isArray(res) ? matrix$1(res) : res;
	    },
	    'any': function any(x) {
	      // scalar
	      return object.clone(x);
	    }
	  });
	  squeeze.toTex = undefined; // use default template

	  return squeeze;
	}

	var name$2$ = 'squeeze';
	var factory_1$3b = factory$3b;

	var squeeze = {
		name: name$2$,
		factory: factory_1$3b
	};

	var clone$9 = object.clone;

	var format$7 = string.format;

	function factory$3c(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var add = load(add$1);
	  /**
	   * Calculate the trace of a matrix: the sum of the elements on the main
	   * diagonal of a square matrix.
	   *
	   * Syntax:
	   *
	   *    math.trace(x)
	   *
	   * Examples:
	   *
	   *    math.trace([[1, 2], [3, 4]]) // returns 5
	   *
	   *    const A = [
	   *      [1, 2, 3],
	   *      [-1, 2, 3],
	   *      [2, 0, 3]
	   *    ]
	   *    math.trace(A) // returns 6
	   *
	   * See also:
	   *
	   *    diag
	   *
	   * @param {Array | Matrix} x  A matrix
	   *
	   * @return {number} The trace of `x`
	   */

	  var trace = typed('trace', {
	    'Array': function _arrayTrace(x) {
	      // use dense matrix implementation
	      return _denseTrace(matrix$1(x));
	    },
	    'SparseMatrix': _sparseTrace,
	    'DenseMatrix': _denseTrace,
	    'any': clone$9
	  });

	  function _denseTrace(m) {
	    // matrix size & data
	    var size = m._size;
	    var data = m._data; // process dimensions

	    switch (size.length) {
	      case 1:
	        // vector
	        if (size[0] === 1) {
	          // return data[0]
	          return clone$9(data[0]);
	        }

	        throw new RangeError('Matrix must be square (size: ' + format$7(size) + ')');

	      case 2:
	        // two dimensional
	        var rows = size[0];
	        var cols = size[1];

	        if (rows === cols) {
	          // calulate sum
	          var sum = 0; // loop diagonal

	          for (var i = 0; i < rows; i++) {
	            sum = add(sum, data[i][i]);
	          } // return trace


	          return sum;
	        }

	        throw new RangeError('Matrix must be square (size: ' + format$7(size) + ')');

	      default:
	        // multi dimensional
	        throw new RangeError('Matrix must be two dimensional (size: ' + format$7(size) + ')');
	    }
	  }

	  function _sparseTrace(m) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    var size = m._size; // check dimensions

	    var rows = size[0];
	    var columns = size[1]; // matrix must be square

	    if (rows === columns) {
	      // calulate sum
	      var sum = 0; // check we have data (avoid looping columns)

	      if (values.length > 0) {
	        // loop columns
	        for (var j = 0; j < columns; j++) {
	          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	          var k0 = ptr[j];
	          var k1 = ptr[j + 1]; // loop k within [k0, k1[

	          for (var k = k0; k < k1; k++) {
	            // row index
	            var i = index[k]; // check row

	            if (i === j) {
	              // accumulate value
	              sum = add(sum, values[k]); // exit loop

	              break;
	            }

	            if (i > j) {
	              // exit loop, no value on the diagonal for column j
	              break;
	            }
	          }
	        }
	      } // return trace


	      return sum;
	    }

	    throw new RangeError('Matrix must be square (size: ' + format$7(size) + ')');
	  }

	  trace.toTex = {
	    1: "\\mathrm{tr}\\left(${args[0]}\\right)"
	  };
	  return trace;
	}

	var name$30 = 'trace';
	var factory_1$3c = factory$3c;

	var trace = {
		name: name$30,
		factory: factory_1$3c
	};

	function factory$3d(type, config, load, typed) {
	  var getArrayDataType$1 = load(getArrayDataType);
	  /**
	   * Find the data type of all elements in a matrix or array,
	   * for example 'number' if all items are a number and 'Complex' if all values
	   * are complex numbers.
	   * If a matrix contains more than one data type, it will return 'mixed'.
	   *
	   * Syntax:
	   *
	   *    math.getMatrixDataType(x)
	   *
	   * Examples:
	   *
	   *    const x = [ [1, 2, 3], [4, 5, 6] ]
	   *    const mixedX = [ [1, true], [2, 3] ]
	   *    const fractionX = [ [math.fraction(1, 3)], [math.fraction(1, 3] ]
	   *    const unitX = [ [math.unit('5cm')], [math.unit('5cm')] ]
	   *    const bigNumberX = [ [math.bignumber(1)], [math.bignumber(0)] ]
	   *    const sparse = math.sparse(x)
	   *    const dense = math.matrix(x)
	   *    math.getMatrixDataType(x)   // returns 'number'
	   *    math.getMatrixDataType(sparse)   // returns 'number'
	   *    math.getMatrixDataType(dense)   // returns 'number'
	   *    math.getMatrixDataType(mixedX) // returns 'mixed'
	   *    math.getMatrixDataType(fractionX) // returns 'Fraction'
	   *    math.getMatrixDataType(unitX) // returns 'Unit'
	   *    math.getMatrixDataType(bigNumberX) // return 'BigNumber'
	   *
	   * See also:
	   *  SparseMatrix, DenseMatrix
	   *
	   * @param {...Matrix | Array} x   The Matrix with values.
	   *
	   * @return {string} A string representation of the matrix type
	   */

	  var getMatrixDataType = typed('getMatrixDataType', {
	    'Array': function Array(x) {
	      return getArrayDataType$1(x);
	    },
	    'Matrix': function Matrix(x) {
	      return x.getDataType();
	    }
	  });
	  return getMatrixDataType;
	}

	var name$31 = 'getMatrixDataType';
	var factory_1$3d = factory$3d;

	var getMatrixDataType = {
		name: name$31,
		factory: factory_1$3d
	};

	var matrix$2 = [concat, cross, ctranspose, det, diag, dot, eye, expm, filter_1, flatten$1, forEach_1, identity, inv, kron, map$5, ones, partitionSelect, range, reshape, resize$2, size$3, sort, sqrtm, squeeze, subset, trace, transpose, zeros, getMatrixDataType];

	function factory$3e(type, config, load, typed) {
	  var add = load(addScalar);
	  var improveErrorMessage$1 = load(improveErrorMessage);
	  /**
	   * Compute the sum of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.sum(a, b, c, ...)
	   *     math.sum(A)
	   *
	   * Examples:
	   *
	   *     math.sum(2, 1, 4, 3)               // returns 10
	   *     math.sum([2, 1, 4, 3])             // returns 10
	   *     math.sum([[2, 5], [4, 3], [1, 7]]) // returns 22
	   *
	   * See also:
	   *
	   *    mean, median, min, max, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The sum of all values
	   */

	  var sum = typed('sum', {
	    // sum([a, b, c, d, ...])
	    'Array | Matrix': _sum,
	    // sum([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': _nsumDim,
	    // sum(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function sum');
	      }

	      return _sum(args);
	    }
	  });
	  sum.toTex = undefined; // use default template

	  return sum;
	  /**
	   * Recursively calculate the sum of an n-dimensional array
	   * @param {Array} array
	   * @return {number} sum
	   * @private
	   */

	  function _sum(array) {
	    var sum;
	    deepForEach(array, function (value) {
	      try {
	        sum = sum === undefined ? value : add(sum, value);
	      } catch (err) {
	        throw improveErrorMessage$1(err, 'sum', value);
	      }
	    });

	    if (sum === undefined) {
	      switch (config.number) {
	        case 'number':
	          return 0;

	        case 'BigNumber':
	          return new type.BigNumber(0);

	        case 'Fraction':
	          return new type.Fraction(0);

	        default:
	          return 0;
	      }
	    }

	    return sum;
	  }

	  function _nsumDim(array, dim) {
	    try {
	      var _sum2 = reduce(array, dim, add);

	      return _sum2;
	    } catch (err) {
	      throw improveErrorMessage$1(err, 'sum');
	    }
	  }
	}

	var name$32 = 'sum';
	var factory_1$3e = factory$3e;

	var sum = {
		name: name$32,
		factory: factory_1$3e
	};

	function factory$3f(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var divide = load(divide$1);
	  var sum$1 = load(sum);
	  var multiply$1 = load(multiply);
	  var dotDivide$1 = load(dotDivide);
	  var log = load(log$1);
	  var isNumeric$1 = load(isNumeric);
	  /**
	     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
	     *
	     * Syntax:
	     *
	     *     math.kldivergence(x, y)
	     *
	     * Examples:
	     *
	     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153
	     *
	     *
	     * @param  {Array | Matrix} q    First vector
	     * @param  {Array | Matrix} p    Second vector
	     * @return {number}              Returns distance between q and p
	     */

	  var kldivergence = typed('kldivergence', {
	    'Array, Array': function ArrayArray(q, p) {
	      return _kldiv(matrix$1(q), matrix$1(p));
	    },
	    'Matrix, Array': function MatrixArray(q, p) {
	      return _kldiv(q, matrix$1(p));
	    },
	    'Array, Matrix': function ArrayMatrix(q, p) {
	      return _kldiv(matrix$1(q), p);
	    },
	    'Matrix, Matrix': function MatrixMatrix(q, p) {
	      return _kldiv(q, p);
	    }
	  });

	  function _kldiv(q, p) {
	    var plength = p.size().length;
	    var qlength = q.size().length;

	    if (plength > 1) {
	      throw new Error('first object must be one dimensional');
	    }

	    if (qlength > 1) {
	      throw new Error('second object must be one dimensional');
	    }

	    if (plength !== qlength) {
	      throw new Error('Length of two vectors must be equal');
	    } // Before calculation, apply normalization


	    var sumq = sum$1(q);

	    if (sumq === 0) {
	      throw new Error('Sum of elements in first object must be non zero');
	    }

	    var sump = sum$1(p);

	    if (sump === 0) {
	      throw new Error('Sum of elements in second object must be non zero');
	    }

	    var qnorm = divide(q, sum$1(q));
	    var pnorm = divide(p, sum$1(p));
	    var result = sum$1(multiply$1(qnorm, log(dotDivide$1(qnorm, pnorm))));

	    if (isNumeric$1(result)) {
	      return result;
	    } else {
	      return Number.NaN;
	    }
	  }

	  return kldivergence;
	}

	var name$33 = 'kldivergence';
	var factory_1$3f = factory$3f;

	var kldivergence = {
		name: name$33,
		factory: factory_1$3f
	};

	function factory$3g(type, config, load, typed) {
	  var add = load(add$1);
	  var multiply$1 = load(multiply);
	  var divide = load(divide$1);
	  var factorial$1 = load(factorial);
	  var isInteger = load(isInteger$k);
	  var isPositive$1 = load(isPositive);
	  /**
	   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
	   *
	   * multinomial takes one array of integers as an argument.
	   * The following condition must be enforced: every ai <= 0
	   *
	   * Syntax:
	   *
	   *     math.multinomial(a) // a is an array type
	   *
	   * Examples:
	   *
	   *    math.multinomial([1,2,1]) // returns 12
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
	   * @return {Number | BigNumber}         Multinomial coefficient.
	   */

	  return typed('multinomial', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      var sum = 0;
	      var denom = 1;
	      deepForEach(a, function (ai) {
	        if (!isInteger(ai) || !isPositive$1(ai)) {
	          throw new TypeError('Positive integer value expected in function multinomial');
	        }

	        sum = add(sum, ai);
	        denom = multiply$1(denom, factorial$1(ai));
	      });
	      return divide(factorial$1(sum), denom);
	    }
	  });
	}

	var name$34 = 'multinomial';
	var factory_1$3g = factory$3g;

	var multinomial = {
		name: name$34,
		factory: factory_1$3g
	};

	var isInteger$p = number.isInteger;

	function factory$3h(type, config, load, typed) {
	  var factorial$1 = load(factorial);

	  var product = product_1;
	  /**
	   * Compute the number of ways of obtaining an ordered subset of `k` elements
	   * from a set of `n` elements.
	   *
	   * Permutations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.permutations(n)
	   *     math.permutations(n, k)
	   *
	   * Examples:
	   *
	   *    math.permutations(5)     // 120
	   *    math.permutations(5, 3)  // 60
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number | BigNumber} n   The number of objects in total
	   * @param {number | BigNumber} [k] The number of objects in the subset
	   * @return {number | BigNumber}    The number of permutations
	   */


	  var permutations = typed('permutations', {
	    'number | BigNumber': factorial$1,
	    'number, number': function numberNumber(n, k) {
	      if (!isInteger$p(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }

	      if (!isInteger$p(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }

	      if (k > n) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      } // Permute n objects, k at a time


	      return product(n - k + 1, n);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(n, k) {
	      var result, i;

	      if (!isPositiveInteger$1(n) || !isPositiveInteger$1(k)) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }

	      if (k.gt(n)) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }

	      result = new type.BigNumber(1);

	      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
	        result = result.times(i);
	      }

	      return result;
	    } // TODO: implement support for collection in permutations

	  });
	  permutations.toTex = undefined; // use default template

	  return permutations;
	}
	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */


	function isPositiveInteger$1(n) {
	  return n.isInteger() && n.gte(0);
	}

	var name$35 = 'permutations';
	var factory_1$3h = factory$3h;

	var permutations = {
		name: name$35,
		factory: factory_1$3h
	};

	var seedRandom = createCommonjsModule(function (module) {

	var width = 256;// each RC4 output is 0 <= x < 256
	var chunks = 6;// at least six RC4 outputs for each double
	var digits = 52;// there are 52 significant digits in a double
	var pool = [];// pool: entropy pool starts empty
	var GLOBAL = typeof commonjsGlobal === 'undefined' ? window : commonjsGlobal;

	//
	// The following constants are related to IEEE 754 limits.
	//
	var startdenom = Math.pow(width, chunks),
	    significance = Math.pow(2, digits),
	    overflow = significance * 2,
	    mask = width - 1;


	var oldRandom = Math.random;

	//
	// seedrandom()
	// This is the seedrandom function described above.
	//
	module.exports = function(seed, options) {
	  if (options && options.global === true) {
	    options.global = false;
	    Math.random = module.exports(seed, options);
	    options.global = true;
	    return Math.random;
	  }
	  var use_entropy = (options && options.entropy) || false;
	  var key = [];

	  // Flatten the seed string or build one from local entropy if needed.
	  var shortseed = mixkey(flatten(
	    use_entropy ? [seed, tostring(pool)] :
	    0 in arguments ? seed : autoseed(), 3), key);

	  // Use the seed to initialize an ARC4 generator.
	  var arc4 = new ARC4(key);

	  // Mix the randomness into accumulated entropy.
	  mixkey(tostring(arc4.S), pool);

	  // Override Math.random

	  // This function returns a random double in [0, 1) that contains
	  // randomness in every bit of the mantissa of the IEEE 754 value.

	  return function() {         // Closure to return a random double:
	    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
	        d = startdenom,                 //   and denominator d = 2 ^ 48.
	        x = 0;                          //   and no 'extra last byte'.
	    while (n < significance) {          // Fill up all significant digits by
	      n = (n + x) * width;              //   shifting numerator and
	      d *= width;                       //   denominator and generating a
	      x = arc4.g(1);                    //   new least-significant-byte.
	    }
	    while (n >= overflow) {             // To avoid rounding up, before adding
	      n /= 2;                           //   last byte, shift everything
	      d /= 2;                           //   right using integer Math until
	      x >>>= 1;                         //   we have exactly the desired bits.
	    }
	    return (n + x) / d;                 // Form the number within [0, 1).
	  };
	};

	module.exports.resetGlobal = function () {
	  Math.random = oldRandom;
	};

	//
	// ARC4
	//
	// An ARC4 implementation.  The constructor takes a key in the form of
	// an array of at most (width) integers that should be 0 <= x < (width).
	//
	// The g(count) method returns a pseudorandom integer that concatenates
	// the next (count) outputs from ARC4.  Its return value is a number x
	// that is in the range 0 <= x < (width ^ count).
	//
	/** @constructor */
	function ARC4(key) {
	  var t, keylen = key.length,
	      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

	  // The empty key [] is treated as [0].
	  if (!keylen) { key = [keylen++]; }

	  // Set up S using the standard key scheduling algorithm.
	  while (i < width) {
	    s[i] = i++;
	  }
	  for (i = 0; i < width; i++) {
	    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
	    s[j] = t;
	  }

	  // The "g" method returns the next (count) outputs as one number.
	  (me.g = function(count) {
	    // Using instance members instead of closure state nearly doubles speed.
	    var t, r = 0,
	        i = me.i, j = me.j, s = me.S;
	    while (count--) {
	      t = s[i = mask & (i + 1)];
	      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
	    }
	    me.i = i; me.j = j;
	    return r;
	    // For robust unpredictability discard an initial batch of values.
	    // See http://www.rsa.com/rsalabs/node.asp?id=2009
	  })(width);
	}

	//
	// flatten()
	// Converts an object tree to nested arrays of strings.
	//
	function flatten(obj, depth) {
	  var result = [], typ = (typeof obj)[0], prop;
	  if (depth && typ == 'o') {
	    for (prop in obj) {
	      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
	    }
	  }
	  return (result.length ? result : typ == 's' ? obj : obj + '\0');
	}

	//
	// mixkey()
	// Mixes a string seed into a key that is an array of integers, and
	// returns a shortened string seed that is equivalent to the result key.
	//
	function mixkey(seed, key) {
	  var stringseed = seed + '', smear, j = 0;
	  while (j < stringseed.length) {
	    key[mask & j] =
	      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
	  }
	  return tostring(key);
	}

	//
	// autoseed()
	// Returns an object for autoseeding, using window.crypto if available.
	//
	/** @param {Uint8Array=} seed */
	function autoseed(seed) {
	  try {
	    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
	    return tostring(seed);
	  } catch (e) {
	    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,
	            GLOBAL.screen, tostring(pool)];
	  }
	}

	//
	// tostring()
	// Converts an array of charcodes to a string
	//
	function tostring(a) {
	  return String.fromCharCode.apply(0, a);
	}

	//
	// When seedrandom.js is loaded, we immediately mix a few bits
	// from the built-in RNG into the entropy pool.  Because we do
	// not want to intefere with determinstic PRNG state later,
	// seedrandom will not call Math.random on its own again after
	// initialization.
	//
	mixkey(Math.random(), pool);
	});
	var seedRandom_1 = seedRandom.resetGlobal;

	// create a random seed here to prevent an infinite loop from seed-random
	// inside the factory. Reason is that math.random is defined as a getter/setter
	// and seed-random generates a seed from the local entropy by reading every
	// defined object including `math` itself. That means that whilst getting
	// math.random, it tries to get math.random, etc... an infinite loop.
	// See https://github.com/ForbesLindesay/seed-random/issues/6


	var singletonRandom = seedRandom();

	function factory$3i(type, config, load, typed, math) {
	  var random; // create a new random generator with given seed

	  function setSeed(seed) {
	    random = seed === null ? singletonRandom : seedRandom(String(seed));
	  } // initialize a seeded pseudo random number generator with config's random seed


	  setSeed(config.randomSeed); // wrapper function so the rng can be updated via generator

	  function rng() {
	    return random();
	  } // updates generator with a new instance of a seeded pseudo random number generator


	  math.on('config', function (curr, prev, changes) {
	    // if the user specified a randomSeed
	    if (changes.randomSeed !== undefined) {
	      // update generator with a new instance of a seeded pseudo random number generator
	      setSeed(curr.randomSeed);
	    }
	  });
	  return rng;
	}

	var factory_1$3i = factory$3i;
	var math$f = true;

	var seededRNG = {
		factory: factory_1$3i,
		math: math$f
	};

	var isNumber$3 = number.isNumber; // TODO: rethink math.distribution
	// TODO: rework to a typed function


	function factory$3j(type, config, load, typed, math) {
	  var matrix$1 = load(matrix);

	  var array$1 = array; // seeded pseudo random number generator


	  var rng = load(seededRNG);
	  /**
	   * Create a distribution object with a set of random functions for given
	   * random distribution.
	   *
	   * Syntax:
	   *
	   *     math.distribution(name)
	   *
	   * Examples:
	   *
	   *     const normalDist = math.distribution('normal') // create a normal distribution
	   *     normalDist.random(0, 10)                     // get a random value between 0 and 10
	   *
	   * See also:
	   *
	   *     random, randomInt, pickRandom
	   *
	   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.
	   * @return {Object}       Returns a distribution object containing functions:
	   *                        `random([size] [, min] [, max])`,
	   *                        `randomInt([min] [, max])`,
	   *                        `pickRandom(array)`
	   */

	  function distribution(name) {
	    if (!distributions.hasOwnProperty(name)) {
	      throw new Error('Unknown distribution ' + name);
	    }

	    var args = Array.prototype.slice.call(arguments, 1);
	    var distribution = distributions[name].apply(this, args);
	    return function (distribution) {
	      // This is the public API for all distributions
	      var randFunctions = {
	        random: function random(arg1, arg2, arg3) {
	          var size, min, max;

	          if (arguments.length > 3) {
	            throw new ArgumentsError_1('random', arguments.length, 0, 3);
	          } else if (arguments.length === 1) {
	            // `random(max)` or `random(size)`
	            if (isCollection(arg1)) {
	              size = arg1;
	            } else {
	              max = arg1;
	            }
	          } else if (arguments.length === 2) {
	            // `random(min, max)` or `random(size, max)`
	            if (isCollection(arg1)) {
	              size = arg1;
	              max = arg2;
	            } else {
	              min = arg1;
	              max = arg2;
	            }
	          } else {
	            // `random(size, min, max)`
	            size = arg1;
	            min = arg2;
	            max = arg3;
	          } // TODO: validate type of size


	          if (min !== undefined && !isNumber$3(min) || max !== undefined && !isNumber$3(max)) {
	            throw new TypeError('Invalid argument in function random');
	          }

	          if (max === undefined) max = 1;
	          if (min === undefined) min = 0;

	          if (size !== undefined) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);

	            return type.isMatrix(size) ? matrix$1(res) : res;
	          }

	          return _random(min, max);
	        },
	        randomInt: typed({
	          'number | Array': function numberArray(arg) {
	            var min = 0;

	            if (isCollection(arg)) {
	              var size = arg;
	              var max = 1;

	              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);

	              return type.isMatrix(size) ? matrix$1(res) : res;
	            } else {
	              var _max = arg;
	              return _randomInt(min, _max);
	            }
	          },
	          'number | Array, number': function numberArrayNumber(arg1, arg2) {
	            if (isCollection(arg1)) {
	              var size = arg1;
	              var max = arg2;
	              var min = 0;

	              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);

	              return type.isMatrix(size) ? matrix$1(res) : res;
	            } else {
	              var _min = arg1;
	              var _max2 = arg2;
	              return _randomInt(_min, _max2);
	            }
	          },
	          'Array, number, number': function ArrayNumberNumber(size, min, max) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);

	            return size && size.isMatrix === true ? matrix$1(res) : res;
	          }
	        }),
	        pickRandom: typed({
	          'Array': function Array(possibles) {
	            return _pickRandom(possibles);
	          },
	          'Array, number | Array': function ArrayNumberArray(possibles, arg2) {
	            var number, weights;

	            if (Array.isArray(arg2)) {
	              weights = arg2;
	            } else if (isNumber$3(arg2)) {
	              number = arg2;
	            } else {
	              throw new TypeError('Invalid argument in function pickRandom');
	            }

	            return _pickRandom(possibles, number, weights);
	          },
	          'Array, number | Array, Array | number': function ArrayNumberArrayArrayNumber(possibles, arg2, arg3) {
	            var number, weights;

	            if (Array.isArray(arg2)) {
	              weights = arg2;
	              number = arg3;
	            } else {
	              weights = arg3;
	              number = arg2;
	            }

	            if (!Array.isArray(weights) || !isNumber$3(number)) {
	              throw new TypeError('Invalid argument in function pickRandom');
	            }

	            return _pickRandom(possibles, number, weights);
	          }
	        })
	      };

	      function _pickRandom(possibles, number, weights) {
	        var single = typeof number === 'undefined';

	        if (single) {
	          number = 1;
	        }

	        if (type.isMatrix(possibles)) {
	          possibles = possibles.valueOf(); // get Array
	        } else if (!Array.isArray(possibles)) {
	          throw new TypeError('Unsupported type of value in function pickRandom');
	        }

	        if (array$1.size(possibles).length > 1) {
	          throw new Error('Only one dimensional vectors supported');
	        }

	        var totalWeights = 0;

	        if (typeof weights !== 'undefined') {
	          if (weights.length !== possibles.length) {
	            throw new Error('Weights must have the same length as possibles');
	          }

	          for (var i = 0, len = weights.length; i < len; i++) {
	            if (!isNumber$3(weights[i]) || weights[i] < 0) {
	              throw new Error('Weights must be an array of positive numbers');
	            }

	            totalWeights += weights[i];
	          }
	        }

	        var length = possibles.length;

	        if (length === 0) {
	          return [];
	        } else if (number >= length) {
	          return number > 1 ? possibles : possibles[0];
	        }

	        var result = [];
	        var pick;

	        while (result.length < number) {
	          if (typeof weights === 'undefined') {
	            pick = possibles[Math.floor(rng() * length)];
	          } else {
	            var randKey = rng() * totalWeights;

	            for (var _i = 0, _len = possibles.length; _i < _len; _i++) {
	              randKey -= weights[_i];

	              if (randKey < 0) {
	                pick = possibles[_i];
	                break;
	              }
	            }
	          }

	          if (result.indexOf(pick) === -1) {
	            result.push(pick);
	          }
	        }

	        return single ? result[0] : result; // TODO: add support for multi dimensional matrices
	      }

	      function _random(min, max) {
	        return min + distribution() * (max - min);
	      }

	      function _randomInt(min, max) {
	        return Math.floor(min + distribution() * (max - min));
	      } // This is a function for generating a random matrix recursively.


	      function _randomDataForMatrix(size, min, max, randFunc) {
	        var data = [];
	        size = size.slice(0);

	        if (size.length > 1) {
	          for (var i = 0, length = size.shift(); i < length; i++) {
	            data.push(_randomDataForMatrix(size, min, max, randFunc));
	          }
	        } else {
	          for (var _i2 = 0, _length = size.shift(); _i2 < _length; _i2++) {
	            data.push(randFunc(min, max));
	          }
	        }

	        return data;
	      }

	      return randFunctions;
	    }(distribution);
	  } // Each distribution is a function that takes no argument and when called returns
	  // a number between 0 and 1.


	  var distributions = {
	    uniform: function uniform() {
	      return rng;
	    },
	    // Implementation of normal distribution using Box-Muller transform
	    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	    // We take : mean = 0.5, standard deviation = 1/6
	    // so that 99.7% values are in [0, 1].
	    normal: function normal() {
	      return function () {
	        var u1;
	        var u2;
	        var picked = -1; // We reject values outside of the interval [0, 1]
	        // TODO: check if it is ok to do that?

	        while (picked < 0 || picked > 1) {
	          u1 = rng();
	          u2 = rng();
	          picked = 1 / 6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
	        }

	        return picked;
	      };
	    }
	  };
	  distribution.toTex = undefined; // use default template

	  return distribution;
	}

	var name$36 = 'distribution';
	var factory_1$3j = factory$3j;

	var distribution = {
		name: name$36,
		factory: factory_1$3j
	};

	function factory$3k(type, config, load, typed) {
	  var distribution$1 = load(distribution);
	  /**
	   * Random pick one or more values from a one dimensional array.
	   * Array elements are picked using a random function with uniform or weighted distribution.
	   *
	   * Syntax:
	   *
	   *     math.pickRandom(array)
	   *     math.pickRandom(array, number)
	   *     math.pickRandom(array, weights)
	   *     math.pickRandom(array, number, weights)
	   *     math.pickRandom(array, weights, number)
	   *
	   * Examples:
	   *
	   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array
	   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array
	   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution
	   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution
	   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution
	   *
	   * See also:
	   *
	   *     random, randomInt
	   *
	   * @param {Array} array     A one dimensional array
	   * @param {Int} number      An int or float
	   * @param {Array} weights   An array of ints or floats
	   * @return {number | Array} Returns a single random value from array when number is 1 or undefined.
	   *                          Returns an array with the configured number of elements when number is > 1.
	   */
	  // TODO: rework pickRandom to a typed-function

	  var pickRandom = distribution$1('uniform').pickRandom;
	  pickRandom.toTex = undefined; // use default template

	  return pickRandom;
	}

	var name$37 = 'pickRandom';
	var factory_1$3k = factory$3k;

	var pickRandom = {
		name: name$37,
		factory: factory_1$3k
	};

	function factory$3l(type, config, load, typed) {
	  var distribution$1 = load(distribution);
	  /**
	   * Return a random number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.random()                // generate a random number between 0 and 1
	   *     math.random(max)             // generate a random number between 0 and max
	   *     math.random(min, max)        // generate a random number between min and max
	   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
	   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
	   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
	   *
	   * Examples:
	   *
	   *     math.random()       // returns a random number between 0 and 1
	   *     math.random(100)    // returns a random number between 0 and 100
	   *     math.random(30, 40) // returns a random number between 30 and 40
	   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1
	   *
	   * See also:
	   *
	   *     randomInt, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random number
	   */
	  // TODO: rework random to a typed-function

	  var random = distribution$1('uniform').random;
	  random.toTex = undefined; // use default template

	  return random;
	}

	var name$38 = 'random';
	var factory_1$3l = factory$3l;

	var random$1 = {
		name: name$38,
		factory: factory_1$3l
	};

	function factory$3m(type, config, load, typed) {
	  var distribution$1 = load(distribution);
	  /**
	   * Return a random integer number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.randomInt(max)             // generate a random integer between 0 and max
	   *     math.randomInt(min, max)        // generate a random integer between min and max
	   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
	   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
	   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
	   *
	   * Examples:
	   *
	   *     math.randomInt(100)    // returns a random integer between 0 and 100
	   *     math.randomInt(30, 40) // returns a random integer between 30 and 40
	   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1
	   *
	   * See also:
	   *
	   *     random, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random integer value
	   */
	  // TODO: rework randomInt to a typed-function

	  var randomInt = distribution$1('uniform').randomInt;
	  randomInt.toTex = undefined; // use default template

	  return randomInt;
	}

	var name$39 = 'randomInt';
	var factory_1$3m = factory$3m;

	var randomInt = {
		name: name$39,
		factory: factory_1$3m
	};

	var probability = [// require('./distribution'), // TODO: rethink math.distribution
	combinations, factorial, gamma, kldivergence, multinomial, permutations, pickRandom, random$1, randomInt];

	function factory$3n(type, config, load, typed) {
	  var matrix$1 = load(matrix);

	  var _typeof = load(_typeof$4);

	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Compare two strings lexically. Comparison is case sensitive.
	   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.compareText(x, y)
	   *
	   * Examples:
	   *
	   *    math.compareText('B', 'A')     // returns 1
	   *    math.compareText('2', '10')    // returns 1
	   *    math.compare('2', '10')        // returns -1
	   *    math.compareNatural('2', '10') // returns -1
	   *
	   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]
	   *
	   * See also:
	   *
	   *    equal, equalText, compare, compareNatural
	   *
	   * @param  {string | Array | DenseMatrix} x First string to compare
	   * @param  {string | Array | DenseMatrix} y Second string to compare
	   * @return {number | Array | DenseMatrix} Returns the result of the comparison:
	   *                                        1 when x > y, -1 when x < y, and 0 when x == y.
	   */

	  var compareText = typed('compareText', {
	    'any, any': _compareText,
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, _compareText);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return compareText(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return compareText(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return compareText(x, matrix$1(y));
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, _compareText, false);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, _compareText, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, _compareText, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, _compareText, true).valueOf();
	    }
	  });
	  /**
	   * Compare two strings
	   * @param {string} x
	   * @param {string} y
	   * @returns {number}
	   * @private
	   */

	  function _compareText(x, y) {
	    // we don't want to convert numbers to string, only accept string input
	    if (!type.isString(x)) {
	      throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + _typeof(x) + ', index: 0)');
	    }

	    if (!type.isString(y)) {
	      throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + _typeof(y) + ', index: 1)');
	    }

	    return x === y ? 0 : x > y ? 1 : -1;
	  }

	  compareText.toTex = undefined; // use default template

	  return compareText;
	}

	var name$3a = 'compareText';
	var factory_1$3n = factory$3n;

	var compareText = {
		name: name$3a,
		factory: factory_1$3n
	};

	function factory$3o(type, config, load, typed) {
	  var equal$1 = load(equal);
	  /**
	   * Test element wise whether two matrices are equal.
	   * The function accepts both matrices and scalar values.
	   *
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.deepEqual(x, y)
	   *
	   * Examples:
	   *
	   *    math.deepEqual(2, 4)   // returns false
	   *
	   *    a = [2, 5, 1]
	   *    b = [2, 7, 1]
	   *
	   *    math.deepEqual(a, b)   // returns false
	   *    math.equal(a, b)       // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    equal, unequal
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns true when the input matrices have the same size and each of their elements is equal.
	   */

	  var deepEqual = typed('deepEqual', {
	    'any, any': function anyAny(x, y) {
	      return _deepEqual(x.valueOf(), y.valueOf());
	    }
	  });
	  deepEqual.toTex = undefined; // use default template

	  return deepEqual;
	  /**
	   * Test whether two arrays have the same size and all elements are equal
	   * @param {Array | *} x
	   * @param {Array | *} y
	   * @return {boolean} Returns true if both arrays are deep equal
	   */

	  function _deepEqual(x, y) {
	    if (Array.isArray(x)) {
	      if (Array.isArray(y)) {
	        var len = x.length;

	        if (len !== y.length) {
	          return false;
	        }

	        for (var i = 0; i < len; i++) {
	          if (!_deepEqual(x[i], y[i])) {
	            return false;
	          }
	        }

	        return true;
	      } else {
	        return false;
	      }
	    } else {
	      if (Array.isArray(y)) {
	        return false;
	      } else {
	        return equal$1(x, y);
	      }
	    }
	  }
	}

	var name$3b = 'deepEqual';
	var factory_1$3o = factory$3o;

	var deepEqual$1 = {
		name: name$3b,
		factory: factory_1$3o
	};

	function factory$3p(type, config, load, typed) {
	  var compareText$1 = load(compareText);
	  var isZero$1 = load(isZero);
	  /**
	   * Check equality of two strings. Comparison is case sensitive.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.equalText(x, y)
	   *
	   * Examples:
	   *
	   *    math.equalText('Hello', 'Hello')     // returns true
	   *    math.equalText('a', 'A')             // returns false
	   *    math.equal('2e3', '2000')            // returns true
	   *    math.equalText('2e3', '2000')        // returns false
	   *
	   *    math.equalText('B', ['A', 'B', 'C']) // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    equal, compareText, compare, compareNatural
	   *
	   * @param  {string | Array | DenseMatrix} x First string to compare
	   * @param  {string | Array | DenseMatrix} y Second string to compare
	   * @return {number | Array | DenseMatrix} Returns true if the values are equal, and false if not.
	   */

	  var equalText = typed('equalText', {
	    'any, any': function anyAny(x, y) {
	      return isZero$1(compareText$1(x, y));
	    }
	  });
	  equalText.toTex = undefined; // use default template

	  return equalText;
	}

	var name$3c = 'equalText';
	var factory_1$3p = factory$3p;

	var equalText = {
		name: name$3c,
		factory: factory_1$3p
	};

	var nearlyEqual$7 = number.nearlyEqual;



	function factory$3q(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm07$1 = load(algorithm07);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);

	  var latex$1 = latex;
	  /**
	   * Test whether value x is smaller or equal to y.
	   *
	   * The function returns true when x is smaller than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * Strings are compared by their numerical value.
	   *
	   * Syntax:
	   *
	   *    math.smallerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(1 + 2, 3)        // returns false
	   *    math.smallerEq(1 + 2, 3)      // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */


	  var smallerEq = typed('smallerEq', {
	    'boolean, boolean': function booleanBoolean(x, y) {
	      return x <= y;
	    },
	    'number, number': function numberNumber(x, y) {
	      return x <= y || nearlyEqual$7(x, y, config.epsilon);
	    },
	    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {
	      return x.lte(y) || nearlyEqual(x, y, config.epsilon);
	    },
	    'Fraction, Fraction': function FractionFraction(x, y) {
	      return x.compare(y) !== 1;
	    },
	    'Complex, Complex': function ComplexComplex() {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	    'Unit, Unit': function UnitUnit(x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }

	      return smallerEq(x.value, y.value);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm07$1(x, y, smallerEq);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      return algorithm03$1(y, x, smallerEq, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, smallerEq, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, smallerEq);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return smallerEq(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return smallerEq(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return smallerEq(x, matrix$1(y));
	    },
	    'SparseMatrix, any': function SparseMatrixAny(x, y) {
	      return algorithm12$1(x, y, smallerEq, false);
	    },
	    'DenseMatrix, any': function DenseMatrixAny(x, y) {
	      return algorithm14$1(x, y, smallerEq, false);
	    },
	    'any, SparseMatrix': function anySparseMatrix(x, y) {
	      return algorithm12$1(y, x, smallerEq, true);
	    },
	    'any, DenseMatrix': function anyDenseMatrix(x, y) {
	      return algorithm14$1(y, x, smallerEq, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, smallerEq, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, smallerEq, true).valueOf();
	    }
	  });
	  smallerEq.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['smallerEq'], "${args[1]}\\right)")
	  };
	  return smallerEq;
	}

	var name$3d = 'smallerEq';
	var factory_1$3q = factory$3q;

	var smallerEq = {
		name: name$3d,
		factory: factory_1$3q
	};

	var relational = [compare, compareNatural, compareText, deepEqual$1, equal, equalText, larger, largerEq, smaller, smallerEq, unequal];

	var flatten$2 = array.flatten;

	function factory$3r(type, config, load, typed) {
	  var MatrixIndex$1 = load(MatrixIndex);
	  var DenseMatrix$1 = load(DenseMatrix);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  var compareNatural$1 = load(compareNatural);
	  /**
	   * Create the cartesian product of two (multi)sets.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setCartesian(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setCartesian([1, 2], [3, 4])        // returns [[1, 3], [1, 4], [2, 3], [2, 4]]
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setDifference, setPowerset
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The cartesian product of two (multi)sets
	   */

	  var setCartesian = typed('setCartesian', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      var result = [];

	      if (subset$1(size(a1), new MatrixIndex$1(0)) !== 0 && subset$1(size(a2), new MatrixIndex$1(0)) !== 0) {
	        // if any of them is empty, return empty
	        var b1 = flatten$2(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural$1);
	        var b2 = flatten$2(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural$1);
	        result = [];

	        for (var i = 0; i < b1.length; i++) {
	          for (var j = 0; j < b2.length; j++) {
	            result.push([b1[i], b2[j]]);
	          }
	        }
	      } // return an array, if both inputs were arrays


	      if (Array.isArray(a1) && Array.isArray(a2)) {
	        return result;
	      } // return a matrix otherwise


	      return new DenseMatrix$1(result);
	    }
	  });
	  return setCartesian;
	}

	var name$3e = 'setCartesian';
	var factory_1$3r = factory$3r;

	var setCartesian = {
		name: name$3e,
		factory: factory_1$3r
	};

	var flatten$3 = array.flatten;

	var identify = array.identify;

	var generalize = array.generalize;

	function factory$3s(type, config, load, typed) {
	  var MatrixIndex$1 = load(MatrixIndex);
	  var DenseMatrix$1 = load(DenseMatrix);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  var compareNatural$1 = load(compareNatural);
	  /**
	   * Create the difference of two (multi)sets: every element of set1, that is not the element of set2.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setDifference(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2]
	   *    math.setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2]
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setSymDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The difference of two (multi)sets
	   */

	  var setDifference = typed('setDifference', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      var result;

	      if (subset$1(size(a1), new MatrixIndex$1(0)) === 0) {
	        // empty-anything=empty
	        result = [];
	      } else if (subset$1(size(a2), new MatrixIndex$1(0)) === 0) {
	        // anything-empty=anything
	        return flatten$3(a1.toArray());
	      } else {
	        var b1 = identify(flatten$3(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural$1));
	        var b2 = identify(flatten$3(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural$1));
	        result = [];
	        var inb2;

	        for (var i = 0; i < b1.length; i++) {
	          inb2 = false;

	          for (var j = 0; j < b2.length; j++) {
	            if (compareNatural$1(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
	              // the identifier is always a decimal int
	              inb2 = true;
	              break;
	            }
	          }

	          if (!inb2) {
	            result.push(b1[i]);
	          }
	        }
	      } // return an array, if both inputs were arrays


	      if (Array.isArray(a1) && Array.isArray(a2)) {
	        return generalize(result);
	      } // return a matrix otherwise


	      return new DenseMatrix$1(generalize(result));
	    }
	  });
	  return setDifference;
	}

	var name$3f = 'setDifference';
	var factory_1$3s = factory$3s;

	var setDifference = {
		name: name$3f,
		factory: factory_1$3s
	};

	var flatten$4 = array.flatten;

	function factory$3t(type, config, load, typed) {
	  var MatrixIndex$1 = load(MatrixIndex);
	  var DenseMatrix$1 = load(DenseMatrix);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  var compareNatural$1 = load(compareNatural);
	  /**
	   * Collect the distinct elements of a multiset.
	   * A multi-dimension array will be converted to a single-dimension array before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setDistinct(set)
	   *
	   * Examples:
	   *
	   *    math.setDistinct([1, 1, 1, 2, 2, 3])        // returns [1, 2, 3]
	   *
	   * See also:
	   *
	   *    setMultiplicity
	   *
	   * @param {Array | Matrix}    a  A multiset
	   * @return {Array | Matrix}    A set containing the distinc elements of the multiset
	   */

	  var setDistinct = typed('setDistinct', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      var result;

	      if (subset$1(size(a), new MatrixIndex$1(0)) === 0) {
	        // if empty, return empty
	        result = [];
	      } else {
	        var b = flatten$4(Array.isArray(a) ? a : a.toArray()).sort(compareNatural$1);
	        result = [];
	        result.push(b[0]);

	        for (var i = 1; i < b.length; i++) {
	          if (compareNatural$1(b[i], b[i - 1]) !== 0) {
	            result.push(b[i]);
	          }
	        }
	      } // return an array, if the input was an array


	      if (Array.isArray(a)) {
	        return result;
	      } // return a matrix otherwise


	      return new DenseMatrix$1(result);
	    }
	  });
	  return setDistinct;
	}

	var name$3g = 'setDistinct';
	var factory_1$3t = factory$3t;

	var setDistinct = {
		name: name$3g,
		factory: factory_1$3t
	};

	var flatten$5 = array.flatten;

	var identify$1 = array.identify;

	var generalize$1 = array.generalize;

	function factory$3u(type, config, load, typed) {
	  var MatrixIndex$1 = load(MatrixIndex);
	  var DenseMatrix$1 = load(DenseMatrix);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  var compareNatural$1 = load(compareNatural);
	  /**
	   * Create the intersection of two (multi)sets.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setIntersect(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setIntersect([1, 2, 3, 4], [3, 4, 5, 6])            // returns [3, 4]
	   *    math.setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [3, 4]
	   *
	   * See also:
	   *
	   *    setUnion, setDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The intersection of two (multi)sets
	   */

	  var setIntersect = typed('setIntersect', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      var result;

	      if (subset$1(size(a1), new MatrixIndex$1(0)) === 0 || subset$1(size(a2), new MatrixIndex$1(0)) === 0) {
	        // of any of them is empty, return empty
	        result = [];
	      } else {
	        var b1 = identify$1(flatten$5(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural$1));
	        var b2 = identify$1(flatten$5(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural$1));
	        result = [];

	        for (var i = 0; i < b1.length; i++) {
	          for (var j = 0; j < b2.length; j++) {
	            if (compareNatural$1(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
	              // the identifier is always a decimal int
	              result.push(b1[i]);
	              break;
	            }
	          }
	        }
	      } // return an array, if both inputs were arrays


	      if (Array.isArray(a1) && Array.isArray(a2)) {
	        return generalize$1(result);
	      } // return a matrix otherwise


	      return new DenseMatrix$1(generalize$1(result));
	    }
	  });
	  return setIntersect;
	}

	var name$3h = 'setIntersect';
	var factory_1$3u = factory$3u;

	var setIntersect = {
		name: name$3h,
		factory: factory_1$3u
	};

	var flatten$6 = array.flatten;

	var identify$2 = array.identify;

	function factory$3v(type, config, load, typed) {
	  var MatrixIndex$1 = load(MatrixIndex);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  var compareNatural$1 = load(compareNatural);
	  /**
	   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setIsSubset(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false
	   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {boolean}            true | false
	   */

	  var setIsSubset = typed('setIsSubset', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      if (subset$1(size(a1), new MatrixIndex$1(0)) === 0) {
	        // empty is a subset of anything
	        return true;
	      } else if (subset$1(size(a2), new MatrixIndex$1(0)) === 0) {
	        // anything is not a subset of empty
	        return false;
	      }

	      var b1 = identify$2(flatten$6(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural$1));
	      var b2 = identify$2(flatten$6(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural$1));
	      var inb2;

	      for (var i = 0; i < b1.length; i++) {
	        inb2 = false;

	        for (var j = 0; j < b2.length; j++) {
	          if (compareNatural$1(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {
	            // the identifier is always a decimal int
	            inb2 = true;
	            break;
	          }
	        }

	        if (inb2 === false) {
	          return false;
	        }
	      }

	      return true;
	    }
	  });
	  return setIsSubset;
	}

	var name$3i = 'setIsSubset';
	var factory_1$3v = factory$3v;

	var setIsSubset = {
		name: name$3i,
		factory: factory_1$3v
	};

	var flatten$7 = array.flatten;

	function factory$3w(type, config, load, typed) {
	  var compareNatural$1 = load(compareNatural);
	  var MatrixIndex$1 = load(MatrixIndex);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  /**
	   * Count the multiplicity of an element in a multiset.
	   * A multi-dimension array will be converted to a single-dimension array before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setMultiplicity(element, set)
	   *
	   * Examples:
	   *
	   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1
	   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2
	   *
	   * See also:
	   *
	   *    setDistinct, setSize
	   *
	   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset
	   * @param {Array | Matrix}     a  A multiset
	   * @return {number}            The number of how many times the multiset contains the element
	   */

	  var setMultiplicity = typed('setMultiplicity', {
	    'number | BigNumber | Fraction | Complex, Array | Matrix': function numberBigNumberFractionComplexArrayMatrix(e, a) {
	      if (subset$1(size(a), new MatrixIndex$1(0)) === 0) {
	        // if empty, return 0
	        return 0;
	      }

	      var b = flatten$7(Array.isArray(a) ? a : a.toArray());
	      var count = 0;

	      for (var i = 0; i < b.length; i++) {
	        if (compareNatural$1(b[i], e) === 0) {
	          count++;
	        }
	      }

	      return count;
	    }
	  });
	  return setMultiplicity;
	}

	var name$3j = 'setMultiplicity';
	var factory_1$3w = factory$3w;

	var setMultiplicity = {
		name: name$3j,
		factory: factory_1$3w
	};

	var flatten$8 = array.flatten;

	function factory$3x(type, config, load, typed) {
	  var MatrixIndex$1 = load(MatrixIndex);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  var compareNatural$1 = load(compareNatural);
	  /**
	   * Create the powerset of a (multi)set. (The powerset contains very possible subsets of a (multi)set.)
	   * A multi-dimension array will be converted to a single-dimension array before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setPowerset(set)
	   *
	   * Examples:
	   *
	   *    math.setPowerset([1, 2, 3])        // returns [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
	   *
	   * See also:
	   *
	   *    setCartesian
	   *
	   * @param {Array | Matrix}    a  A (multi)set
	   * @return {Array}    The powerset of the (multi)set
	   */

	  var setPowerset = typed('setPowerset', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      if (subset$1(size(a), new MatrixIndex$1(0)) === 0) {
	        // if empty, return empty
	        return [];
	      }

	      var b = flatten$8(Array.isArray(a) ? a : a.toArray()).sort(compareNatural$1);
	      var result = [];
	      var number = 0;

	      while (number.toString(2).length <= b.length) {
	        result.push(_subset(b, number.toString(2).split('').reverse()));
	        number++;
	      } // can not return a matrix, because of the different size of the subarrays


	      return _sort(result);
	    }
	  });
	  return setPowerset; // create subset

	  function _subset(array, bitarray) {
	    var result = [];

	    for (var i = 0; i < bitarray.length; i++) {
	      if (bitarray[i] === '1') {
	        result.push(array[i]);
	      }
	    }

	    return result;
	  } // sort subsests by length


	  function _sort(array) {
	    var temp = [];

	    for (var i = array.length - 1; i > 0; i--) {
	      for (var j = 0; j < i; j++) {
	        if (array[j].length > array[j + 1].length) {
	          temp = array[j];
	          array[j] = array[j + 1];
	          array[j + 1] = temp;
	        }
	      }
	    }

	    return array;
	  }
	}

	var name$3k = 'setPowerset';
	var factory_1$3x = factory$3x;

	var setPowerset = {
		name: name$3k,
		factory: factory_1$3x
	};

	var flatten$9 = array.flatten;

	function factory$3y(type, config, load, typed) {
	  var compareNatural$1 = load(compareNatural);
	  /**
	   * Count the number of elements of a (multi)set. When a second parameter is 'true', count only the unique values.
	   * A multi-dimension array will be converted to a single-dimension array before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setSize(set)
	   *    math.setSize(set, unique)
	   *
	   * Examples:
	   *
	   *    math.setSize([1, 2, 2, 4])          // returns 4
	   *    math.setSize([1, 2, 2, 4], true)    // returns 3
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setDifference
	   *
	   * @param {Array | Matrix}    a  A multiset
	   * @return {number}            The number of elements of the (multi)set
	   */

	  var setSize = typed('setSize', {
	    'Array | Matrix': function ArrayMatrix(a) {
	      return Array.isArray(a) ? flatten$9(a).length : flatten$9(a.toArray()).length;
	    },
	    'Array | Matrix, boolean': function ArrayMatrixBoolean(a, unique) {
	      if (unique === false || a.length === 0) {
	        return Array.isArray(a) ? flatten$9(a).length : flatten$9(a.toArray()).length;
	      } else {
	        var b = flatten$9(Array.isArray(a) ? a : a.toArray()).sort(compareNatural$1);
	        var count = 1;

	        for (var i = 1; i < b.length; i++) {
	          if (compareNatural$1(b[i], b[i - 1]) !== 0) {
	            count++;
	          }
	        }

	        return count;
	      }
	    }
	  });
	  return setSize;
	}

	var name$3l = 'setSize';
	var factory_1$3y = factory$3y;

	var setSize = {
		name: name$3l,
		factory: factory_1$3y
	};

	var flatten$a = array.flatten;

	function factory$3z(type, config, load, typed) {
	  var MatrixIndex$1 = load(MatrixIndex);
	  var concat$1 = load(concat);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  var setDifference$1 = load(setDifference);
	  /**
	   * Create the symmetric difference of two (multi)sets.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setSymDifference(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 5, 6]
	   *    math.setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 5, 6]
	   *
	   * See also:
	   *
	   *    setUnion, setIntersect, setDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The symmetric difference of two (multi)sets
	   */

	  var setSymDifference = typed('setSymDifference', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      if (subset$1(size(a1), new MatrixIndex$1(0)) === 0) {
	        // if any of them is empty, return the other one
	        return flatten$a(a2);
	      } else if (subset$1(size(a2), new MatrixIndex$1(0)) === 0) {
	        return flatten$a(a1);
	      }

	      var b1 = flatten$a(a1);
	      var b2 = flatten$a(a2);
	      return concat$1(setDifference$1(b1, b2), setDifference$1(b2, b1));
	    }
	  });
	  return setSymDifference;
	}

	var name$3m = 'setSymDifference';
	var factory_1$3z = factory$3z;

	var setSymDifference = {
		name: name$3m,
		factory: factory_1$3z
	};

	var flatten$b = array.flatten;

	function factory$3A(type, config, load, typed) {
	  var MatrixIndex$1 = load(MatrixIndex);
	  var concat$1 = load(concat);
	  var size = load(size$3);
	  var subset$1 = load(subset);
	  var setIntersect$1 = load(setIntersect);
	  var setSymDifference$1 = load(setSymDifference);
	  /**
	   * Create the union of two (multi)sets.
	   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.
	   *
	   * Syntax:
	   *
	   *    math.setUnion(set1, set2)
	   *
	   * Examples:
	   *
	   *    math.setUnion([1, 2, 3, 4], [3, 4, 5, 6])            // returns [1, 2, 3, 4, 5, 6]
	   *    math.setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])    // returns [1, 2, 3, 4, 5, 6]
	   *
	   * See also:
	   *
	   *    setIntersect, setDifference
	   *
	   * @param {Array | Matrix}    a1  A (multi)set
	   * @param {Array | Matrix}    a2  A (multi)set
	   * @return {Array | Matrix}    The union of two (multi)sets
	   */

	  var setUnion = typed('setUnion', {
	    'Array | Matrix, Array | Matrix': function ArrayMatrixArrayMatrix(a1, a2) {
	      if (subset$1(size(a1), new MatrixIndex$1(0)) === 0) {
	        // if any of them is empty, return the other one
	        return flatten$b(a2);
	      } else if (subset$1(size(a2), new MatrixIndex$1(0)) === 0) {
	        return flatten$b(a1);
	      }

	      var b1 = flatten$b(a1);
	      var b2 = flatten$b(a2);
	      return concat$1(setSymDifference$1(b1, b2), setIntersect$1(b1, b2));
	    }
	  });
	  return setUnion;
	}

	var name$3n = 'setUnion';
	var factory_1$3A = factory$3A;

	var setUnion = {
		name: name$3n,
		factory: factory_1$3A
	};

	var set = [setCartesian, setDifference, setDistinct, setIntersect, setIsSubset, setMultiplicity, setPowerset, setSize, setSymDifference, setUnion];

	var sign$2 = number.sign;

	function factory$3B(type, config, load, typed) {
	  /**
	   * Compute the erf function of a value using a rational Chebyshev
	   * approximations for different intervals of x.
	   *
	   * This is a translation of W. J. Cody's Fortran implementation from 1987
	   * ( http://www.netlib.org/specfun/erf ). See the AMS publication
	   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
	   * for an explanation of this process.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.erf(x)
	   *
	   * Examples:
	   *
	   *    math.erf(0.2)    // returns 0.22270258921047847
	   *    math.erf(-0.5)   // returns -0.5204998778130465
	   *    math.erf(4)      // returns 0.9999999845827421
	   *
	   * @param {number | Array | Matrix} x   A real number
	   * @return {number | Array | Matrix}    The erf of `x`
	   */
	  var erf = typed('erf', {
	    'number': function number(x) {
	      var y = Math.abs(x);

	      if (y >= MAX_NUM) {
	        return sign$2(x);
	      }

	      if (y <= THRESH) {
	        return sign$2(x) * erf1(y);
	      }

	      if (y <= 4.0) {
	        return sign$2(x) * (1 - erfc2(y));
	      }

	      return sign$2(x) * (1 - erfc3(y));
	    },
	    // TODO: Not sure if there's a way to guarantee some degree of accuracy here.
	    //  Perhaps it would be best to set the precision of the number to that which
	    //  is guaranteed by erf()
	    'BigNumber': function BigNumber(n) {
	      return new type.BigNumber(erf(n.toNumber()));
	    },
	    'Array | Matrix': function ArrayMatrix(n) {
	      return deepMap(n, erf);
	    } // TODO: For complex numbers, use the approximation for the Faddeeva function
	    //  from "More Efficient Computation of the Complex Error Function" (AMS)

	  });
	  /**
	   * Approximates the error function erf() for x <= 0.46875 using this function:
	   *               n
	   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
	   *              j=0
	   */

	  function erf1(y) {
	    var ysq = y * y;
	    var xnum = P$1[0][4] * ysq;
	    var xden = ysq;
	    var i;

	    for (i = 0; i < 3; i += 1) {
	      xnum = (xnum + P$1[0][i]) * ysq;
	      xden = (xden + Q[0][i]) * ysq;
	    }

	    return y * (xnum + P$1[0][3]) / (xden + Q[0][3]);
	  }
	  /**
	   * Approximates the complement of the error function erfc() for
	   * 0.46875 <= x <= 4.0 using this function:
	   *                       n
	   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
	   *                      j=0
	   */


	  function erfc2(y) {
	    var xnum = P$1[1][8] * y;
	    var xden = y;
	    var i;

	    for (i = 0; i < 7; i += 1) {
	      xnum = (xnum + P$1[1][i]) * y;
	      xden = (xden + Q[1][i]) * y;
	    }

	    var result = (xnum + P$1[1][7]) / (xden + Q[1][7]);
	    var ysq = parseInt(y * 16) / 16;
	    var del = (y - ysq) * (y + ysq);
	    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
	  }
	  /**
	   * Approximates the complement of the error function erfc() for x > 4.0 using
	   * this function:
	   *
	   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
	   *               n
	   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
	   *              j=0
	   */


	  function erfc3(y) {
	    var ysq = 1 / (y * y);
	    var xnum = P$1[2][5] * ysq;
	    var xden = ysq;
	    var i;

	    for (i = 0; i < 4; i += 1) {
	      xnum = (xnum + P$1[2][i]) * ysq;
	      xden = (xden + Q[2][i]) * ysq;
	    }

	    var result = ysq * (xnum + P$1[2][4]) / (xden + Q[2][4]);
	    result = (SQRPI - result) / y;
	    ysq = parseInt(y * 16) / 16;
	    var del = (y - ysq) * (y + ysq);
	    return Math.exp(-ysq * ysq) * Math.exp(-del) * result;
	  }

	  erf.toTex = {
	    1: "erf\\left(${args[0]}\\right)"
	  };
	  return erf;
	}
	/**
	 * Upper bound for the first approximation interval, 0 <= x <= THRESH
	 * @constant
	 */


	var THRESH = 0.46875;
	/**
	 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
	 * @constant
	 */

	var SQRPI = 5.6418958354775628695e-1;
	/**
	 * Coefficients for each term of the numerator sum (p_j) for each approximation
	 * interval (see W. J. Cody's paper for more details)
	 * @constant
	 */

	var P$1 = [[3.16112374387056560e00, 1.13864154151050156e02, 3.77485237685302021e02, 3.20937758913846947e03, 1.85777706184603153e-1], [5.64188496988670089e-1, 8.88314979438837594e00, 6.61191906371416295e01, 2.98635138197400131e02, 8.81952221241769090e02, 1.71204761263407058e03, 2.05107837782607147e03, 1.23033935479799725e03, 2.15311535474403846e-8], [3.05326634961232344e-1, 3.60344899949804439e-1, 1.25781726111229246e-1, 1.60837851487422766e-2, 6.58749161529837803e-4, 1.63153871373020978e-2]];
	/**
	 * Coefficients for each term of the denominator sum (q_j) for each approximation
	 * interval (see W. J. Cody's paper for more details)
	 * @constant
	 */

	var Q = [[2.36012909523441209e01, 2.44024637934444173e02, 1.28261652607737228e03, 2.84423683343917062e03], [1.57449261107098347e01, 1.17693950891312499e02, 5.37181101862009858e02, 1.62138957456669019e03, 3.29079923573345963e03, 4.36261909014324716e03, 3.43936767414372164e03, 1.23033935480374942e03], [2.56852019228982242e00, 1.87295284992346047e00, 5.27905102951428412e-1, 6.05183413124413191e-2, 2.33520497626869185e-3]];
	/**
	 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
	 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
	 * return 1
	 */

	var MAX_NUM = Math.pow(2, 53);
	var name$3o = 'erf';
	var factory_1$3B = factory$3B;

	var erf = {
		name: name$3o,
		factory: factory_1$3B
	};

	var special = [erf];

	var flatten$c = array.flatten;



	function factory$3C(type, config, load, typed) {
	  var add = load(addScalar);
	  var divide = load(divideScalar);
	  var compare$1 = load(compare);
	  var partitionSelect$1 = load(partitionSelect);
	  var improveErrorMessage$1 = load(improveErrorMessage);
	  /**
	   * Compute the median of a matrix or a list with values. The values are
	   * sorted and the middle value is returned. In case of an even number of
	   * values, the average of the two middle values is returned.
	   * Supported types of values are: Number, BigNumber, Unit
	   *
	   * In case of a (multi dimensional) array or matrix, the median of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.median(a, b, c, ...)
	   *     math.median(A)
	   *
	   * Examples:
	   *
	   *     math.median(5, 2, 7)        // returns 5
	   *     math.median([3, -1, 5, 7])  // returns 4
	   *
	   * See also:
	   *
	   *     mean, min, max, sum, prod, std, var, quantileSeq
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The median
	   */

	  var median = typed('median', {
	    // median([a, b, c, d, ...])
	    'Array | Matrix': _median,
	    // median([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      // TODO: implement median(A, dim)
	      throw new Error('median(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], ...)
	    },
	    // median(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function median');
	      }

	      return _median(args);
	    }
	  });
	  /**
	   * Recursively calculate the median of an n-dimensional array
	   * @param {Array} array
	   * @return {Number} median
	   * @private
	   */

	  function _median(array) {
	    try {
	      array = flatten$c(array.valueOf());
	      var num = array.length;

	      if (num === 0) {
	        throw new Error('Cannot calculate median of an empty array');
	      }

	      if (num % 2 === 0) {
	        // even: return the average of the two middle values
	        var mid = num / 2 - 1;
	        var right = partitionSelect$1(array, mid + 1); // array now partitioned at mid + 1, take max of left part

	        var left = array[mid];

	        for (var i = 0; i < mid; ++i) {
	          if (compare$1(array[i], left) > 0) {
	            left = array[i];
	          }
	        }

	        return middle2(left, right);
	      } else {
	        // odd: return the middle value
	        var m = partitionSelect$1(array, (num - 1) / 2);
	        return middle(m);
	      }
	    } catch (err) {
	      throw improveErrorMessage$1(err, 'median');
	    }
	  } // helper function to type check the middle value of the array


	  var middle = typed({
	    'number | BigNumber | Complex | Unit': function numberBigNumberComplexUnit(value) {
	      return value;
	    }
	  }); // helper function to type check the two middle value of the array

	  var middle2 = typed({
	    'number | BigNumber | Complex | Unit, number | BigNumber | Complex | Unit': function numberBigNumberComplexUnitNumberBigNumberComplexUnit(left, right) {
	      return divide(add(left, right), 2);
	    }
	  });
	  median.toTex = undefined; // use default template

	  return median;
	}

	var name$3p = 'median';
	var factory_1$3C = factory$3C;

	var median = {
		name: name$3p,
		factory: factory_1$3C
	};

	var flatten$d = array.flatten;

	function factory$3D(type, config, load, typed) {
	  var abs = load(abs$1);
	  var map = load(map$5);
	  var median$1 = load(median);
	  var subtract$1 = load(subtract);
	  var improveErrorMessage$1 = load(improveErrorMessage);
	  /**
	   * Compute the median absolute deviation of a matrix or a list with values.
	   * The median absolute deviation is defined as the median of the absolute
	   * deviations from the median.
	   *
	   * Syntax:
	   *
	   *     math.mad(a, b, c, ...)
	   *     math.mad(A)
	   *
	   * Examples:
	   *
	   *     math.mad(10, 20, 30)             // returns 10
	   *     math.mad([1, 2, 3])              // returns 1
	   *     math.mad([[1, 2, 3], [4, 5, 6]]) // returns 1.5
	   *
	   * See also:
	   *
	   *     median, mean, std, abs
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or multiple scalar values.
	   * @return {*} The median absolute deviation.
	   */

	  var mad = typed('mad', {
	    // mad([a, b, c, d, ...])
	    'Array | Matrix': _mad,
	    // mad(a, b, c, d, ...)
	    '...': function _(args) {
	      return _mad(args);
	    }
	  });
	  mad.toTex = undefined; // use default template

	  return mad;

	  function _mad(array) {
	    array = flatten$d(array.valueOf());

	    if (array.length === 0) {
	      throw new Error('Cannot calculate median absolute deviation (mad) of an empty array');
	    }

	    try {
	      var med = median$1(array);
	      return median$1(map(array, function (value) {
	        return abs(subtract$1(value, med));
	      }));
	    } catch (err) {
	      if (err instanceof TypeError && err.message.indexOf('median') !== -1) {
	        throw new TypeError(err.message.replace('median', 'mad'));
	      } else {
	        throw improveErrorMessage$1(err, 'mad');
	      }
	    }
	  }
	}

	var name$3q = 'mad';
	var factory_1$3D = factory$3D;

	var mad = {
		name: name$3q,
		factory: factory_1$3D
	};

	var size$5 = array.size;







	function factory$3E(type, config, load, typed) {
	  var add = load(add$1);
	  var divide = load(divide$1);
	  var improveErrorMessage$1 = load(improveErrorMessage);
	  /**
	   * Compute the mean value of matrix or a list with values.
	   * In case of a multi dimensional array, the mean of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.mean(a, b, c, ...)
	   *     math.mean(A)
	   *     math.mean(A, dim)
	   *
	   * Examples:
	   *
	   *     math.mean(2, 1, 4, 3)                     // returns 2.5
	   *     math.mean([1, 2.7, 3.2, 4])               // returns 2.725
	   *
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 0)    // returns [3, 5]
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 1)    // returns [3.5, 4.5, 4]
	   *
	   * See also:
	   *
	   *     median, min, max, sum, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The mean of all values
	   */

	  var mean = typed('mean', {
	    // mean([a, b, c, d, ...])
	    'Array | Matrix': _mean,
	    // mean([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': _nmeanDim,
	    // mean(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function mean');
	      }

	      return _mean(args);
	    }
	  });
	  mean.toTex = undefined; // use default template

	  return mean;
	  /**
	   * Calculate the mean value in an n-dimensional array, returning a
	   * n-1 dimensional array
	   * @param {Array} array
	   * @param {number} dim
	   * @return {number} mean
	   * @private
	   */

	  function _nmeanDim(array, dim) {
	    try {
	      var sum = reduce(array, dim, add);
	      var s = Array.isArray(array) ? size$5(array) : array.size();
	      return divide(sum, s[dim]);
	    } catch (err) {
	      throw improveErrorMessage$1(err, 'mean');
	    }
	  }
	  /**
	   * Recursively calculate the mean value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} mean
	   * @private
	   */


	  function _mean(array) {
	    var sum = 0;
	    var num = 0;
	    deepForEach(array, function (value) {
	      try {
	        sum = add(sum, value);
	        num++;
	      } catch (err) {
	        throw improveErrorMessage$1(err, 'mean', value);
	      }
	    });

	    if (num === 0) {
	      throw new Error('Cannot calculate mean of an empty array');
	    }

	    return divide(sum, num);
	  }
	}

	var name$3r = 'mean';
	var factory_1$3E = factory$3E;

	var mean = {
		name: name$3r,
		factory: factory_1$3E
	};

	function factory$3F(type, config, load, typed) {
	  var smaller$1 = load(smaller);
	  var improveErrorMessage$1 = load(improveErrorMessage);
	  /**
	   * Compute the minimum value of a matrix or a  list of values.
	   * In case of a multi dimensional array, the minimum of the flattened array
	   * will be calculated. When `dim` is provided, the minimum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.min(a, b, c, ...)
	   *     math.min(A)
	   *     math.min(A, dim)
	   *
	   * Examples:
	   *
	   *     math.min(2, 1, 4, 3)                  // returns 1
	   *     math.min([2, 1, 4, 3])                // returns 1
	   *
	   *     // minimum over a specified dimension (zero-based)
	   *     math.min([[2, 5], [4, 3], [1, 7]], 0) // returns [1, 3]
	   *     math.min([[2, 5], [4, 3], [1, 7]], 1) // returns [2, 3, 1]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1)    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1)    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, max, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The minimum value
	   */

	  var min = typed('min', {
	    // min([a, b, c, d, ...])
	    'Array | Matrix': _min,
	    // min([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      return reduce(array, dim.valueOf(), _smallest);
	    },
	    // min(a, b, c, d, ...)
	    '...': function _(args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function min');
	      }

	      return _min(args);
	    }
	  });
	  min.toTex = "\\min\\left(${args}\\right)";
	  return min;
	  /**
	   * Return the smallest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is smallest, or y when y is smallest
	   * @private
	   */

	  function _smallest(x, y) {
	    try {
	      return smaller$1(x, y) ? x : y;
	    } catch (err) {
	      throw improveErrorMessage$1(err, 'min', y);
	    }
	  }
	  /**
	   * Recursively calculate the minimum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} min
	   * @private
	   */


	  function _min(array) {
	    var min;
	    deepForEach(array, function (value) {
	      try {
	        if (isNaN(value) && typeof value === 'number') {
	          min = NaN;
	        } else if (min === undefined || smaller$1(value, min)) {
	          min = value;
	        }
	      } catch (err) {
	        throw improveErrorMessage$1(err, 'min', value);
	      }
	    });

	    if (min === undefined) {
	      throw new Error('Cannot calculate min of an empty array');
	    }

	    return min;
	  }
	}

	var name$3s = 'min';
	var factory_1$3F = factory$3F;

	var min$1 = {
		name: name$3s,
		factory: factory_1$3F
	};

	var flatten$e = array.flatten;

	function factory$3G(type, config, load, typed) {
	  var isNaN = load(_isNaN);
	  var isNumeric$1 = load(isNumeric);
	  /**
	  * Computes the mode of a set of numbers or a list with values(numbers or characters).
	  * If there are more than one modes, it returns a list of those values.
	  *
	  * Syntax:
	  *
	  *     math.mode(a, b, c, ...)
	  *     math.mode(A)
	  *
	  * Examples:
	  *
	  *     math.mode(2, 1, 4, 3, 1)                            // returns [1]
	  *     math.mode([1, 2.7, 3.2, 4, 2.7])                    // returns [2.7]
	  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
	  *     math.mode('a','a','b','c')                           // returns ["a"]
	  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
	  *
	  * See also:
	  *
	  *     median,
	  *     mean
	  *
	  * @param {... *} args  A single matrix
	  * @return {*} The mode of all values
	  */

	  var mode = typed('mode', {
	    'Array | Matrix': _mode,
	    '...': function _(args) {
	      return _mode(args);
	    }
	  });
	  return mode;
	  /**
	   * Calculates the mode in an 1-dimensional array
	   * @param {Array} values
	   * @return {Array} mode
	   * @private
	   */

	  function _mode(values) {
	    values = flatten$e(values.valueOf());
	    var num = values.length;

	    if (num === 0) {
	      throw new Error('Cannot calculate mode of an empty array');
	    }

	    var count = {};
	    var mode = [];
	    var max = 0;

	    for (var i = 0; i < values.length; i++) {
	      var value = values[i];

	      if (isNumeric$1(value) && isNaN(value)) {
	        throw new Error('Cannot calculate mode of an array containing NaN values');
	      }

	      if (!(value in count)) {
	        count[value] = 0;
	      }

	      count[value]++;

	      if (count[value] === max) {
	        mode.push(value);
	      } else if (count[value] > max) {
	        max = count[value];
	        mode = [value];
	      }
	    }

	    return mode;
	  }
	}

	var name$3t = 'mode';
	var factory_1$3G = factory$3G;

	var mode = {
		name: name$3t,
		factory: factory_1$3G
	};

	function factory$3H(type, config, load, typed) {
	  var multiply = load(multiplyScalar);
	  var improveErrorMessage$1 = load(improveErrorMessage);
	  /**
	   * Compute the product of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.prod(a, b, c, ...)
	   *     math.prod(A)
	   *
	   * Examples:
	   *
	   *     math.multiply(2, 3)           // returns 6
	   *     math.prod(2, 3)               // returns 6
	   *     math.prod(2, 3, 4)            // returns 24
	   *     math.prod([2, 3, 4])          // returns 24
	   *     math.prod([[2, 5], [4, 3]])   // returns 120
	   *
	   * See also:
	   *
	   *    mean, median, min, max, sum, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The product of all values
	   */

	  var prod = typed('prod', {
	    // prod([a, b, c, d, ...])
	    'Array | Matrix': _prod,
	    // prod([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function ArrayMatrixNumberBigNumber(array, dim) {
	      // TODO: implement prod(A, dim)
	      throw new Error('prod(A, dim) is not yet supported'); // return reduce(arguments[0], arguments[1], math.prod)
	    },
	    // prod(a, b, c, d, ...)
	    '...': function _(args) {
	      return _prod(args);
	    }
	  });
	  prod.toTex = undefined; // use default template

	  return prod;
	  /**
	   * Recursively calculate the product of an n-dimensional array
	   * @param {Array} array
	   * @return {number} prod
	   * @private
	   */

	  function _prod(array) {
	    var prod;
	    deepForEach(array, function (value) {
	      try {
	        prod = prod === undefined ? value : multiply(prod, value);
	      } catch (err) {
	        throw improveErrorMessage$1(err, 'prod', value);
	      }
	    });

	    if (prod === undefined) {
	      throw new Error('Cannot calculate prod of an empty array');
	    }

	    return prod;
	  }
	}

	var name$3u = 'prod';
	var factory_1$3H = factory$3H;

	var prod = {
		name: name$3u,
		factory: factory_1$3H
	};

	var isInteger$q = number.isInteger;

	var isNumber$4 = number.isNumber;

	var flatten$f = array.flatten;



	function factory$3I(type, config, load, typed) {
	  var add = load(add$1);
	  var multiply$1 = load(multiply);
	  var partitionSelect$1 = load(partitionSelect);
	  var compare$1 = load(compare);
	  /**
	   * Compute the prob order quantile of a matrix or a list with values.
	   * The sequence is sorted and the middle value is returned.
	   * Supported types of sequence values are: Number, BigNumber, Unit
	   * Supported types of probability are: Number, BigNumber
	   *
	   * In case of a (multi dimensional) array or matrix, the prob order quantile
	   * of all elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.quantileSeq(A, prob[, sorted])
	   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
	   *     math.quantileSeq(A, N[, sorted])
	   *
	   * Examples:
	   *
	   *     math.quantileSeq([3, -1, 5, 7], 0.5)         // returns 4
	   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3])  // returns [3, 5]
	   *     math.quantileSeq([3, -1, 5, 7], 2)           // returns [3, 5]
	   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true)   // returns 4
	   *
	   * See also:
	   *
	   *     median, mean, min, max, sum, prod, std, var
	   *
	   * @param {Array, Matrix} data                A single matrix or Array
	   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
	   *                                            the amount of evenly distributed steps of
	   *                                            probabilities; only one of these options can
	   *                                            be provided
	   * @param {Boolean} sorted=false              is data sorted in ascending order
	   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
	   */

	  function quantileSeq(data, probOrN, sorted) {
	    var probArr, dataArr, one;

	    if (arguments.length < 2 || arguments.length > 3) {
	      throw new SyntaxError('Function quantileSeq requires two or three parameters');
	    }

	    if (isCollection(data)) {
	      sorted = sorted || false;

	      if (typeof sorted === 'boolean') {
	        dataArr = data.valueOf();

	        if (isNumber$4(probOrN)) {
	          if (probOrN < 0) {
	            throw new Error('N/prob must be non-negative');
	          }

	          if (probOrN <= 1) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }

	          if (probOrN > 1) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!isInteger$q(probOrN)) {
	              throw new Error('N must be a positive integer');
	            }

	            var nPlusOne = probOrN + 1;
	            probArr = new Array(probOrN);

	            for (var i = 0; i < probOrN;) {
	              probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
	            }

	            return probArr;
	          }
	        }

	        if (type.isBigNumber(probOrN)) {
	          if (probOrN.isNegative()) {
	            throw new Error('N/prob must be non-negative');
	          }

	          one = new probOrN.constructor(1);

	          if (probOrN.lte(one)) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return new type.BigNumber(_quantileSeq(dataArr, probOrN, sorted));
	          }

	          if (probOrN.gt(one)) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!probOrN.isInteger()) {
	              throw new Error('N must be a positive integer');
	            } // largest possible Array length is 2^32-1
	            // 2^32 < 10^15, thus safe conversion guaranteed


	            var intN = probOrN.toNumber();

	            if (intN > 4294967295) {
	              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
	            }

	            var _nPlusOne = new type.BigNumber(intN + 1);

	            probArr = new Array(intN);

	            for (var _i = 0; _i < intN;) {
	              probArr[_i] = new type.BigNumber(_quantileSeq(dataArr, new type.BigNumber(++_i).div(_nPlusOne), sorted));
	            }

	            return probArr;
	          }
	        }

	        if (Array.isArray(probOrN)) {
	          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
	          probArr = new Array(probOrN.length);

	          for (var _i2 = 0; _i2 < probArr.length; ++_i2) {
	            var currProb = probOrN[_i2];

	            if (isNumber$4(currProb)) {
	              if (currProb < 0 || currProb > 1) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else if (type.isBigNumber(currProb)) {
	              one = new currProb.constructor(1);

	              if (currProb.isNegative() || currProb.gt(one)) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else {
	              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	            }

	            probArr[_i2] = _quantileSeq(dataArr, currProb, sorted);
	          }

	          return probArr;
	        }

	        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	      }

	      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	    }

	    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	  }
	  /**
	   * Calculate the prob order quantile of an n-dimensional array.
	   *
	   * @param {Array} array
	   * @param {Number, BigNumber} prob
	   * @param {Boolean} sorted
	   * @return {Number, BigNumber, Unit} prob order quantile
	   * @private
	   */


	  function _quantileSeq(array, prob, sorted) {
	    var flat = flatten$f(array);
	    var len = flat.length;

	    if (len === 0) {
	      throw new Error('Cannot calculate quantile of an empty sequence');
	    }

	    if (isNumber$4(prob)) {
	      var _index = prob * (len - 1);

	      var _fracPart = _index % 1;

	      if (_fracPart === 0) {
	        var value = sorted ? flat[_index] : partitionSelect$1(flat, _index);
	        validate(value);
	        return value;
	      }

	      var _integerPart = Math.floor(_index);

	      var _left;

	      var _right;

	      if (sorted) {
	        _left = flat[_integerPart];
	        _right = flat[_integerPart + 1];
	      } else {
	        _right = partitionSelect$1(flat, _integerPart + 1); // max of partition is kth largest

	        _left = flat[_integerPart];

	        for (var i = 0; i < _integerPart; ++i) {
	          if (compare$1(flat[i], _left) > 0) {
	            _left = flat[i];
	          }
	        }
	      }

	      validate(_left);
	      validate(_right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

	      return add(multiply$1(_left, 1 - _fracPart), multiply$1(_right, _fracPart));
	    } // If prob is a BigNumber


	    var index = prob.times(len - 1);

	    if (index.isInteger()) {
	      index = index.toNumber();

	      var _value = sorted ? flat[index] : partitionSelect$1(flat, index);

	      validate(_value);
	      return _value;
	    }

	    var integerPart = index.floor();
	    var fracPart = index.minus(integerPart);
	    var integerPartNumber = integerPart.toNumber();
	    var left;
	    var right;

	    if (sorted) {
	      left = flat[integerPartNumber];
	      right = flat[integerPartNumber + 1];
	    } else {
	      right = partitionSelect$1(flat, integerPartNumber + 1); // max of partition is kth largest

	      left = flat[integerPartNumber];

	      for (var _i3 = 0; _i3 < integerPartNumber; ++_i3) {
	        if (compare$1(flat[_i3], left) > 0) {
	          left = flat[_i3];
	        }
	      }
	    }

	    validate(left);
	    validate(right); // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]

	    var one = new fracPart.constructor(1);
	    return add(multiply$1(left, one.minus(fracPart)), multiply$1(right, fracPart));
	  }
	  /**
	   * Check if array value types are valid, throw error otherwise.
	   * @param {number | BigNumber | Unit} x
	   * @param {number | BigNumber | Unit} x
	   * @private
	   */


	  var validate = typed({
	    'number | BigNumber | Unit': function numberBigNumberUnit(x) {
	      return x;
	    }
	  });
	  return quantileSeq;
	}

	var name$3v = 'quantileSeq';
	var factory_1$3I = factory$3I;

	var quantileSeq = {
		name: name$3v,
		factory: factory_1$3I
	};

	var DEFAULT_NORMALIZATION = 'unbiased';



	function factory$3J(type, config, load, typed) {
	  var add = load(addScalar);
	  var subtract$1 = load(subtract);
	  var multiply = load(multiplyScalar);
	  var divide = load(divideScalar);
	  var isNaN = load(_isNaN);
	  var improveErrorMessage$1 = load(improveErrorMessage);
	  /**
	   * Compute the variance of a matrix or a  list with values.
	   * In case of a (multi dimensional) array or matrix, the variance over all
	   * elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Note that older browser may not like the variable name `var`. In that
	   * case, the function can be called as `math['var'](...)` instead of
	   * `math.var(...)`.
	   *
	   * Syntax:
	   *
	   *     math.var(a, b, c, ...)
	   *     math.var(A)
	   *     math.var(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.var(2, 4, 6)                     // returns 4
	   *     math.var([2, 4, 6, 8])                // returns 6.666666666666667
	   *     math.var([2, 4, 6, 8], 'uncorrected') // returns 5
	   *     math.var([2, 4, 6, 8], 'biased')      // returns 4
	   *
	   *     math.var([[1, 2, 3], [4, 5, 6]])      // returns 3.5
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, std, sum
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The variance
	   */

	  var variance = typed('variance', {
	    // var([a, b, c, d, ...])
	    'Array | Matrix': function ArrayMatrix(array) {
	      return _var(array, DEFAULT_NORMALIZATION);
	    },
	    // var([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _var,
	    // var(a, b, c, d, ...)
	    '...': function _(args) {
	      return _var(args, DEFAULT_NORMALIZATION);
	    }
	  });
	  variance.toTex = "\\mathrm{Var}\\left(${args}\\right)";
	  return variance;
	  /**
	   * Recursively calculate the variance of an n-dimensional array
	   * @param {Array} array
	   * @param {string} normalization
	   *                        Determines how to normalize the variance:
	   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
	   *                        - 'uncorrected' The sum of squared errors is divided by n
	   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
	   * @return {number | BigNumber} variance
	   * @private
	   */

	  function _var(array, normalization) {
	    var sum = 0;
	    var num = 0;

	    if (array.length === 0) {
	      throw new SyntaxError('Function var requires one or more parameters (0 provided)');
	    } // calculate the mean and number of elements


	    deepForEach(array, function (value) {
	      try {
	        sum = add(sum, value);
	        num++;
	      } catch (err) {
	        throw improveErrorMessage$1(err, 'var', value);
	      }
	    });
	    if (num === 0) throw new Error('Cannot calculate var of an empty array');
	    var mean = divide(sum, num); // calculate the variance

	    sum = 0;
	    deepForEach(array, function (value) {
	      var diff = subtract$1(value, mean);
	      sum = add(sum, multiply(diff, diff));
	    });

	    if (isNaN(sum)) {
	      return sum;
	    }

	    switch (normalization) {
	      case 'uncorrected':
	        return divide(sum, num);

	      case 'biased':
	        return divide(sum, num + 1);

	      case 'unbiased':
	        var zero = type.isBigNumber(sum) ? new type.BigNumber(0) : 0;
	        return num === 1 ? zero : divide(sum, num - 1);

	      default:
	        throw new Error('Unknown normalization "' + normalization + '". ' + 'Choose "unbiased" (default), "uncorrected", or "biased".');
	    }
	  }
	}

	var name$3w = 'var';
	var factory_1$3J = factory$3J;

	var _var = {
		name: name$3w,
		factory: factory_1$3J
	};

	function factory$3K(type, config, load, typed) {
	  var sqrt = load(sqrt$1);
	  var variance = load(_var);
	  /**
	   * Compute the standard deviation of a matrix or a  list with values.
	   * The standard deviations is defined as the square root of the variance:
	   * `std(A) = sqrt(var(A))`.
	   * In case of a (multi dimensional) array or matrix, the standard deviation
	   * over all elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Syntax:
	   *
	   *     math.std(a, b, c, ...)
	   *     math.std(A)
	   *     math.std(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.std(2, 4, 6)                     // returns 2
	   *     math.std([2, 4, 6, 8])                // returns 2.581988897471611
	   *     math.std([2, 4, 6, 8], 'uncorrected') // returns 2.23606797749979
	   *     math.std([2, 4, 6, 8], 'biased')      // returns 2
	   *
	   *     math.std([[1, 2, 3], [4, 5, 6]])      // returns 1.8708286933869707
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, sum, var
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The standard deviation
	   */

	  var std = typed('std', {
	    // std([a, b, c, d, ...])
	    'Array | Matrix': _std,
	    // std([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _std,
	    // std(a, b, c, d, ...)
	    '...': function _(args) {
	      return _std(args);
	    }
	  });
	  std.toTex = undefined; // use default template

	  return std;

	  function _std(array, normalization) {
	    if (array.length === 0) {
	      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
	    }

	    try {
	      return sqrt(variance.apply(null, arguments));
	    } catch (err) {
	      if (err instanceof TypeError && err.message.indexOf(' var') !== -1) {
	        throw new TypeError(err.message.replace(' var', ' std'));
	      } else {
	        throw err;
	      }
	    }
	  }
	}

	var name$3x = 'std';
	var factory_1$3K = factory$3K;

	var std = {
		name: name$3x,
		factory: factory_1$3K
	};

	var statistics = [mad, max$1, mean, median, min$1, mode, prod, quantileSeq, std, sum, _var];

	var isString$4 = string.isString;

	var format$8 = string.format;

	function factory$3L(type, config, load, typed) {
	  /**
	   * Interpolate values into a string template.
	   *
	   * Syntax:
	   *
	   *     math.print(template, values)
	   *     math.print(template, values, precision)
	   *     math.print(template, values, options)
	   *
	   * Example usage:
	   *
	   *     // the following outputs: 'Lucy is 5 years old'
	   *     math.print('Lucy is $age years old', {age: 5})
	   *
	   *     // the following outputs: 'The value of pi is 3.141592654'
	   *     math.print('The value of pi is $pi', {pi: math.pi}, 10)
	   *
	   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
	   *     math.print('Hello $user.name! The date is $date', {
	   *       user: {
	   *         name: 'Mary',
	   *       },
	   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
	   *     })
	   *
	   *     // the following outputs: 'My favorite fruits are apples and bananas !'
	   *     math.print('My favorite fruits are $0 and $1 !', [
	   *       'apples',
	   *       'bananas'
	   *     ])
	   *
	   * See also:
	   *
	   *     format
	   *
	   * @param {string} template           A string containing variable placeholders.
	   * @param {Object | Array | Matrix}   values An object or array containing variables
	   *                                    which will be filled in in the template.
	   * @param {number | Object} [options] Formatting options,
	   *                                    or the number of digits to format numbers.
	   *                                    See function math.format for a description
	   *                                    of all options.
	   * @return {string} Interpolated string
	   */
	  var print = typed('print', {
	    // note: Matrix will be converted automatically to an Array
	    'string, Object | Array': _print,
	    'string, Object | Array, number | Object': _print
	  });
	  print.toTex = undefined; // use default template

	  return print;
	}
	/**
	 * Interpolate values into a string template.
	 * @param {string} template
	 * @param {Object} values
	 * @param {number | Object} [options]
	 * @returns {string} Interpolated string
	 * @private
	 */


	function _print(template, values, options) {
	  return template.replace(/\$([\w.]+)/g, function (original, key) {
	    var keys = key.split('.');
	    var value = values[keys.shift()];

	    while (keys.length && value !== undefined) {
	      var k = keys.shift();
	      value = k ? value[k] : value + '.';
	    }

	    if (value !== undefined) {
	      if (!isString$4(value)) {
	        return format$8(value, options);
	      } else {
	        return value;
	      }
	    }

	    return original;
	  });
	}

	var name$3y = 'print';
	var factory_1$3L = factory$3L;

	var print = {
		name: name$3y,
		factory: factory_1$3L
	};

	var string$8 = [format$2, print];

	function factory$3M(type, config, load, typed) {
	  /**
	   * Calculate the inverse cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acos(x)
	   *
	   * Examples:
	   *
	   *    math.acos(0.5)           // returns number 1.0471975511965979
	   *    math.acos(math.cos(1.5)) // returns number 1.5
	   *
	   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cos, atan, asin
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
	   */
	  var acos = typed('acos', {
	    'number': function number(x) {
	      if (x >= -1 && x <= 1 || config.predictable) {
	        return Math.acos(x);
	      } else {
	        return new type.Complex(x, 0).acos();
	      }
	    },
	    'Complex': function Complex(x) {
	      return x.acos();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.acos();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acos);
	    }
	  });
	  acos.toTex = {
	    1: "\\cos^{-1}\\left(${args[0]}\\right)"
	  };
	  return acos;
	}

	var name$3z = 'acos';
	var factory_1$3M = factory$3M;

	var acos$1 = {
		name: name$3z,
		factory: factory_1$3M
	};

	function factory$3N(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arccos of a value,
	   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acosh(x)
	   *
	   * Examples:
	   *
	   *    math.acosh(1.5)       // returns 0.9624236501192069
	   *
	   * See also:
	   *
	   *    cosh, asinh, atanh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
	   */
	  var acosh = typed('acosh', {
	    'number': function number(x) {
	      if (x >= 1 || config.predictable) {
	        return _acosh(x);
	      }

	      if (x <= -1) {
	        return new type.Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);
	      }

	      return new type.Complex(x, 0).acosh();
	    },
	    'Complex': function Complex(x) {
	      return x.acosh();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.acosh();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acosh);
	    }
	  });
	  acosh.toTex = {
	    1: "\\cosh^{-1}\\left(${args[0]}\\right)"
	  };
	  return acosh;
	}
	/**
	 * Calculate the hyperbolic arccos of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */


	var _acosh = Math.acosh || function (x) {
	  return Math.log(Math.sqrt(x * x - 1) + x);
	};

	var name$3A = 'acosh';
	var factory_1$3N = factory$3N;

	var acosh$1 = {
		name: name$3A,
		factory: factory_1$3N
	};

	function factory$3O(type, config, load, typed) {
	  /**
	   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acot(x)
	   *
	   * Examples:
	   *
	   *    math.acot(0.5)           // returns number 0.4636476090008061
	   *    math.acot(math.cot(1.5)) // returns number 1.5
	   *
	   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cot, atan
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cotangent of x
	   */
	  var acot = typed('acot', {
	    'number': function number(x) {
	      return Math.atan(1 / x);
	    },
	    'Complex': function Complex(x) {
	      return x.acot();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).atan();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acot);
	    }
	  });
	  acot.toTex = {
	    1: "\\cot^{-1}\\left(${args[0]}\\right)"
	  };
	  return acot;
	}

	var name$3B = 'acot';
	var factory_1$3O = factory$3O;

	var acot = {
		name: name$3B,
		factory: factory_1$3O
	};

	function factory$3P(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arccotangent of a value,
	   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acoth(x)
	   *
	   * Examples:
	   *
	   *    math.acoth(0.5)       // returns 0.8047189562170503
	   *
	   * See also:
	   *
	   *    acsch, asech
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
	   */
	  var acoth = typed('acoth', {
	    'number': function number(x) {
	      if (x >= 1 || x <= -1 || config.predictable) {
	        return isFinite(x) ? (Math.log((x + 1) / x) + Math.log(x / (x - 1))) / 2 : 0;
	      }

	      return new type.Complex(x, 0).acoth();
	    },
	    'Complex': function Complex(x) {
	      return x.acoth();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).atanh();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acoth);
	    }
	  });
	  acoth.toTex = {
	    1: "\\coth^{-1}\\left(${args[0]}\\right)"
	  };
	  return acoth;
	}

	var name$3C = 'acoth';
	var factory_1$3P = factory$3P;

	var acoth = {
		name: name$3C,
		factory: factory_1$3P
	};

	function factory$3Q(type, config, load, typed) {
	  /**
	   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsc(x)
	   *
	   * Examples:
	   *
	   *    math.acsc(0.5)           // returns number 0.5235987755982989
	   *    math.acsc(math.csc(1.5)) // returns number ~1.5
	   *
	   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    csc, asin, asec
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cosecant of x
	   */
	  var acsc = typed('acsc', {
	    'number': function number(x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.asin(1 / x);
	      }

	      return new type.Complex(x, 0).acsc();
	    },
	    'Complex': function Complex(x) {
	      return x.acsc();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).asin();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acsc);
	    }
	  });
	  acsc.toTex = {
	    1: "\\csc^{-1}\\left(${args[0]}\\right)"
	  };
	  return acsc;
	}

	var name$3D = 'acsc';
	var factory_1$3Q = factory$3Q;

	var acsc = {
		name: name$3D,
		factory: factory_1$3Q
	};

	function factory$3R(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arccosecant of a value,
	   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsch(x)
	   *
	   * Examples:
	   *
	   *    math.acsch(0.5)       // returns 1.4436354751788103
	   *
	   * See also:
	   *
	   *    asech, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
	   */
	  var acsch = typed('acsch', {
	    'number': function number(x) {
	      x = 1 / x;
	      return Math.log(x + Math.sqrt(x * x + 1));
	    },
	    'Complex': function Complex(x) {
	      return x.acsch();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).asinh();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, acsch);
	    }
	  });
	  acsch.toTex = {
	    1: "\\mathrm{csch}^{-1}\\left(${args[0]}\\right)"
	  };
	  return acsch;
	}

	var name$3E = 'acsch';
	var factory_1$3R = factory$3R;

	var acsch = {
		name: name$3E,
		factory: factory_1$3R
	};

	function factory$3S(type, config, load, typed) {
	  /**
	   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asec(x)
	   *
	   * Examples:
	   *
	   *    math.asec(0.5)           // returns 1.0471975511965979
	   *    math.asec(math.sec(1.5)) // returns 1.5
	   *
	   *    math.asec(2)             // returns 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    acos, acot, acsc
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} The arc secant of x
	   */
	  var asec = typed('asec', {
	    'number': function number(x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.acos(1 / x);
	      }

	      return new type.Complex(x, 0).asec();
	    },
	    'Complex': function Complex(x) {
	      return x.asec();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).acos();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, asec);
	    }
	  });
	  asec.toTex = {
	    1: "\\sec^{-1}\\left(${args[0]}\\right)"
	  };
	  return asec;
	}

	var name$3F = 'asec';
	var factory_1$3S = factory$3S;

	var asec = {
		name: name$3F,
		factory: factory_1$3S
	};

	function factory$3T(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arcsecant of a value,
	   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asech(x)
	   *
	   * Examples:
	   *
	   *    math.asech(0.5)       // returns 1.3169578969248166
	   *
	   * See also:
	   *
	   *    acsch, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
	   */
	  var asech = typed('asech', {
	    'number': function number(x) {
	      if (x <= 1 && x >= -1 || config.predictable) {
	        x = 1 / x;
	        var ret = Math.sqrt(x * x - 1);

	        if (x > 0 || config.predictable) {
	          return Math.log(ret + x);
	        }

	        return new type.Complex(Math.log(ret - x), Math.PI);
	      }

	      return new type.Complex(x, 0).asech();
	    },
	    'Complex': function Complex(x) {
	      return x.asech();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x).acosh();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, asech);
	    }
	  });
	  asech.toTex = {
	    1: "\\mathrm{sech}^{-1}\\left(${args[0]}\\right)"
	  };
	  return asech;
	}

	var name$3G = 'asech';
	var factory_1$3T = factory$3T;

	var asech = {
		name: name$3G,
		factory: factory_1$3T
	};

	function factory$3U(type, config, load, typed) {
	  /**
	   * Calculate the inverse sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asin(x)
	   *
	   * Examples:
	   *
	   *    math.asin(0.5)           // returns number 0.5235987755982989
	   *    math.asin(math.sin(1.5)) // returns number ~1.5
	   *
	   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    sin, atan, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
	   */
	  var asin = typed('asin', {
	    'number': function number(x) {
	      if (x >= -1 && x <= 1 || config.predictable) {
	        return Math.asin(x);
	      } else {
	        return new type.Complex(x, 0).asin();
	      }
	    },
	    'Complex': function Complex(x) {
	      return x.asin();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.asin();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since asin(0) = 0
	      return deepMap(x, asin);
	    }
	  });
	  asin.toTex = {
	    1: "\\sin^{-1}\\left(${args[0]}\\right)"
	  };
	  return asin;
	}

	var name$3H = 'asin';
	var factory_1$3U = factory$3U;

	var asin$1 = {
		name: name$3H,
		factory: factory_1$3U
	};

	function factory$3V(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arcsine of a value,
	   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asinh(x)
	   *
	   * Examples:
	   *
	   *    math.asinh(0.5)       // returns 0.48121182505960347
	   *
	   * See also:
	   *
	   *    acosh, atanh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
	   */
	  var asinh = typed('asinh', {
	    'number': Math.asinh || function (x) {
	      return Math.log(Math.sqrt(x * x + 1) + x);
	    },
	    'Complex': function Complex(x) {
	      return x.asinh();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.asinh();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since asinh(0) = 0
	      return deepMap(x, asinh);
	    }
	  });
	  asinh.toTex = {
	    1: "\\sinh^{-1}\\left(${args[0]}\\right)"
	  };
	  return asinh;
	}

	var name$3I = 'asinh';
	var factory_1$3V = factory$3V;

	var asinh$1 = {
		name: name$3I,
		factory: factory_1$3V
	};

	function factory$3W(type, config, load, typed) {
	  /**
	   * Calculate the inverse tangent of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan(x)
	   *
	   * Examples:
	   *
	   *    math.atan(0.5)           // returns number 0.4636476090008061
	   *    math.atan(math.tan(1.5)) // returns number 1.5
	   *
	   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, asin, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
	   */
	  var atan = typed('atan', {
	    'number': function number(x) {
	      return Math.atan(x);
	    },
	    'Complex': function Complex(x) {
	      return x.atan();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.atan();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since atan(0) = 0
	      return deepMap(x, atan);
	    }
	  });
	  atan.toTex = {
	    1: "\\tan^{-1}\\left(${args[0]}\\right)"
	  };
	  return atan;
	}

	var name$3J = 'atan';
	var factory_1$3W = factory$3W;

	var atan$1 = {
		name: name$3J,
		factory: factory_1$3W
	};

	function factory$3X(type, config, load, typed) {
	  var matrix$1 = load(matrix);
	  var algorithm02$1 = load(algorithm02);
	  var algorithm03$1 = load(algorithm03);
	  var algorithm09$1 = load(algorithm09);
	  var algorithm11$1 = load(algorithm11);
	  var algorithm12$1 = load(algorithm12);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Calculate the inverse tangent function with two arguments, y/x.
	   * By providing two arguments, the right quadrant of the computed angle can be
	   * determined.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan2(y, x)
	   *
	   * Examples:
	   *
	   *    math.atan2(2, 2) / math.pi       // returns number 0.25
	   *
	   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg
	   *    const x = math.cos(angle)
	   *    const y = math.sin(angle)
	   *
	   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, atan, sin, cos
	   *
	   * @param {number | Array | Matrix} y  Second dimension
	   * @param {number | Array | Matrix} x  First dimension
	   * @return {number | Array | Matrix} Four-quadrant inverse tangent
	   */

	  var atan2 = typed('atan2', {
	    'number, number': Math.atan2,
	    // Complex numbers doesn't seem to have a reasonable implementation of
	    // atan2(). Even Matlab removed the support, after they only calculated
	    // the atan only on base of the real part of the numbers and ignored the imaginary.
	    'BigNumber, BigNumber': function BigNumberBigNumber(y, x) {
	      return type.BigNumber.atan2(y, x);
	    },
	    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {
	      return algorithm09$1(x, y, atan2, false);
	    },
	    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {
	      // mind the order of y and x!
	      return algorithm02$1(y, x, atan2, true);
	    },
	    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {
	      return algorithm03$1(x, y, atan2, false);
	    },
	    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {
	      return algorithm13$1(x, y, atan2);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      return atan2(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      return atan2(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      return atan2(x, matrix$1(y));
	    },
	    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {
	      return algorithm11$1(x, y, atan2, false);
	    },
	    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {
	      return algorithm14$1(x, y, atan2, false);
	    },
	    'number | BigNumber, SparseMatrix': function numberBigNumberSparseMatrix(x, y) {
	      // mind the order of y and x
	      return algorithm12$1(y, x, atan2, true);
	    },
	    'number | BigNumber, DenseMatrix': function numberBigNumberDenseMatrix(x, y) {
	      // mind the order of y and x
	      return algorithm14$1(y, x, atan2, true);
	    },
	    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {
	      return algorithm14$1(matrix$1(x), y, atan2, false).valueOf();
	    },
	    'number | BigNumber, Array': function numberBigNumberArray(x, y) {
	      return algorithm14$1(matrix$1(y), x, atan2, true).valueOf();
	    }
	  });
	  atan2.toTex = {
	    2: "\\mathrm{atan2}\\left(${args}\\right)"
	  };
	  return atan2;
	}

	var name$3K = 'atan2';
	var factory_1$3X = factory$3X;

	var atan2$1 = {
		name: name$3K,
		factory: factory_1$3X
	};

	function factory$3Y(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arctangent of a value,
	   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atanh(x)
	   *
	   * Examples:
	   *
	   *    math.atanh(0.5)       // returns 0.5493061443340549
	   *
	   * See also:
	   *
	   *    acosh, asinh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
	   */
	  var atanh = typed('atanh', {
	    'number': function number(x) {
	      if (x <= 1 && x >= -1 || config.predictable) {
	        return _atanh(x);
	      }

	      return new type.Complex(x, 0).atanh();
	    },
	    'Complex': function Complex(x) {
	      return x.atanh();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.atanh();
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since atanh(0) = 0
	      return deepMap(x, atanh);
	    }
	  });
	  atanh.toTex = {
	    1: "\\tanh^{-1}\\left(${args[0]}\\right)"
	  };
	  return atanh;
	}
	/**
	 * Calculate the hyperbolic arctangent of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */


	var _atanh = Math.atanh || function (x) {
	  return Math.log((1 + x) / (1 - x)) / 2;
	};

	var name$3L = 'atanh';
	var factory_1$3Y = factory$3Y;

	var atanh$1 = {
		name: name$3L,
		factory: factory_1$3Y
	};

	function factory$3Z(type, config, load, typed) {
	  /**
	   * Calculate the cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cos(x)
	   *
	   * Examples:
	   *
	   *    math.cos(2)                      // returns number -0.4161468365471422
	   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475
	   *    math.cos(math.unit(180, 'deg'))  // returns number -1
	   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5
	   *
	   *    const angle = 0.2
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
	   */
	  var cos = typed('cos', {
	    'number': Math.cos,
	    'Complex': function Complex(x) {
	      return x.cos();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.cos();
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cos is no angle');
	      }

	      return cos(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cos);
	    }
	  });
	  cos.toTex = {
	    1: "\\cos\\left(${args[0]}\\right)"
	  };
	  return cos;
	}

	var name$3M = 'cos';
	var factory_1$3Z = factory$3Z;

	var cos$1 = {
		name: name$3M,
		factory: factory_1$3Z
	};

	function factory$3_(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosine of a value,
	   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cosh(x)
	   *
	   * Examples:
	   *
	   *    math.cosh(0.5)       // returns number 1.1276259652063807
	   *
	   * See also:
	   *
	   *    sinh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
	   */
	  var cosh = typed('cosh', {
	    'number': _cosh,
	    'Complex': function Complex(x) {
	      return x.cosh();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.cosh();
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cosh is no angle');
	      }

	      return cosh(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cosh);
	    }
	  });
	  cosh.toTex = {
	    1: "\\cosh\\left(${args[0]}\\right)"
	  };
	  return cosh;
	}
	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */


	var _cosh = Math.cosh || function (x) {
	  return (Math.exp(x) + Math.exp(-x)) / 2;
	};

	var name$3N = 'cosh';
	var factory_1$3_ = factory$3_;

	var cosh$1 = {
		name: name$3N,
		factory: factory_1$3_
	};

	function factory$3$(type, config, load, typed) {
	  /**
	   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cot(x)
	   *
	   * Examples:
	   *
	   *    math.cot(2)      // returns number -0.45765755436028577
	   *    1 / math.tan(2)  // returns number -0.45765755436028577
	   *
	   * See also:
	   *
	   *    tan, sec, csc
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cotangent of x
	   */
	  var cot = typed('cot', {
	    'number': function number(x) {
	      return 1 / Math.tan(x);
	    },
	    'Complex': function Complex(x) {
	      return x.cot();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.tan());
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function cot is no angle');
	      }

	      return cot(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, cot);
	    }
	  });
	  cot.toTex = {
	    1: "\\cot\\left(${args[0]}\\right)"
	  };
	  return cot;
	}

	var name$3O = 'cot';
	var factory_1$3$ = factory$3$;

	var cot = {
		name: name$3O,
		factory: factory_1$3$
	};

	function factory$40(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cotangent of a value,
	   * defined as `coth(x) = 1 / tanh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.coth(x)
	   *
	   * Examples:
	   *
	   *    // coth(x) = 1 / tanh(x)
	   *    math.coth(2)         // returns 1.0373147207275482
	   *    1 / math.tanh(2)     // returns 1.0373147207275482
	   *
	   * See also:
	   *
	   *    sinh, tanh, cosh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
	   */
	  var coth = typed('coth', {
	    'number': _coth,
	    'Complex': function Complex(x) {
	      return x.coth();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.tanh());
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function coth is no angle');
	      }

	      return coth(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, coth);
	    }
	  });
	  coth.toTex = {
	    1: "\\coth\\left(${args[0]}\\right)"
	  };
	  return coth;
	}
	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */


	function _coth(x) {
	  var e = Math.exp(2 * x);
	  return (e + 1) / (e - 1);
	}

	var name$3P = 'coth';
	var factory_1$40 = factory$40;

	var coth = {
		name: name$3P,
		factory: factory_1$40
	};

	function factory$41(type, config, load, typed) {
	  /**
	   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csc(x)
	   *
	   * Examples:
	   *
	   *    math.csc(2)      // returns number 1.099750170294617
	   *    1 / math.sin(2)  // returns number 1.099750170294617
	   *
	   * See also:
	   *
	   *    sin, sec, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cosecant of x
	   */
	  var csc = typed('csc', {
	    'number': function number(x) {
	      return 1 / Math.sin(x);
	    },
	    'Complex': function Complex(x) {
	      return x.csc();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.sin());
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function csc is no angle');
	      }

	      return csc(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, csc);
	    }
	  });
	  csc.toTex = {
	    1: "\\csc\\left(${args[0]}\\right)"
	  };
	  return csc;
	}

	var name$3Q = 'csc';
	var factory_1$41 = factory$41;

	var csc = {
		name: name$3Q,
		factory: factory_1$41
	};

	var sign$3 = number.sign;

	function factory$42(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosecant of a value,
	   * defined as `csch(x) = 1 / sinh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csch(x)
	   *
	   * Examples:
	   *
	   *    // csch(x) = 1/ sinh(x)
	   *    math.csch(0.5)       // returns 1.9190347513349437
	   *    1 / math.sinh(0.5)   // returns 1.9190347513349437
	   *
	   * See also:
	   *
	   *    sinh, sech, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
	   */
	  var csch = typed('csch', {
	    'number': _csch,
	    'Complex': function Complex(x) {
	      return x.csch();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.sinh());
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function csch is no angle');
	      }

	      return csch(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, csch);
	    }
	  });
	  csch.toTex = {
	    1: "\\mathrm{csch}\\left(${args[0]}\\right)"
	  };
	  return csch;
	}
	/**
	 * Calculate the hyperbolic cosecant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */


	function _csch(x) {
	  // consider values close to zero (+/-)
	  if (x === 0) {
	    return Number.POSITIVE_INFINITY;
	  } else {
	    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign$3(x);
	  }
	}

	var name$3R = 'csch';
	var factory_1$42 = factory$42;

	var csch = {
		name: name$3R,
		factory: factory_1$42
	};

	function factory$43(type, config, load, typed) {
	  /**
	   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sec(x)
	   *
	   * Examples:
	   *
	   *    math.sec(2)      // returns number -2.4029979617223822
	   *    1 / math.cos(2)  // returns number -2.4029979617223822
	   *
	   * See also:
	   *
	   *    cos, csc, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Secant of x
	   */
	  var sec = typed('sec', {
	    'number': function number(x) {
	      return 1 / Math.cos(x);
	    },
	    'Complex': function Complex(x) {
	      return x.sec();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.cos());
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sec is no angle');
	      }

	      return sec(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, sec);
	    }
	  });
	  sec.toTex = {
	    1: "\\sec\\left(${args[0]}\\right)"
	  };
	  return sec;
	}

	var name$3S = 'sec';
	var factory_1$43 = factory$43;

	var sec = {
		name: name$3S,
		factory: factory_1$43
	};

	function factory$44(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic secant of a value,
	   * defined as `sech(x) = 1 / cosh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sech(x)
	   *
	   * Examples:
	   *
	   *    // sech(x) = 1/ cosh(x)
	   *    math.sech(0.5)       // returns 0.886818883970074
	   *    1 / math.cosh(0.5)   // returns 0.886818883970074
	   *
	   * See also:
	   *
	   *    cosh, csch, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
	   */
	  var sech = typed('sech', {
	    'number': _sech,
	    'Complex': function Complex(x) {
	      return x.sech();
	    },
	    'BigNumber': function BigNumber(x) {
	      return new type.BigNumber(1).div(x.cosh());
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sech is no angle');
	      }

	      return sech(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, sech);
	    }
	  });
	  sech.toTex = {
	    1: "\\mathrm{sech}\\left(${args[0]}\\right)"
	  };
	  return sech;
	}
	/**
	 * Calculate the hyperbolic secant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */


	function _sech(x) {
	  return 2 / (Math.exp(x) + Math.exp(-x));
	}

	var name$3T = 'sech';
	var factory_1$44 = factory$44;

	var sech = {
		name: name$3T,
		factory: factory_1$44
	};

	function factory$45(type, config, load, typed) {
	  /**
	   * Calculate the sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sin(x)
	   *
	   * Examples:
	   *
	   *    math.sin(2)                      // returns number 0.9092974268256813
	   *    math.sin(math.pi / 4)            // returns number 0.7071067811865475
	   *    math.sin(math.unit(90, 'deg'))   // returns number 1
	   *    math.sin(math.unit(30, 'deg'))   // returns number 0.5
	   *
	   *    const angle = 0.2
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
	   */
	  var sin = typed('sin', {
	    'number': Math.sin,
	    'Complex': function Complex(x) {
	      return x.sin();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.sin();
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sin is no angle');
	      }

	      return sin(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sin(0) = 0
	      return deepMap(x, sin);
	    }
	  });
	  sin.toTex = {
	    1: "\\sin\\left(${args[0]}\\right)"
	  };
	  return sin;
	}

	var name$3U = 'sin';
	var factory_1$45 = factory$45;

	var sin$1 = {
		name: name$3U,
		factory: factory_1$45
	};

	function factory$46(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic sine of a value,
	   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sinh(x)
	   *
	   * Examples:
	   *
	   *    math.sinh(0.5)       // returns number 0.5210953054937474
	   *
	   * See also:
	   *
	   *    cosh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
	   */
	  var sinh = typed('sinh', {
	    'number': _sinh,
	    'Complex': function Complex(x) {
	      return x.sinh();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.sinh();
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function sinh is no angle');
	      }

	      return sinh(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since sinh(0) = 0
	      return deepMap(x, sinh);
	    }
	  });
	  sinh.toTex = {
	    1: "\\sinh\\left(${args[0]}\\right)"
	  };
	  return sinh;
	}
	/**
	 * Calculate the hyperbolic sine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */


	var _sinh = Math.sinh || function (x) {
	  return (Math.exp(x) - Math.exp(-x)) / 2;
	};

	var name$3V = 'sinh';
	var factory_1$46 = factory$46;

	var sinh$1 = {
		name: name$3V,
		factory: factory_1$46
	};

	function factory$47(type, config, load, typed) {
	  /**
	   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tan(x)
	   *
	   * Examples:
	   *
	   *    math.tan(0.5)                    // returns number 0.5463024898437905
	   *    math.sin(0.5) / math.cos(0.5)    // returns number 0.5463024898437905
	   *    math.tan(math.pi / 4)            // returns number 1
	   *    math.tan(math.unit(45, 'deg'))   // returns number 1
	   *
	   * See also:
	   *
	   *    atan, sin, cos
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
	   */
	  var tan = typed('tan', {
	    'number': Math.tan,
	    'Complex': function Complex(x) {
	      return x.tan();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.tan();
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function tan is no angle');
	      }

	      return tan(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since tan(0) = 0
	      return deepMap(x, tan);
	    }
	  });
	  tan.toTex = {
	    1: "\\tan\\left(${args[0]}\\right)"
	  };
	  return tan;
	}

	var name$3W = 'tan';
	var factory_1$47 = factory$47;

	var tan$1 = {
		name: name$3W,
		factory: factory_1$47
	};

	function factory$48(type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic tangent of a value,
	   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tanh(x)
	   *
	   * Examples:
	   *
	   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
	   *    math.tanh(0.5)                   // returns 0.46211715726000974
	   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974
	   *    1 / math.coth(0.5)               // returns 0.46211715726000974
	   *
	   * See also:
	   *
	   *    sinh, cosh, coth
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
	   */
	  var tanh = typed('tanh', {
	    'number': _tanh,
	    'Complex': function Complex(x) {
	      return x.tanh();
	    },
	    'BigNumber': function BigNumber(x) {
	      return x.tanh();
	    },
	    'Unit': function Unit(x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError('Unit in function tanh is no angle');
	      }

	      return tanh(x.value);
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      // deep map collection, skip zeros since tanh(0) = 0
	      return deepMap(x, tanh);
	    }
	  });
	  tanh.toTex = {
	    1: "\\tanh\\left(${args[0]}\\right)"
	  };
	  return tanh;
	}
	/**
	 * Calculate the hyperbolic tangent of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */


	var _tanh = Math.tanh || function (x) {
	  var e = Math.exp(2 * x);
	  return (e - 1) / (e + 1);
	};

	var name$3X = 'tanh';
	var factory_1$48 = factory$48;

	var tanh$1 = {
		name: name$3X,
		factory: factory_1$48
	};

	var trigonometry = [acos$1, acosh$1, acot, acoth, acsc, acsch, asec, asech, asin$1, asinh$1, atan$1, atan2$1, atanh$1, cos$1, cosh$1, cot, coth, csc, csch, sec, sech, sin$1, sinh$1, tan$1, tanh$1];

	function factory$49(type, config, load, typed) {
	  var latex$1 = latex;

	  var matrix$1 = load(matrix);
	  var algorithm13$1 = load(algorithm13);
	  var algorithm14$1 = load(algorithm14);
	  /**
	   * Change the unit of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.to(x, unit)
	   *
	   * Examples:
	   *
	   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm
	   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm
	   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits
	   *
	   * See also:
	   *
	   *    unit
	   *
	   * @param {Unit | Array | Matrix} x     The unit to be converted.
	   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
	   *                                      or a unit without value.
	   * @return {Unit | Array | Matrix} value with changed, fixed unit.
	   */

	  var to = typed('to', {
	    'Unit, Unit | string': function UnitUnitString(x, unit) {
	      return x.to(unit);
	    },
	    'Matrix, Matrix': function MatrixMatrix(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm13$1(x, y, to);
	    },
	    'Array, Array': function ArrayArray(x, y) {
	      // use matrix implementation
	      return to(matrix$1(x), matrix$1(y)).valueOf();
	    },
	    'Array, Matrix': function ArrayMatrix(x, y) {
	      // use matrix implementation
	      return to(matrix$1(x), y);
	    },
	    'Matrix, Array': function MatrixArray(x, y) {
	      // use matrix implementation
	      return to(x, matrix$1(y));
	    },
	    'Matrix, any': function MatrixAny(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14$1(x, y, to, false);
	    },
	    'any, Matrix': function anyMatrix(x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14$1(y, x, to, true);
	    },
	    'Array, any': function ArrayAny(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(x), y, to, false).valueOf();
	    },
	    'any, Array': function anyArray(x, y) {
	      // use matrix implementation
	      return algorithm14$1(matrix$1(y), x, to, true).valueOf();
	    }
	  });
	  to.toTex = {
	    2: "\\left(${args[0]}".concat(latex$1.operators['to'], "${args[1]}\\right)")
	  };
	  return to;
	}

	var name$3Y = 'to';
	var factory_1$49 = factory$49;

	var to = {
		name: name$3Y,
		factory: factory_1$49
	};

	var unit$2 = [to];

	function factory$4a(type, config, load, typed) {
	  /**
	   * Clone an object.
	   *
	   * Syntax:
	   *
	   *     math.clone(x)
	   *
	   * Examples:
	   *
	   *    math.clone(3.5)                   // returns number 3.5
	   *    math.clone(math.complex('2-4i') // returns Complex 2 - 4i
	   *    math.clone(math.unit(45, 'deg'))  // returns Unit 45 deg
	   *    math.clone([[1, 2], [3, 4]])      // returns Array [[1, 2], [3, 4]]
	   *    math.clone("hello world")         // returns string "hello world"
	   *
	   * @param {*} x   Object to be cloned
	   * @return {*} A clone of object x
	   */
	  var clone = typed('clone', {
	    'any': object.clone
	  });
	  clone.toTex = undefined; // use default template

	  return clone;
	}

	var name$3Z = 'clone';
	var factory_1$4a = factory$4a;

	var clone$a = {
		name: name$3Z,
		factory: factory_1$4a
	};

	function factory$4b(type, config, load, typed) {
	  var isNumeric$1 = load(isNumeric);
	  /**
	   * Test whether a value is an numeric value.
	   *
	   * Syntax:
	   *
	   *     math.hasNumericValue(x)
	   *
	   * Examples:
	   *
	   *    math.hasNumericValue(2)                     // returns true
	   *    math.hasNumericValue(0)                     // returns true
	   *    math.hasNumericValue(math.bignumber(500))   // returns true
	   *    math.hasNumericValue(math.fraction(4))      // returns true
	   *    math.hasNumericValue(math.complex('2-4i')   // returns false
	   *    math.hasNumericValue('3')                   // returns true
	   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    isZero, isPositive, isNegative, isInteger
	   *
	   * @param {*} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
	   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.
	   *                    Throws an error in case of unknown types.
	   */

	  var hasNumericValue = typed('hasNumericValue', {
	    'string': function string(x) {
	      return x.trim().length > 0 && !isNaN(Number(x));
	    },
	    'any': function any(x) {
	      return isNumeric$1(x);
	    }
	  });
	  return hasNumericValue;
	}

	var name$3_ = 'hasNumericValue';
	var factory_1$4b = factory$4b;

	var hasNumericValue = {
		name: name$3_,
		factory: factory_1$4b
	};

	function factory$4c(type, config, load, typed) {
	  /**
	   * Test whether a value is prime: has no divisors other than itself and one.
	   * The function supports type `number`, `bignumber`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPrime(x)
	   *
	   * Examples:
	   *
	   *    math.isPrime(3)                     // returns true
	   *    math.isPrime(-2)                    // returns false
	   *    math.isPrime(0)                     // returns false
	   *    math.isPrime(-0)                    // returns false
	   *    math.isPrime(0.5)                   // returns false
	   *    math.isPrime('2')                   // returns true
	   *    math.isPrime([2, 17, 100])           // returns [true, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPrime = typed('isPrime', {
	    'number': function number(x) {
	      if (x < 2) {
	        return false;
	      }

	      if (x === 2) {
	        return true;
	      }

	      if (x % 2 === 0) {
	        return false;
	      }

	      for (var i = 3; i * i <= x; i += 2) {
	        if (x % i === 0) {
	          return false;
	        }
	      }

	      return true;
	    },
	    'BigNumber': function BigNumber(x) {
	      if (x.lt(2)) {
	        return false;
	      }

	      if (x.equals(2)) {
	        return true;
	      }

	      if (x.mod(2).isZero()) {
	        return false;
	      }

	      for (var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)) {
	        if (x.mod(i).isZero()) {
	          return false;
	        }
	      }

	      return true;
	    },
	    'Array | Matrix': function ArrayMatrix(x) {
	      return deepMap(x, isPrime);
	    }
	  });
	  return isPrime;
	}

	var name$3$ = 'isPrime';
	var factory_1$4c = factory$4c;

	var isPrime = {
		name: name$3$,
		factory: factory_1$4c
	};

	var utils$1 = [clone$a, isInteger$k, isNegative, isNumeric, hasNumericValue, isPositive, isPrime, isZero, _isNaN, _typeof$4];

	var _function$2 = [algebra, arithmetic, bitwise$1, combinatorics, complex$4, geometry, logical, matrix$2, probability, relational, set, special, statistics, string$8, trigonometry, unit$2, utils$1];

	var bignumber$2 = {
	  'name': 'bignumber',
	  'category': 'Construction',
	  'syntax': ['bignumber(x)'],
	  'description': 'Create a big number from a number or string.',
	  'examples': ['0.1 + 0.2', 'bignumber(0.1) + bignumber(0.2)', 'bignumber("7.2")', 'bignumber("7.2e500")', 'bignumber([0.1, 0.2, 0.3])'],
	  'seealso': ['boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
	};

	var boolean_1$2 = {
	  'name': 'boolean',
	  'category': 'Construction',
	  'syntax': ['x', 'boolean(x)'],
	  'description': 'Convert a string or number into a boolean.',
	  'examples': ['boolean(0)', 'boolean(1)', 'boolean(3)', 'boolean("true")', 'boolean("false")', 'boolean([1, 0, 1, 1])'],
	  'seealso': ['bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit']
	};

	var complex$5 = {
	  'name': 'complex',
	  'category': 'Construction',
	  'syntax': ['complex()', 'complex(re, im)', 'complex(string)'],
	  'description': 'Create a complex number.',
	  'examples': ['complex()', 'complex(2, 3)', 'complex("7 - 2i")'],
	  'seealso': ['bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit']
	};

	var createUnit$1 = {
	  'name': 'createUnit',
	  'category': 'Construction',
	  'syntax': ['createUnit(definitions)', 'createUnit(name, definition)'],
	  'description': 'Create a user-defined unit and register it with the Unit type.',
	  'examples': ['createUnit("foo")', 'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})', 'createUnit("mph", "1 mile/hour")'],
	  'seealso': ['unit', 'splitUnit']
	};

	var fraction$3 = {
	  'name': 'fraction',
	  'category': 'Construction',
	  'syntax': ['fraction(num)', 'fraction(num,den)'],
	  'description': 'Create a fraction from a number or from a numerator and denominator.',
	  'examples': ['fraction(0.125)', 'fraction(1, 3) + fraction(2, 5)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit']
	};

	var construction = {
	  'name': 'index',
	  'category': 'Construction',
	  'syntax': ['[start]', '[start:end]', '[start:step:end]', '[start1, start 2, ...]', '[start1:end1, start2:end2, ...]', '[start1:step1:end1, start2:step2:end2, ...]'],
	  'description': 'Create an index to get or replace a subset of a matrix',
	  'examples': ['[]', '[1, 2, 3]', 'A = [1, 2, 3; 4, 5, 6]', 'A[1, :]', 'A[1, 2] = 50', 'A[0:2, 0:2] = ones(2, 2)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit']
	};

	var matrix$3 = {
	  'name': 'matrix',
	  'category': 'Construction',
	  'syntax': ['[]', '[a1, b1, ...; a2, b2, ...]', 'matrix()', 'matrix("dense")', 'matrix([...])'],
	  'description': 'Create a matrix.',
	  'examples': ['[]', '[1, 2, 3]', '[1, 2, 3; 4, 5, 6]', 'matrix()', 'matrix([3, 4])', 'matrix([3, 4; 5, 6], "sparse")', 'matrix([3, 4; 5, 6], "sparse", "number")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse']
	};

	var number$5 = {
	  'name': 'number',
	  'category': 'Construction',
	  'syntax': ['x', 'number(x)', 'number(unit, valuelessUnit)'],
	  'description': 'Create a number or convert a string or boolean into a number.',
	  'examples': ['2', '2e3', '4.05', 'number(2)', 'number("7.2")', 'number(true)', 'number([true, false, true, true])', 'number(unit("52cm"), "m")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit']
	};

	var sparse$1 = {
	  'name': 'sparse',
	  'category': 'Construction',
	  'syntax': ['sparse()', 'sparse([a1, b1, ...; a1, b2, ...])', 'sparse([a1, b1, ...; a1, b2, ...], "number")'],
	  'description': 'Create a sparse matrix.',
	  'examples': ['sparse()', 'sparse([3, 4; 5, 6])', 'sparse([3, 0; 5, 0], "number")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix']
	};

	var splitUnit$1 = {
	  'name': 'splitUnit',
	  'category': 'Construction',
	  'syntax': ['splitUnit(unit: Unit, parts: Unit[])'],
	  'description': 'Split a unit in an array of units whose sum is equal to the original unit.',
	  'examples': ['splitUnit(1 m, ["feet", "inch"])'],
	  'seealso': ['unit', 'createUnit']
	};

	var string$9 = {
	  'name': 'string',
	  'category': 'Construction',
	  'syntax': ['"text"', 'string(x)'],
	  'description': 'Create a string or convert a value to a string',
	  'examples': ['"Hello World!"', 'string(4.2)', 'string(3 + 2i)'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit']
	};

	var unit$3 = {
	  'name': 'unit',
	  'category': 'Construction',
	  'syntax': ['value unit', 'unit(value, unit)', 'unit(string)'],
	  'description': 'Create a unit.',
	  'examples': ['5.5 mm', '3 inch', 'unit(7.1, "kilogram")', 'unit("23 deg")'],
	  'seealso': ['bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string']
	};

	var e = {
	  'name': 'e',
	  'category': 'Constants',
	  'syntax': ['e'],
	  'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
	  'examples': ['e', 'e ^ 2', 'exp(2)', 'log(e)'],
	  'seealso': ['exp']
	};

	var _false = {
	  'name': 'false',
	  'category': 'Constants',
	  'syntax': ['false'],
	  'description': 'Boolean value false',
	  'examples': ['false'],
	  'seealso': ['true']
	};

	var i = {
	  'name': 'i',
	  'category': 'Constants',
	  'syntax': ['i'],
	  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
	  'examples': ['i', 'i * i', 'sqrt(-1)'],
	  'seealso': []
	};

	var _Infinity = {
	  'name': 'Infinity',
	  'category': 'Constants',
	  'syntax': ['Infinity'],
	  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
	  'examples': ['Infinity', '1 / 0'],
	  'seealso': []
	};

	var LN2 = {
	  'name': 'LN2',
	  'category': 'Constants',
	  'syntax': ['LN2'],
	  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
	  'examples': ['LN2', 'log(2)'],
	  'seealso': []
	};

	var LN10$1 = {
	  'name': 'LN10',
	  'category': 'Constants',
	  'syntax': ['LN10'],
	  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
	  'examples': ['LN10', 'log(10)'],
	  'seealso': []
	};

	var LOG2E = {
	  'name': 'LOG2E',
	  'category': 'Constants',
	  'syntax': ['LOG2E'],
	  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
	  'examples': ['LOG2E', 'log(e, 2)'],
	  'seealso': []
	};

	var LOG10E = {
	  'name': 'LOG10E',
	  'category': 'Constants',
	  'syntax': ['LOG10E'],
	  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
	  'examples': ['LOG10E', 'log(e, 10)'],
	  'seealso': []
	};

	var _NaN = {
	  'name': 'NaN',
	  'category': 'Constants',
	  'syntax': ['NaN'],
	  'description': 'Not a number',
	  'examples': ['NaN', '0 / 0'],
	  'seealso': []
	};

	var _null = {
	  'name': 'null',
	  'category': 'Constants',
	  'syntax': ['null'],
	  'description': 'Value null',
	  'examples': ['null'],
	  'seealso': ['true', 'false']
	};

	var pi = {
	  'name': 'pi',
	  'category': 'Constants',
	  'syntax': ['pi'],
	  'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
	  'examples': ['pi', 'sin(pi/2)'],
	  'seealso': ['tau']
	};

	var phi = {
	  'name': 'phi',
	  'category': 'Constants',
	  'syntax': ['phi'],
	  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
	  'examples': ['phi'],
	  'seealso': []
	};

	var SQRT1_2 = {
	  'name': 'SQRT1_2',
	  'category': 'Constants',
	  'syntax': ['SQRT1_2'],
	  'description': 'Returns the square root of 1/2, approximately equal to 0.707',
	  'examples': ['SQRT1_2', 'sqrt(1/2)'],
	  'seealso': []
	};

	var SQRT2 = {
	  'name': 'SQRT2',
	  'category': 'Constants',
	  'syntax': ['SQRT2'],
	  'description': 'Returns the square root of 2, approximately equal to 1.414',
	  'examples': ['SQRT2', 'sqrt(2)'],
	  'seealso': []
	};

	var tau = {
	  'name': 'tau',
	  'category': 'Constants',
	  'syntax': ['tau'],
	  'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
	  'examples': ['tau', '2 * pi'],
	  'seealso': ['pi']
	};

	var _true = {
	  'name': 'true',
	  'category': 'Constants',
	  'syntax': ['true'],
	  'description': 'Boolean value true',
	  'examples': ['true'],
	  'seealso': ['false']
	};

	var version$1 = {
	  'name': 'version',
	  'category': 'Constants',
	  'syntax': ['version'],
	  'description': 'A string with the version number of math.js',
	  'examples': ['version'],
	  'seealso': []
	};

	var derivative$1 = {
	  'name': 'derivative',
	  'category': 'Algebra',
	  'syntax': ['derivative(expr, variable)', 'derivative(expr, variable, {simplify: boolean})'],
	  'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
	  'examples': ['derivative("2x^3", "x")', 'derivative("2x^3", "x", {simplify: false})', 'derivative("2x^2 + 3x + 4", "x")', 'derivative("sin(2x)", "x")', 'f = parse("x^2 + x")', 'x = parse("x")', 'df = derivative(f, x)', 'df.eval({x: 3})'],
	  'seealso': ['simplify', 'parse', 'eval']
	};

	var lsolve$1 = {
	  'name': 'lsolve',
	  'category': 'Algebra',
	  'syntax': ['x=lsolve(L, b)'],
	  'description': 'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
	  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lsolve(a, b)'],
	  'seealso': ['lup', 'lusolve', 'usolve', 'matrix', 'sparse']
	};

	var lup$1 = {
	  'name': 'lup',
	  'category': 'Algebra',
	  'syntax': ['lup(m)'],
	  'description': 'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
	  'examples': ['lup([[2, 1], [1, 4]])', 'lup(matrix([[2, 1], [1, 4]]))', 'lup(sparse([[2, 1], [1, 4]]))'],
	  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr']
	};

	var lusolve$1 = {
	  'name': 'lusolve',
	  'category': 'Algebra',
	  'syntax': ['x=lusolve(A, b)', 'x=lusolve(lu, b)'],
	  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
	  'examples': ['a = [-2, 3; 2, 1]', 'b = [11, 9]', 'x = lusolve(a, b)'],
	  'seealso': ['lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse']
	};

	var simplify$1 = {
	  'name': 'simplify',
	  'category': 'Algebra',
	  'syntax': ['simplify(expr)', 'simplify(expr, rules)'],
	  'description': 'Simplify an expression tree.',
	  'examples': ['simplify("3 + 2 / 4")', 'simplify("2x + x")', 'f = parse("x * (x + 2 + x)")', 'simplified = simplify(f)', 'simplified.eval({x: 2})'],
	  'seealso': ['derivative', 'parse', 'eval']
	};

	var rationalize$1 = {
	  'name': 'rationalize',
	  'category': 'Algebra',
	  'syntax': ['rationalize(expr)', 'rationalize(expr, scope)', 'rationalize(expr, scope, detailed)'],
	  'description': 'Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.',
	  'examples': ['rationalize("2x/y - y/(x+1)")', 'rationalize("2x/y - y/(x+1)", true)'],
	  'seealso': ['simplify']
	};

	var slu$1 = {
	  'name': 'slu',
	  'category': 'Algebra',
	  'syntax': ['slu(A, order, threshold)'],
	  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
	  'examples': ['slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'],
	  'seealso': ['lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr']
	};

	var usolve$1 = {
	  'name': 'usolve',
	  'category': 'Algebra',
	  'syntax': ['x=usolve(U, b)'],
	  'description': 'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
	  'examples': ['x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'],
	  'seealso': ['lup', 'lusolve', 'lsolve', 'matrix', 'sparse']
	};

	var qr$1 = {
	  'name': 'qr',
	  'category': 'Algebra',
	  'syntax': ['qr(A)'],
	  'description': 'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
	  'examples': ['qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'],
	  'seealso': ['lup', 'slu', 'matrix']
	};

	var abs$2 = {
	  'name': 'abs',
	  'category': 'Arithmetic',
	  'syntax': ['abs(x)'],
	  'description': 'Compute the absolute value.',
	  'examples': ['abs(3.5)', 'abs(-4.2)'],
	  'seealso': ['sign']
	};

	var add$2 = {
	  'name': 'add',
	  'category': 'Operators',
	  'syntax': ['x + y', 'add(x, y)'],
	  'description': 'Add two values.',
	  'examples': ['a = 2.1 + 3.6', 'a - 3.6', '3 + 2i', '3 cm + 2 inch', '"2.3" + "4"'],
	  'seealso': ['subtract']
	};

	var cbrt$2 = {
	  'name': 'cbrt',
	  'category': 'Arithmetic',
	  'syntax': ['cbrt(x)', 'cbrt(x, allRoots)'],
	  'description': 'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
	  'examples': ['cbrt(64)', 'cube(4)', 'cbrt(-8)', 'cbrt(2 + 3i)', 'cbrt(8i)', 'cbrt(8i, true)', 'cbrt(27 m^3)'],
	  'seealso': ['square', 'sqrt', 'cube', 'multiply']
	};

	var ceil$2 = {
	  'name': 'ceil',
	  'category': 'Arithmetic',
	  'syntax': ['ceil(x)'],
	  'description': 'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
	  'examples': ['ceil(3.2)', 'ceil(3.8)', 'ceil(-4.2)'],
	  'seealso': ['floor', 'fix', 'round']
	};

	var cube$1 = {
	  'name': 'cube',
	  'category': 'Arithmetic',
	  'syntax': ['cube(x)'],
	  'description': 'Compute the cube of a value. The cube of x is x * x * x.',
	  'examples': ['cube(2)', '2^3', '2 * 2 * 2'],
	  'seealso': ['multiply', 'square', 'pow']
	};

	var divide$2 = {
	  'name': 'divide',
	  'category': 'Operators',
	  'syntax': ['x / y', 'divide(x, y)'],
	  'description': 'Divide two values.',
	  'examples': ['a = 2 / 3', 'a * 3', '4.5 / 2', '3 + 4 / 2', '(3 + 4) / 2', '18 km / 4.5'],
	  'seealso': ['multiply']
	};

	var dotDivide$1 = {
	  'name': 'dotDivide',
	  'category': 'Operators',
	  'syntax': ['x ./ y', 'dotDivide(x, y)'],
	  'description': 'Divide two values element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a ./ b'],
	  'seealso': ['multiply', 'dotMultiply', 'divide']
	};

	var dotMultiply$1 = {
	  'name': 'dotMultiply',
	  'category': 'Operators',
	  'syntax': ['x .* y', 'dotMultiply(x, y)'],
	  'description': 'Multiply two values element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'b = [2, 1, 1; 3, 2, 5]', 'a .* b'],
	  'seealso': ['multiply', 'divide', 'dotDivide']
	};

	var dotPow$1 = {
	  'name': 'dotpow',
	  'category': 'Operators',
	  'syntax': ['x .^ y', 'dotpow(x, y)'],
	  'description': 'Calculates the power of x to y element wise.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a .^ 2'],
	  'seealso': ['pow']
	};

	var exp$2 = {
	  'name': 'exp',
	  'category': 'Arithmetic',
	  'syntax': ['exp(x)'],
	  'description': 'Calculate the exponent of a value.',
	  'examples': ['exp(1.3)', 'e ^ 1.3', 'log(exp(1.3))', 'x = 2.4', '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'],
	  'seealso': ['expm', 'expm1', 'pow', 'log']
	};

	var expm$1 = {
	  'name': 'expm',
	  'category': 'Arithmetic',
	  'syntax': ['exp(x)'],
	  'description': 'Compute the matrix exponential, expm(A) = e^A. ' + 'The matrix must be square. ' + 'Not to be confused with exp(a), which performs element-wise exponentiation.',
	  'examples': ['expm([[0,2],[0,0]])'],
	  'seealso': ['exp']
	};

	var expm1$1 = {
	  'name': 'expm1',
	  'category': 'Arithmetic',
	  'syntax': ['expm1(x)'],
	  'description': 'Calculate the value of subtracting 1 from the exponential value.',
	  'examples': ['expm1(2)', 'pow(e, 2) - 1', 'log(expm1(2) + 1)'],
	  'seealso': ['exp', 'pow', 'log']
	};

	var fix$1 = {
	  'name': 'fix',
	  'category': 'Arithmetic',
	  'syntax': ['fix(x)'],
	  'description': 'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
	  'examples': ['fix(3.2)', 'fix(3.8)', 'fix(-4.2)', 'fix(-4.8)'],
	  'seealso': ['ceil', 'floor', 'round']
	};

	var floor$2 = {
	  'name': 'floor',
	  'category': 'Arithmetic',
	  'syntax': ['floor(x)'],
	  'description': 'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
	  'examples': ['floor(3.2)', 'floor(3.8)', 'floor(-4.2)'],
	  'seealso': ['ceil', 'fix', 'round']
	};

	var gcd$1 = {
	  'name': 'gcd',
	  'category': 'Arithmetic',
	  'syntax': ['gcd(a, b)', 'gcd(a, b, c, ...)'],
	  'description': 'Compute the greatest common divisor.',
	  'examples': ['gcd(8, 12)', 'gcd(-4, 6)', 'gcd(25, 15, -10)'],
	  'seealso': ['lcm', 'xgcd']
	};

	var hypot$2 = {
	  'name': 'hypot',
	  'category': 'Arithmetic',
	  'syntax': ['hypot(a, b, c, ...)', 'hypot([a, b, c, ...])'],
	  'description': 'Calculate the hypotenusa of a list with values. ',
	  'examples': ['hypot(3, 4)', 'sqrt(3^2 + 4^2)', 'hypot(-2)', 'hypot([3, 4, 5])'],
	  'seealso': ['abs', 'norm']
	};

	var lcm$1 = {
	  'name': 'lcm',
	  'category': 'Arithmetic',
	  'syntax': ['lcm(x, y)'],
	  'description': 'Compute the least common multiple.',
	  'examples': ['lcm(4, 6)', 'lcm(6, 21)', 'lcm(6, 21, 5)'],
	  'seealso': ['gcd']
	};

	var log$2 = {
	  'name': 'log',
	  'category': 'Arithmetic',
	  'syntax': ['log(x)', 'log(x, base)'],
	  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
	  'examples': ['log(3.5)', 'a = log(2.4)', 'exp(a)', '10 ^ 4', 'log(10000, 10)', 'log(10000) / log(10)', 'b = log(1024, 2)', '2 ^ b'],
	  'seealso': ['exp', 'log1p', 'log2', 'log10']
	};

	var log2$2 = {
	  'name': 'log2',
	  'category': 'Arithmetic',
	  'syntax': ['log2(x)'],
	  'description': 'Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.',
	  'examples': ['log2(0.03125)', 'log2(16)', 'log2(16) / log2(2)', 'pow(2, 4)'],
	  'seealso': ['exp', 'log1p', 'log', 'log10']
	};

	var log1p$1 = {
	  'name': 'log1p',
	  'category': 'Arithmetic',
	  'syntax': ['log1p(x)', 'log1p(x, base)'],
	  'description': 'Calculate the logarithm of a `value+1`',
	  'examples': ['log1p(2.5)', 'exp(log1p(1.4))', 'pow(10, 4)', 'log1p(9999, 10)', 'log1p(9999) / log(10)'],
	  'seealso': ['exp', 'log', 'log2', 'log10']
	};

	var log10$2 = {
	  'name': 'log10',
	  'category': 'Arithmetic',
	  'syntax': ['log10(x)'],
	  'description': 'Compute the 10-base logarithm of a value.',
	  'examples': ['log10(0.00001)', 'log10(10000)', '10 ^ 4', 'log(10000) / log(10)', 'log(10000, 10)'],
	  'seealso': ['exp', 'log']
	};

	var mod$2 = {
	  'name': 'mod',
	  'category': 'Operators',
	  'syntax': ['x % y', 'x mod y', 'mod(x, y)'],
	  'description': 'Calculates the modulus, the remainder of an integer division.',
	  'examples': ['7 % 3', '11 % 2', '10 mod 4', 'isOdd(x) = x % 2', 'isOdd(2)', 'isOdd(3)'],
	  'seealso': ['divide']
	};

	var multiply$1 = {
	  'name': 'multiply',
	  'category': 'Operators',
	  'syntax': ['x * y', 'multiply(x, y)'],
	  'description': 'multiply two values.',
	  'examples': ['a = 2.1 * 3.4', 'a / 3.4', '2 * 3 + 4', '2 * (3 + 4)', '3 * 2.1 km'],
	  'seealso': ['divide']
	};

	var norm$1 = {
	  'name': 'norm',
	  'category': 'Arithmetic',
	  'syntax': ['norm(x)', 'norm(x, p)'],
	  'description': 'Calculate the norm of a number, vector or matrix.',
	  'examples': ['abs(-3.5)', 'norm(-3.5)', 'norm(3 - 4i)', 'norm([1, 2, -3], Infinity)', 'norm([1, 2, -3], -Infinity)', 'norm([3, 4], 2)', 'norm([[1, 2], [3, 4]], 1)', 'norm([[1, 2], [3, 4]], "inf")', 'norm([[1, 2], [3, 4]], "fro")']
	};

	var nthRoot$1 = {
	  'name': 'nthRoot',
	  'category': 'Arithmetic',
	  'syntax': ['nthRoot(a)', 'nthRoot(a, root)'],
	  'description': 'Calculate the nth root of a value. ' + 'The principal nth root of a positive real number A, ' + 'is the positive real solution of the equation "x^root = A".',
	  'examples': ['4 ^ 3', 'nthRoot(64, 3)', 'nthRoot(9, 2)', 'sqrt(9)'],
	  'seealso': ['nthRoots', 'pow', 'sqrt']
	};

	var nthRoots$1 = {
	  'name': 'nthRoots',
	  'category': 'Arithmetic',
	  'syntax': ['nthRoots(A)', 'nthRoots(A, root)'],
	  'description': '' + 'Calculate the nth roots of a value. ' + 'An nth root of a positive real number A, ' + 'is a positive real solution of the equation "x^root = A". ' + 'This function returns an array of complex values.',
	  'examples': ['nthRoots(1)', 'nthRoots(1, 3)'],
	  'seealso': ['sqrt', 'pow', 'nthRoot']
	};

	var pow$2 = {
	  'name': 'pow',
	  'category': 'Operators',
	  'syntax': ['x ^ y', 'pow(x, y)'],
	  'description': 'Calculates the power of x to y, x^y.',
	  'examples': ['2^3', '2*2*2', '1 + e ^ (pi * i)'],
	  'seealso': ['multiply', 'nthRoot', 'nthRoots', 'sqrt']
	};

	var round$2 = {
	  'name': 'round',
	  'category': 'Arithmetic',
	  'syntax': ['round(x)', 'round(x, n)'],
	  'description': 'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
	  'examples': ['round(3.2)', 'round(3.8)', 'round(-4.2)', 'round(-4.8)', 'round(pi, 3)', 'round(123.45678, 2)'],
	  'seealso': ['ceil', 'floor', 'fix']
	};

	var sign$4 = {
	  'name': 'sign',
	  'category': 'Arithmetic',
	  'syntax': ['sign(x)'],
	  'description': 'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
	  'examples': ['sign(3.5)', 'sign(-4.2)', 'sign(0)'],
	  'seealso': ['abs']
	};

	var sqrt$2 = {
	  'name': 'sqrt',
	  'category': 'Arithmetic',
	  'syntax': ['sqrt(x)'],
	  'description': 'Compute the square root value. If x = y * y, then y is the square root of x.',
	  'examples': ['sqrt(25)', '5 * 5', 'sqrt(-1)'],
	  'seealso': ['square', 'sqrtm', 'multiply', 'nthRoot', 'nthRoots', 'pow']
	};

	var sqrtm$1 = {
	  'name': 'sqrtm',
	  'category': 'Arithmetic',
	  'syntax': ['sqrtm(x)'],
	  'description': 'Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.',
	  'examples': ['sqrtm([[1, 2], [3, 4]])'],
	  'seealso': ['sqrt', 'abs', 'square', 'multiply']
	};

	var square$1 = {
	  'name': 'square',
	  'category': 'Arithmetic',
	  'syntax': ['square(x)'],
	  'description': 'Compute the square of a value. The square of x is x * x.',
	  'examples': ['square(3)', 'sqrt(9)', '3^2', '3 * 3'],
	  'seealso': ['multiply', 'pow', 'sqrt', 'cube']
	};

	var subtract$1 = {
	  'name': 'subtract',
	  'category': 'Operators',
	  'syntax': ['x - y', 'subtract(x, y)'],
	  'description': 'subtract two values.',
	  'examples': ['a = 5.3 - 2', 'a + 2', '2/3 - 1/6', '2 * 3 - 3', '2.1 km - 500m'],
	  'seealso': ['add']
	};

	var unaryMinus$1 = {
	  'name': 'unaryMinus',
	  'category': 'Operators',
	  'syntax': ['-x', 'unaryMinus(x)'],
	  'description': 'Inverse the sign of a value. Converts booleans and strings to numbers.',
	  'examples': ['-4.5', '-(-5.6)', '-"22"'],
	  'seealso': ['add', 'subtract', 'unaryPlus']
	};

	var unaryPlus$1 = {
	  'name': 'unaryPlus',
	  'category': 'Operators',
	  'syntax': ['+x', 'unaryPlus(x)'],
	  'description': 'Converts booleans and strings to numbers.',
	  'examples': ['+true', '+"2"'],
	  'seealso': ['add', 'subtract', 'unaryMinus']
	};

	var xgcd$1 = {
	  'name': 'xgcd',
	  'category': 'Arithmetic',
	  'syntax': ['xgcd(a, b)'],
	  'description': 'Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.',
	  'examples': ['xgcd(8, 12)', 'gcd(8, 12)', 'xgcd(36163, 21199)'],
	  'seealso': ['gcd', 'lcm']
	};

	var bitAnd$2 = {
	  'name': 'bitAnd',
	  'category': 'Bitwise',
	  'syntax': ['x & y', 'bitAnd(x, y)'],
	  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
	  'examples': ['5 & 3', 'bitAnd(53, 131)', '[1, 12, 31] & 42'],
	  'seealso': ['bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
	};

	var bitNot$2 = {
	  'name': 'bitNot',
	  'category': 'Bitwise',
	  'syntax': ['~x', 'bitNot(x)'],
	  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
	  'examples': ['~1', '~2', 'bitNot([2, -3, 4])'],
	  'seealso': ['bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
	};

	var bitOr$2 = {
	  'name': 'bitOr',
	  'category': 'Bitwise',
	  'syntax': ['x | y', 'bitOr(x, y)'],
	  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
	  'examples': ['5 | 3', 'bitOr([1, 2, 3], 4)'],
	  'seealso': ['bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift']
	};

	var bitXor$2 = {
	  'name': 'bitXor',
	  'category': 'Bitwise',
	  'syntax': ['bitXor(x, y)'],
	  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
	  'examples': ['bitOr(1, 2)', 'bitXor([2, 3, 4], 4)'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift']
	};

	var leftShift$2 = {
	  'name': 'leftShift',
	  'category': 'Bitwise',
	  'syntax': ['x << y', 'leftShift(x, y)'],
	  'description': 'Bitwise left logical shift of a value x by y number of bits.',
	  'examples': ['4 << 1', '8 >> 1'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift']
	};

	var rightArithShift$2 = {
	  'name': 'rightArithShift',
	  'category': 'Bitwise',
	  'syntax': ['x >> y', 'rightArithShift(x, y)'],
	  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
	  'examples': ['8 >> 1', '4 << 1', '-12 >> 2'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift']
	};

	var rightLogShift$1 = {
	  'name': 'rightLogShift',
	  'category': 'Bitwise',
	  'syntax': ['x >>> y', 'rightLogShift(x, y)'],
	  'description': 'Bitwise right logical shift of a value x by y number of bits.',
	  'examples': ['8 >>> 1', '4 << 1', '-12 >>> 2'],
	  'seealso': ['bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift']
	};

	var bellNumbers$1 = {
	  'name': 'bellNumbers',
	  'category': 'Combinatorics',
	  'syntax': ['bellNumbers(n)'],
	  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': ['bellNumbers(3)', 'bellNumbers(8)'],
	  'seealso': ['stirlingS2']
	};

	var catalan$1 = {
	  'name': 'catalan',
	  'category': 'Combinatorics',
	  'syntax': ['catalan(n)'],
	  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': ['catalan(3)', 'catalan(8)'],
	  'seealso': ['bellNumbers']
	};

	var composition$1 = {
	  'name': 'composition',
	  'category': 'Combinatorics',
	  'syntax': ['composition(n, k)'],
	  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
	  'examples': ['composition(5, 3)'],
	  'seealso': ['combinations']
	};

	var stirlingS2$1 = {
	  'name': 'stirlingS2',
	  'category': 'Combinatorics',
	  'syntax': ['stirlingS2(n, k)'],
	  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
	  'examples': ['stirlingS2(5, 3)'],
	  'seealso': ['bellNumbers']
	};

	var config$2 = {
	  'name': 'config',
	  'category': 'Core',
	  'syntax': ['config()', 'config(options)'],
	  'description': 'Get configuration or change configuration.',
	  'examples': ['config()', '1/3 + 1/4', 'config({number: "Fraction"})', '1/3 + 1/4'],
	  'seealso': []
	};

	var _import$1 = {
	  'name': 'import',
	  'category': 'Core',
	  'syntax': ['import(functions)', 'import(functions, options)'],
	  'description': 'Import functions or constants from an object.',
	  'examples': ['import({myFn: f(x)=x^2, myConstant: 32 })', 'myFn(2)', 'myConstant'],
	  'seealso': []
	};

	var typed$1 = {
	  'name': 'typed',
	  'category': 'Core',
	  'syntax': ['typed(signatures)', 'typed(name, signatures)'],
	  'description': 'Create a typed function.',
	  'examples': ['double = typed({ "number, number": f(x)=x+x })', 'double(2)', 'double("hello")'],
	  'seealso': []
	};

	var arg$1 = {
	  'name': 'arg',
	  'category': 'Complex',
	  'syntax': ['arg(x)'],
	  'description': 'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
	  'examples': ['arg(2 + 2i)', 'atan2(3, 2)', 'arg(2 + 3i)'],
	  'seealso': ['re', 'im', 'conj', 'abs']
	};

	var conj$1 = {
	  'name': 'conj',
	  'category': 'Complex',
	  'syntax': ['conj(x)'],
	  'description': 'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
	  'examples': ['conj(2 + 3i)', 'conj(2 - 3i)', 'conj(-5.2i)'],
	  'seealso': ['re', 'im', 'abs', 'arg']
	};

	var re$1 = {
	  'name': 're',
	  'category': 'Complex',
	  'syntax': ['re(x)'],
	  'description': 'Get the real part of a complex number.',
	  'examples': ['re(2 + 3i)', 'im(2 + 3i)', 're(-5.2i)', 're(2.4)'],
	  'seealso': ['im', 'conj', 'abs', 'arg']
	};

	var im$1 = {
	  'name': 'im',
	  'category': 'Complex',
	  'syntax': ['im(x)'],
	  'description': 'Get the imaginary part of a complex number.',
	  'examples': ['im(2 + 3i)', 're(2 + 3i)', 'im(-5.2i)', 'im(2.4)'],
	  'seealso': ['re', 'conj', 'abs', 'arg']
	};

	var _eval = {
	  'name': 'eval',
	  'category': 'Expression',
	  'syntax': ['eval(expression)', 'eval([expr1, expr2, expr3, ...])'],
	  'description': 'Evaluate an expression or an array with expressions.',
	  'examples': ['eval("2 + 3")', 'eval("sqrt(" + 4 + ")")'],
	  'seealso': []
	};

	var help = {
	  'name': 'help',
	  'category': 'Expression',
	  'syntax': ['help(object)', 'help(string)'],
	  'description': 'Display documentation on a function or data type.',
	  'examples': ['help(sqrt)', 'help("complex")'],
	  'seealso': []
	};

	var distance$1 = {
	  'name': 'distance',
	  'category': 'Geometry',
	  'syntax': ['distance([x1, y1], [x2, y2])', 'distance([[x1, y1], [x2, y2])'],
	  'description': 'Calculates the Euclidean distance between two points.',
	  'examples': ['distance([0,0], [4,4])', 'distance([[0,0], [4,4]])'],
	  'seealso': []
	};

	var intersect$1 = {
	  'name': 'intersect',
	  'category': 'Geometry',
	  'syntax': ['intersect(expr1, expr2, expr3, expr4)', 'intersect(expr1, expr2, expr3)'],
	  'description': 'Computes the intersection point of lines and/or planes.',
	  'examples': ['intersect([0, 0], [10, 10], [10, 0], [0, 10])', 'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'],
	  'seealso': []
	};

	var and$1 = {
	  'name': 'and',
	  'category': 'Logical',
	  'syntax': ['x and y', 'and(x, y)'],
	  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
	  'examples': ['true and false', 'true and true', '2 and 4'],
	  'seealso': ['not', 'or', 'xor']
	};

	var not$1 = {
	  'name': 'not',
	  'category': 'Logical',
	  'syntax': ['not x', 'not(x)'],
	  'description': 'Logical not. Flips the boolean value of given argument.',
	  'examples': ['not true', 'not false', 'not 2', 'not 0'],
	  'seealso': ['and', 'or', 'xor']
	};

	var or$1 = {
	  'name': 'or',
	  'category': 'Logical',
	  'syntax': ['x or y', 'or(x, y)'],
	  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
	  'examples': ['true or false', 'false or false', '0 or 4'],
	  'seealso': ['not', 'and', 'xor']
	};

	var xor$1 = {
	  'name': 'xor',
	  'category': 'Logical',
	  'syntax': ['x xor y', 'xor(x, y)'],
	  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
	  'examples': ['true xor false', 'false xor false', 'true xor true', '0 xor 4'],
	  'seealso': ['not', 'and', 'or']
	};

	var concat$1 = {
	  'name': 'concat',
	  'category': 'Matrix',
	  'syntax': ['concat(A, B, C, ...)', 'concat(A, B, C, ..., dim)'],
	  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
	  'examples': ['A = [1, 2; 5, 6]', 'B = [3, 4; 7, 8]', 'concat(A, B)', 'concat(A, B, 1)', 'concat(A, B, 2)'],
	  'seealso': ['det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var cross$1 = {
	  'name': 'cross',
	  'category': 'Matrix',
	  'syntax': ['cross(A, B)'],
	  'description': 'Calculate the cross product for two vectors in three dimensional space.',
	  'examples': ['cross([1, 1, 0],  [0, 1, 1])', 'cross([3, -3, 1], [4, 9, 2])', 'cross([2, 3, 4],  [5, 6, 7])'],
	  'seealso': ['multiply', 'dot']
	};

	var ctranspose$1 = {
	  'name': 'transpose',
	  'category': 'Matrix',
	  'syntax': ['x\'', 'ctranspose(x)'],
	  'description': 'Complex Conjugate and Transpose a matrix',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'ctranspose(a)'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
	};

	var det$1 = {
	  'name': 'det',
	  'category': 'Matrix',
	  'syntax': ['det(x)'],
	  'description': 'Calculate the determinant of a matrix',
	  'examples': ['det([1, 2; 3, 4])', 'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'],
	  'seealso': ['concat', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var diag$1 = {
	  'name': 'diag',
	  'category': 'Matrix',
	  'syntax': ['diag(x)', 'diag(x, k)'],
	  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
	  'examples': ['diag(1:3)', 'diag(1:3, 1)', 'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]', 'diag(a)'],
	  'seealso': ['concat', 'det', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var dot$1 = {
	  'name': 'dot',
	  'category': 'Matrix',
	  'syntax': ['dot(A, B)', 'A * B'],
	  'description': 'Calculate the dot product of two vectors. ' + 'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' + 'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
	  'examples': ['dot([2, 4, 1], [2, 2, 3])', '[2, 4, 1] * [2, 2, 3]'],
	  'seealso': ['multiply', 'cross']
	};

	var getMatrixDataType$1 = {
	  'name': 'getMatrixDataType',
	  'category': 'Matrix',
	  'syntax': ['getMatrixDataType(x)'],
	  'description': 'Find the data type of all elements in a matrix or array, ' + 'for example "number" if all items are a number ' + 'and "Complex" if all values are complex numbers. ' + 'If a matrix contains more than one data type, it will return "mixed".',
	  'examples': ['getMatrixDataType([1, 2, 3])', 'getMatrixDataType([[5 cm], [2 inch]])', 'getMatrixDataType([1, "text"])', 'getMatrixDataType([1, bignumber(4)])'],
	  'seealso': ['matrix', 'sparse', 'typeof']
	};

	var identity$1 = {
	  'name': 'identity',
	  'category': 'Matrix',
	  'syntax': ['identity(n)', 'identity(m, n)', 'identity([m, n])'],
	  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
	  'examples': ['identity(3)', 'identity(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'identity(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var filter$1 = {
	  'name': 'filter',
	  'category': 'Matrix',
	  'syntax': ['filter(x, test)'],
	  'description': 'Filter items in a matrix.',
	  'examples': ['isPositive(x) = x > 0', 'filter([6, -2, -1, 4, 3], isPositive)', 'filter([6, -2, 0, 1, 0], x != 0)'],
	  'seealso': ['sort', 'map', 'forEach']
	};

	var flatten$g = {
	  'name': 'flatten',
	  'category': 'Matrix',
	  'syntax': ['flatten(x)'],
	  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'size(a)', 'b = flatten(a)', 'size(b)'],
	  'seealso': ['concat', 'resize', 'size', 'squeeze']
	};

	var forEach$3 = {
	  'name': 'forEach',
	  'category': 'Matrix',
	  'syntax': ['forEach(x, callback)'],
	  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
	  'examples': ['forEach([1, 2, 3], function(val) { console.log(val) })'],
	  'seealso': ['map', 'sort', 'filter']
	};

	var inv$1 = {
	  'name': 'inv',
	  'category': 'Matrix',
	  'syntax': ['inv(x)'],
	  'description': 'Calculate the inverse of a matrix',
	  'examples': ['inv([1, 2; 3, 4])', 'inv(4)', '1 / 4'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var kron$1 = {
	  'name': 'kron',
	  'category': 'Matrix',
	  'syntax': ['kron(x, y)'],
	  'description': 'Calculates the kronecker product of 2 matrices or vectors.',
	  'examples': ['kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])', 'kron([1,1], [2,3,4])'],
	  'seealso': ['multiply', 'dot', 'cross']
	};

	var map$6 = {
	  'name': 'map',
	  'category': 'Matrix',
	  'syntax': ['map(x, callback)'],
	  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
	  'examples': ['map([1, 2, 3], square)'],
	  'seealso': ['filter', 'forEach']
	};

	var ones$1 = {
	  'name': 'ones',
	  'category': 'Matrix',
	  'syntax': ['ones(m)', 'ones(m, n)', 'ones(m, n, p, ...)', 'ones([m])', 'ones([m, n])', 'ones([m, n, p, ...])'],
	  'description': 'Create a matrix containing ones.',
	  'examples': ['ones(3)', 'ones(3, 5)', 'ones([2,3]) * 4.5', 'a = [1, 2, 3; 4, 5, 6]', 'ones(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var partitionSelect$1 = {
	  'name': 'partitionSelect',
	  'category': 'Matrix',
	  'syntax': ['partitionSelect(x, k)', 'partitionSelect(x, k, compare)'],
	  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
	  'examples': ['partitionSelect([5, 10, 1], 2)', 'partitionSelect(["C", "B", "A", "D"], 1)'],
	  'seealso': ['sort']
	};

	var range$1 = {
	  'name': 'range',
	  'category': 'Type',
	  'syntax': ['start:end', 'start:step:end', 'range(start, end)', 'range(start, end, step)', 'range(string)'],
	  'description': 'Create a range. Lower bound of the range is included, upper bound is excluded.',
	  'examples': ['1:5', '3:-1:-3', 'range(3, 7)', 'range(0, 12, 2)', 'range("4:10")', 'a = [1, 2, 3, 4; 5, 6, 7, 8]', 'a[1:2, 1:2]'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var resize$3 = {
	  'name': 'resize',
	  'category': 'Matrix',
	  'syntax': ['resize(x, size)', 'resize(x, size, defaultValue)'],
	  'description': 'Resize a matrix.',
	  'examples': ['resize([1,2,3,4,5], [3])', 'resize([1,2,3], [5])', 'resize([1,2,3], [5], -1)', 'resize(2, [2, 3])', 'resize("hello", [8], "!")'],
	  'seealso': ['size', 'subset', 'squeeze', 'reshape']
	};

	var reshape$1 = {
	  'name': 'reshape',
	  'category': 'Matrix',
	  'syntax': ['reshape(x, sizes)'],
	  'description': 'Reshape a multi dimensional array to fit the specified dimensions.',
	  'examples': ['reshape([1, 2, 3, 4, 5, 6], [2, 3])', 'reshape([[1, 2], [3, 4]], [1, 4])', 'reshape([[1, 2], [3, 4]], [4])'],
	  'seealso': ['size', 'squeeze', 'resize']
	};

	var size$6 = {
	  'name': 'size',
	  'category': 'Matrix',
	  'syntax': ['size(x)'],
	  'description': 'Calculate the size of a matrix.',
	  'examples': ['size(2.3)', 'size("hello world")', 'a = [1, 2; 3, 4; 5, 6]', 'size(a)', 'size(1:6)'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros']
	};

	var sort$1 = {
	  'name': 'sort',
	  'category': 'Matrix',
	  'syntax': ['sort(x)', 'sort(x, compare)'],
	  'description': 'Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.',
	  'examples': ['sort([5, 10, 1])', 'sort(["C", "B", "A", "D"])', 'sortByLength(a, b) = size(a)[1] - size(b)[1]', 'sort(["Langdon", "Tom", "Sara"], sortByLength)', 'sort(["10", "1", "2"], "natural")'],
	  'seealso': ['map', 'filter', 'forEach']
	};

	var squeeze$1 = {
	  'name': 'squeeze',
	  'category': 'Matrix',
	  'syntax': ['squeeze(x)'],
	  'description': 'Remove inner and outer singleton dimensions from a matrix.',
	  'examples': ['a = zeros(3,2,1)', 'size(squeeze(a))', 'b = zeros(1,1,3)', 'size(squeeze(b))'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros']
	};

	var subset$1 = {
	  'name': 'subset',
	  'category': 'Matrix',
	  'syntax': ['value(index)', 'value(index) = replacement', 'subset(value, [index])', 'subset(value, [index], replacement)'],
	  'description': 'Get or set a subset of a matrix or string. ' + 'Indexes are one-based. ' + 'Both the ranges lower-bound and upper-bound are included.',
	  'examples': ['d = [1, 2; 3, 4]', 'e = []', 'e[1, 1:2] = [5, 6]', 'e[2, :] = [7, 8]', 'f = d * e', 'f[2, 1]', 'f[:, 1]'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros']
	};

	var trace$1 = {
	  'name': 'trace',
	  'category': 'Matrix',
	  'syntax': ['trace(A)'],
	  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
	  'examples': ['A = [1, 2, 3; -1, 2, 3; 2, 0, 3]', 'trace(A)'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros']
	};

	var transpose$1 = {
	  'name': 'transpose',
	  'category': 'Matrix',
	  'syntax': ['x\'', 'transpose(x)'],
	  'description': 'Transpose a matrix',
	  'examples': ['a = [1, 2, 3; 4, 5, 6]', 'a\'', 'transpose(a)'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros']
	};

	var zeros$1 = {
	  'name': 'zeros',
	  'category': 'Matrix',
	  'syntax': ['zeros(m)', 'zeros(m, n)', 'zeros(m, n, p, ...)', 'zeros([m])', 'zeros([m, n])', 'zeros([m, n, p, ...])'],
	  'description': 'Create a matrix containing zeros.',
	  'examples': ['zeros(3)', 'zeros(3, 5)', 'a = [1, 2, 3; 4, 5, 6]', 'zeros(size(a))'],
	  'seealso': ['concat', 'det', 'diag', 'identity', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose']
	};

	var combinations$1 = {
	  'name': 'combinations',
	  'category': 'Probability',
	  'syntax': ['combinations(n, k)'],
	  'description': 'Compute the number of combinations of n items taken k at a time',
	  'examples': ['combinations(7, 5)'],
	  'seealso': ['permutations', 'factorial']
	};

	var factorial$1 = {
	  'name': 'factorial',
	  'category': 'Probability',
	  'syntax': ['n!', 'factorial(n)'],
	  'description': 'Compute the factorial of a value',
	  'examples': ['5!', '5 * 4 * 3 * 2 * 1', '3!'],
	  'seealso': ['combinations', 'permutations', 'gamma']
	};

	var gamma$1 = {
	  'name': 'gamma',
	  'category': 'Probability',
	  'syntax': ['gamma(n)'],
	  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
	  'examples': ['gamma(4)', '3!', 'gamma(1/2)', 'sqrt(pi)'],
	  'seealso': ['factorial']
	};

	var kldivergence$1 = {
	  'name': 'kldivergence',
	  'category': 'Probability',
	  'syntax': ['kldivergence(x, y)'],
	  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
	  'examples': ['kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'],
	  'seealso': []
	};

	var multinomial$1 = {
	  'name': 'multinomial',
	  'category': 'Probability',
	  'syntax': ['multinomial(A)'],
	  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.',
	  'examples': ['multinomial([1, 2, 1])'],
	  'seealso': ['combinations', 'factorial']
	};

	var permutations$1 = {
	  'name': 'permutations',
	  'category': 'Probability',
	  'syntax': ['permutations(n)', 'permutations(n, k)'],
	  'description': 'Compute the number of permutations of n items taken k at a time',
	  'examples': ['permutations(5)', 'permutations(5, 3)'],
	  'seealso': ['combinations', 'factorial']
	};

	var pickRandom$1 = {
	  'name': 'pickRandom',
	  'category': 'Probability',
	  'syntax': ['pickRandom(array)', 'pickRandom(array, number)', 'pickRandom(array, weights)', 'pickRandom(array, number, weights)', 'pickRandom(array, weights, number)'],
	  'description': 'Pick a random entry from a given array.',
	  'examples': ['pickRandom(0:10)', 'pickRandom([1, 3, 1, 6])', 'pickRandom([1, 3, 1, 6], 2)', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])', 'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'],
	  'seealso': ['random', 'randomInt']
	};

	var random$2 = {
	  'name': 'random',
	  'category': 'Probability',
	  'syntax': ['random()', 'random(max)', 'random(min, max)', 'random(size)', 'random(size, max)', 'random(size, min, max)'],
	  'description': 'Return a random number.',
	  'examples': ['random()', 'random(10, 20)', 'random([2, 3])'],
	  'seealso': ['pickRandom', 'randomInt']
	};

	var randomInt$1 = {
	  'name': 'randomInt',
	  'category': 'Probability',
	  'syntax': ['randomInt(max)', 'randomInt(min, max)', 'randomInt(size)', 'randomInt(size, max)', 'randomInt(size, min, max)'],
	  'description': 'Return a random integer number',
	  'examples': ['randomInt(10, 20)', 'randomInt([2, 3], 10)'],
	  'seealso': ['pickRandom', 'random']
	};

	var compare$1 = {
	  'name': 'compare',
	  'category': 'Relational',
	  'syntax': ['compare(x, y)'],
	  'description': 'Compare two values. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
	  'examples': ['compare(2, 3)', 'compare(3, 2)', 'compare(2, 2)', 'compare(5cm, 40mm)', 'compare(2, [1, 2, 3])'],
	  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compareNatural', 'compareText']
	};

	var compareNatural$1 = {
	  'name': 'compareNatural',
	  'category': 'Relational',
	  'syntax': ['compareNatural(x, y)'],
	  'description': 'Compare two values of any type in a deterministic, natural way. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
	  'examples': ['compareNatural(2, 3)', 'compareNatural(3, 2)', 'compareNatural(2, 2)', 'compareNatural(5cm, 40mm)', 'compareNatural("2", "10")', 'compareNatural(2 + 3i, 2 + 4i)', 'compareNatural([1, 2, 4], [1, 2, 3])', 'compareNatural([1, 5], [1, 2, 3])', 'compareNatural([1, 2], [1, 2])', 'compareNatural({a: 2}, {a: 4})'],
	  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare', 'compareText']
	};

	var compareText$1 = {
	  'name': 'compareText',
	  'category': 'Relational',
	  'syntax': ['compareText(x, y)'],
	  'description': 'Compare two strings lexically. Comparison is case sensitive. ' + 'Returns 1 when x > y, -1 when x < y, and 0 when x == y.',
	  'examples': ['compareText("B", "A")', 'compareText("A", "B")', 'compareText("A", "A")', 'compareText("2", "10")', 'compare("2", "10")', 'compare(2, 10)', 'compareNatural("2", "10")', 'compareText("B", ["A", "B", "C"])'],
	  'seealso': ['compare', 'compareNatural']
	};

	var deepEqual$2 = {
	  'name': 'deepEqual',
	  'category': 'Relational',
	  'syntax': ['deepEqual(x, y)'],
	  'description': 'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
	  'examples': ['deepEqual([1,3,4], [1,3,4])', 'deepEqual([1,3,4], [1,3])'],
	  'seealso': ['equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare']
	};

	var equal$1 = {
	  'name': 'equal',
	  'category': 'Relational',
	  'syntax': ['x == y', 'equal(x, y)'],
	  'description': 'Check equality of two values. Returns true if the values are equal, and false if not.',
	  'examples': ['2+2 == 3', '2+2 == 4', 'a = 3.2', 'b = 6-2.8', 'a == b', '50cm == 0.5m'],
	  'seealso': ['unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual', 'equalText']
	};

	var equalText$1 = {
	  'name': 'equalText',
	  'category': 'Relational',
	  'syntax': ['equalText(x, y)'],
	  'description': 'Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.',
	  'examples': ['equalText("Hello", "Hello")', 'equalText("a", "A")', 'equal("2e3", "2000")', 'equalText("2e3", "2000")', 'equalText("B", ["A", "B", "C"])'],
	  'seealso': ['compare', 'compareNatural', 'compareText', 'equal']
	};

	var larger$1 = {
	  'name': 'larger',
	  'category': 'Relational',
	  'syntax': ['x > y', 'larger(x, y)'],
	  'description': 'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
	  'examples': ['2 > 3', '5 > 2*2', 'a = 3.3', 'b = 6-2.8', '(a > b)', '(b < a)', '5 cm > 2 inch'],
	  'seealso': ['equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare']
	};

	var largerEq$1 = {
	  'name': 'largerEq',
	  'category': 'Relational',
	  'syntax': ['x >= y', 'largerEq(x, y)'],
	  'description': 'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
	  'examples': ['2 >= 1+1', '2 > 1+1', 'a = 3.2', 'b = 6-2.8', '(a >= b)'],
	  'seealso': ['equal', 'unequal', 'smallerEq', 'smaller', 'compare']
	};

	var smaller$1 = {
	  'name': 'smaller',
	  'category': 'Relational',
	  'syntax': ['x < y', 'smaller(x, y)'],
	  'description': 'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
	  'examples': ['2 < 3', '5 < 2*2', 'a = 3.3', 'b = 6-2.8', '(a < b)', '5 cm < 2 inch'],
	  'seealso': ['equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare']
	};

	var smallerEq$1 = {
	  'name': 'smallerEq',
	  'category': 'Relational',
	  'syntax': ['x <= y', 'smallerEq(x, y)'],
	  'description': 'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
	  'examples': ['2 <= 1+1', '2 < 1+1', 'a = 3.2', 'b = 6-2.8', '(a <= b)'],
	  'seealso': ['equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare']
	};

	var unequal$1 = {
	  'name': 'unequal',
	  'category': 'Relational',
	  'syntax': ['x != y', 'unequal(x, y)'],
	  'description': 'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
	  'examples': ['2+2 != 3', '2+2 != 4', 'a = 3.2', 'b = 6-2.8', 'a != b', '50cm != 0.5m', '5 cm != 2 inch'],
	  'seealso': ['equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual']
	};

	var setCartesian$1 = {
	  'name': 'setCartesian',
	  'category': 'Set',
	  'syntax': ['setCartesian(set1, set2)'],
	  'description': 'Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setCartesian([1, 2], [3, 4])'],
	  'seealso': ['setUnion', 'setIntersect', 'setDifference', 'setPowerset']
	};

	var setDifference$1 = {
	  'name': 'setDifference',
	  'category': 'Set',
	  'syntax': ['setDifference(set1, set2)'],
	  'description': 'Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
	  'seealso': ['setUnion', 'setIntersect', 'setSymDifference']
	};

	var setDistinct$1 = {
	  'name': 'setDistinct',
	  'category': 'Set',
	  'syntax': ['setDistinct(set)'],
	  'description': 'Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
	  'examples': ['setDistinct([1, 1, 1, 2, 2, 3])'],
	  'seealso': ['setMultiplicity']
	};

	var setIntersect$1 = {
	  'name': 'setIntersect',
	  'category': 'Set',
	  'syntax': ['setIntersect(set1, set2)'],
	  'description': 'Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setIntersect([1, 2, 3, 4], [3, 4, 5, 6])', 'setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
	  'seealso': ['setUnion', 'setDifference']
	};

	var setIsSubset$1 = {
	  'name': 'setIsSubset',
	  'category': 'Set',
	  'syntax': ['setIsSubset(set1, set2)'],
	  'description': 'Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setIsSubset([1, 2], [3, 4, 5, 6])', 'setIsSubset([3, 4], [3, 4, 5, 6])'],
	  'seealso': ['setUnion', 'setIntersect', 'setDifference']
	};

	var setMultiplicity$1 = {
	  'name': 'setMultiplicity',
	  'category': 'Set',
	  'syntax': ['setMultiplicity(element, set)'],
	  'description': 'Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.',
	  'examples': ['setMultiplicity(1, [1, 2, 2, 4])', 'setMultiplicity(2, [1, 2, 2, 4])'],
	  'seealso': ['setDistinct', 'setSize']
	};

	var setPowerset$1 = {
	  'name': 'setPowerset',
	  'category': 'Set',
	  'syntax': ['setPowerset(set)'],
	  'description': 'Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.',
	  'examples': ['setPowerset([1, 2, 3])'],
	  'seealso': ['setCartesian']
	};

	var setSize$1 = {
	  'name': 'setSize',
	  'category': 'Set',
	  'syntax': ['setSize(set)', 'setSize(set, unique)'],
	  'description': 'Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.',
	  'examples': ['setSize([1, 2, 2, 4])', 'setSize([1, 2, 2, 4], true)'],
	  'seealso': ['setUnion', 'setIntersect', 'setDifference']
	};

	var setSymDifference$1 = {
	  'name': 'setSymDifference',
	  'category': 'Set',
	  'syntax': ['setSymDifference(set1, set2)'],
	  'description': 'Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])', 'setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
	  'seealso': ['setUnion', 'setIntersect', 'setDifference']
	};

	var setUnion$1 = {
	  'name': 'setUnion',
	  'category': 'Set',
	  'syntax': ['setUnion(set1, set2)'],
	  'description': 'Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.',
	  'examples': ['setUnion([1, 2, 3, 4], [3, 4, 5, 6])', 'setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])'],
	  'seealso': ['setIntersect', 'setDifference']
	};

	var erf$1 = {
	  'name': 'erf',
	  'category': 'Special',
	  'syntax': ['erf(x)'],
	  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
	  'examples': ['erf(0.2)', 'erf(-0.5)', 'erf(4)'],
	  'seealso': []
	};

	var mad$1 = {
	  'name': 'mad',
	  'category': 'Statistics',
	  'syntax': ['mad(a, b, c, ...)', 'mad(A)'],
	  'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
	  'examples': ['mad(10, 20, 30)', 'mad([1, 2, 3])'],
	  'seealso': ['mean', 'median', 'std', 'abs']
	};

	var max$2 = {
	  'name': 'max',
	  'category': 'Statistics',
	  'syntax': ['max(a, b, c, ...)', 'max(A)', 'max(A, dim)'],
	  'description': 'Compute the maximum value of a list of values.',
	  'examples': ['max(2, 3, 4, 1)', 'max([2, 3, 4, 1])', 'max([2, 5; 4, 3])', 'max([2, 5; 4, 3], 1)', 'max([2, 5; 4, 3], 2)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)'],
	  'seealso': ['mean', 'median', 'min', 'prod', 'std', 'sum', 'var']
	};

	var mean$1 = {
	  'name': 'mean',
	  'category': 'Statistics',
	  'syntax': ['mean(a, b, c, ...)', 'mean(A)', 'mean(A, dim)'],
	  'description': 'Compute the arithmetic mean of a list of values.',
	  'examples': ['mean(2, 3, 4, 1)', 'mean([2, 3, 4, 1])', 'mean([2, 5; 4, 3])', 'mean([2, 5; 4, 3], 1)', 'mean([2, 5; 4, 3], 2)', 'mean([1.0, 2.7, 3.2, 4.0])'],
	  'seealso': ['max', 'median', 'min', 'prod', 'std', 'sum', 'var']
	};

	var median$1 = {
	  'name': 'median',
	  'category': 'Statistics',
	  'syntax': ['median(a, b, c, ...)', 'median(A)'],
	  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
	  'examples': ['median(5, 2, 7)', 'median([3, -1, 5, 7])'],
	  'seealso': ['max', 'mean', 'min', 'prod', 'std', 'sum', 'var', 'quantileSeq']
	};

	var min$2 = {
	  'name': 'min',
	  'category': 'Statistics',
	  'syntax': ['min(a, b, c, ...)', 'min(A)', 'min(A, dim)'],
	  'description': 'Compute the minimum value of a list of values.',
	  'examples': ['min(2, 3, 4, 1)', 'min([2, 3, 4, 1])', 'min([2, 5; 4, 3])', 'min([2, 5; 4, 3], 1)', 'min([2, 5; 4, 3], 2)', 'min(2.7, 7.1, -4.5, 2.0, 4.1)', 'max(2.7, 7.1, -4.5, 2.0, 4.1)'],
	  'seealso': ['max', 'mean', 'median', 'prod', 'std', 'sum', 'var']
	};

	var mode$1 = {
	  'name': 'mode',
	  'category': 'Statistics',
	  'syntax': ['mode(a, b, c, ...)', 'mode(A)', 'mode(A, a, b, B, c, ...)'],
	  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
	  'examples': ['mode(2, 1, 4, 3, 1)', 'mode([1, 2.7, 3.2, 4, 2.7])', 'mode(1, 4, 6, 1, 6)'],
	  'seealso': ['max', 'mean', 'min', 'median', 'prod', 'std', 'sum', 'var']
	};

	var prod$1 = {
	  'name': 'prod',
	  'category': 'Statistics',
	  'syntax': ['prod(a, b, c, ...)', 'prod(A)'],
	  'description': 'Compute the product of all values.',
	  'examples': ['prod(2, 3, 4)', 'prod([2, 3, 4])', 'prod([2, 5; 4, 3])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'std', 'sum', 'var']
	};

	var quantileSeq$1 = {
	  'name': 'quantileSeq',
	  'category': 'Statistics',
	  'syntax': ['quantileSeq(A, prob[, sorted])', 'quantileSeq(A, [prob1, prob2, ...][, sorted])', 'quantileSeq(A, N[, sorted])'],
	  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
	  'examples': ['quantileSeq([3, -1, 5, 7], 0.5)', 'quantileSeq([3, -1, 5, 7], [1/3, 2/3])', 'quantileSeq([3, -1, 5, 7], 2)', 'quantileSeq([-1, 3, 5, 7], 0.5, true)'],
	  'seealso': ['mean', 'median', 'min', 'max', 'prod', 'std', 'sum', 'var']
	};

	var std$1 = {
	  'name': 'std',
	  'category': 'Statistics',
	  'syntax': ['std(a, b, c, ...)', 'std(A)', 'std(A, normalization)'],
	  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': ['std(2, 4, 6)', 'std([2, 4, 6, 8])', 'std([2, 4, 6, 8], "uncorrected")', 'std([2, 4, 6, 8], "biased")', 'std([1, 2, 3; 4, 5, 6])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'sum', 'var']
	};

	var sum$1 = {
	  'name': 'sum',
	  'category': 'Statistics',
	  'syntax': ['sum(a, b, c, ...)', 'sum(A)'],
	  'description': 'Compute the sum of all values.',
	  'examples': ['sum(2, 3, 4, 1)', 'sum([2, 3, 4, 1])', 'sum([2, 5; 4, 3])'],
	  'seealso': ['max', 'mean', 'median', 'min', 'prod', 'std', 'sum', 'var']
	};

	var _var$1 = {
	  'name': 'var',
	  'category': 'Statistics',
	  'syntax': ['var(a, b, c, ...)', 'var(A)', 'var(A, normalization)'],
	  'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': ['var(2, 4, 6)', 'var([2, 4, 6, 8])', 'var([2, 4, 6, 8], "uncorrected")', 'var([2, 4, 6, 8], "biased")', 'var([1, 2, 3; 4, 5, 6])'],
	  'seealso': ['max', 'mean', 'min', 'median', 'min', 'prod', 'std', 'sum']
	};

	var acos$2 = {
	  'name': 'acos',
	  'category': 'Trigonometry',
	  'syntax': ['acos(x)'],
	  'description': 'Compute the inverse cosine of a value in radians.',
	  'examples': ['acos(0.5)', 'acos(cos(2.3))'],
	  'seealso': ['cos', 'atan', 'asin']
	};

	var acosh$2 = {
	  'name': 'acosh',
	  'category': 'Trigonometry',
	  'syntax': ['acosh(x)'],
	  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
	  'examples': ['acosh(1.5)'],
	  'seealso': ['cosh', 'asinh', 'atanh']
	};

	var acot$1 = {
	  'name': 'acot',
	  'category': 'Trigonometry',
	  'syntax': ['acot(x)'],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': ['acot(0.5)', 'acot(cot(0.5))', 'acot(2)'],
	  'seealso': ['cot', 'atan']
	};

	var acoth$1 = {
	  'name': 'acoth',
	  'category': 'Trigonometry',
	  'syntax': ['acoth(x)'],
	  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
	  'examples': ['acoth(2)', 'acoth(0.5)'],
	  'seealso': ['acsch', 'asech']
	};

	var acsc$1 = {
	  'name': 'acsc',
	  'category': 'Trigonometry',
	  'syntax': ['acsc(x)'],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': ['acsc(2)', 'acsc(csc(0.5))', 'acsc(0.5)'],
	  'seealso': ['csc', 'asin', 'asec']
	};

	var acsch$1 = {
	  'name': 'acsch',
	  'category': 'Trigonometry',
	  'syntax': ['acsch(x)'],
	  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
	  'examples': ['acsch(0.5)'],
	  'seealso': ['asech', 'acoth']
	};

	var asec$1 = {
	  'name': 'asec',
	  'category': 'Trigonometry',
	  'syntax': ['asec(x)'],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': ['asec(0.5)', 'asec(sec(0.5))', 'asec(2)'],
	  'seealso': ['acos', 'acot', 'acsc']
	};

	var asech$1 = {
	  'name': 'asech',
	  'category': 'Trigonometry',
	  'syntax': ['asech(x)'],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': ['asech(0.5)'],
	  'seealso': ['acsch', 'acoth']
	};

	var asin$2 = {
	  'name': 'asin',
	  'category': 'Trigonometry',
	  'syntax': ['asin(x)'],
	  'description': 'Compute the inverse sine of a value in radians.',
	  'examples': ['asin(0.5)', 'asin(sin(0.5))'],
	  'seealso': ['sin', 'acos', 'atan']
	};

	var asinh$2 = {
	  'name': 'asinh',
	  'category': 'Trigonometry',
	  'syntax': ['asinh(x)'],
	  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
	  'examples': ['asinh(0.5)'],
	  'seealso': ['acosh', 'atanh']
	};

	var atan$2 = {
	  'name': 'atan',
	  'category': 'Trigonometry',
	  'syntax': ['atan(x)'],
	  'description': 'Compute the inverse tangent of a value in radians.',
	  'examples': ['atan(0.5)', 'atan(tan(0.5))'],
	  'seealso': ['tan', 'acos', 'asin']
	};

	var atanh$2 = {
	  'name': 'atanh',
	  'category': 'Trigonometry',
	  'syntax': ['atanh(x)'],
	  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
	  'examples': ['atanh(0.5)'],
	  'seealso': ['acosh', 'asinh']
	};

	var atan2$2 = {
	  'name': 'atan2',
	  'category': 'Trigonometry',
	  'syntax': ['atan2(y, x)'],
	  'description': 'Computes the principal value of the arc tangent of y/x in radians.',
	  'examples': ['atan2(2, 2) / pi', 'angle = 60 deg in rad', 'x = cos(angle)', 'y = sin(angle)', 'atan2(y, x)'],
	  'seealso': ['sin', 'cos', 'tan']
	};

	var cos$2 = {
	  'name': 'cos',
	  'category': 'Trigonometry',
	  'syntax': ['cos(x)'],
	  'description': 'Compute the cosine of x in radians.',
	  'examples': ['cos(2)', 'cos(pi / 4) ^ 2', 'cos(180 deg)', 'cos(60 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
	  'seealso': ['acos', 'sin', 'tan']
	};

	var cosh$2 = {
	  'name': 'cosh',
	  'category': 'Trigonometry',
	  'syntax': ['cosh(x)'],
	  'description': 'Compute the hyperbolic cosine of x in radians.',
	  'examples': ['cosh(0.5)'],
	  'seealso': ['sinh', 'tanh', 'coth']
	};

	var cot$1 = {
	  'name': 'cot',
	  'category': 'Trigonometry',
	  'syntax': ['cot(x)'],
	  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
	  'examples': ['cot(2)', '1 / tan(2)'],
	  'seealso': ['sec', 'csc', 'tan']
	};

	var coth$1 = {
	  'name': 'coth',
	  'category': 'Trigonometry',
	  'syntax': ['coth(x)'],
	  'description': 'Compute the hyperbolic cotangent of x in radians.',
	  'examples': ['coth(2)', '1 / tanh(2)'],
	  'seealso': ['sech', 'csch', 'tanh']
	};

	var csc$1 = {
	  'name': 'csc',
	  'category': 'Trigonometry',
	  'syntax': ['csc(x)'],
	  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
	  'examples': ['csc(2)', '1 / sin(2)'],
	  'seealso': ['sec', 'cot', 'sin']
	};

	var csch$1 = {
	  'name': 'csch',
	  'category': 'Trigonometry',
	  'syntax': ['csch(x)'],
	  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
	  'examples': ['csch(2)', '1 / sinh(2)'],
	  'seealso': ['sech', 'coth', 'sinh']
	};

	var sec$1 = {
	  'name': 'sec',
	  'category': 'Trigonometry',
	  'syntax': ['sec(x)'],
	  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
	  'examples': ['sec(2)', '1 / cos(2)'],
	  'seealso': ['cot', 'csc', 'cos']
	};

	var sech$1 = {
	  'name': 'sech',
	  'category': 'Trigonometry',
	  'syntax': ['sech(x)'],
	  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
	  'examples': ['sech(2)', '1 / cosh(2)'],
	  'seealso': ['coth', 'csch', 'cosh']
	};

	var sin$2 = {
	  'name': 'sin',
	  'category': 'Trigonometry',
	  'syntax': ['sin(x)'],
	  'description': 'Compute the sine of x in radians.',
	  'examples': ['sin(2)', 'sin(pi / 4) ^ 2', 'sin(90 deg)', 'sin(30 deg)', 'sin(0.2)^2 + cos(0.2)^2'],
	  'seealso': ['asin', 'cos', 'tan']
	};

	var sinh$2 = {
	  'name': 'sinh',
	  'category': 'Trigonometry',
	  'syntax': ['sinh(x)'],
	  'description': 'Compute the hyperbolic sine of x in radians.',
	  'examples': ['sinh(0.5)'],
	  'seealso': ['cosh', 'tanh']
	};

	var tan$2 = {
	  'name': 'tan',
	  'category': 'Trigonometry',
	  'syntax': ['tan(x)'],
	  'description': 'Compute the tangent of x in radians.',
	  'examples': ['tan(0.5)', 'sin(0.5) / cos(0.5)', 'tan(pi / 4)', 'tan(45 deg)'],
	  'seealso': ['atan', 'sin', 'cos']
	};

	var tanh$2 = {
	  'name': 'tanh',
	  'category': 'Trigonometry',
	  'syntax': ['tanh(x)'],
	  'description': 'Compute the hyperbolic tangent of x in radians.',
	  'examples': ['tanh(0.5)', 'sinh(0.5) / cosh(0.5)'],
	  'seealso': ['sinh', 'cosh']
	};

	var to$1 = {
	  'name': 'to',
	  'category': 'Units',
	  'syntax': ['x to unit', 'to(x, unit)'],
	  'description': 'Change the unit of a value.',
	  'examples': ['5 inch to cm', '3.2kg to g', '16 bytes in bits'],
	  'seealso': []
	};

	var clone$b = {
	  'name': 'clone',
	  'category': 'Utils',
	  'syntax': ['clone(x)'],
	  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
	  'examples': ['clone(3.5)', 'clone(2 - 4i)', 'clone(45 deg)', 'clone([1, 2; 3, 4])', 'clone("hello world")'],
	  'seealso': []
	};

	var format$9 = {
	  'name': 'format',
	  'category': 'Utils',
	  'syntax': ['format(value)', 'format(value, precision)'],
	  'description': 'Format a value of any type as string.',
	  'examples': ['format(2.3)', 'format(3 - 4i)', 'format([])', 'format(pi, 3)'],
	  'seealso': ['print']
	};

	var _isNaN$1 = {
	  'name': 'isNaN',
	  'category': 'Utils',
	  'syntax': ['isNaN(x)'],
	  'description': 'Test whether a value is NaN (not a number)',
	  'examples': ['isNaN(2)', 'isNaN(0 / 0)', 'isNaN(NaN)', 'isNaN(Infinity)'],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};

	var isInteger$r = {
	  'name': 'isInteger',
	  'category': 'Utils',
	  'syntax': ['isInteger(x)'],
	  'description': 'Test whether a value is an integer number.',
	  'examples': ['isInteger(2)', 'isInteger(3.5)', 'isInteger([3, 0.5, -2])'],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};

	var isNegative$1 = {
	  'name': 'isNegative',
	  'category': 'Utils',
	  'syntax': ['isNegative(x)'],
	  'description': 'Test whether a value is negative: smaller than zero.',
	  'examples': ['isNegative(2)', 'isNegative(0)', 'isNegative(-4)', 'isNegative([3, 0.5, -2])'],
	  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
	};

	var isNumeric$1 = {
	  'name': 'isNumeric',
	  'category': 'Utils',
	  'syntax': ['isNumeric(x)'],
	  'description': 'Test whether a value is a numeric value. ' + 'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
	  'examples': ['isNumeric(2)', 'isNumeric(0)', 'isNumeric(bignumber(500))', 'isNumeric(fraction(0.125))', 'isNumeric("3")', 'isNumeric(2 + 3i)', 'isNumeric([2.3, "foo", false])'],
	  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']
	};

	var isPositive$1 = {
	  'name': 'isPositive',
	  'category': 'Utils',
	  'syntax': ['isPositive(x)'],
	  'description': 'Test whether a value is positive: larger than zero.',
	  'examples': ['isPositive(2)', 'isPositive(0)', 'isPositive(-4)', 'isPositive([3, 0.5, -2])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};

	var isPrime$1 = {
	  'name': 'isPrime',
	  'category': 'Utils',
	  'syntax': ['isPrime(x)'],
	  'description': 'Test whether a value is prime: has no divisors other than itself and one.',
	  'examples': ['isPrime(3)', 'isPrime(-2)', 'isPrime([2, 17, 100])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};

	var isZero$1 = {
	  'name': 'isZero',
	  'category': 'Utils',
	  'syntax': ['isZero(x)'],
	  'description': 'Test whether a value is zero.',
	  'examples': ['isZero(2)', 'isZero(0)', 'isZero(-4)', 'isZero([3, 0, -2, 0])'],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
	};

	var _typeof$d = {
	  'name': 'typeof',
	  'category': 'Utils',
	  'syntax': ['typeof(x)'],
	  'description': 'Get the type of a variable.',
	  'examples': ['typeof(3.5)', 'typeof(2 - 4i)', 'typeof(45 deg)', 'typeof("hello world")'],
	  'seealso': ['getMatrixDataType']
	};

	function factory$4d(construction, config, load, typed) {
	  var docs = {}; // construction functions

	  docs.bignumber = bignumber$2;
	  docs['boolean'] = boolean_1$2;
	  docs.complex = complex$5;
	  docs.createUnit = createUnit$1;
	  docs.fraction = fraction$3;
	  docs.index = construction;
	  docs.matrix = matrix$3;
	  docs.number = number$5;
	  docs.sparse = sparse$1;
	  docs.splitUnit = splitUnit$1;
	  docs.string = string$9;
	  docs.unit = unit$3; // constants

	  docs.e = e;
	  docs.E = e;
	  docs['false'] = _false;
	  docs.i = i;
	  docs['Infinity'] = _Infinity;
	  docs.LN2 = LN2;
	  docs.LN10 = LN10$1;
	  docs.LOG2E = LOG2E;
	  docs.LOG10E = LOG10E;
	  docs.NaN = _NaN;
	  docs['null'] = _null;
	  docs.pi = pi;
	  docs.PI = pi;
	  docs.phi = phi;
	  docs.SQRT1_2 = SQRT1_2;
	  docs.SQRT2 = SQRT2;
	  docs.tau = tau;
	  docs['true'] = _true;
	  docs.version = version$1; // physical constants
	  // TODO: more detailed docs for physical constants

	  docs.speedOfLight = {
	    description: 'Speed of light in vacuum',
	    examples: ['speedOfLight']
	  };
	  docs.gravitationConstant = {
	    description: 'Newtonian constant of gravitation',
	    examples: ['gravitationConstant']
	  };
	  docs.planckConstant = {
	    description: 'Planck constant',
	    examples: ['planckConstant']
	  };
	  docs.reducedPlanckConstant = {
	    description: 'Reduced Planck constant',
	    examples: ['reducedPlanckConstant']
	  };
	  docs.magneticConstant = {
	    description: 'Magnetic constant (vacuum permeability)',
	    examples: ['magneticConstant']
	  };
	  docs.electricConstant = {
	    description: 'Electric constant (vacuum permeability)',
	    examples: ['electricConstant']
	  };
	  docs.vacuumImpedance = {
	    description: 'Characteristic impedance of vacuum',
	    examples: ['vacuumImpedance']
	  };
	  docs.coulomb = {
	    description: 'Coulomb\'s constant',
	    examples: ['coulomb']
	  };
	  docs.elementaryCharge = {
	    description: 'Elementary charge',
	    examples: ['elementaryCharge']
	  };
	  docs.bohrMagneton = {
	    description: 'Borh magneton',
	    examples: ['bohrMagneton']
	  };
	  docs.conductanceQuantum = {
	    description: 'Conductance quantum',
	    examples: ['conductanceQuantum']
	  };
	  docs.inverseConductanceQuantum = {
	    description: 'Inverse conductance quantum',
	    examples: ['inverseConductanceQuantum'] // docs.josephson = {description: 'Josephson constant', examples: ['josephson']}

	  };
	  docs.magneticFluxQuantum = {
	    description: 'Magnetic flux quantum',
	    examples: ['magneticFluxQuantum']
	  };
	  docs.nuclearMagneton = {
	    description: 'Nuclear magneton',
	    examples: ['nuclearMagneton']
	  };
	  docs.klitzing = {
	    description: 'Von Klitzing constant',
	    examples: ['klitzing']
	  };
	  docs.bohrRadius = {
	    description: 'Borh radius',
	    examples: ['bohrRadius']
	  };
	  docs.classicalElectronRadius = {
	    description: 'Classical electron radius',
	    examples: ['classicalElectronRadius']
	  };
	  docs.electronMass = {
	    description: 'Electron mass',
	    examples: ['electronMass']
	  };
	  docs.fermiCoupling = {
	    description: 'Fermi coupling constant',
	    examples: ['fermiCoupling']
	  };
	  docs.fineStructure = {
	    description: 'Fine-structure constant',
	    examples: ['fineStructure']
	  };
	  docs.hartreeEnergy = {
	    description: 'Hartree energy',
	    examples: ['hartreeEnergy']
	  };
	  docs.protonMass = {
	    description: 'Proton mass',
	    examples: ['protonMass']
	  };
	  docs.deuteronMass = {
	    description: 'Deuteron Mass',
	    examples: ['deuteronMass']
	  };
	  docs.neutronMass = {
	    description: 'Neutron mass',
	    examples: ['neutronMass']
	  };
	  docs.quantumOfCirculation = {
	    description: 'Quantum of circulation',
	    examples: ['quantumOfCirculation']
	  };
	  docs.rydberg = {
	    description: 'Rydberg constant',
	    examples: ['rydberg']
	  };
	  docs.thomsonCrossSection = {
	    description: 'Thomson cross section',
	    examples: ['thomsonCrossSection']
	  };
	  docs.weakMixingAngle = {
	    description: 'Weak mixing angle',
	    examples: ['weakMixingAngle']
	  };
	  docs.efimovFactor = {
	    description: 'Efimov factor',
	    examples: ['efimovFactor']
	  };
	  docs.atomicMass = {
	    description: 'Atomic mass constant',
	    examples: ['atomicMass']
	  };
	  docs.avogadro = {
	    description: 'Avogadro\'s number',
	    examples: ['avogadro']
	  };
	  docs.boltzmann = {
	    description: 'Boltzmann constant',
	    examples: ['boltzmann']
	  };
	  docs.faraday = {
	    description: 'Faraday constant',
	    examples: ['faraday']
	  };
	  docs.firstRadiation = {
	    description: 'First radiation constant',
	    examples: ['firstRadiation']
	  };
	  docs.loschmidt = {
	    description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa',
	    examples: ['loschmidt']
	  };
	  docs.gasConstant = {
	    description: 'Gas constant',
	    examples: ['gasConstant']
	  };
	  docs.molarPlanckConstant = {
	    description: 'Molar Planck constant',
	    examples: ['molarPlanckConstant']
	  };
	  docs.molarVolume = {
	    description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa',
	    examples: ['molarVolume']
	  };
	  docs.sackurTetrode = {
	    description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa',
	    examples: ['sackurTetrode']
	  };
	  docs.secondRadiation = {
	    description: 'Second radiation constant',
	    examples: ['secondRadiation']
	  };
	  docs.stefanBoltzmann = {
	    description: 'Stefan-Boltzmann constant',
	    examples: ['stefanBoltzmann']
	  };
	  docs.wienDisplacement = {
	    description: 'Wien displacement law constant',
	    examples: ['wienDisplacement'] // docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']}

	  };
	  docs.molarMass = {
	    description: 'Molar mass constant',
	    examples: ['molarMass']
	  };
	  docs.molarMassC12 = {
	    description: 'Molar mass constant of carbon-12',
	    examples: ['molarMassC12']
	  };
	  docs.gravity = {
	    description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)',
	    examples: ['gravity']
	  };
	  docs.planckLength = {
	    description: 'Planck length',
	    examples: ['planckLength']
	  };
	  docs.planckMass = {
	    description: 'Planck mass',
	    examples: ['planckMass']
	  };
	  docs.planckTime = {
	    description: 'Planck time',
	    examples: ['planckTime']
	  };
	  docs.planckCharge = {
	    description: 'Planck charge',
	    examples: ['planckCharge']
	  };
	  docs.planckTemperature = {
	    description: 'Planck temperature',
	    examples: ['planckTemperature'] // functions - algebra

	  };
	  docs.derivative = derivative$1;
	  docs.lsolve = lsolve$1;
	  docs.lup = lup$1;
	  docs.lusolve = lusolve$1;
	  docs.simplify = simplify$1;
	  docs.rationalize = rationalize$1;
	  docs.slu = slu$1;
	  docs.usolve = usolve$1;
	  docs.qr = qr$1; // functions - arithmetic

	  docs.abs = abs$2;
	  docs.add = add$2;
	  docs.cbrt = cbrt$2;
	  docs.ceil = ceil$2;
	  docs.cube = cube$1;
	  docs.divide = divide$2;
	  docs.dotDivide = dotDivide$1;
	  docs.dotMultiply = dotMultiply$1;
	  docs.dotPow = dotPow$1;
	  docs.exp = exp$2;
	  docs.expm = expm$1;
	  docs.expm1 = expm1$1;
	  docs.fix = fix$1;
	  docs.floor = floor$2;
	  docs.gcd = gcd$1;
	  docs.hypot = hypot$2;
	  docs.lcm = lcm$1;
	  docs.log = log$2;
	  docs.log2 = log2$2;
	  docs.log1p = log1p$1;
	  docs.log10 = log10$2;
	  docs.mod = mod$2;
	  docs.multiply = multiply$1;
	  docs.norm = norm$1;
	  docs.nthRoot = nthRoot$1;
	  docs.nthRoots = nthRoots$1;
	  docs.pow = pow$2;
	  docs.round = round$2;
	  docs.sign = sign$4;
	  docs.sqrt = sqrt$2;
	  docs.sqrtm = sqrtm$1;
	  docs.square = square$1;
	  docs.subtract = subtract$1;
	  docs.unaryMinus = unaryMinus$1;
	  docs.unaryPlus = unaryPlus$1;
	  docs.xgcd = xgcd$1; // functions - bitwise

	  docs.bitAnd = bitAnd$2;
	  docs.bitNot = bitNot$2;
	  docs.bitOr = bitOr$2;
	  docs.bitXor = bitXor$2;
	  docs.leftShift = leftShift$2;
	  docs.rightArithShift = rightArithShift$2;
	  docs.rightLogShift = rightLogShift$1; // functions - combinatorics

	  docs.bellNumbers = bellNumbers$1;
	  docs.catalan = catalan$1;
	  docs.composition = composition$1;
	  docs.stirlingS2 = stirlingS2$1; // functions - core

	  docs['config'] = config$2;
	  docs['import'] = _import$1;
	  docs['typed'] = typed$1; // functions - complex

	  docs.arg = arg$1;
	  docs.conj = conj$1;
	  docs.re = re$1;
	  docs.im = im$1; // functions - expression

	  docs['eval'] = _eval;
	  docs.help = help; // functions - geometry

	  docs.distance = distance$1;
	  docs.intersect = intersect$1; // functions - logical

	  docs['and'] = and$1;
	  docs['not'] = not$1;
	  docs['or'] = or$1;
	  docs['xor'] = xor$1; // functions - matrix

	  docs['concat'] = concat$1;
	  docs.cross = cross$1;
	  docs.ctranspose = ctranspose$1;
	  docs.det = det$1;
	  docs.diag = diag$1;
	  docs.dot = dot$1;
	  docs.getMatrixDataType = getMatrixDataType$1;
	  docs.identity = identity$1;
	  docs.filter = filter$1;
	  docs.flatten = flatten$g;
	  docs.forEach = forEach$3;
	  docs.inv = inv$1;
	  docs.kron = kron$1;
	  docs.map = map$6;
	  docs.ones = ones$1;
	  docs.partitionSelect = partitionSelect$1;
	  docs.range = range$1;
	  docs.resize = resize$3;
	  docs.reshape = reshape$1;
	  docs.size = size$6;
	  docs.sort = sort$1;
	  docs.squeeze = squeeze$1;
	  docs.subset = subset$1;
	  docs.trace = trace$1;
	  docs.transpose = transpose$1;
	  docs.zeros = zeros$1; // functions - probability

	  docs.combinations = combinations$1; // docs.distribution = require('./function/probability/distribution')

	  docs.factorial = factorial$1;
	  docs.gamma = gamma$1;
	  docs.kldivergence = kldivergence$1;
	  docs.multinomial = multinomial$1;
	  docs.permutations = permutations$1;
	  docs.pickRandom = pickRandom$1;
	  docs.random = random$2;
	  docs.randomInt = randomInt$1; // functions - relational

	  docs.compare = compare$1;
	  docs.compareNatural = compareNatural$1;
	  docs.compareText = compareText$1;
	  docs.deepEqual = deepEqual$2;
	  docs['equal'] = equal$1;
	  docs.equalText = equalText$1;
	  docs.larger = larger$1;
	  docs.largerEq = largerEq$1;
	  docs.smaller = smaller$1;
	  docs.smallerEq = smallerEq$1;
	  docs.unequal = unequal$1; // functions - set

	  docs.setCartesian = setCartesian$1;
	  docs.setDifference = setDifference$1;
	  docs.setDistinct = setDistinct$1;
	  docs.setIntersect = setIntersect$1;
	  docs.setIsSubset = setIsSubset$1;
	  docs.setMultiplicity = setMultiplicity$1;
	  docs.setPowerset = setPowerset$1;
	  docs.setSize = setSize$1;
	  docs.setSymDifference = setSymDifference$1;
	  docs.setUnion = setUnion$1; // functions - special

	  docs.erf = erf$1; // functions - statistics

	  docs.mad = mad$1;
	  docs.max = max$2;
	  docs.mean = mean$1;
	  docs.median = median$1;
	  docs.min = min$2;
	  docs.mode = mode$1;
	  docs.prod = prod$1;
	  docs.quantileSeq = quantileSeq$1;
	  docs.std = std$1;
	  docs.sum = sum$1;
	  docs['var'] = _var$1; // functions - trigonometry

	  docs.acos = acos$2;
	  docs.acosh = acosh$2;
	  docs.acot = acot$1;
	  docs.acoth = acoth$1;
	  docs.acsc = acsc$1;
	  docs.acsch = acsch$1;
	  docs.asec = asec$1;
	  docs.asech = asech$1;
	  docs.asin = asin$2;
	  docs.asinh = asinh$2;
	  docs.atan = atan$2;
	  docs.atanh = atanh$2;
	  docs.atan2 = atan2$2;
	  docs.cos = cos$2;
	  docs.cosh = cosh$2;
	  docs.cot = cot$1;
	  docs.coth = coth$1;
	  docs.csc = csc$1;
	  docs.csch = csch$1;
	  docs.sec = sec$1;
	  docs.sech = sech$1;
	  docs.sin = sin$2;
	  docs.sinh = sinh$2;
	  docs.tan = tan$2;
	  docs.tanh = tanh$2; // functions - units

	  docs.to = to$1; // functions - utils

	  docs.clone = clone$b;
	  docs.format = format$9;
	  docs.isNaN = _isNaN$1;
	  docs.isInteger = isInteger$r;
	  docs.isNegative = isNegative$1;
	  docs.isNumeric = isNumeric$1;
	  docs.isPositive = isPositive$1;
	  docs.isPrime = isPrime$1;
	  docs.isZero = isZero$1; // docs.print = require('./function/utils/print') // TODO: add documentation for print as soon as the parser supports objects.

	  docs['typeof'] = _typeof$d;
	  return docs;
	}

	var name$40 = 'docs';
	var path$Q = 'expression';
	var factory_1$4d = factory$4d;

	var embeddedDocs = {
		name: name$40,
		path: path$Q,
		factory: factory_1$4d
	};

	function factory$4e(type, config, load, typed) {
	  var parse$1 = load(parse);
	  /**
	   * Parse and compile an expression.
	   * Returns a an object with a function `eval([scope])` to evaluate the
	   * compiled expression.
	   *
	   * Syntax:
	   *
	   *     math.compile(expr)                       // returns one node
	   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
	   *
	   * Examples:
	   *
	   *     const code1 = math.compile('sqrt(3^2 + 4^2)')
	   *     code1.eval() // 5
	   *
	   *     let scope = {a: 3, b: 4}
	   *     const code2 = math.compile('a * b') // 12
	   *     code2.eval(scope) // 12
	   *     scope.a = 5
	   *     code2.eval(scope) // 20
	   *
	   *     const nodes = math.compile(['a = 3', 'b = 4', 'a * b'])
	   *     nodes[2].eval() // 12
	   *
	   * See also:
	   *
	   *    parse, eval
	   *
	   * @param {string | string[] | Array | Matrix} expr
	   *            The expression to be compiled
	   * @return {{eval: Function} | Array.<{eval: Function}>} code
	   *            An object with the compiled expression
	   * @throws {Error}
	   */

	  return typed('compile', {
	    'string': function string(expr) {
	      return parse$1(expr).compile();
	    },
	    'Array | Matrix': function ArrayMatrix(expr) {
	      return deepMap(expr, function (entry) {
	        return parse$1(entry).compile();
	      });
	    }
	  });
	}

	var name$41 = 'compile';
	var factory_1$4e = factory$4e;

	var compile = {
		name: name$41,
		factory: factory_1$4e
	};

	function factory$4f(type, config, load, typed) {
	  var parse$1 = load(parse);
	  /**
	   * Evaluate an expression.
	   *
	   * Note the evaluating arbitrary expressions may involve security risks,
	   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.
	   *
	   * Syntax:
	   *
	   *     math.eval(expr)
	   *     math.eval(expr, scope)
	   *     math.eval([expr1, expr2, expr3, ...])
	   *     math.eval([expr1, expr2, expr3, ...], scope)
	   *
	   * Example:
	   *
	   *     math.eval('(2+3)/4')                // 1.25
	   *     math.eval('sqrt(3^2 + 4^2)')        // 5
	   *     math.eval('sqrt(-4)')               // 2i
	   *     math.eval(['a=3', 'b=4', 'a*b'])    // [3, 4, 12]
	   *
	   *     let scope = {a:3, b:4}
	   *     math.eval('a * b', scope)           // 12
	   *
	   * See also:
	   *
	   *    parse, compile
	   *
	   * @param {string | string[] | Matrix} expr   The expression to be evaluated
	   * @param {Object} [scope]                    Scope to read/write variables
	   * @return {*} The result of the expression
	   * @throws {Error}
	   */

	  return typed('compile', {
	    'string': function string(expr) {
	      var scope = {};
	      return parse$1(expr).compile().eval(scope);
	    },
	    'string, Object': function stringObject(expr, scope) {
	      return parse$1(expr).compile().eval(scope);
	    },
	    'Array | Matrix': function ArrayMatrix(expr) {
	      var scope = {};
	      return deepMap(expr, function (entry) {
	        return parse$1(entry).compile().eval(scope);
	      });
	    },
	    'Array | Matrix, Object': function ArrayMatrixObject(expr, scope) {
	      return deepMap(expr, function (entry) {
	        return parse$1(entry).compile().eval(scope);
	      });
	    }
	  });
	}

	var name$42 = 'eval';
	var factory_1$4f = factory$4f;

	var _eval$1 = {
		name: name$42,
		factory: factory_1$4f
	};

	var getSafeProperty$8 = customs.getSafeProperty;

	function factory$4g(type, config, load, typed, math) {
	  var docs = load(embeddedDocs);
	  /**
	   * Retrieve help on a function or data type.
	   * Help files are retrieved from the documentation in math.expression.docs.
	   *
	   * Syntax:
	   *
	   *    math.help(search)
	   *
	   * Examples:
	   *
	   *    console.log(math.help('sin').toString())
	   *    console.log(math.help(math.add).toString())
	   *    console.log(math.help(math.add).toJSON())
	   *
	   * @param {Function | string | Object} search   A function or function name
	   *                                              for which to get help
	   * @return {Help} A help object
	   */

	  return typed('help', {
	    'any': function any(search) {
	      var prop;
	      var name = search;

	      if (typeof search !== 'string') {
	        for (prop in math) {
	          // search in functions and constants
	          if (math.hasOwnProperty(prop) && search === math[prop]) {
	            name = prop;
	            break;
	          }
	        }
	        /* TODO: implement help for data types
	         if (!text) {
	         // search data type
	         for (prop in math.type) {
	         if (math.type.hasOwnProperty(prop)) {
	         if (search === math.type[prop]) {
	         text = prop
	         break
	         }
	         }
	         }
	         }
	         */

	      }

	      var doc = getSafeProperty$8(docs, name);

	      if (!doc) {
	        throw new Error('No documentation found on "' + name + '"');
	      }

	      return new type.Help(doc);
	    }
	  });
	}

	var math$g = true; // request access to the math namespace as 5th argument of the factory function

	var name$43 = 'help';
	var factory_1$4g = factory$4g;

	var help$1 = {
		math: math$g,
		name: name$43,
		factory: factory_1$4g
	};

	var extend$3 = object.extend;



	function factory$4h(type, config, load, typed, math) {
	  var _parse = load(parse);
	  /**
	   * @constructor Parser
	   * Parser contains methods to evaluate or parse expressions, and has a number
	   * of convenience methods to get, set, and remove variables from memory. Parser
	   * keeps a scope containing variables in memory, which is used for all
	   * evaluations.
	   *
	   * Methods:
	   *    const result = parser.eval(expr)  // evaluate an expression
	   *    const value = parser.get(name)    // retrieve a variable from the parser
	   *    const values = parser.getAll()    // retrieve all defined variables
	   *    parser.set(name, value)           // set a variable in the parser
	   *    parser.remove(name)               // clear a variable from the
	   *                                      // parsers scope
	   *    parser.clear()                    // clear the parsers scope
	   *
	   * Example usage:
	   *    const parser = new Parser()
	   *    // Note: there is a convenience method which can be used instead:
	   *    // const parser = new math.parser()
	   *
	   *    // evaluate expressions
	   *    parser.eval('sqrt(3^2 + 4^2)')         // 5
	   *    parser.eval('sqrt(-4)')                // 2i
	   *    parser.eval('2 inch in cm')            // 5.08 cm
	   *    parser.eval('cos(45 deg)')             // 0.7071067811865476
	   *
	   *    // define variables and functions
	   *    parser.eval('x = 7 / 2')               // 3.5
	   *    parser.eval('x + 3')                   // 6.5
	   *    parser.eval('function f(x, y) = x^y')  // f(x, y)
	   *    parser.eval('f(2, 3)')                 // 8
	   *
	   *    // get and set variables and functions
	   *    const x = parser.get('x')              // 7
	   *    const f = parser.get('f')              // function
	   *    const g = f(3, 2)                      // 9
	   *    parser.set('h', 500)
	   *    const i = parser.eval('h / 2')         // 250
	   *    parser.set('hello', function (name) {
	   *        return 'hello, ' + name + '!'
	   *    })
	   *    parser.eval('hello("user")')           // "hello, user!"
	   *
	   *    // clear defined functions and variables
	   *    parser.clear()
	   *
	   */


	  function Parser() {
	    if (!(this instanceof Parser)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    this.scope = {};
	  }
	  /**
	   * Attach type information
	   */


	  Parser.prototype.type = 'Parser';
	  Parser.prototype.isParser = true;
	  /**
	   * Parse an expression and return the parsed function node.
	   * The node tree can be compiled via `code = node.compile(math)`,
	   * and the compiled code can be executed as `code.eval([scope])`
	   * @param {string} expr
	   * @return {Node} node
	   * @throws {Error}
	   */

	  Parser.prototype.parse = function (expr) {
	    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
	  };
	  /**
	   * Parse and compile an expression, return the compiled javascript code.
	   * The node can be evaluated via code.eval([scope])
	   * @param {string} expr
	   * @return {{eval: function}} code
	   * @throws {Error}
	   */


	  Parser.prototype.compile = function (expr) {
	    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
	  };
	  /**
	   * Parse and evaluate the given expression
	   * @param {string} expr   A string containing an expression, for example "2+3"
	   * @return {*} result     The result, or undefined when the expression was empty
	   * @throws {Error}
	   */


	  Parser.prototype.eval = function (expr) {
	    // TODO: validate arguments
	    return _parse(expr).compile().eval(this.scope);
	  };
	  /**
	   * Get a variable (a function or variable) by name from the parsers scope.
	   * Returns undefined when not found
	   * @param {string} name
	   * @return {* | undefined} value
	   */


	  Parser.prototype.get = function (name) {
	    // TODO: validate arguments
	    return name in this.scope ? customs.getSafeProperty(this.scope, name) : undefined;
	  };
	  /**
	   * Get a map with all defined variables
	   * @return {Object} values
	   */


	  Parser.prototype.getAll = function () {
	    return extend$3({}, this.scope);
	  };
	  /**
	   * Set a symbol (a function or variable) by name from the parsers scope.
	   * @param {string} name
	   * @param {* | undefined} value
	   */


	  Parser.prototype.set = function (name, value) {
	    // TODO: validate arguments
	    return customs.setSafeProperty(this.scope, name, value);
	  };
	  /**
	   * Remove a variable from the parsers scope
	   * @param {string} name
	   */


	  Parser.prototype.remove = function (name) {
	    // TODO: validate arguments
	    delete this.scope[name];
	  };
	  /**
	   * Clear the scope with variables and functions
	   */


	  Parser.prototype.clear = function () {
	    for (var name in this.scope) {
	      if (this.scope.hasOwnProperty(name)) {
	        delete this.scope[name];
	      }
	    }
	  };

	  return Parser;
	}

	var name$44 = 'Parser';
	var path$R = 'expression';
	var factory_1$4h = factory$4h;
	var math$h = true; // requires the math namespace as 5th argument

	var Parser = {
		name: name$44,
		path: path$R,
		factory: factory_1$4h,
		math: math$h
	};

	function factory$4i(type, config, load, typed, math) {
	  var Parser$1 = load(Parser);
	  /**
	   * Create a parser. The function creates a new `math.expression.Parser` object.
	   *
	   * Syntax:
	   *
	   *    math.parser()
	   *
	   * Examples:
	   *
	   *     const parser = new math.parser()
	   *
	   *     // evaluate expressions
	   *     const a = parser.eval('sqrt(3^2 + 4^2)') // 5
	   *     const b = parser.eval('sqrt(-4)')        // 2i
	   *     const c = parser.eval('2 inch in cm')    // 5.08 cm
	   *     const d = parser.eval('cos(45 deg)')     // 0.7071067811865476
	   *
	   *     // define variables and functions
	   *     parser.eval('x = 7 / 2')                 // 3.5
	   *     parser.eval('x + 3')                     // 6.5
	   *     parser.eval('function f(x, y) = x^y')    // f(x, y)
	   *     parser.eval('f(2, 3)')                   // 8
	   *
	   *     // get and set variables and functions
	   *     const x = parser.get('x')                // 7
	   *     const f = parser.get('f')                // function
	   *     const g = f(3, 2)                        // 9
	   *     parser.set('h', 500)
	   *     const i = parser.eval('h / 2')           // 250
	   *     parser.set('hello', function (name) {
	   *       return 'hello, ' + name + '!'
	   *     })
	   *     parser.eval('hello("user")')           // "hello, user!"
	   *
	   *     // clear defined functions and variables
	   *     parser.clear()
	   *
	   * See also:
	   *
	   *    eval, compile, parse
	   *
	   * @return {Parser} Parser
	   */

	  return typed('parser', {
	    '': function _() {
	      return new Parser$1(math);
	    }
	  });
	}

	var name$45 = 'parser';
	var factory_1$4i = factory$4i;
	var math$i = true; // requires the math namespace as 5th argument

	var parser = {
		name: name$45,
		factory: factory_1$4i,
		math: math$i
	};

	var _function$3 = [compile, _eval$1, help$1, parse$1, parser];

	function factory$4j(type, config, load, typed) {
	  /**
	   * @constructor UpdateNode
	   */
	  function UpdateNode() {
	    // TODO: deprecated since v3. Cleanup some day
	    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');
	  }

	  return UpdateNode;
	}

	var name$46 = 'UpdateNode';
	var path$S = 'expression.node';
	var factory_1$4j = factory$4j;

	var UpdateNode = {
		name: name$46,
		path: path$S,
		factory: factory_1$4j
	};

	var node = [AccessorNode, ArrayNode, AssignmentNode, BlockNode, ConditionalNode, ConstantNode, IndexNode, FunctionAssignmentNode, FunctionNode, Node$1, ObjectNode, OperatorNode, ParenthesisNode, RangeNode, RelationalNode, SymbolNode, UpdateNode];

	var errorTransform$2 = error_transform.transform;
	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function concat
	 * from one-based to zero based
	 */


	function factory$4k(type, config, load, typed) {
	  var concat$1 = load(concat); // @see: comment of concat itself

	  return typed('concat', {
	    '...any': function any(args) {
	      // change last argument from one-based to zero-based
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];

	      if (type.isNumber(last)) {
	        args[lastIndex] = last - 1;
	      } else if (type.isBigNumber(last)) {
	        args[lastIndex] = last.minus(1);
	      }

	      try {
	        return concat$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$2(err);
	      }
	    }
	  });
	}

	var name$47 = 'concat';
	var path$T = 'expression.transform';
	var factory_1$4k = factory$4k;

	var concat_transform = {
		name: name$47,
		path: path$T,
		factory: factory_1$4k
	};

	function factory$4l(type, config, load, typed) {
	  /**
	   * Compile an inline expression like "x > 0"
	   * @param {Node} expression
	   * @param {Object} math
	   * @param {Object} scope
	   * @return {function} Returns a function with one argument which fills in the
	   *                    undefined variable (like "x") and evaluates the expression
	   */
	  return function compileInlineExpression(expression, math, scope) {
	    // find an undefined symbol
	    var symbol = expression.filter(function (node) {
	      return type.isSymbolNode(node) && !(node.name in math) && !(node.name in scope);
	    })[0];

	    if (!symbol) {
	      throw new Error('No undefined variable found in inline expression "' + expression + '"');
	    } // create a test function for this equation


	    var name = symbol.name; // variable name

	    var subScope = Object.create(scope);
	    var eq = expression.compile();
	    return function inlineExpression(x) {
	      subScope[name] = x;
	      return eq.eval(subScope);
	    };
	  };
	}

	var factory_1$4l = factory$4l;

	var compileInlineExpression = {
		factory: factory_1$4l
	};

	var filter$2 = array.filter;

	var filterRegExp$1 = array.filterRegExp;

	var maxArgumentCount$4 = _function.maxArgumentCount;
	/**
	 * Attach a transform function to math.filter
	 * Adds a property transform containing the transform function.
	 *
	 * This transform adds support for equations as test function for math.filter,
	 * so you can do something like 'filter([3, -2, 5], x > 0)'.
	 */


	function factory$4m(type, config, load, typed) {
	  var compileInlineExpression$1 = load(compileInlineExpression);
	  var matrix$1 = load(matrix);

	  function filterTransform(args, math, scope) {
	    var x, callback;

	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }

	    if (args[1]) {
	      if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
	        // a function pointer, like filter([3, -2, 5], myTestFunction)
	        callback = args[1].compile().eval(scope);
	      } else {
	        // an expression like filter([3, -2, 5], x > 0)
	        callback = compileInlineExpression$1(args[1], math, scope);
	      }
	    }

	    return filter(x, callback);
	  }

	  filterTransform.rawArgs = true; // one based version of function filter

	  var filter = typed('filter', {
	    'Array, function': _filter,
	    'Matrix, function': function MatrixFunction(x, test) {
	      return matrix$1(_filter(x.toArray(), test));
	    },
	    'Array, RegExp': filterRegExp$1,
	    'Matrix, RegExp': function MatrixRegExp(x, test) {
	      return matrix$1(filterRegExp$1(x.toArray(), test));
	    }
	  });
	  filter.toTex = undefined; // use default template

	  return filterTransform;
	}
	/**
	 * Filter values in a callback given a callback function
	 *
	 * !!! Passes a one-based index !!!
	 *
	 * @param {Array} x
	 * @param {Function} callback
	 * @return {Array} Returns the filtered array
	 * @private
	 */


	function _filter(x, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount$4(callback);
	  return filter$2(x, function (value, index, array) {
	    // invoke the callback function with the right number of arguments
	    if (args === 1) {
	      return callback(value);
	    } else if (args === 2) {
	      return callback(value, [index + 1]);
	    } else {
	      // 3 or -1
	      return callback(value, [index + 1], array);
	    }
	  });
	}

	var name$48 = 'filter';
	var path$U = 'expression.transform';
	var factory_1$4m = factory$4m;

	var filter_transform = {
		name: name$48,
		path: path$U,
		factory: factory_1$4m
	};

	var maxArgumentCount$5 = _function.maxArgumentCount;

	var forEach$4 = array.forEach;
	/**
	 * Attach a transform function to math.forEach
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */


	function factory$4n(type, config, load, typed) {
	  var compileInlineExpression$1 = load(compileInlineExpression);

	  function forEachTransform(args, math, scope) {
	    var x, callback;

	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }

	    if (args[1]) {
	      if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
	        // a function pointer, like forEach([3, -2, 5], myTestFunction)
	        callback = args[1].compile().eval(scope);
	      } else {
	        // an expression like forEach([3, -2, 5], x > 0 ? callback1(x) : callback2(x) )
	        callback = compileInlineExpression$1(args[1], math, scope);
	      }
	    }

	    return _forEach(x, callback);
	  }

	  forEachTransform.rawArgs = true; // one-based version of forEach

	  var _forEach = typed('forEach', {
	    'Array | Matrix, function': function ArrayMatrixFunction(array, callback) {
	      // figure out what number of arguments the callback function expects
	      var args = maxArgumentCount$5(callback);

	      var recurse = function recurse(value, index) {
	        if (Array.isArray(value)) {
	          forEach$4(value, function (child, i) {
	            // we create a copy of the index array and append the new index value
	            recurse(child, index.concat(i + 1)); // one based index, hence i+1
	          });
	        } else {
	          // invoke the callback function with the right number of arguments
	          if (args === 1) {
	            callback(value);
	          } else if (args === 2) {
	            callback(value, index);
	          } else {
	            // 3 or -1
	            callback(value, index, array);
	          }
	        }
	      };

	      recurse(array.valueOf(), []); // pass Array
	    }
	  });

	  return forEachTransform;
	}

	var name$49 = 'forEach';
	var path$V = 'expression.transform';
	var factory_1$4n = factory$4n;

	var forEach_transform = {
		name: name$49,
		path: path$V,
		factory: factory_1$4n
	};

	/**
	 * Attach a transform function to math.index
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */

	function factory$4o(type, config, load) {
	  return function indexTransform() {
	    var args = [];

	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number

	      if (type.isRange(arg)) {
	        arg.start--;
	        arg.end -= arg.step > 0 ? 0 : 2;
	      } else if (arg && arg.isSet === true) {
	        arg = arg.map(function (v) {
	          return v - 1;
	        });
	      } else if (type.isArray(arg) || type.isMatrix(arg)) {
	        arg = arg.map(function (v) {
	          return v - 1;
	        });
	      } else if (type.isNumber(arg)) {
	        arg--;
	      } else if (type.isBigNumber(arg)) {
	        arg = arg.toNumber() - 1;
	      } else if (typeof arg === 'string') ; else {
	        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	      }

	      args[i] = arg;
	    }

	    var res = new type.Index();
	    type.Index.apply(res, args);
	    return res;
	  };
	}

	var name$4a = 'index';
	var path$W = 'expression.transform';
	var factory_1$4o = factory$4o;

	var index_transform = {
		name: name$4a,
		path: path$W,
		factory: factory_1$4o
	};

	var maxArgumentCount$6 = _function.maxArgumentCount;

	var map$7 = array.map;
	/**
	 * Attach a transform function to math.map
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */


	function factory$4p(type, config, load, typed) {
	  var compileInlineExpression$1 = load(compileInlineExpression);
	  var matrix$1 = load(matrix);

	  function mapTransform(args, math, scope) {
	    var x, callback;

	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }

	    if (args[1]) {
	      if (type.isSymbolNode(args[1]) || type.isFunctionAssignmentNode(args[1])) {
	        // a function pointer, like filter([3, -2, 5], myTestFunction)
	        callback = args[1].compile().eval(scope);
	      } else {
	        // an expression like filter([3, -2, 5], x > 0)
	        callback = compileInlineExpression$1(args[1], math, scope);
	      }
	    }

	    return map(x, callback);
	  }

	  mapTransform.rawArgs = true; // one-based version of map function

	  var map = typed('map', {
	    'Array, function': function ArrayFunction(x, callback) {
	      return _map$1(x, callback, x);
	    },
	    'Matrix, function': function MatrixFunction(x, callback) {
	      return matrix$1(_map$1(x.valueOf(), callback, x));
	    }
	  });
	  return mapTransform;
	}
	/**
	 * Map for a multi dimensional array. One-based indexes
	 * @param {Array} array
	 * @param {function} callback
	 * @param {Array} orig
	 * @return {Array}
	 * @private
	 */


	function _map$1(array, callback, orig) {
	  // figure out what number of arguments the callback function expects
	  var argsCount = maxArgumentCount$6(callback);

	  function recurse(value, index) {
	    if (Array.isArray(value)) {
	      return map$7(value, function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
	      });
	    } else {
	      // invoke the (typed) callback function with the right number of arguments
	      if (argsCount === 1) {
	        return callback(value);
	      } else if (argsCount === 2) {
	        return callback(value, index);
	      } else {
	        // 3 or -1
	        return callback(value, index, orig);
	      }
	    }
	  }

	  return recurse(array, []);
	}

	var name$4b = 'map';
	var path$X = 'expression.transform';
	var factory_1$4p = factory$4p;

	var map_transform = {
		name: name$4b,
		path: path$X,
		factory: factory_1$4p
	};

	var errorTransform$3 = error_transform.transform;


	/**
	 * Attach a transform function to math.max
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function max
	 * from one-based to zero based
	 */


	function factory$4q(type, config, load, typed) {
	  var max = load(max$1);
	  return typed('max', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length === 2 && isCollection(args[0])) {
	        var dim = args[1];

	        if (type.isNumber(dim)) {
	          args[1] = dim - 1;
	        } else if (type.isBigNumber(dim)) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return max.apply(null, args);
	      } catch (err) {
	        throw errorTransform$3(err);
	      }
	    }
	  });
	}

	var name$4c = 'max';
	var path$Y = 'expression.transform';
	var factory_1$4q = factory$4q;

	var max_transform = {
		name: name$4c,
		path: path$Y,
		factory: factory_1$4q
	};

	var errorTransform$4 = error_transform.transform;


	/**
	 * Attach a transform function to math.mean
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function mean
	 * from one-based to zero based
	 */


	function factory$4r(type, config, load, typed) {
	  var mean$1 = load(mean);
	  return typed('mean', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length === 2 && isCollection(args[0])) {
	        var dim = args[1];

	        if (type.isNumber(dim)) {
	          args[1] = dim - 1;
	        } else if (type.isBigNumber(dim)) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return mean$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$4(err);
	      }
	    }
	  });
	}

	var name$4d = 'mean';
	var path$Z = 'expression.transform';
	var factory_1$4r = factory$4r;

	var mean_transform = {
		name: name$4d,
		path: path$Z,
		factory: factory_1$4r
	};

	var errorTransform$5 = error_transform.transform;


	/**
	 * Attach a transform function to math.min
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function min
	 * from one-based to zero based
	 */


	function factory$4s(type, config, load, typed) {
	  var min = load(min$1);
	  return typed('min', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length === 2 && isCollection(args[0])) {
	        var dim = args[1];

	        if (type.isNumber(dim)) {
	          args[1] = dim - 1;
	        } else if (type.isBigNumber(dim)) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return min.apply(null, args);
	      } catch (err) {
	        throw errorTransform$5(err);
	      }
	    }
	  });
	}

	var name$4e = 'min';
	var path$_ = 'expression.transform';
	var factory_1$4s = factory$4s;

	var min_transform = {
		name: name$4e,
		path: path$_,
		factory: factory_1$4s
	};

	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */

	function factory$4t(type, config, load, typed) {
	  var range$1 = load(range);
	  return typed('range', {
	    '...any': function any(args) {
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];

	      if (typeof last !== 'boolean') {
	        // append a parameter includeEnd=true
	        args.push(true);
	      }

	      return range$1.apply(null, args);
	    }
	  });
	}

	var name$4f = 'range';
	var path$$ = 'expression.transform';
	var factory_1$4t = factory$4t;

	var range_transform = {
		name: name$4f,
		path: path$$,
		factory: factory_1$4t
	};

	var errorTransform$6 = error_transform.transform;
	/**
	 * Attach a transform function to math.subset
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */


	function factory$4u(type, config, load, typed) {
	  var subset$1 = load(subset);
	  return typed('subset', {
	    '...any': function any(args) {
	      try {
	        return subset$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$6(err);
	      }
	    }
	  });
	}

	var name$4g = 'subset';
	var path$10 = 'expression.transform';
	var factory_1$4u = factory$4u;

	var subset_transform = {
		name: name$4g,
		path: path$10,
		factory: factory_1$4u
	};

	var errorTransform$7 = error_transform.transform;


	/**
	 * Attach a transform function to math.sum
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function mean
	 * from one-based to zero based
	 */


	function factory$4v(type, config, load, typed) {
	  var sum$1 = load(sum);
	  return typed('sum', {
	    '...any': function any(args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length === 2 && isCollection(args[0])) {
	        var dim = args[1];

	        if (type.isNumber(dim)) {
	          args[1] = dim - 1;
	        } else if (type.isBigNumber(dim)) {
	          args[1] = dim.minus(1);
	        }
	      }

	      try {
	        return sum$1.apply(null, args);
	      } catch (err) {
	        throw errorTransform$7(err);
	      }
	    }
	  });
	}

	var name$4h = 'sum';
	var path$11 = 'expression.transform';
	var factory_1$4v = factory$4v;

	var sum_transform = {
		name: name$4h,
		path: path$11,
		factory: factory_1$4v
	};

	var transform$1 = [concat_transform, filter_transform, forEach_transform, index_transform, map_transform, max_transform, mean_transform, min_transform, range_transform, subset_transform, sum_transform];

	function factory$4w(type, config, load, typed) {
	  var parser$1 = load(parser)();
	  /**
	   * Documentation object
	   * @param {Object} doc  Object containing properties:
	   *                      {string} name
	   *                      {string} category
	   *                      {string} description
	   *                      {string[]} syntax
	   *                      {string[]} examples
	   *                      {string[]} seealso
	   * @constructor
	   */

	  function Help(doc) {
	    if (!(this instanceof Help)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }

	    if (!doc) throw new Error('Argument "doc" missing');
	    this.doc = doc;
	  }
	  /**
	   * Attach type information
	   */


	  Help.prototype.type = 'Help';
	  Help.prototype.isHelp = true;
	  /**
	   * Generate a string representation of the Help object
	   * @return {string} Returns a string
	   * @private
	   */

	  Help.prototype.toString = function () {
	    var doc = this.doc || {};
	    var desc = '\n';

	    if (doc.name) {
	      desc += 'Name: ' + doc.name + '\n\n';
	    }

	    if (doc.category) {
	      desc += 'Category: ' + doc.category + '\n\n';
	    }

	    if (doc.description) {
	      desc += 'Description:\n    ' + doc.description + '\n\n';
	    }

	    if (doc.syntax) {
	      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
	    }

	    if (doc.examples) {
	      desc += 'Examples:\n';

	      for (var i = 0; i < doc.examples.length; i++) {
	        var expr = doc.examples[i];
	        desc += '    ' + expr + '\n';
	        var res = void 0;

	        try {
	          // note: res can be undefined when `expr` is an empty string
	          res = parser$1.eval(expr);
	        } catch (e) {
	          res = e;
	        }

	        if (res !== undefined && !type.isHelp(res)) {
	          desc += '        ' + string.format(res, {
	            precision: 14
	          }) + '\n';
	        }
	      }

	      desc += '\n';
	    }

	    if (doc.seealso && doc.seealso.length) {
	      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
	    }

	    return desc;
	  };
	  /**
	   * Export the help object to JSON
	   */


	  Help.prototype.toJSON = function () {
	    var obj = object.clone(this.doc);
	    obj.mathjs = 'Help';
	    return obj;
	  };
	  /**
	   * Instantiate a Help object from a JSON object
	   * @param {Object} json
	   * @returns {Help} Returns a new Help object
	   */


	  Help.fromJSON = function (json) {
	    var doc = {};

	    for (var prop in json) {
	      if (prop !== 'mathjs') {
	        // ignore mathjs field
	        doc[prop] = json[prop];
	      }
	    }

	    return new Help(doc);
	  };
	  /**
	   * Returns a string representation of the Help object
	   */


	  Help.prototype.valueOf = Help.prototype.toString;
	  return Help;
	}

	var name$4i = 'Help';
	var path$12 = 'type';
	var factory_1$4w = factory$4w;

	var Help = {
		name: name$4i,
		path: path$12,
		factory: factory_1$4w
	};

	var expression = [// Note that the docs folder is called "embeddedDocs" and not "docs" to prevent issues
	// with yarn autoclean. See https://github.com/josdejong/mathjs/issues/969
	embeddedDocs, _function$3, node, transform$1, Help, parse, Parser];

	function factory$4x(type, config, load, typed, math) {
	  /**
	   * Instantiate mathjs data types from their JSON representation
	   * @param {string} key
	   * @param {*} value
	   * @returns {*} Returns the revived object
	   */
	  return function reviver(key, value) {
	    var constructor = type[value && value.mathjs] || math.expression && math.expression.node[value && value.mathjs]; // TODO: instead of checking math.expression.node, expose all Node classes on math.type too

	    if (constructor && typeof constructor.fromJSON === 'function') {
	      return constructor.fromJSON(value);
	    }

	    return value;
	  };
	}

	var name$4j = 'reviver';
	var path$13 = 'json';
	var factory_1$4x = factory$4x;
	var math$j = true; // request the math namespace as fifth argument

	var reviver = {
		name: name$4j,
		path: path$13,
		factory: factory_1$4x,
		math: math$j
	};

	var json = [reviver];

	var error = [{
	  name: 'ArgumentsError',
	  path: 'error',
	  factory: function factory() {
	    return ArgumentsError_1;
	  }
	}, {
	  name: 'DimensionError',
	  path: 'error',
	  factory: function factory() {
	    return DimensionError_1;
	  }
	}, {
	  name: 'IndexError',
	  path: 'error',
	  factory: function factory() {
	    return IndexError_1;
	  }
	}]; // TODO: implement an InvalidValueError?

	// This file contains all factory functions of math.js
	var lib = [type, // data types (Matrix, Complex, Unit, ...)
	constants$1, // constants
	_function$2, // functions
	// load ./expression *after* ./function since we need to
	// attach transforms to functions that are imported there
	expression, // expression parsing
	json, // serialization utility (math.json.reviver)
	error // errors
	];

	/**
	 * math.js factory function. Creates a new instance of math.js
	 *
	 * @param {Object} [config] Available configuration options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'matrix' (default) or 'array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'bignumber', or
	 *                              'fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-4)`
	 *                              returns `complex('2i')` when predictable is false, and
	 *                              returns `NaN` when true.
	 */


	function create$2(config) {
	  // create a new math.js instance
	  var math = core.create(config);
	  math.create = create$2; // import data types, functions, constants, expression parser, etc.

	  math['import'](lib);
	  return math;
	} // return a new instance of math.js


	var main = create$2();

	var mathjs = main;

	var numeric1_2_6 = createCommonjsModule(function (module, exports) {

	var numeric = exports;
	if(typeof commonjsGlobal !== "undefined") { commonjsGlobal.numeric = numeric; }

	numeric.version = "1.2.6";

	// 1. Utility functions
	numeric.bench = function bench (f,interval) {
	    var t1,t2,n,i;
	    if(typeof interval === "undefined") { interval = 15; }
	    n = 0.5;
	    t1 = new Date();
	    while(1) {
	        n*=2;
	        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
	        while(i>0) { f(); i--; }
	        t2 = new Date();
	        if(t2-t1 > interval) break;
	    }
	    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
	    while(i>0) { f(); i--; }
	    t2 = new Date();
	    return 1000*(3*n-1)/(t2-t1);
	};

	numeric._myIndexOf = (function _myIndexOf(w) {
	    var n = this.length,k;
	    for(k=0;k<n;++k) if(this[k]===w) return k;
	    return -1;
	});
	numeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;

	numeric.Function = Function;
	numeric.precision = 4;
	numeric.largeArray = 50;

	numeric.prettyPrint = function prettyPrint(x) {
	    function fmtnum(x) {
	        if(x === 0) { return '0'; }
	        if(isNaN(x)) { return 'NaN'; }
	        if(x<0) { return '-'+fmtnum(-x); }
	        if(isFinite(x)) {
	            var scale = Math.floor(Math.log(x) / Math.log(10));
	            var normalized = x / Math.pow(10,scale);
	            var basic = normalized.toPrecision(numeric.precision);
	            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }
	            return parseFloat(basic).toString()+'e'+scale.toString();
	        }
	        return 'Infinity';
	    }
	    var ret = [];
	    function foo(x) {
	        var k;
	        if(typeof x === "undefined") { ret.push(Array(numeric.precision+8).join(' ')); return false; }
	        if(typeof x === "string") { ret.push('"'+x+'"'); return false; }
	        if(typeof x === "boolean") { ret.push(x.toString()); return false; }
	        if(typeof x === "number") {
	            var a = fmtnum(x);
	            var b = x.toPrecision(numeric.precision);
	            var c = parseFloat(x.toString()).toString();
	            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];
	            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }
	            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);
	            return false;
	        }
	        if(x === null) { ret.push("null"); return false; }
	        if(typeof x === "function") { 
	            ret.push(x.toString());
	            var flag = false;
	            for(k in x) { if(x.hasOwnProperty(k)) { 
	                if(flag) ret.push(',\n');
	                else ret.push('\n{');
	                flag = true; 
	                ret.push(k); 
	                ret.push(': \n'); 
	                foo(x[k]); 
	            } }
	            if(flag) ret.push('}\n');
	            return true;
	        }
	        if(x instanceof Array) {
	            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }
	            var flag = false;
	            ret.push('[');
	            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\n '); } flag = foo(x[k]); }
	            ret.push(']');
	            return true;
	        }
	        ret.push('{');
	        var flag = false;
	        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\n'); flag = true; ret.push(k); ret.push(': \n'); foo(x[k]); } }
	        ret.push('}');
	        return true;
	    }
	    foo(x);
	    return ret.join('');
	};

	numeric.parseDate = function parseDate(d) {
	    function foo(d) {
	        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }
	        if(!(d instanceof Array)) { throw new Error("parseDate: parameter must be arrays of strings"); }
	        var ret = [],k;
	        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
	        return ret;
	    }
	    return foo(d);
	};

	numeric.parseFloat = function parseFloat_(d) {
	    function foo(d) {
	        if(typeof d === 'string') { return parseFloat(d); }
	        if(!(d instanceof Array)) { throw new Error("parseFloat: parameter must be arrays of strings"); }
	        var ret = [],k;
	        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
	        return ret;
	    }
	    return foo(d);
	};

	numeric.parseCSV = function parseCSV(t) {
	    var foo = t.split('\n');
	    var j,k;
	    var ret = [];
	    var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
	    var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;
	    var stripper = function(n) { return n.substr(0,n.length-1); };
	    var count = 0;
	    for(k=0;k<foo.length;k++) {
	      var bar = (foo[k]+",").match(pat),baz;
	      if(bar.length>0) {
	          ret[count] = [];
	          for(j=0;j<bar.length;j++) {
	              baz = stripper(bar[j]);
	              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }
	              else ret[count][j] = baz;
	          }
	          count++;
	      }
	    }
	    return ret;
	};

	numeric.toCSV = function toCSV(A) {
	    var s = numeric.dim(A);
	    var i,j,m,n,row,ret;
	    m = s[0];
	    n = s[1];
	    ret = [];
	    for(i=0;i<m;i++) {
	        row = [];
	        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }
	        ret[i] = row.join(', ');
	    }
	    return ret.join('\n')+'\n';
	};

	numeric.getURL = function getURL(url) {
	    var client = new XMLHttpRequest();
	    client.open("GET",url,false);
	    client.send();
	    return client;
	};

	numeric.imageURL = function imageURL(img) {
	    function base64(A) {
	        var n = A.length, i,x,y,z,p,q,r,s;
	        var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	        var ret = "";
	        for(i=0;i<n;i+=3) {
	            x = A[i];
	            y = A[i+1];
	            z = A[i+2];
	            p = x >> 2;
	            q = ((x & 3) << 4) + (y >> 4);
	            r = ((y & 15) << 2) + (z >> 6);
	            s = z & 63;
	            if(i+1>=n) { r = s = 64; }
	            else if(i+2>=n) { s = 64; }
	            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
	            }
	        return ret;
	    }
	    function crc32Array (a,from,to) {
	        if(typeof from === "undefined") { from = 0; }
	        if(typeof to === "undefined") { to = a.length; }
	        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
	                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 
	                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
	                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 
	                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
	                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 
	                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
	                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
	                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
	                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 
	                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
	                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 
	                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
	                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 
	                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
	                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 
	                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
	                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 
	                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
	                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 
	                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
	                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 
	                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
	                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 
	                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
	                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 
	                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
	                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 
	                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
	                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 
	                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
	                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
	     
	        var crc = -1, y = 0, n = a.length,i;

	        for (i = from; i < to; i++) {
	            y = (crc ^ a[i]) & 0xFF;
	            crc = (crc >>> 8) ^ table[y];
	        }
	     
	        return crc ^ (-1);
	    }

	    var h = img[0].length, w = img[0][0].length, s1, s2, k,length,a,b,i,j,adler32,crc32;
	    var stream = [
	                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature
	                  0,0,0,13,                                                  //  8: IHDR Chunk length
	                  73, 72, 68, 82,                                            // 12: "IHDR" 
	                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width
	                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height
	                  8,                                                         // 24: bit depth
	                  2,                                                         // 25: RGB
	                  0,                                                         // 26: deflate
	                  0,                                                         // 27: no filter
	                  0,                                                         // 28: no interlace
	                  -1,-2,-3,-4,                                               // 29: CRC
	                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length
	                  73, 68, 65, 84,                                            // 37: "IDAT"
	                  // RFC 1950 header starts here
	                  8,                                                         // 41: RFC1950 CMF
	                  29                                                         // 42: RFC1950 FLG
	                  ];
	    crc32 = crc32Array(stream,12,29);
	    stream[29] = (crc32>>24)&255;
	    stream[30] = (crc32>>16)&255;
	    stream[31] = (crc32>>8)&255;
	    stream[32] = (crc32)&255;
	    s1 = 1;
	    s2 = 0;
	    for(i=0;i<h;i++) {
	        if(i<h-1) { stream.push(0); }
	        else { stream.push(1); }
	        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;
	        stream.push(a); stream.push(b);
	        stream.push((~a)&255); stream.push((~b)&255);
	        if(i===0) stream.push(0);
	        for(j=0;j<w;j++) {
	            for(k=0;k<3;k++) {
	                a = img[k][i][j];
	                if(a>255) a = 255;
	                else if(a<0) a=0;
	                else a = Math.round(a);
	                s1 = (s1 + a )%65521;
	                s2 = (s2 + s1)%65521;
	                stream.push(a);
	            }
	        }
	        stream.push(0);
	    }
	    adler32 = (s2<<16)+s1;
	    stream.push((adler32>>24)&255);
	    stream.push((adler32>>16)&255);
	    stream.push((adler32>>8)&255);
	    stream.push((adler32)&255);
	    length = stream.length - 41;
	    stream[33] = (length>>24)&255;
	    stream[34] = (length>>16)&255;
	    stream[35] = (length>>8)&255;
	    stream[36] = (length)&255;
	    crc32 = crc32Array(stream,37);
	    stream.push((crc32>>24)&255);
	    stream.push((crc32>>16)&255);
	    stream.push((crc32>>8)&255);
	    stream.push((crc32)&255);
	    stream.push(0);
	    stream.push(0);
	    stream.push(0);
	    stream.push(0);
	//    a = stream.length;
	    stream.push(73);  // I
	    stream.push(69);  // E
	    stream.push(78);  // N
	    stream.push(68);  // D
	    stream.push(174); // CRC1
	    stream.push(66);  // CRC2
	    stream.push(96);  // CRC3
	    stream.push(130); // CRC4
	    return 'data:image/png;base64,'+base64(stream);
	};

	// 2. Linear algebra with Arrays.
	numeric._dim = function _dim(x) {
	    var ret = [];
	    while(typeof x === "object") { ret.push(x.length); x = x[0]; }
	    return ret;
	};

	numeric.dim = function dim(x) {
	    var y,z;
	    if(typeof x === "object") {
	        y = x[0];
	        if(typeof y === "object") {
	            z = y[0];
	            if(typeof z === "object") {
	                return numeric._dim(x);
	            }
	            return [x.length,y.length];
	        }
	        return [x.length];
	    }
	    return [];
	};

	numeric.mapreduce = function mapreduce(body,init) {
	    return Function('x','accum','_s','_k',
	            'if(typeof accum === "undefined") accum = '+init+';\n'+
	            'if(typeof x === "number") { var xi = x; '+body+'; return accum; }\n'+
	            'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+
	            'if(typeof _k === "undefined") _k = 0;\n'+
	            'var _n = _s[_k];\n'+
	            'var i,xi;\n'+
	            'if(_k < _s.length-1) {\n'+
	            '    for(i=_n-1;i>=0;i--) {\n'+
	            '        accum = arguments.callee(x[i],accum,_s,_k+1);\n'+
	            '    }'+
	            '    return accum;\n'+
	            '}\n'+
	            'for(i=_n-1;i>=1;i-=2) { \n'+
	            '    xi = x[i];\n'+
	            '    '+body+';\n'+
	            '    xi = x[i-1];\n'+
	            '    '+body+';\n'+
	            '}\n'+
	            'if(i === 0) {\n'+
	            '    xi = x[i];\n'+
	            '    '+body+'\n'+
	            '}\n'+
	            'return accum;'
	            );
	};
	numeric.mapreduce2 = function mapreduce2(body,setup) {
	    return Function('x',
	            'var n = x.length;\n'+
	            'var i,xi;\n'+setup+';\n'+
	            'for(i=n-1;i!==-1;--i) { \n'+
	            '    xi = x[i];\n'+
	            '    '+body+';\n'+
	            '}\n'+
	            'return accum;'
	            );
	};


	numeric.same = function same(x,y) {
	    var i,n;
	    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }
	    n = x.length;
	    if(n !== y.length) { return false; }
	    for(i=0;i<n;i++) {
	        if(x[i] === y[i]) { continue; }
	        if(typeof x[i] === "object") { if(!same(x[i],y[i])) return false; }
	        else { return false; }
	    }
	    return true;
	};

	numeric.rep = function rep(s,v,k) {
	    if(typeof k === "undefined") { k=0; }
	    var n = s[k], ret = Array(n), i;
	    if(k === s.length-1) {
	        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }
	        if(i===-1) { ret[0] = v; }
	        return ret;
	    }
	    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }
	    return ret;
	};


	numeric.dotMMsmall = function dotMMsmall(x,y) {
	    var i,j,k,p,q,r,ret,foo,bar,woo,i0;
	    p = x.length; q = y.length; r = y[0].length;
	    ret = Array(p);
	    for(i=p-1;i>=0;i--) {
	        foo = Array(r);
	        bar = x[i];
	        for(k=r-1;k>=0;k--) {
	            woo = bar[q-1]*y[q-1][k];
	            for(j=q-2;j>=1;j-=2) {
	                i0 = j-1;
	                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];
	            }
	            if(j===0) { woo += bar[0]*y[0][k]; }
	            foo[k] = woo;
	        }
	        ret[i] = foo;
	    }
	    return ret;
	};
	numeric._getCol = function _getCol(A,j,x) {
	    var n = A.length, i;
	    for(i=n-1;i>0;--i) {
	        x[i] = A[i][j];
	        --i;
	        x[i] = A[i][j];
	    }
	    if(i===0) x[0] = A[0][j];
	};
	numeric.dotMMbig = function dotMMbig(x,y){
	    var gc = numeric._getCol, p = y.length, v = Array(p);
	    var m = x.length, n = y[0].length, A = new Array(m), xj;
	    var VV = numeric.dotVV;
	    var i,j;
	    --p;
	    --m;
	    for(i=m;i!==-1;--i) A[i] = Array(n);
	    --n;
	    for(i=n;i!==-1;--i) {
	        gc(y,i,v);
	        for(j=m;j!==-1;--j) {
	            xj = x[j];
	            A[j][i] = VV(xj,v);
	        }
	    }
	    return A;
	};

	numeric.dotMV = function dotMV(x,y) {
	    var p = x.length, q = y.length,i;
	    var ret = Array(p), dotVV = numeric.dotVV;
	    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }
	    return ret;
	};

	numeric.dotVM = function dotVM(x,y) {
	    var j,k,p,q,ret,woo,i0;
	    p = x.length; q = y[0].length;
	    ret = Array(q);
	    for(k=q-1;k>=0;k--) {
	        woo = x[p-1]*y[p-1][k];
	        for(j=p-2;j>=1;j-=2) {
	            i0 = j-1;
	            woo += x[j]*y[j][k] + x[i0]*y[i0][k];
	        }
	        if(j===0) { woo += x[0]*y[0][k]; }
	        ret[k] = woo;
	    }
	    return ret;
	};

	numeric.dotVV = function dotVV(x,y) {
	    var i,n=x.length,i1,ret = x[n-1]*y[n-1];
	    for(i=n-2;i>=1;i-=2) {
	        i1 = i-1;
	        ret += x[i]*y[i] + x[i1]*y[i1];
	    }
	    if(i===0) { ret += x[0]*y[0]; }
	    return ret;
	};

	numeric.dot = function dot(x,y) {
	    var d = numeric.dim;
	    switch(d(x).length*1000+d(y).length) {
	    case 2002:
	        if(y.length < 10) return numeric.dotMMsmall(x,y);
	        else return numeric.dotMMbig(x,y);
	    case 2001: return numeric.dotMV(x,y);
	    case 1002: return numeric.dotVM(x,y);
	    case 1001: return numeric.dotVV(x,y);
	    case 1000: return numeric.mulVS(x,y);
	    case 1: return numeric.mulSV(x,y);
	    case 0: return x*y;
	    default: throw new Error('numeric.dot only works on vectors and matrices');
	    }
	};

	numeric.diag = function diag(d) {
	    var i,i1,j,n = d.length, A = Array(n), Ai;
	    for(i=n-1;i>=0;i--) {
	        Ai = Array(n);
	        i1 = i+2;
	        for(j=n-1;j>=i1;j-=2) {
	            Ai[j] = 0;
	            Ai[j-1] = 0;
	        }
	        if(j>i) { Ai[j] = 0; }
	        Ai[i] = d[i];
	        for(j=i-1;j>=1;j-=2) {
	            Ai[j] = 0;
	            Ai[j-1] = 0;
	        }
	        if(j===0) { Ai[0] = 0; }
	        A[i] = Ai;
	    }
	    return A;
	};
	numeric.getDiag = function(A) {
	    var n = Math.min(A.length,A[0].length),i,ret = Array(n);
	    for(i=n-1;i>=1;--i) {
	        ret[i] = A[i][i];
	        --i;
	        ret[i] = A[i][i];
	    }
	    if(i===0) {
	        ret[0] = A[0][0];
	    }
	    return ret;
	};

	numeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); };
	numeric.pointwise = function pointwise(params,body,setup) {
	    if(typeof setup === "undefined") { setup = ""; }
	    var fun = [];
	    var k;
	    var avec = /\[i\]$/,p,thevec = '';
	    var haveret = false;
	    for(k=0;k<params.length;k++) {
	        if(avec.test(params[k])) {
	            p = params[k].substring(0,params[k].length-3);
	            thevec = p;
	        } else { p = params[k]; }
	        if(p==='ret') haveret = true;
	        fun.push(p);
	    }
	    fun[params.length] = '_s';
	    fun[params.length+1] = '_k';
	    fun[params.length+2] = (
	            'if(typeof _s === "undefined") _s = numeric.dim('+thevec+');\n'+
	            'if(typeof _k === "undefined") _k = 0;\n'+
	            'var _n = _s[_k];\n'+
	            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
	            'if(_k < _s.length-1) {\n'+
	            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\n'+
	            '    return ret;\n'+
	            '}\n'+
	            setup+'\n'+
	            'for(i=_n-1;i!==-1;--i) {\n'+
	            '    '+body+'\n'+
	            '}\n'+
	            'return ret;'
	            );
	    return Function.apply(null,fun);
	};
	numeric.pointwise2 = function pointwise2(params,body,setup) {
	    if(typeof setup === "undefined") { setup = ""; }
	    var fun = [];
	    var k;
	    var avec = /\[i\]$/,p,thevec = '';
	    var haveret = false;
	    for(k=0;k<params.length;k++) {
	        if(avec.test(params[k])) {
	            p = params[k].substring(0,params[k].length-3);
	            thevec = p;
	        } else { p = params[k]; }
	        if(p==='ret') haveret = true;
	        fun.push(p);
	    }
	    fun[params.length] = (
	            'var _n = '+thevec+'.length;\n'+
	            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
	            setup+'\n'+
	            'for(i=_n-1;i!==-1;--i) {\n'+
	            body+'\n'+
	            '}\n'+
	            'return ret;'
	            );
	    return Function.apply(null,fun);
	};
	numeric._biforeach = (function _biforeach(x,y,s,k,f) {
	    if(k === s.length-1) { f(x,y); return; }
	    var i,n=s[k];
	    for(i=n-1;i>=0;i--) { _biforeach(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
	});
	numeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {
	    if(k === s.length-1) { return f(x,y); }
	    var i,n=s[k],ret = Array(n);
	    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
	    return ret;
	});
	numeric._foreach = (function _foreach(x,s,k,f) {
	    if(k === s.length-1) { f(x); return; }
	    var i,n=s[k];
	    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }
	});
	numeric._foreach2 = (function _foreach2(x,s,k,f) {
	    if(k === s.length-1) { return f(x); }
	    var i,n=s[k], ret = Array(n);
	    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }
	    return ret;
	});

	/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
	numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
	numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
	numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/

	numeric.ops2 = {
	        add: '+',
	        sub: '-',
	        mul: '*',
	        div: '/',
	        mod: '%',
	        and: '&&',
	        or:  '||',
	        eq:  '===',
	        neq: '!==',
	        lt:  '<',
	        gt:  '>',
	        leq: '<=',
	        geq: '>=',
	        band: '&',
	        bor: '|',
	        bxor: '^',
	        lshift: '<<',
	        rshift: '>>',
	        rrshift: '>>>'
	};
	numeric.opseq = {
	        addeq: '+=',
	        subeq: '-=',
	        muleq: '*=',
	        diveq: '/=',
	        modeq: '%=',
	        lshifteq: '<<=',
	        rshifteq: '>>=',
	        rrshifteq: '>>>=',
	        bandeq: '&=',
	        boreq: '|=',
	        bxoreq: '^='
	};
	numeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',
	                    'exp','floor','log','round','sin','sqrt','tan',
	                    'isNaN','isFinite'];
	numeric.mathfuns2 = ['atan2','pow','max','min'];
	numeric.ops1 = {
	        neg: '-',
	        not: '!',
	        bnot: '~',
	        clone: ''
	};
	numeric.mapreducers = {
	        any: ['if(xi) return true;','var accum = false;'],
	        all: ['if(!xi) return false;','var accum = true;'],
	        sum: ['accum += xi;','var accum = 0;'],
	        prod: ['accum *= xi;','var accum = 1;'],
	        norm2Squared: ['accum += xi*xi;','var accum = 0;'],
	        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],
	        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],
	        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],
	        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']
	};

	(function () {
	    var i,o;
	    for(i=0;i<numeric.mathfuns2.length;++i) {
	        o = numeric.mathfuns2[i];
	        numeric.ops2[o] = o;
	    }
	    for(i in numeric.ops2) {
	        if(numeric.ops2.hasOwnProperty(i)) {
	            o = numeric.ops2[i];
	            var code, codeeq, setup = '';
	            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {
	                setup = 'var '+o+' = Math.'+o+';\n';
	                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };
	                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };
	            } else {
	                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };
	                if(numeric.opseq.hasOwnProperty(i+'eq')) {
	                    codeeq = function(x,y) { return x+' '+o+'= '+y; };
	                } else {
	                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    
	                }
	            }
	            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);
	            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);
	            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);
	            numeric[i] = Function(
	                    'var n = arguments.length, i, x = arguments[0], y;\n'+
	                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\n'+
	                    'var dim = numeric.dim;\n'+
	                    'for(i=1;i!==n;++i) { \n'+
	                    '  y = arguments[i];\n'+
	                    '  if(typeof x === "object") {\n'+
	                    '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+
	                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n'+
	                    '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+
	                    '  else '+codeeq('x','y')+'\n'+
	                    '}\nreturn x;\n');
	            numeric[o] = numeric[i];
	            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);
	            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);
	            numeric[i+'eq'] = Function(
	                    'var n = arguments.length, i, x = arguments[0], y;\n'+
	                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\n'+
	                    'var s = numeric.dim(x);\n'+
	                    'for(i=1;i!==n;++i) { \n'+
	                    '  y = arguments[i];\n'+
	                    '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+
	                    '  else numeric._biforeach(x,y,s,0,S);\n'+
	                    '}\nreturn x;\n');
	        }
	    }
	    for(i=0;i<numeric.mathfuns2.length;++i) {
	        o = numeric.mathfuns2[i];
	        delete numeric.ops2[o];
	    }
	    for(i=0;i<numeric.mathfuns.length;++i) {
	        o = numeric.mathfuns[i];
	        numeric.ops1[o] = o;
	    }
	    for(i in numeric.ops1) {
	        if(numeric.ops1.hasOwnProperty(i)) {
	            setup = '';
	            o = numeric.ops1[i];
	            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {
	                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\n';
	            }
	            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);
	            numeric[i+'eq'] = Function('x',
	                    'if(typeof x !== "object") return '+o+'x\n'+
	                    'var i;\n'+
	                    'var V = numeric.'+i+'eqV;\n'+
	                    'var s = numeric.dim(x);\n'+
	                    'numeric._foreach(x,s,0,V);\n'+
	                    'return x;\n');
	            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);
	            numeric[i] = Function('x',
	                    'if(typeof x !== "object") return '+o+'(x)\n'+
	                    'var i;\n'+
	                    'var V = numeric.'+i+'V;\n'+
	                    'var s = numeric.dim(x);\n'+
	                    'return numeric._foreach2(x,s,0,V);\n');
	        }
	    }
	    for(i=0;i<numeric.mathfuns.length;++i) {
	        o = numeric.mathfuns[i];
	        delete numeric.ops1[o];
	    }
	    for(i in numeric.mapreducers) {
	        if(numeric.mapreducers.hasOwnProperty(i)) {
	            o = numeric.mapreducers[i];
	            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);
	            numeric[i] = Function('x','s','k',
	                    o[1]+
	                    'if(typeof x !== "object") {'+
	                    '    xi = x;\n'+
	                    o[0]+';\n'+
	                    '    return accum;\n'+
	                    '}'+
	                    'if(typeof s === "undefined") s = numeric.dim(x);\n'+
	                    'if(typeof k === "undefined") k = 0;\n'+
	                    'if(k === s.length-1) return numeric.'+i+'V(x);\n'+
	                    'var xi;\n'+
	                    'var n = x.length, i;\n'+
	                    'for(i=n-1;i!==-1;--i) {\n'+
	                    '   xi = arguments.callee(x[i]);\n'+
	                    o[0]+';\n'+
	                    '}\n'+
	                    'return accum;\n');
	        }
	    }
	}());

	numeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');
	numeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');
	numeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');
	numeric.trunc = function trunc(x,y) {
	    if(typeof x === "object") {
	        if(typeof y === "object") return numeric.truncVV(x,y);
	        return numeric.truncVS(x,y);
	    }
	    if (typeof y === "object") return numeric.truncSV(x,y);
	    return Math.round(x/y)*y;
	};

	numeric.inv = function inv(x) {
	    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];
	    var A = numeric.clone(x), Ai, Aj;
	    var I = numeric.identity(m), Ii, Ij;
	    var i,j,k,x;
	    for(j=0;j<n;++j) {
	        var i0 = -1;
	        var v0 = -1;
	        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }
	        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;
	        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;
	        x = Aj[j];
	        for(k=j;k!==n;++k)    Aj[k] /= x; 
	        for(k=n-1;k!==-1;--k) Ij[k] /= x;
	        for(i=m-1;i!==-1;--i) {
	            if(i!==j) {
	                Ai = A[i];
	                Ii = I[i];
	                x = Ai[j];
	                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;
	                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }
	                if(k===0) Ii[0] -= Ij[0]*x;
	            }
	        }
	    }
	    return I;
	};

	numeric.det = function det(x) {
	    var s = numeric.dim(x);
	    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }
	    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1;
	    for(j=0;j<n-1;j++) {
	        k=j;
	        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }
	        if(k !== j) {
	            temp = A[k]; A[k] = A[j]; A[j] = temp;
	            ret *= -1;
	        }
	        Aj = A[j];
	        for(i=j+1;i<n;i++) {
	            Ai = A[i];
	            alpha = Ai[j]/Aj[j];
	            for(k=j+1;k<n-1;k+=2) {
	                k1 = k+1;
	                Ai[k] -= Aj[k]*alpha;
	                Ai[k1] -= Aj[k1]*alpha;
	            }
	            if(k!==n) { Ai[k] -= Aj[k]*alpha; }
	        }
	        if(Aj[j] === 0) { return 0; }
	        ret *= Aj[j];
	    }
	    return ret*A[j][j];
	};

	numeric.transpose = function transpose(x) {
	    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
	    for(j=0;j<n;j++) ret[j] = Array(m);
	    for(i=m-1;i>=1;i-=2) {
	        A1 = x[i];
	        A0 = x[i-1];
	        for(j=n-1;j>=1;--j) {
	            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
	            --j;
	            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
	        }
	        if(j===0) {
	            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];
	        }
	    }
	    if(i===0) {
	        A0 = x[0];
	        for(j=n-1;j>=1;--j) {
	            ret[j][0] = A0[j];
	            --j;
	            ret[j][0] = A0[j];
	        }
	        if(j===0) { ret[0][0] = A0[0]; }
	    }
	    return ret;
	};
	numeric.negtranspose = function negtranspose(x) {
	    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
	    for(j=0;j<n;j++) ret[j] = Array(m);
	    for(i=m-1;i>=1;i-=2) {
	        A1 = x[i];
	        A0 = x[i-1];
	        for(j=n-1;j>=1;--j) {
	            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
	            --j;
	            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
	        }
	        if(j===0) {
	            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];
	        }
	    }
	    if(i===0) {
	        A0 = x[0];
	        for(j=n-1;j>=1;--j) {
	            ret[j][0] = -A0[j];
	            --j;
	            ret[j][0] = -A0[j];
	        }
	        if(j===0) { ret[0][0] = -A0[0]; }
	    }
	    return ret;
	};

	numeric._random = function _random(s,k) {
	    var i,n=s[k],ret=Array(n), rnd;
	    if(k === s.length-1) {
	        rnd = Math.random;
	        for(i=n-1;i>=1;i-=2) {
	            ret[i] = rnd();
	            ret[i-1] = rnd();
	        }
	        if(i===0) { ret[0] = rnd(); }
	        return ret;
	    }
	    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);
	    return ret;
	};
	numeric.random = function random(s) { return numeric._random(s,0); };

	numeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); };

	numeric.linspace = function linspace(a,b,n) {
	    if(typeof n === "undefined") n = Math.max(Math.round(b-a)+1,1);
	    if(n<2) { return n===1?[a]:[]; }
	    var i,ret = Array(n);
	    n--;
	    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
	    return ret;
	};

	numeric.getBlock = function getBlock(x,from,to) {
	    var s = numeric.dim(x);
	    function foo(x,k) {
	        var i,a = from[k], n = to[k]-a, ret = Array(n);
	        if(k === s.length-1) {
	            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }
	            return ret;
	        }
	        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }
	        return ret;
	    }
	    return foo(x,0);
	};

	numeric.setBlock = function setBlock(x,from,to,B) {
	    var s = numeric.dim(x);
	    function foo(x,y,k) {
	        var i,a = from[k], n = to[k]-a;
	        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }
	        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }
	    }
	    foo(x,B,0);
	    return x;
	};

	numeric.getRange = function getRange(A,I,J) {
	    var m = I.length, n = J.length;
	    var i,j;
	    var B = Array(m), Bi, AI;
	    for(i=m-1;i!==-1;--i) {
	        B[i] = Array(n);
	        Bi = B[i];
	        AI = A[I[i]];
	        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];
	    }
	    return B;
	};

	numeric.blockMatrix = function blockMatrix(X) {
	    var s = numeric.dim(X);
	    if(s.length<4) return numeric.blockMatrix([X]);
	    var m=s[0],n=s[1],M,N,i,j,Xij;
	    M = 0; N = 0;
	    for(i=0;i<m;++i) M+=X[i][0].length;
	    for(j=0;j<n;++j) N+=X[0][j][0].length;
	    var Z = Array(M);
	    for(i=0;i<M;++i) Z[i] = Array(N);
	    var I=0,J,ZI,k,l,Xijk;
	    for(i=0;i<m;++i) {
	        J=N;
	        for(j=n-1;j!==-1;--j) {
	            Xij = X[i][j];
	            J -= Xij[0].length;
	            for(k=Xij.length-1;k!==-1;--k) {
	                Xijk = Xij[k];
	                ZI = Z[I+k];
	                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];
	            }
	        }
	        I += X[i][0].length;
	    }
	    return Z;
	};

	numeric.tensor = function tensor(x,y) {
	    if(typeof x === "number" || typeof y === "number") return numeric.mul(x,y);
	    var s1 = numeric.dim(x), s2 = numeric.dim(y);
	    if(s1.length !== 1 || s2.length !== 1) {
	        throw new Error('numeric: tensor product is only defined for vectors');
	    }
	    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;
	    for(i=m-1;i>=0;i--) {
	        Ai = Array(n);
	        xi = x[i];
	        for(j=n-1;j>=3;--j) {
	            Ai[j] = xi * y[j];
	            --j;
	            Ai[j] = xi * y[j];
	            --j;
	            Ai[j] = xi * y[j];
	            --j;
	            Ai[j] = xi * y[j];
	        }
	        while(j>=0) { Ai[j] = xi * y[j]; --j; }
	        A[i] = Ai;
	    }
	    return A;
	};

	// 3. The Tensor type T
	numeric.T = function T(x,y) { this.x = x; this.y = y; };
	numeric.t = function t(x,y) { return new numeric.T(x,y); };

	numeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {
	    var io = numeric.indexOf;
	    if(typeof setup !== "string") {
	        var k;
	        setup = '';
	        for(k in numeric) {
	            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {
	                setup += 'var '+k+' = numeric.'+k+';\n';
	            }
	        }
	    }
	    return Function(['y'],
	            'var x = this;\n'+
	            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n'+
	            setup+'\n'+
	            'if(x.y) {'+
	            '  if(y.y) {'+
	            '    return new numeric.T('+cc+');\n'+
	            '  }\n'+
	            '  return new numeric.T('+cr+');\n'+
	            '}\n'+
	            'if(y.y) {\n'+
	            '  return new numeric.T('+rc+');\n'+
	            '}\n'+
	            'return new numeric.T('+rr+');\n'
	    );
	};

	numeric.T.prototype.add = numeric.Tbinop(
	        'add(x.x,y.x)',
	        'add(x.x,y.x),y.y',
	        'add(x.x,y.x),x.y',
	        'add(x.x,y.x),add(x.y,y.y)');
	numeric.T.prototype.sub = numeric.Tbinop(
	        'sub(x.x,y.x)',
	        'sub(x.x,y.x),neg(y.y)',
	        'sub(x.x,y.x),x.y',
	        'sub(x.x,y.x),sub(x.y,y.y)');
	numeric.T.prototype.mul = numeric.Tbinop(
	        'mul(x.x,y.x)',
	        'mul(x.x,y.x),mul(x.x,y.y)',
	        'mul(x.x,y.x),mul(x.y,y.x)',
	        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

	numeric.T.prototype.reciprocal = function reciprocal() {
	    var mul = numeric.mul, div = numeric.div;
	    if(this.y) {
	        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));
	        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));
	    }
	    return new T(div(1,this.x));
	};
	numeric.T.prototype.div = function div(y) {
	    if(!(y instanceof numeric.T)) y = new numeric.T(y);
	    if(y.y) { return this.mul(y.reciprocal()); }
	    var div = numeric.div;
	    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }
	    return new numeric.T(div(this.x,y.x));
	};
	numeric.T.prototype.dot = numeric.Tbinop(
	        'dot(x.x,y.x)',
	        'dot(x.x,y.x),dot(x.x,y.y)',
	        'dot(x.x,y.x),dot(x.y,y.x)',
	        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'
	        );
	numeric.T.prototype.transpose = function transpose() {
	    var t = numeric.transpose, x = this.x, y = this.y;
	    if(y) { return new numeric.T(t(x),t(y)); }
	    return new numeric.T(t(x));
	};
	numeric.T.prototype.transjugate = function transjugate() {
	    var t = numeric.transpose, x = this.x, y = this.y;
	    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }
	    return new numeric.T(t(x));
	};
	numeric.Tunop = function Tunop(r,c,s) {
	    if(typeof s !== "string") { s = ''; }
	    return Function(
	            'var x = this;\n'+
	            s+'\n'+
	            'if(x.y) {'+
	            '  '+c+';\n'+
	            '}\n'+
	            r+';\n'
	    );
	};

	numeric.T.prototype.exp = numeric.Tunop(
	        'return new numeric.T(ex)',
	        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',
	        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
	numeric.T.prototype.conj = numeric.Tunop(
	        'return new numeric.T(x.x);',
	        'return new numeric.T(x.x,numeric.neg(x.y));');
	numeric.T.prototype.neg = numeric.Tunop(
	        'return new numeric.T(neg(x.x));',
	        'return new numeric.T(neg(x.x),neg(x.y));',
	        'var neg = numeric.neg;');
	numeric.T.prototype.sin = numeric.Tunop(
	        'return new numeric.T(numeric.sin(x.x))',
	        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
	numeric.T.prototype.cos = numeric.Tunop(
	        'return new numeric.T(numeric.cos(x.x))',
	        'return x.exp().add(x.neg().exp()).div(2);');
	numeric.T.prototype.abs = numeric.Tunop(
	        'return new numeric.T(numeric.abs(x.x));',
	        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',
	        'var mul = numeric.mul;');
	numeric.T.prototype.log = numeric.Tunop(
	        'return new numeric.T(numeric.log(x.x));',
	        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n'+
	        'return new numeric.T(numeric.log(r.x),theta.x);');
	numeric.T.prototype.norm2 = numeric.Tunop(
	        'return numeric.norm2(x.x);',
	        'var f = numeric.norm2Squared;\n'+
	        'return Math.sqrt(f(x.x)+f(x.y));');
	numeric.T.prototype.inv = function inv() {
	    var A = this;
	    if(typeof A.y === "undefined") { return new numeric.T(numeric.inv(A.x)); }
	    var n = A.x.length, i, j, k;
	    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);
	    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);
	    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
	    var i,j,k,d,d1,ax,ay,bx,by,temp;
	    for(i=0;i<n;i++) {
	        ax = Ax[i][i]; ay = Ay[i][i];
	        d = ax*ax+ay*ay;
	        k = i;
	        for(j=i+1;j<n;j++) {
	            ax = Ax[j][i]; ay = Ay[j][i];
	            d1 = ax*ax+ay*ay;
	            if(d1 > d) { k=j; d = d1; }
	        }
	        if(k!==i) {
	            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;
	            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;
	            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;
	            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;
	        }
	        Aix = Ax[i]; Aiy = Ay[i];
	        Rix = Rx[i]; Riy = Ry[i];
	        ax = Aix[i]; ay = Aiy[i];
	        for(j=i+1;j<n;j++) {
	            bx = Aix[j]; by = Aiy[j];
	            Aix[j] = (bx*ax+by*ay)/d;
	            Aiy[j] = (by*ax-bx*ay)/d;
	        }
	        for(j=0;j<n;j++) {
	            bx = Rix[j]; by = Riy[j];
	            Rix[j] = (bx*ax+by*ay)/d;
	            Riy[j] = (by*ax-bx*ay)/d;
	        }
	        for(j=i+1;j<n;j++) {
	            Ajx = Ax[j]; Ajy = Ay[j];
	            Rjx = Rx[j]; Rjy = Ry[j];
	            ax = Ajx[i]; ay = Ajy[i];
	            for(k=i+1;k<n;k++) {
	                bx = Aix[k]; by = Aiy[k];
	                Ajx[k] -= bx*ax-by*ay;
	                Ajy[k] -= by*ax+bx*ay;
	            }
	            for(k=0;k<n;k++) {
	                bx = Rix[k]; by = Riy[k];
	                Rjx[k] -= bx*ax-by*ay;
	                Rjy[k] -= by*ax+bx*ay;
	            }
	        }
	    }
	    for(i=n-1;i>0;i--) {
	        Rix = Rx[i]; Riy = Ry[i];
	        for(j=i-1;j>=0;j--) {
	            Rjx = Rx[j]; Rjy = Ry[j];
	            ax = Ax[j][i]; ay = Ay[j][i];
	            for(k=n-1;k>=0;k--) {
	                bx = Rix[k]; by = Riy[k];
	                Rjx[k] -= ax*bx - ay*by;
	                Rjy[k] -= ax*by + ay*bx;
	            }
	        }
	    }
	    return new numeric.T(Rx,Ry);
	};
	numeric.T.prototype.get = function get(i) {
	    var x = this.x, y = this.y, k = 0, ik, n = i.length;
	    if(y) {
	        while(k<n) {
	            ik = i[k];
	            x = x[ik];
	            y = y[ik];
	            k++;
	        }
	        return new numeric.T(x,y);
	    }
	    while(k<n) {
	        ik = i[k];
	        x = x[ik];
	        k++;
	    }
	    return new numeric.T(x);
	};
	numeric.T.prototype.set = function set(i,v) {
	    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;
	    if(n===0) {
	        if(vy) { this.y = vy; }
	        else if(y) { this.y = undefined; }
	        this.x = x;
	        return this;
	    }
	    if(vy) {
	        if(y) ;
	        else {
	            y = numeric.rep(numeric.dim(x),0);
	            this.y = y;
	        }
	        while(k<n-1) {
	            ik = i[k];
	            x = x[ik];
	            y = y[ik];
	            k++;
	        }
	        ik = i[k];
	        x[ik] = vx;
	        y[ik] = vy;
	        return this;
	    }
	    if(y) {
	        while(k<n-1) {
	            ik = i[k];
	            x = x[ik];
	            y = y[ik];
	            k++;
	        }
	        ik = i[k];
	        x[ik] = vx;
	        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);
	        else y[ik] = 0;
	        return this;
	    }
	    while(k<n-1) {
	        ik = i[k];
	        x = x[ik];
	        k++;
	    }
	    ik = i[k];
	    x[ik] = vx;
	    return this;
	};
	numeric.T.prototype.getRows = function getRows(i0,i1) {
	    var n = i1-i0+1, j;
	    var rx = Array(n), ry, x = this.x, y = this.y;
	    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }
	    if(y) {
	        ry = Array(n);
	        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }
	        return new numeric.T(rx,ry);
	    }
	    return new numeric.T(rx);
	};
	numeric.T.prototype.setRows = function setRows(i0,i1,A) {
	    var j;
	    var rx = this.x, ry = this.y, x = A.x, y = A.y;
	    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }
	    if(y) {
	        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
	        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }
	    } else if(ry) {
	        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }
	    }
	    return this;
	};
	numeric.T.prototype.getRow = function getRow(k) {
	    var x = this.x, y = this.y;
	    if(y) { return new numeric.T(x[k],y[k]); }
	    return new numeric.T(x[k]);
	};
	numeric.T.prototype.setRow = function setRow(i,v) {
	    var rx = this.x, ry = this.y, x = v.x, y = v.y;
	    rx[i] = x;
	    if(y) {
	        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
	        ry[i] = y;
	    } else if(ry) {
	        ry = numeric.rep([x.length],0);
	    }
	    return this;
	};

	numeric.T.prototype.getBlock = function getBlock(from,to) {
	    var x = this.x, y = this.y, b = numeric.getBlock;
	    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }
	    return new numeric.T(b(x,from,to));
	};
	numeric.T.prototype.setBlock = function setBlock(from,to,A) {
	    if(!(A instanceof numeric.T)) A = new numeric.T(A);
	    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;
	    if(Ay) {
	        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }
	        b(x,from,to,Ax);
	        b(y,from,to,Ay);
	        return this;
	    }
	    b(x,from,to,Ax);
	    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));
	};
	numeric.T.rep = function rep(s,v) {
	    var T = numeric.T;
	    if(!(v instanceof T)) v = new T(v);
	    var x = v.x, y = v.y, r = numeric.rep;
	    if(y) return new T(r(s,x),r(s,y));
	    return new T(r(s,x));
	};
	numeric.T.diag = function diag(d) {
	    if(!(d instanceof numeric.T)) d = new numeric.T(d);
	    var x = d.x, y = d.y, diag = numeric.diag;
	    if(y) return new numeric.T(diag(x),diag(y));
	    return new numeric.T(diag(x));
	};
	numeric.T.eig = function eig() {
	    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }
	    return numeric.eig(this.x);
	};
	numeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); };
	numeric.T.prototype.getDiag = function getDiag() {
	    var n = numeric;
	    var x = this.x, y = this.y;
	    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }
	    return new n.T(n.getDiag(x));
	};

	// 4. Eigenvalues of real matrices

	numeric.house = function house(x) {
	    var v = numeric.clone(x);
	    var s = x[0] >= 0 ? 1 : -1;
	    var alpha = s*numeric.norm2(x);
	    v[0] += alpha;
	    var foo = numeric.norm2(v);
	    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }
	    return numeric.div(v,foo);
	};

	numeric.toUpperHessenberg = function toUpperHessenberg(me) {
	    var s = numeric.dim(me);
	    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }
	    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;
	    for(j=0;j<m-2;j++) {
	        x = Array(m-j-1);
	        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }
	        if(numeric.norm2(x)>0) {
	            v = numeric.house(x);
	            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);
	            C = numeric.tensor(v,numeric.dot(v,B));
	            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }
	            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);
	            C = numeric.tensor(numeric.dot(B,v),v);
	            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }
	            B = Array(m-j-1);
	            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];
	            C = numeric.tensor(v,numeric.dot(v,B));
	            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
	        }
	    }
	    return {H:A, Q:Q};
	};

	numeric.epsilon = 2.220446049250313e-16;

	numeric.QRFrancis = function(H,maxiter) {
	    if(typeof maxiter === "undefined") { maxiter = 10000; }
	    H = numeric.clone(H);
	    var H0 = numeric.clone(H);
	    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;
	    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }
	    var epsilon = numeric.epsilon;
	    for(iter=0;iter<maxiter;iter++) {
	        for(j=0;j<m-1;j++) {
	            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {
	                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);
	                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);
	                B = Array(j+1);
	                for(i=0;i<=j;i++) { B[i] = Q[i]; }
	                C = numeric.dot(QH1.Q,B);
	                for(i=0;i<=j;i++) { Q[i] = C[i]; }
	                B = Array(m-j-1);
	                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }
	                C = numeric.dot(QH2.Q,B);
	                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }
	                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};
	            }
	        }
	        a = H[m-2][m-2]; b = H[m-2][m-1];
	        c = H[m-1][m-2]; d = H[m-1][m-1];
	        tr = a+d;
	        det = (a*d-b*c);
	        Hloc = numeric.getBlock(H, [0,0], [2,2]);
	        if(tr*tr>=4*det) {
	            var s1,s2;
	            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));
	            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));
	            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
	                                           numeric.mul(Hloc,s1+s2)),
	                               numeric.diag(numeric.rep([3],s1*s2)));
	        } else {
	            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
	                                           numeric.mul(Hloc,tr)),
	                               numeric.diag(numeric.rep([3],det)));
	        }
	        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];
	        v = numeric.house(x);
	        B = [H[0],H[1],H[2]];
	        C = numeric.tensor(v,numeric.dot(v,B));
	        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }
	        B = numeric.getBlock(H, [0,0],[m-1,2]);
	        C = numeric.tensor(numeric.dot(B,v),v);
	        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }
	        B = [Q[0],Q[1],Q[2]];
	        C = numeric.tensor(v,numeric.dot(v,B));
	        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
	        var J;
	        for(j=0;j<m-2;j++) {
	            for(k=j;k<=j+1;k++) {
	                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {
	                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);
	                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);
	                    B = Array(k+1);
	                    for(i=0;i<=k;i++) { B[i] = Q[i]; }
	                    C = numeric.dot(QH1.Q,B);
	                    for(i=0;i<=k;i++) { Q[i] = C[i]; }
	                    B = Array(m-k-1);
	                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }
	                    C = numeric.dot(QH2.Q,B);
	                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }
	                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};
	                }
	            }
	            J = Math.min(m-1,j+3);
	            x = Array(J-j);
	            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }
	            v = numeric.house(x);
	            B = numeric.getBlock(H, [j+1,j],[J,m-1]);
	            C = numeric.tensor(v,numeric.dot(v,B));
	            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }
	            B = numeric.getBlock(H, [0,j+1],[m-1,J]);
	            C = numeric.tensor(numeric.dot(B,v),v);
	            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }
	            B = Array(J-j);
	            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];
	            C = numeric.tensor(v,numeric.dot(v,B));
	            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
	        }
	    }
	    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
	};

	numeric.eig = function eig(A,maxiter) {
	    var QH = numeric.toUpperHessenberg(A);
	    var QB = numeric.QRFrancis(QH.H,maxiter);
	    var T = numeric.T;
	    var n = A.length,i,k,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));
	    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;
	    var m = B.length,j;
	    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;
	    var sqrt = Math.sqrt;
	    for(k=0;k<m;k++) {
	        i = B[k][0];
	        if(i === B[k][1]) ; else {
	            j = i+1;
	            a = H[i][i];
	            b = H[i][j];
	            c = H[j][i];
	            d = H[j][j];
	            if(b === 0 && c === 0) continue;
	            p1 = -a-d;
	            p2 = a*d-b*c;
	            disc = p1*p1-4*p2;
	            if(disc>=0) {
	                if(p1<0) x = -0.5*(p1-sqrt(disc));
	                else     x = -0.5*(p1+sqrt(disc));
	                n1 = (a-x)*(a-x)+b*b;
	                n2 = c*c+(d-x)*(d-x);
	                if(n1>n2) {
	                    n1 = sqrt(n1);
	                    p = (a-x)/n1;
	                    q = b/n1;
	                } else {
	                    n2 = sqrt(n2);
	                    p = c/n2;
	                    q = (d-x)/n2;
	                }
	                Q0 = new T([[q,-p],[p,q]]);
	                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
	            } else {
	                x = -0.5*p1;
	                y = 0.5*sqrt(-disc);
	                n1 = (a-x)*(a-x)+b*b;
	                n2 = c*c+(d-x)*(d-x);
	                if(n1>n2) {
	                    n1 = sqrt(n1+y*y);
	                    p = (a-x)/n1;
	                    q = b/n1;
	                    x = 0;
	                    y /= n1;
	                } else {
	                    n2 = sqrt(n2+y*y);
	                    p = c/n2;
	                    q = (d-x)/n2;
	                    x = y/n2;
	                    y = 0;
	                }
	                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);
	                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
	            }
	        }
	    }
	    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);
	    for(j=0;j<n;j++) {
	        if(j>0) {
	            for(k=j-1;k>=0;k--) {
	                var Rk = R.get([k,k]), Rj = R.get([j,j]);
	                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {
	                    x = R.getRow(k).getBlock([k],[j-1]);
	                    y = E.getRow(j).getBlock([k],[j-1]);
	                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));
	                } else {
	                    E.setRow(j,E.getRow(k));
	                    continue;
	                }
	            }
	        }
	    }
	    for(j=0;j<n;j++) {
	        x = E.getRow(j);
	        E.setRow(j,x.div(x.norm2()));
	    }
	    E = E.transpose();
	    E = Q.transjugate().dot(E);
	    return { lambda:R.getDiag(), E:E };
	};

	// 5. Compressed Column Storage matrices
	numeric.ccsSparse = function ccsSparse(A) {
	    var m = A.length,n,foo, i,j, counts = [];
	    for(i=m-1;i!==-1;--i) {
	        foo = A[i];
	        for(j in foo) {
	            j = parseInt(j);
	            while(j>=counts.length) counts[counts.length] = 0;
	            if(foo[j]!==0) counts[j]++;
	        }
	    }
	    var n = counts.length;
	    var Ai = Array(n+1);
	    Ai[0] = 0;
	    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];
	    var Aj = Array(Ai[n]), Av = Array(Ai[n]);
	    for(i=m-1;i!==-1;--i) {
	        foo = A[i];
	        for(j in foo) {
	            if(foo[j]!==0) {
	                counts[j]--;
	                Aj[Ai[j]+counts[j]] = i;
	                Av[Ai[j]+counts[j]] = foo[j];
	            }
	        }
	    }
	    return [Ai,Aj,Av];
	};
	numeric.ccsFull = function ccsFull(A) {
	    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1;
	    var B = numeric.rep([m,n],0);
	    for(i=0;i<n;i++) {
	        j0 = Ai[i];
	        j1 = Ai[i+1];
	        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }
	    }
	    return B;
	};
	numeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {
	    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;
	    if(typeof bj === "undefined") x = numeric.rep([m],0);
	    if(typeof bj === "undefined") bj = numeric.linspace(0,x.length-1);
	    if(typeof xj === "undefined") xj = [];
	    function dfs(j) {
	        var k;
	        if(x[j] !== 0) return;
	        x[j] = 1;
	        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);
	        xj[n] = j;
	        ++n;
	    }
	    var i,j,j0,j1,k,l,a;
	    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }
	    xj.length = n;
	    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
	    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }
	    for(i=xj.length-1;i!==-1;--i) {
	        j = xj[i];
	        j0 = Ai[j];
	        j1 = max(Ai[j+1],j0);
	        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }
	        a = x[j];
	        for(k=j0;k!==j1;++k) {
	            l = Aj[k];
	            if(l !== j) x[l] -= a*Av[k];
	        }
	    }
	    return x;
	};
	numeric.ccsDFS = function ccsDFS(n) {
	    this.k = Array(n);
	    this.k1 = Array(n);
	    this.j = Array(n);
	};
	numeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {
	    var m = 0,foo,n=xj.length;
	    var k = this.k, k1 = this.k1, j = this.j,km,k11;
	    if(x[J]!==0) return;
	    x[J] = 1;
	    j[0] = J;
	    k[0] = km = Ai[J];
	    k1[0] = k11 = Ai[J+1];
	    while(1) {
	        if(km >= k11) {
	            xj[n] = j[m];
	            if(m===0) return;
	            ++n;
	            --m;
	            km = k[m];
	            k11 = k1[m];
	        } else {
	            foo = Pinv[Aj[km]];
	            if(x[foo] === 0) {
	                x[foo] = 1;
	                k[m] = km;
	                ++m;
	                j[m] = foo;
	                km = Ai[foo];
	                k1[m] = k11 = Ai[foo+1];
	            } else ++km;
	        }
	    }
	};
	numeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {
	    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1;
	    var Bi = B[0], Bj = B[1], Bv = B[2];
	    
	    var i,i0,i1,j,j0,j1,k,l,a;
	    i0 = Bi[I];
	    i1 = Bi[I+1];
	    xj.length = 0;
	    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }
	    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
	    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }
	    for(i=xj.length-1;i!==-1;--i) {
	        j = xj[i];
	        j0 = Ai[j];
	        j1 = Ai[j+1];
	        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }
	        a = x[j];
	        for(k=j0;k<j1;++k) {
	            l = Pinv[Aj[k]];
	            if(l !== j) x[l] -= a*Av[k];
	        }
	    }
	    return x;
	};
	numeric.ccsLUP1 = function ccsLUP1(A,threshold) {
	    var m = A[0].length-1;
	    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
	    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
	    var x = numeric.rep([m],0), xj = numeric.rep([m],0);
	    var i,j,k,a,e,c,d;
	    var sol = numeric.ccsLPSolve, abs = Math.abs;
	    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
	    var dfs = new numeric.ccsDFS(m);
	    if(typeof threshold === "undefined") { threshold = 1; }
	    for(i=0;i<m;++i) {
	        sol(L,A,x,xj,i,Pinv,dfs);
	        a = -1;
	        e = -1;
	        for(j=xj.length-1;j!==-1;--j) {
	            k = xj[j];
	            if(k <= i) continue;
	            c = abs(x[k]);
	            if(c > a) { e = k; a = c; }
	        }
	        if(abs(x[i])<threshold*a) {
	            j = P[i];
	            a = P[e];
	            P[i] = a; Pinv[a] = i;
	            P[e] = j; Pinv[j] = e;
	            a = x[i]; x[i] = x[e]; x[e] = a;
	        }
	        a = Li[i];
	        e = Ui[i];
	        d = x[i];
	        Lj[a] = P[i];
	        Lv[a] = 1;
	        ++a;
	        for(j=xj.length-1;j!==-1;--j) {
	            k = xj[j];
	            c = x[k];
	            xj[j] = 0;
	            x[k] = 0;
	            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
	            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
	        }
	        Li[i+1] = a;
	        Ui[i+1] = e;
	    }
	    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
	    return {L:L, U:U, P:P, Pinv:Pinv};
	};
	numeric.ccsDFS0 = function ccsDFS0(n) {
	    this.k = Array(n);
	    this.k1 = Array(n);
	    this.j = Array(n);
	};
	numeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {
	    var m = 0,foo,n=xj.length;
	    var k = this.k, k1 = this.k1, j = this.j,km,k11;
	    if(x[J]!==0) return;
	    x[J] = 1;
	    j[0] = J;
	    k[0] = km = Ai[Pinv[J]];
	    k1[0] = k11 = Ai[Pinv[J]+1];
	    while(1) {
	        if(isNaN(km)) throw new Error("Ow!");
	        if(km >= k11) {
	            xj[n] = Pinv[j[m]];
	            if(m===0) return;
	            ++n;
	            --m;
	            km = k[m];
	            k11 = k1[m];
	        } else {
	            foo = Aj[km];
	            if(x[foo] === 0) {
	                x[foo] = 1;
	                k[m] = km;
	                ++m;
	                j[m] = foo;
	                foo = Pinv[foo];
	                km = Ai[foo];
	                k1[m] = k11 = Ai[foo+1];
	            } else ++km;
	        }
	    }
	};
	numeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {
	    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1;
	    var Bi = B[0], Bj = B[1], Bv = B[2];
	    
	    var i,i0,i1,j,j0,j1,k,l,a;
	    i0 = Bi[I];
	    i1 = Bi[I+1];
	    xj.length = 0;
	    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }
	    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }
	    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }
	    for(i=xj.length-1;i!==-1;--i) {
	        j = xj[i];
	        l = P[j];
	        j0 = Ai[j];
	        j1 = Ai[j+1];
	        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }
	        a = y[l];
	        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];
	        y[l] = a;
	    }
	};
	numeric.ccsLUP0 = function ccsLUP0(A,threshold) {
	    var m = A[0].length-1;
	    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
	    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
	    var y = numeric.rep([m],0), xj = numeric.rep([m],0);
	    var i,j,k,a,e,c,d;
	    var sol = numeric.ccsLPSolve0, abs = Math.abs;
	    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
	    var dfs = new numeric.ccsDFS0(m);
	    if(typeof threshold === "undefined") { threshold = 1; }
	    for(i=0;i<m;++i) {
	        sol(L,A,y,xj,i,Pinv,P,dfs);
	        a = -1;
	        e = -1;
	        for(j=xj.length-1;j!==-1;--j) {
	            k = xj[j];
	            if(k <= i) continue;
	            c = abs(y[P[k]]);
	            if(c > a) { e = k; a = c; }
	        }
	        if(abs(y[P[i]])<threshold*a) {
	            j = P[i];
	            a = P[e];
	            P[i] = a; Pinv[a] = i;
	            P[e] = j; Pinv[j] = e;
	        }
	        a = Li[i];
	        e = Ui[i];
	        d = y[P[i]];
	        Lj[a] = P[i];
	        Lv[a] = 1;
	        ++a;
	        for(j=xj.length-1;j!==-1;--j) {
	            k = xj[j];
	            c = y[P[k]];
	            xj[j] = 0;
	            y[P[k]] = 0;
	            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
	            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
	        }
	        Li[i+1] = a;
	        Ui[i+1] = e;
	    }
	    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
	    return {L:L, U:U, P:P, Pinv:Pinv};
	};
	numeric.ccsLUP = numeric.ccsLUP0;

	numeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; };
	numeric.ccsGetBlock = function ccsGetBlock(A,i,j) {
	    var s = numeric.ccsDim(A),m=s[0],n=s[1];
	    if(typeof i === "undefined") { i = numeric.linspace(0,m-1); }
	    else if(typeof i === "number") { i = [i]; }
	    if(typeof j === "undefined") { j = numeric.linspace(0,n-1); }
	    else if(typeof j === "number") { j = [j]; }
	    var p,P = i.length,q,Q = j.length,r,jq,ip;
	    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];
	    var Ai = A[0], Aj = A[1], Av = A[2];
	    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);
	    for(q=0;q<Q;++q) {
	        jq = j[q];
	        var q0 = Ai[jq];
	        var q1 = Ai[jq+1];
	        for(p=q0;p<q1;++p) {
	            r = Aj[p];
	            flags[r] = 1;
	            x[r] = Av[p];
	        }
	        for(p=0;p<P;++p) {
	            ip = i[p];
	            if(flags[ip]) {
	                Bj[count] = p;
	                Bv[count] = x[i[p]];
	                ++count;
	            }
	        }
	        for(p=q0;p<q1;++p) {
	            r = Aj[p];
	            flags[r] = 0;
	        }
	        Bi[q+1] = count;
	    }
	    return B;
	};

	numeric.ccsDot = function ccsDot(A,B) {
	    var Ai = A[0], Aj = A[1], Av = A[2];
	    var Bi = B[0], Bj = B[1], Bv = B[2];
	    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);
	    var m = sA[0], n = sA[1], o = sB[1];
	    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);
	    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];
	    var i,j,k,j0,j1,i0,i1,l,p,a,b;
	    for(k=0;k!==o;++k) {
	        j0 = Bi[k];
	        j1 = Bi[k+1];
	        p = 0;
	        for(j=j0;j<j1;++j) {
	            a = Bj[j];
	            b = Bv[j];
	            i0 = Ai[a];
	            i1 = Ai[a+1];
	            for(i=i0;i<i1;++i) {
	                l = Aj[i];
	                if(flags[l]===0) {
	                    xj[p] = l;
	                    flags[l] = 1;
	                    p = p+1;
	                }
	                x[l] = x[l] + Av[i]*b;
	            }
	        }
	        j0 = Ci[k];
	        j1 = j0+p;
	        Ci[k+1] = j1;
	        for(j=p-1;j!==-1;--j) {
	            b = j0+j;
	            i = xj[j];
	            Cj[b] = i;
	            Cv[b] = x[i];
	            flags[i] = 0;
	            x[i] = 0;
	        }
	        Ci[k+1] = Ci[k]+p;
	    }
	    return C;
	};

	numeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {
	    var L = LUP.L, U = LUP.U, P = LUP.P;
	    var Bi = B[0];
	    var flag = false;
	    if(typeof Bi !== "object") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }
	    var Bj = B[1], Bv = B[2];
	    var n = L[0].length-1, m = Bi.length-1;
	    var x = numeric.rep([n],0), xj = Array(n);
	    var b = numeric.rep([n],0), bj = Array(n);
	    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];
	    var sol = numeric.ccsTSolve;
	    var i,j,j0,j1,k,J,N=0;
	    for(i=0;i<m;++i) {
	        k = 0;
	        j0 = Bi[i];
	        j1 = Bi[i+1];
	        for(j=j0;j<j1;++j) { 
	            J = LUP.Pinv[Bj[j]];
	            bj[k] = J;
	            b[J] = Bv[j];
	            ++k;
	        }
	        bj.length = k;
	        sol(L,b,x,bj,xj);
	        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;
	        sol(U,x,b,xj,bj);
	        if(flag) return b;
	        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;
	        for(j=bj.length-1;j!==-1;--j) {
	            J = bj[j];
	            Xj[N] = J;
	            Xv[N] = b[J];
	            b[J] = 0;
	            ++N;
	        }
	        Xi[i+1] = N;
	    }
	    return [Xi,Xj,Xv];
	};

	numeric.ccsbinop = function ccsbinop(body,setup) {
	    if(typeof setup === "undefined") setup='';
	    return Function('X','Y',
	            'var Xi = X[0], Xj = X[1], Xv = X[2];\n'+
	            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n'+
	            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n'+
	            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n'+
	            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n'+
	            'var xk,yk,zk;\n'+
	            'var i,j,j0,j1,k,p=0;\n'+
	            setup+
	            'for(i=0;i<n;++i) {\n'+
	            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) {\n'+
	            '    k = Xj[j];\n'+
	            '    x[k] = 1;\n'+
	            '    Zj[p] = k;\n'+
	            '    ++p;\n'+
	            '  }\n'+
	            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) {\n'+
	            '    k = Yj[j];\n'+
	            '    y[k] = Yv[j];\n'+
	            '    if(x[k] === 0) {\n'+
	            '      Zj[p] = k;\n'+
	            '      ++p;\n'+
	            '    }\n'+
	            '  }\n'+
	            '  Zi[i+1] = p;\n'+
	            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n'+
	            '  j0 = Zi[i]; j1 = Zi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) {\n'+
	            '    k = Zj[j];\n'+
	            '    xk = x[k];\n'+
	            '    yk = y[k];\n'+
	            body+'\n'+
	            '    Zv[j] = zk;\n'+
	            '  }\n'+
	            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n'+
	            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n'+
	            '}\n'+
	            'return [Zi,Zj,Zv];'
	            );
	};

	(function() {
	    var k,A,B,C;
	    for(k in numeric.ops2) {
	        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';
	        else A = 'NaN';
	        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';
	        else B = 'NaN';
	        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';
	        else C = 'NaN';
	        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');
	        numeric['ccs'+k] = Function('X','Y',
	                'if(typeof X === "number") return '+A+';\n'+
	                'if(typeof Y === "number") return '+B+';\n'+
	                'return '+C+';\n'
	                );
	    }
	}());

	numeric.ccsScatter = function ccsScatter(A) {
	    var Ai = A[0], Aj = A[1], Av = A[2];
	    var n = numeric.sup(Aj)+1,m=Ai.length;
	    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);
	    var counts = numeric.rep([n],0),i;
	    for(i=0;i<m;++i) counts[Aj[i]]++;
	    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];
	    var ptr = Ri.slice(0),k,Aii;
	    for(i=0;i<m;++i) {
	        Aii = Aj[i];
	        k = ptr[Aii];
	        Rj[k] = Ai[i];
	        Rv[k] = Av[i];
	        ptr[Aii]=ptr[Aii]+1;
	    }
	    return [Ri,Rj,Rv];
	};

	numeric.ccsGather = function ccsGather(A) {
	    var Ai = A[0], Aj = A[1], Av = A[2];
	    var n = Ai.length-1,m = Aj.length;
	    var Ri = Array(m), Rj = Array(m), Rv = Array(m);
	    var i,j,j0,j1,p;
	    p=0;
	    for(i=0;i<n;++i) {
	        j0 = Ai[i];
	        j1 = Ai[i+1];
	        for(j=j0;j!==j1;++j) {
	            Rj[p] = i;
	            Ri[p] = Aj[j];
	            Rv[p] = Av[j];
	            ++p;
	        }
	    }
	    return [Ri,Rj,Rv];
	};

	// The following sparse linear algebra routines are deprecated.

	numeric.sdim = function dim(A,ret,k) {
	    if(typeof ret === "undefined") { ret = []; }
	    if(typeof A !== "object") return ret;
	    if(typeof k === "undefined") { k=0; }
	    if(!(k in ret)) { ret[k] = 0; }
	    if(A.length > ret[k]) ret[k] = A.length;
	    var i;
	    for(i in A) {
	        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);
	    }
	    return ret;
	};

	numeric.sclone = function clone(A,k,n) {
	    if(typeof k === "undefined") { k=0; }
	    if(typeof n === "undefined") { n = numeric.sdim(A).length; }
	    var i,ret = Array(A.length);
	    if(k === n-1) {
	        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }
	        return ret;
	    }
	    for(i in A) {
	        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);
	    }
	    return ret;
	};

	numeric.sdiag = function diag(d) {
	    var n = d.length,i,ret = Array(n),i1;
	    for(i=n-1;i>=1;i-=2) {
	        i1 = i-1;
	        ret[i] = []; ret[i][i] = d[i];
	        ret[i1] = []; ret[i1][i1] = d[i1];
	    }
	    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }
	    return ret;
	};

	numeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); };

	numeric.stranspose = function transpose(A) {
	    var ret = [], n = A.length, i,j,Ai;
	    for(i in A) {
	        if(!(A.hasOwnProperty(i))) continue;
	        Ai = A[i];
	        for(j in Ai) {
	            if(!(Ai.hasOwnProperty(j))) continue;
	            if(typeof ret[j] !== "object") { ret[j] = []; }
	            ret[j][i] = Ai[j];
	        }
	    }
	    return ret;
	};

	numeric.sLUP = function LUP(A,tol) {
	    throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
	};

	numeric.sdotMM = function dotMM(A,B) {
	    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;
	    var i,j,k,accum;
	    var ret = Array(p),reti;
	    for(i=p-1;i>=0;i--) {
	        reti = [];
	        Ai = A[i];
	        for(k=r-1;k>=0;k--) {
	            accum = 0;
	            BTk = BT[k];
	            for(j in Ai) {
	                if(!(Ai.hasOwnProperty(j))) continue;
	                if(j in BTk) { accum += Ai[j]*BTk[j]; }
	            }
	            if(accum) reti[k] = accum;
	        }
	        ret[i] = reti;
	    }
	    return ret;
	};

	numeric.sdotMV = function dotMV(A,x) {
	    var p = A.length, Ai, i,j;
	    var ret = Array(p), accum;
	    for(i=p-1;i>=0;i--) {
	        Ai = A[i];
	        accum = 0;
	        for(j in Ai) {
	            if(!(Ai.hasOwnProperty(j))) continue;
	            if(x[j]) accum += Ai[j]*x[j];
	        }
	        if(accum) ret[i] = accum;
	    }
	    return ret;
	};

	numeric.sdotVM = function dotMV(x,A) {
	    var i,j,Ai,alpha;
	    var ret = [];
	    for(i in x) {
	        if(!x.hasOwnProperty(i)) continue;
	        Ai = A[i];
	        alpha = x[i];
	        for(j in Ai) {
	            if(!Ai.hasOwnProperty(j)) continue;
	            if(!ret[j]) { ret[j] = 0; }
	            ret[j] += alpha*Ai[j];
	        }
	    }
	    return ret;
	};

	numeric.sdotVV = function dotVV(x,y) {
	    var i,ret=0;
	    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }
	    return ret;
	};

	numeric.sdot = function dot(A,B) {
	    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;
	    var k = m*1000+n;
	    switch(k) {
	    case 0: return A*B;
	    case 1001: return numeric.sdotVV(A,B);
	    case 2001: return numeric.sdotMV(A,B);
	    case 1002: return numeric.sdotVM(A,B);
	    case 2002: return numeric.sdotMM(A,B);
	    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);
	    }
	};

	numeric.sscatter = function scatter(V) {
	    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;
	    for(i=n-1;i>=0;--i) {
	        if(!V[m-1][i]) continue;
	        Aj = A;
	        for(j=0;j<m-2;j++) {
	            Vij = V[j][i];
	            if(!Aj[Vij]) Aj[Vij] = [];
	            Aj = Aj[Vij];
	        }
	        Aj[V[j][i]] = V[j+1][i];
	    }
	    return A;
	};

	numeric.sgather = function gather(A,ret,k) {
	    if(typeof ret === "undefined") ret = [];
	    if(typeof k === "undefined") k = [];
	    var n,i,Ai;
	    n = k.length;
	    for(i in A) {
	        if(A.hasOwnProperty(i)) {
	            k[n] = parseInt(i);
	            Ai = A[i];
	            if(typeof Ai === "number") {
	                if(Ai) {
	                    if(ret.length === 0) {
	                        for(i=n+1;i>=0;--i) ret[i] = [];
	                    }
	                    for(i=n;i>=0;--i) ret[i].push(k[i]);
	                    ret[n+1].push(Ai);
	                }
	            } else gather(Ai,ret,k);
	        }
	    }
	    if(k.length>n) k.pop();
	    return ret;
	};

	// 6. Coordinate matrices
	numeric.cLU = function LU(A) {
	    var I = A[0], J = A[1], V = A[2];
	    var p = I.length, m=0, i,j,k,a,b,c;
	    for(i=0;i<p;i++) if(I[i]>m) m=I[i];
	    m++;
	    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);
	    var Ui, Uj,alpha;
	    for(k=0;k<p;k++) {
	        i = I[k];
	        j = J[k];
	        if(j<left[i]) left[i] = j;
	        if(j>right[i]) right[i] = j;
	    }
	    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }
	    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }
	    var countL = 0, countU = 0;
	    for(i=0;i<m;i++) {
	        U[i] = numeric.rep([right[i]-left[i]+1],0);
	        L[i] = numeric.rep([i-left[i]],0);
	        countL += i-left[i]+1;
	        countU += right[i]-i+1;
	    }
	    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }
	    for(i=0;i<m-1;i++) {
	        a = i-left[i];
	        Ui = U[i];
	        for(j=i+1;left[j]<=i && j<m;j++) {
	            b = i-left[j];
	            c = right[i]-i;
	            Uj = U[j];
	            alpha = Uj[b]/Ui[a];
	            if(alpha) {
	                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }
	                L[j][i-left[j]] = alpha;
	            }
	        }
	    }
	    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];
	    var p,q,foo;
	    p=0; q=0;
	    for(i=0;i<m;i++) {
	        a = left[i];
	        b = right[i];
	        foo = U[i];
	        for(j=i;j<=b;j++) {
	            if(foo[j-a]) {
	                Ui[p] = i;
	                Uj[p] = j;
	                Uv[p] = foo[j-a];
	                p++;
	            }
	        }
	        foo = L[i];
	        for(j=a;j<i;j++) {
	            if(foo[j-a]) {
	                Li[q] = i;
	                Lj[q] = j;
	                Lv[q] = foo[j-a];
	                q++;
	            }
	        }
	        Li[q] = i;
	        Lj[q] = i;
	        Lv[q] = 1;
	        q++;
	    }
	    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};
	};

	numeric.cLUsolve = function LUsolve(lu,b) {
	    var L = lu.L, U = lu.U, ret = numeric.clone(b);
	    var Li = L[0], Lj = L[1], Lv = L[2];
	    var Ui = U[0], Uj = U[1], Uv = U[2];
	    var p = Ui.length, q = Li.length;
	    var m = ret.length,i,k;
	    k = 0;
	    for(i=0;i<m;i++) {
	        while(Lj[k] < i) {
	            ret[i] -= Lv[k]*ret[Lj[k]];
	            k++;
	        }
	        k++;
	    }
	    k = p-1;
	    for(i=m-1;i>=0;i--) {
	        while(Uj[k] > i) {
	            ret[i] -= Uv[k]*ret[Uj[k]];
	            k--;
	        }
	        ret[i] /= Uv[k];
	        k--;
	    }
	    return ret;
	};

	numeric.cgrid = function grid(n,shape) {
	    if(typeof n === "number") n = [n,n];
	    var ret = numeric.rep(n,-1);
	    var i,j,count;
	    if(typeof shape !== "function") {
	        switch(shape) {
	        case 'L':
	            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); };
	            break;
	        default:
	            shape = function(i,j) { return true; };
	            break;
	        }
	    }
	    count=0;
	    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) 
	        if(shape(i,j)) {
	            ret[i][j] = count;
	            count++;
	        }
	    return ret;
	};

	numeric.cdelsq = function delsq(g) {
	    var dir = [[-1,0],[0,-1],[0,1],[1,0]];
	    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;
	    var Li = [], Lj = [], Lv = [];
	    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {
	        if(g[i][j]<0) continue;
	        for(k=0;k<4;k++) {
	            p = i+dir[k][0];
	            q = j+dir[k][1];
	            if(g[p][q]<0) continue;
	            Li.push(g[i][j]);
	            Lj.push(g[p][q]);
	            Lv.push(-1);
	        }
	        Li.push(g[i][j]);
	        Lj.push(g[i][j]);
	        Lv.push(4);
	    }
	    return [Li,Lj,Lv];
	};

	numeric.cdotMV = function dotMV(A,x) {
	    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;
	    N=0;
	    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }
	    N++;
	    ret = numeric.rep([N],0);
	    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }
	    return ret;
	};

	// 7. Splines

	numeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; };
	numeric.Spline.prototype._at = function _at(x1,p) {
	    var x = this.x;
	    var yl = this.yl;
	    var yr = this.yr;
	    var kl = this.kl;
	    var kr = this.kr;
	    var x1,a,b,t;
	    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;
	    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));
	    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));
	    t = (x1-x[p])/(x[p+1]-x[p]);
	    var s = t*(1-t);
	    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));
	};
	numeric.Spline.prototype.at = function at(x0) {
	    if(typeof x0 === "number") {
	        var x = this.x;
	        var n = x.length;
	        var p,q,mid,floor = Math.floor;
	        p = 0;
	        q = n-1;
	        while(q-p>1) {
	            mid = floor((p+q)/2);
	            if(x[mid] <= x0) p = mid;
	            else q = mid;
	        }
	        return this._at(x0,p);
	    }
	    var n = x0.length, i, ret = Array(n);
	    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);
	    return ret;
	};
	numeric.Spline.prototype.diff = function diff() {
	    var x = this.x;
	    var yl = this.yl;
	    var yr = this.yr;
	    var kl = this.kl;
	    var kr = this.kr;
	    var n = yl.length;
	    var i,dx,dy;
	    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);
	    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;
	    for(i=n-1;i!==-1;--i) {
	        dx = x[i+1]-x[i];
	        dy = sub(yr[i+1],yl[i]);
	        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);
	        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);
	    }
	    return new numeric.Spline(x,zl,zr,pl,pr);
	};
	numeric.Spline.prototype.roots = function roots() {
	    function sqr(x) { return x*x; }
	    var ret = [];
	    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;
	    if(typeof yl[0] === "number") {
	        yl = [yl];
	        yr = [yr];
	        kl = [kl];
	        kr = [kr];
	    }
	    var m = yl.length,n=x.length-1,i,j,k;
	    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;
	    var sqrt = Math.sqrt;
	    for(i=0;i!==m;++i) {
	        ai = yl[i];
	        bi = yr[i];
	        ci = kl[i];
	        di = kr[i];
	        ri = [];
	        for(j=0;j!==n;j++) {
	            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);
	            dx = (x[j+1]-x[j]);
	            cx = x[j];
	            y0 = ai[j];
	            y1 = bi[j+1];
	            k0 = ci[j]/dx;
	            k1 = di[j+1]/dx;
	            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;
	            A = k1+3*y0+2*k0-3*y1;
	            B = 3*(k1+k0+2*(y0-y1));
	            if(D<=0) {
	                z0 = A/B;
	                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];
	                else stops = [x[j],x[j+1]];
	            } else {
	                z0 = (A-sqrt(D))/B;
	                z1 = (A+sqrt(D))/B;
	                stops = [x[j]];
	                if(z0>x[j] && z0<x[j+1]) stops.push(z0);
	                if(z1>x[j] && z1<x[j+1]) stops.push(z1);
	                stops.push(x[j+1]);
	            }
	            t0 = stops[0];
	            z0 = this._at(t0,j);
	            for(k=0;k<stops.length-1;k++) {
	                t1 = stops[k+1];
	                z1 = this._at(t1,j);
	                if(z0 === 0) {
	                    ri.push(t0); 
	                    t0 = t1;
	                    z0 = z1;
	                    continue;
	                }
	                if(z1 === 0 || z0*z1>0) {
	                    t0 = t1;
	                    z0 = z1;
	                    continue;
	                }
	                var side = 0;
	                while(1) {
	                    tm = (z0*t1-z1*t0)/(z0-z1);
	                    if(tm <= t0 || tm >= t1) { break; }
	                    zm = this._at(tm,j);
	                    if(zm*z1>0) {
	                        t1 = tm;
	                        z1 = zm;
	                        if(side === -1) z0*=0.5;
	                        side = -1;
	                    } else if(zm*z0>0) {
	                        t0 = tm;
	                        z0 = zm;
	                        if(side === 1) z1*=0.5;
	                        side = 1;
	                    } else break;
	                }
	                ri.push(tm);
	                t0 = stops[k+1];
	                z0 = this._at(t0, j);
	            }
	            if(z1 === 0) ri.push(t1);
	        }
	        ret[i] = ri;
	    }
	    if(typeof this.yl[0] === "number") return ret[0];
	    return ret;
	};
	numeric.spline = function spline(x,y,k1,kn) {
	    var n = x.length, b = [], dx = [], dy = [];
	    var i;
	    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;
	    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }
	    if(typeof k1 === "string" || typeof kn === "string") { 
	        k1 = kn = "periodic";
	    }
	    // Build sparse tridiagonal system
	    var T = [[],[],[]];
	    switch(typeof k1) {
	    case "undefined":
	        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);
	        T[0].push(0,0);
	        T[1].push(0,1);
	        T[2].push(2/dx[0],1/dx[0]);
	        break;
	    case "string":
	        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));
	        T[0].push(0,0,0);
	        T[1].push(n-2,0,1);
	        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);
	        break;
	    default:
	        b[0] = k1;
	        T[0].push(0);
	        T[1].push(0);
	        T[2].push(1);
	        break;
	    }
	    for(i=1;i<n-1;i++) {
	        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));
	        T[0].push(i,i,i);
	        T[1].push(i-1,i,i+1);
	        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);
	    }
	    switch(typeof kn) {
	    case "undefined":
	        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);
	        T[0].push(n-1,n-1);
	        T[1].push(n-2,n-1);
	        T[2].push(1/dx[n-2],2/dx[n-2]);
	        break;
	    case "string":
	        T[1][T[1].length-1] = 0;
	        break;
	    default:
	        b[n-1] = kn;
	        T[0].push(n-1);
	        T[1].push(n-1);
	        T[2].push(1);
	        break;
	    }
	    if(typeof b[0] !== "number") b = numeric.transpose(b);
	    else b = [b];
	    var k = Array(b.length);
	    if(typeof k1 === "string") {
	        for(i=k.length-1;i!==-1;--i) {
	            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);
	            k[i][n-1] = k[i][0];
	        }
	    } else {
	        for(i=k.length-1;i!==-1;--i) {
	            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);
	        }
	    }
	    if(typeof y[0] === "number") k = k[0];
	    else k = numeric.transpose(k);
	    return new numeric.Spline(x,y,y,k,k);
	};

	// 8. FFT
	numeric.fftpow2 = function fftpow2(x,y) {
	    var n = x.length;
	    if(n === 1) return;
	    var cos = Math.cos, sin = Math.sin, i,j;
	    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
	    j = n/2;
	    for(i=n-1;i!==-1;--i) {
	        --j;
	        xo[j] = x[i];
	        yo[j] = y[i];
	        --i;
	        xe[j] = x[i];
	        ye[j] = y[i];
	    }
	    fftpow2(xe,ye);
	    fftpow2(xo,yo);
	    j = n/2;
	    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
	    for(i=n-1;i!==-1;--i) {
	        --j;
	        if(j === -1) j = n/2-1;
	        t = k*i;
	        ci = cos(t);
	        si = sin(t);
	        x[i] = xe[j] + ci*xo[j] - si*yo[j];
	        y[i] = ye[j] + ci*yo[j] + si*xo[j];
	    }
	};
	numeric._ifftpow2 = function _ifftpow2(x,y) {
	    var n = x.length;
	    if(n === 1) return;
	    var cos = Math.cos, sin = Math.sin, i,j;
	    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
	    j = n/2;
	    for(i=n-1;i!==-1;--i) {
	        --j;
	        xo[j] = x[i];
	        yo[j] = y[i];
	        --i;
	        xe[j] = x[i];
	        ye[j] = y[i];
	    }
	    _ifftpow2(xe,ye);
	    _ifftpow2(xo,yo);
	    j = n/2;
	    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
	    for(i=n-1;i!==-1;--i) {
	        --j;
	        if(j === -1) j = n/2-1;
	        t = k*i;
	        ci = cos(t);
	        si = sin(t);
	        x[i] = xe[j] + ci*xo[j] - si*yo[j];
	        y[i] = ye[j] + ci*yo[j] + si*xo[j];
	    }
	};
	numeric.ifftpow2 = function ifftpow2(x,y) {
	    numeric._ifftpow2(x,y);
	    numeric.diveq(x,x.length);
	    numeric.diveq(y,y.length);
	};
	numeric.convpow2 = function convpow2(ax,ay,bx,by) {
	    numeric.fftpow2(ax,ay);
	    numeric.fftpow2(bx,by);
	    var i,n = ax.length,axi,bxi,ayi,byi;
	    for(i=n-1;i!==-1;--i) {
	        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];
	        ax[i] = axi*bxi-ayi*byi;
	        ay[i] = axi*byi+ayi*bxi;
	    }
	    numeric.ifftpow2(ax,ay);
	};
	numeric.T.prototype.fft = function fft() {
	    var x = this.x, y = this.y;
	    var n = x.length, log = Math.log, log2 = log(2),
	        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
	    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
	    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;
	    var a = numeric.rep([m],0), b = numeric.rep([m],0);
	    for(k=0;k<n;k++) a[k] = x[k];
	    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
	    cx[0] = 1;
	    for(k=1;k<=m/2;k++) {
	        t = c*k*k;
	        cx[k] = cos(t);
	        cy[k] = sin(t);
	        cx[m-k] = cos(t);
	        cy[m-k] = sin(t);
	    }
	    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
	    X = X.mul(Y);
	    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
	    X = X.mul(Y);
	    X.x.length = n;
	    X.y.length = n;
	    return X;
	};
	numeric.T.prototype.ifft = function ifft() {
	    var x = this.x, y = this.y;
	    var n = x.length, log = Math.log, log2 = log(2),
	        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
	    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
	    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;
	    var a = numeric.rep([m],0), b = numeric.rep([m],0);
	    for(k=0;k<n;k++) a[k] = x[k];
	    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
	    cx[0] = 1;
	    for(k=1;k<=m/2;k++) {
	        t = c*k*k;
	        cx[k] = cos(t);
	        cy[k] = sin(t);
	        cx[m-k] = cos(t);
	        cy[m-k] = sin(t);
	    }
	    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
	    X = X.mul(Y);
	    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
	    X = X.mul(Y);
	    X.x.length = n;
	    X.y.length = n;
	    return X.div(n);
	};

	//9. Unconstrained optimization
	numeric.gradient = function gradient(f,x) {
	    var n = x.length;
	    var f0 = f(x);
	    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
	    var max = Math.max;
	    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);
	    var div = numeric.div, sub = numeric.sub,errest,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;
	    var t0,t1,t2,it=0,d1,d2,N;
	    for(i=0;i<n;i++) {
	        var h = max(1e-6*f0,1e-8);
	        while(1) {
	            ++it;
	            if(it>20) { throw new Error("Numerical gradient fails"); }
	            x0[i] = x[i]+h;
	            f1 = f(x0);
	            x0[i] = x[i]-h;
	            f2 = f(x0);
	            x0[i] = x[i];
	            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }
	            J[i] = (f1-f2)/(2*h);
	            t0 = x[i]-h;
	            t1 = x[i];
	            t2 = x[i]+h;
	            d1 = (f1-f0)/h;
	            d2 = (f0-f2)/h;
	            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);
	            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);
	            if(errest>eps) { h/=16; }
	            else break;
	            }
	    }
	    return J;
	};

	numeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {
	    var grad = numeric.gradient;
	    if(typeof options === "undefined") { options = {}; }
	    if(typeof tol === "undefined") { tol = 1e-8; }
	    if(typeof gradient === "undefined") { gradient = function(x) { return grad(f,x); }; }
	    if(typeof maxit === "undefined") maxit = 1000;
	    x0 = numeric.clone(x0);
	    var n = x0.length;
	    var f0 = f(x0),f1,df0;
	    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
	    var max = Math.max, norm2 = numeric.norm2;
	    tol = max(tol,numeric.epsilon);
	    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);
	    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;
	    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;
	    var it=0,s,x1,y,Hy,ys,t,nstep;
	    var msg = "";
	    g0 = gradient(x0);
	    while(it<maxit) {
	        if(typeof callback === "function") { if(callback(it,x0,f0,g0,H1)) { msg = "Callback returned true"; break; } }
	        if(!all(isfinite(g0))) { msg = "Gradient has Infinity or NaN"; break; }
	        step = neg(dot(H1,g0));
	        if(!all(isfinite(step))) { msg = "Search direction has Infinity or NaN"; break; }
	        nstep = norm2(step);
	        if(nstep < tol) { msg="Newton step smaller than tol"; break; }
	        t = 1;
	        df0 = dot(g0,step);
	        // line search
	        x1 = x0;
	        while(it < maxit) {
	            if(t*nstep < tol) { break; }
	            s = mul(step,t);
	            x1 = add(x0,s);
	            f1 = f(x1);
	            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {
	                t *= 0.5;
	                ++it;
	                continue;
	            }
	            break;
	        }
	        if(t*nstep < tol) { msg = "Line search step size smaller than tol"; break; }
	        if(it === maxit) { msg = "maxit reached during line search"; break; }
	        g1 = gradient(x1);
	        y = sub(g1,g0);
	        ys = dot(y,s);
	        Hy = dot(H1,y);
	        H1 = sub(add(H1,
	                mul(
	                        (ys+dot(y,Hy))/(ys*ys),
	                        ten(s,s)    )),
	                div(add(ten(Hy,s),ten(s,Hy)),ys));
	        x0 = x1;
	        f0 = f1;
	        g0 = g1;
	        ++it;
	    }
	    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};
	};

	// 10. Ode solver (Dormand-Prince)
	numeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {
	    this.x = x;
	    this.y = y;
	    this.f = f;
	    this.ymid = ymid;
	    this.iterations = iterations;
	    this.events = events;
	    this.message = msg;
	};
	numeric.Dopri.prototype._at = function _at(xi,j) {
	    function sqr(x) { return x*x; }
	    var sol = this;
	    var xs = sol.x;
	    var ys = sol.y;
	    var k1 = sol.f;
	    var ymid = sol.ymid;
	    var n = xs.length;
	    var x0,x1,xh,y0,y1,yh,xi;
	    var h;
	    var c = 0.5;
	    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;
	    x0 = xs[j];
	    x1 = xs[j+1];
	    y0 = ys[j];
	    y1 = ys[j+1];
	    h  = x1-x0;
	    xh = x0+c*h;
	    yh = ymid[j];
	    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));
	    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));
	    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),
	         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),
	         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),
	         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),
	         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];
	    return add(add(add(add(mul(y0,w[0]),
	                           mul(yh,w[1])),
	                           mul(y1,w[2])),
	                           mul( p,w[3])),
	                           mul( q,w[4]));
	};
	numeric.Dopri.prototype.at = function at(x) {
	    var i,j,k,floor = Math.floor;
	    if(typeof x !== "number") {
	        var n = x.length, ret = Array(n);
	        for(i=n-1;i!==-1;--i) {
	            ret[i] = this.at(x[i]);
	        }
	        return ret;
	    }
	    var x0 = this.x;
	    i = 0; j = x0.length-1;
	    while(j-i>1) {
	        k = floor(0.5*(i+j));
	        if(x0[k] <= x) i = k;
	        else j = k;
	    }
	    return this._at(x,i);
	};

	numeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {
	    if(typeof tol === "undefined") { tol = 1e-6; }
	    if(typeof maxit === "undefined") { maxit = 1000; }
	    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];
	    var A2 = 1/5;
	    var A3 = [3/40,9/40];
	    var A4 = [44/45,-56/15,32/9];
	    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];
	    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];
	    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];
	    var bm = [0.5*6025192743/30085553152,
	              0,
	              0.5*51252292925/65400821598,
	              0.5*-2691868925/45128329728,
	              0.5*187940372067/1594534317056,
	              0.5*-1776094331/19743644256,
	              0.5*11237099/235043384];
	    var c = [1/5,3/10,4/5,8/9,1,1];
	    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];
	    var i = 0,er,j;
	    var h = (x1-x0)/10;
	    var it = 0;
	    var add = numeric.add, mul = numeric.mul, y1,erinf;
	    var min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;
	    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;
	    var e0, e1, ev;
	    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,"");
	    if(typeof event === "function") e0 = event(x0,y0);
	    while(x0<x1 && it<maxit) {
	        ++it;
	        if(x0+h>x1) h = x1-x0;
	        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));
	        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));
	        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));
	        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));
	        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));
	        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));
	        k7 = f(x0+h,y1);
	        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));
	        if(typeof er === "number") erinf = abs(er);
	        else erinf = norminf(er);
	        if(erinf > tol) { // reject
	            h = 0.2*h*pow(tol/erinf,0.25);
	            if(x0+h === x0) {
	                ret.msg = "Step size became too small";
	                break;
	            }
	            continue;
	        }
	        ymid[i] = add(add(add(add(add(add(y0,
	                mul(k1[i],h*bm[0])),
	                mul(k3   ,h*bm[2])),
	                mul(k4   ,h*bm[3])),
	                mul(k5   ,h*bm[4])),
	                mul(k6   ,h*bm[5])),
	                mul(k7   ,h*bm[6]));
	        ++i;
	        xs[i] = x0+h;
	        ys[i] = y1;
	        k1[i] = k7;
	        if(typeof event === "function") {
	            var yi,xl = x0,xr = x0+0.5*h,xi;
	            e1 = event(xr,ymid[i-1]);
	            ev = and(lt(e0,0),lt(0,e1));
	            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }
	            if(any(ev)) {
	                var en,ei;
	                var side=0, sl = 1.0, sr = 1.0;
	                while(1) {
	                    if(typeof e0 === "number") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);
	                    else {
	                        xi = xr;
	                        for(j=e0.length-1;j!==-1;--j) {
	                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));
	                        }
	                    }
	                    if(xi <= xl || xi >= xr) break;
	                    yi = ret._at(xi, i-1);
	                    ei = event(xi,yi);
	                    en = and(lt(e0,0),lt(0,ei));
	                    if(any(en)) {
	                        xr = xi;
	                        e1 = ei;
	                        ev = en;
	                        sr = 1.0;
	                        if(side === -1) sl *= 0.5;
	                        else sl = 1.0;
	                        side = -1;
	                    } else {
	                        xl = xi;
	                        e0 = ei;
	                        sl = 1.0;
	                        if(side === 1) sr *= 0.5;
	                        else sr = 1.0;
	                        side = 1;
	                    }
	                }
	                y1 = ret._at(0.5*(x0+xi),i-1);
	                ret.f[i] = f(xi,yi);
	                ret.x[i] = xi;
	                ret.y[i] = yi;
	                ret.ymid[i-1] = y1;
	                ret.events = ev;
	                ret.iterations = it;
	                return ret;
	            }
	        }
	        x0 += h;
	        y0 = y1;
	        e0 = e1;
	        h = min(0.8*h*pow(tol/erinf,0.25),4*h);
	    }
	    ret.iterations = it;
	    return ret;
	};

	// 11. Ax = b
	numeric.LU = function(A, fast) {
	  fast = fast || false;

	  var abs = Math.abs;
	  var i, j, k, absAjk, Akk, Ak, Pk, Ai;
	  var max;
	  var n = A.length, n1 = n-1;
	  var P = new Array(n);
	  if(!fast) A = numeric.clone(A);

	  for (k = 0; k < n; ++k) {
	    Pk = k;
	    Ak = A[k];
	    max = abs(Ak[k]);
	    for (j = k + 1; j < n; ++j) {
	      absAjk = abs(A[j][k]);
	      if (max < absAjk) {
	        max = absAjk;
	        Pk = j;
	      }
	    }
	    P[k] = Pk;

	    if (Pk != k) {
	      A[k] = A[Pk];
	      A[Pk] = Ak;
	      Ak = A[k];
	    }

	    Akk = Ak[k];

	    for (i = k + 1; i < n; ++i) {
	      A[i][k] /= Akk;
	    }

	    for (i = k + 1; i < n; ++i) {
	      Ai = A[i];
	      for (j = k + 1; j < n1; ++j) {
	        Ai[j] -= Ai[k] * Ak[j];
	        ++j;
	        Ai[j] -= Ai[k] * Ak[j];
	      }
	      if(j===n1) Ai[j] -= Ai[k] * Ak[j];
	    }
	  }

	  return {
	    LU: A,
	    P:  P
	  };
	};

	numeric.LUsolve = function LUsolve(LUP, b) {
	  var i, j;
	  var LU = LUP.LU;
	  var n   = LU.length;
	  var x = numeric.clone(b);
	  var P   = LUP.P;
	  var Pi, LUi, tmp;

	  for (i=n-1;i!==-1;--i) x[i] = b[i];
	  for (i = 0; i < n; ++i) {
	    Pi = P[i];
	    if (P[i] !== i) {
	      tmp = x[i];
	      x[i] = x[Pi];
	      x[Pi] = tmp;
	    }

	    LUi = LU[i];
	    for (j = 0; j < i; ++j) {
	      x[i] -= x[j] * LUi[j];
	    }
	  }

	  for (i = n - 1; i >= 0; --i) {
	    LUi = LU[i];
	    for (j = i + 1; j < n; ++j) {
	      x[i] -= x[j] * LUi[j];
	    }

	    x[i] /= LUi[i];
	  }

	  return x;
	};

	numeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); };

	// 12. Linear programming
	numeric.echelonize = function echelonize(A) {
	    var s = numeric.dim(A), m = s[0], n = s[1];
	    var I = numeric.identity(m);
	    var P = Array(m);
	    var i,j,k,l,Ai,Ii,Z,a;
	    var abs = Math.abs;
	    var diveq = numeric.diveq;
	    A = numeric.clone(A);
	    for(i=0;i<m;++i) {
	        k = 0;
	        Ai = A[i];
	        Ii = I[i];
	        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;
	        P[i] = k;
	        diveq(Ii,Ai[k]);
	        diveq(Ai,Ai[k]);
	        for(j=0;j<m;++j) if(j!==i) {
	            Z = A[j]; a = Z[k];
	            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;
	            Z = I[j];
	            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;
	        }
	    }
	    return {I:I, A:A, P:P};
	};

	numeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {
	    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
	    var m = c.length, n = b.length,y;
	    var unbounded = false, i0=0;
	    var alpha = 1.0;
	    var AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;
	    var muleq = numeric.muleq;
	    var norm = numeric.norminf, any = numeric.any,min = Math.min;
	    var all = numeric.all, gt = numeric.gt;
	    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;
	    var solve = numeric.solve, z = sub(b,dot(A,x)),count;
	    var dotcc = dot(c,c);
	    var g;
	    for(count=i0;count<maxit;++count) {
	        var i,d;
	        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);
	        var A1 = transpose(A0);
	        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));
	        alpha = 0.25*abs(dotcc/dot(c,p));
	        var a1 = 100*sqrt(dotcc/dot(p,p));
	        if(!isFinite(alpha) || alpha>a1) alpha = a1;
	        g = add(c,mul(alpha,p));
	        H = dot(A1,A0);
	        for(i=m-1;i!==-1;--i) H[i][i] += 1;
	        d = solve(H,div(g,alpha),true);
	        var t0 = div(z,dot(A,d));
	        var t = 1.0;
	        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);
	        y = sub(x,mul(d,t));
	        z = sub(b,dot(A,y));
	        if(!all(gt(z,0))) return { solution: x, message: "", iterations: count };
	        x = y;
	        if(alpha<tol) return { solution: y, message: "", iterations: count };
	        if(flag) {
	            var s = dot(c,g), Ag = dot(A,g);
	            unbounded = true;
	            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }
	        } else {
	            if(x[m-1]>=0) unbounded = false;
	            else unbounded = true;
	        }
	        if(unbounded) return { solution: y, message: "Unbounded", iterations: count };
	    }
	    return { solution: x, message: "maximum iteration count exceeded", iterations:count };
	};

	numeric._solveLP = function _solveLP(c,A,b,tol,maxit) {
	    var m = c.length, n = b.length,y;
	    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
	    var c0 = numeric.rep([m],0).concat([1]);
	    var J = numeric.rep([n,1],-1);
	    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);
	    var b0 = b;
	    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);
	    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);
	    var x = numeric.clone(x0.solution);
	    x.length = m;
	    var foo = numeric.inf(sub(b,dot(A,x)));
	    if(foo<0) { return { solution: NaN, message: "Infeasible", iterations: x0.iterations }; }
	    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);
	    ret.iterations += x0.iterations;
	    return ret;
	};

	numeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {
	    if(typeof maxit === "undefined") maxit = 1000;
	    if(typeof tol === "undefined") tol = numeric.epsilon;
	    if(typeof Aeq === "undefined") return numeric._solveLP(c,A,b,tol,maxit);
	    var m = Aeq.length, n = Aeq[0].length, o = A.length;
	    var B = numeric.echelonize(Aeq);
	    var flags = numeric.rep([n],0);
	    var P = B.P;
	    var Q = [];
	    var i;
	    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;
	    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);
	    var g = numeric.getRange;
	    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);
	    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;
	    var A3 = dot(A1,B.I);
	    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));
	    var c1 = Array(P.length), c2 = Array(Q.length);
	    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];
	    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];
	    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));
	    var S = numeric._solveLP(c4,A4,b4,tol,maxit);
	    var x2 = S.solution;
	    if(x2!==x2) return S;
	    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));
	    var x = Array(c.length);
	    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];
	    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];
	    return { solution: x, message:S.message, iterations: S.iterations };
	};

	numeric.MPStoLP = function MPStoLP(MPS) {
	    if(MPS instanceof String) { MPS.split('\n'); }
	    var state = 0;
	    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];
	    var n = MPS.length;
	    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;
	    var name;
	    var c = [], A = [], b = [];
	    function err(e) { throw new Error('MPStoLP: '+e+'\nLine '+i+': '+MPS[i]+'\nCurrent state: '+states[state]+'\n'); }
	    for(i=0;i<n;++i) {
	        z = MPS[i];
	        var w0 = z.match(/\S*/g);
	        var w = [];
	        for(j=0;j<w0.length;++j) if(w0[j]!=="") w.push(w0[j]);
	        if(w.length === 0) continue;
	        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;
	        if(j<states.length) {
	            state = j;
	            if(j===1) { name = w[1]; }
	            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };
	            continue;
	        }
	        switch(state) {
	        case 0: case 1: err('Unexpected line');
	        case 2: 
	            switch(w[0]) {
	            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;
	            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;
	            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;
	            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;
	            default: err('Parse error '+numeric.prettyPrint(w));
	            }
	            break;
	        case 3:
	            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }
	            var p = vars[w[0]];
	            for(j=1;j<w.length;j+=2) {
	                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }
	                var q = rows[w[j]];
	                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);
	            }
	            break;
	        case 4:
	            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);
	            break;
	        case 5: /*FIXME*/ break;
	        case 6: err('Internal error');
	        }
	    }
	    err('Reached end of file without ENDATA');
	};
	// seedrandom.js version 2.0.
	// Author: David Bau 4/2/2011
	//
	// Defines a method Math.seedrandom() that, when called, substitutes
	// an explicitly seeded RC4-based algorithm for Math.random().  Also
	// supports automatic seeding from local or network sources of entropy.
	//
	// Usage:
	//
	//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
	//
	//   Math.seedrandom('yipee'); Sets Math.random to a function that is
	//                             initialized using the given explicit seed.
	//
	//   Math.seedrandom();        Sets Math.random to a function that is
	//                             seeded using the current time, dom state,
	//                             and other accumulated local entropy.
	//                             The generated seed string is returned.
	//
	//   Math.seedrandom('yowza', true);
	//                             Seeds using the given explicit seed mixed
	//                             together with accumulated entropy.
	//
	//   <script src="http://bit.ly/srandom-512"></script>
	//                             Seeds using physical random bits downloaded
	//                             from random.org.
	//
	//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
	//   </script>                 Seeds using urandom bits from call.jsonlib.com,
	//                             which is faster than random.org.
	//
	// Examples:
	//
	//   Math.seedrandom("hello");            // Use "hello" as the seed.
	//   document.write(Math.random());       // Always 0.5463663768140734
	//   document.write(Math.random());       // Always 0.43973793770592234
	//   var rng1 = Math.random;              // Remember the current prng.
	//
	//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
	//   document.write(Math.random());       // Pretty much unpredictable.
	//
	//   Math.random = rng1;                  // Continue "hello" prng sequence.
	//   document.write(Math.random());       // Always 0.554769432473455
	//
	//   Math.seedrandom(autoseed);           // Restart at the previous seed.
	//   document.write(Math.random());       // Repeat the 'unpredictable' value.
	//
	// Notes:
	//
	// Each time seedrandom('arg') is called, entropy from the passed seed
	// is accumulated in a pool to help generate future seeds for the
	// zero-argument form of Math.seedrandom, so entropy can be injected over
	// time by calling seedrandom with explicit data repeatedly.
	//
	// On speed - This javascript implementation of Math.random() is about
	// 3-10x slower than the built-in Math.random() because it is not native
	// code, but this is typically fast enough anyway.  Seeding is more expensive,
	// especially if you use auto-seeding.  Some details (timings on Chrome 4):
	//
	// Our Math.random()            - avg less than 0.002 milliseconds per call
	// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
	// seedrandom('explicit', true) - avg less than 2 milliseconds per call
	// seedrandom()                 - avg about 38 milliseconds per call
	//
	// LICENSE (BSD):
	//
	// Copyright 2010 David Bau, all rights reserved.
	//
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions are met:
	// 
	//   1. Redistributions of source code must retain the above copyright
	//      notice, this list of conditions and the following disclaimer.
	//
	//   2. Redistributions in binary form must reproduce the above copyright
	//      notice, this list of conditions and the following disclaimer in the
	//      documentation and/or other materials provided with the distribution.
	// 
	//   3. Neither the name of this module nor the names of its contributors may
	//      be used to endorse or promote products derived from this software
	//      without specific prior written permission.
	// 
	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	//
	/**
	 * All code is in an anonymous closure to keep the global namespace clean.
	 *
	 * @param {number=} overflow 
	 * @param {number=} startdenom
	 */

	// Patched by Seb so that seedrandom.js does not pollute the Math object.
	// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
	// slower.
	numeric.seedrandom = { pow:Math.pow, random:Math.random };

	(function (pool, math, width, chunks, significance, overflow, startdenom) {


	//
	// seedrandom()
	// This is the seedrandom function described above.
	//
	math['seedrandom'] = function seedrandom(seed, use_entropy) {
	  var key = [];
	  var arc4;

	  // Flatten the seed string or build one from local entropy if needed.
	  seed = mixkey(flatten(
	    use_entropy ? [seed, pool] :
	    arguments.length ? seed :
	    [new Date().getTime(), pool, window], 3), key);

	  // Use the seed to initialize an ARC4 generator.
	  arc4 = new ARC4(key);

	  // Mix the randomness into accumulated entropy.
	  mixkey(arc4.S, pool);

	  // Override Math.random

	  // This function returns a random double in [0, 1) that contains
	  // randomness in every bit of the mantissa of the IEEE 754 value.

	  math['random'] = function random() {  // Closure to return a random double:
	    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
	    var d = startdenom;                 //   and denominator d = 2 ^ 48.
	    var x = 0;                          //   and no 'extra last byte'.
	    while (n < significance) {          // Fill up all significant digits by
	      n = (n + x) * width;              //   shifting numerator and
	      d *= width;                       //   denominator and generating a
	      x = arc4.g(1);                    //   new least-significant-byte.
	    }
	    while (n >= overflow) {             // To avoid rounding up, before adding
	      n /= 2;                           //   last byte, shift everything
	      d /= 2;                           //   right using integer math until
	      x >>>= 1;                         //   we have exactly the desired bits.
	    }
	    return (n + x) / d;                 // Form the number within [0, 1).
	  };

	  // Return the seed that was used
	  return seed;
	};

	//
	// ARC4
	//
	// An ARC4 implementation.  The constructor takes a key in the form of
	// an array of at most (width) integers that should be 0 <= x < (width).
	//
	// The g(count) method returns a pseudorandom integer that concatenates
	// the next (count) outputs from ARC4.  Its return value is a number x
	// that is in the range 0 <= x < (width ^ count).
	//
	/** @constructor */
	function ARC4(key) {
	  var t, u, me = this, keylen = key.length;
	  var i = 0, j = me.i = me.j = me.m = 0;
	  me.S = [];
	  me.c = [];

	  // The empty key [] is treated as [0].
	  if (!keylen) { key = [keylen++]; }

	  // Set up S using the standard key scheduling algorithm.
	  while (i < width) { me.S[i] = i++; }
	  for (i = 0; i < width; i++) {
	    t = me.S[i];
	    j = lowbits(j + t + key[i % keylen]);
	    u = me.S[j];
	    me.S[i] = u;
	    me.S[j] = t;
	  }

	  // The "g" method returns the next (count) outputs as one number.
	  me.g = function getnext(count) {
	    var s = me.S;
	    var i = lowbits(me.i + 1); var t = s[i];
	    var j = lowbits(me.j + t); var u = s[j];
	    s[i] = u;
	    s[j] = t;
	    var r = s[lowbits(t + u)];
	    while (--count) {
	      i = lowbits(i + 1); t = s[i];
	      j = lowbits(j + t); u = s[j];
	      s[i] = u;
	      s[j] = t;
	      r = r * width + s[lowbits(t + u)];
	    }
	    me.i = i;
	    me.j = j;
	    return r;
	  };
	  // For robust unpredictability discard an initial batch of values.
	  // See http://www.rsa.com/rsalabs/node.asp?id=2009
	  me.g(width);
	}

	//
	// flatten()
	// Converts an object tree to nested arrays of strings.
	//
	/** @param {Object=} result 
	  * @param {string=} prop
	  * @param {string=} typ */
	function flatten(obj, depth, result, prop, typ) {
	  result = [];
	  typ = typeof(obj);
	  if (depth && typ == 'object') {
	    for (prop in obj) {
	      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
	        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
	      }
	    }
	  }
	  return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
	}

	//
	// mixkey()
	// Mixes a string seed into a key that is an array of integers, and
	// returns a shortened string seed that is equivalent to the result key.
	//
	/** @param {number=} smear 
	  * @param {number=} j */
	function mixkey(seed, key, smear, j) {
	  seed += '';                         // Ensure the seed is a string
	  smear = 0;
	  for (j = 0; j < seed.length; j++) {
	    key[lowbits(j)] =
	      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
	  }
	  seed = '';
	  for (j in key) { seed += String.fromCharCode(key[j]); }
	  return seed;
	}

	//
	// lowbits()
	// A quick "n mod width" for width a power of 2.
	//
	function lowbits(n) { return n & (width - 1); }

	//
	// The following constants are related to IEEE 754 limits.
	//
	startdenom = math.pow(width, chunks);
	significance = math.pow(2, significance);
	overflow = significance * 2;

	//
	// When seedrandom.js is loaded, we immediately mix a few bits
	// from the built-in RNG into the entropy pool.  Because we do
	// not want to intefere with determinstic PRNG state later,
	// seedrandom will not call math.random on its own again after
	// initialization.
	//
	mixkey(math.random(), pool);

	// End anonymous scope, and pass initial values.
	}(
	  [],   // pool: entropy pool starts empty
	  numeric.seedrandom, // math: package containing random, pow, and seedrandom
	  256,  // width: each RC4 output is 0 <= x < 256
	  6,    // chunks: at least six RC4 outputs for each double
	  52    // significance: there are 52 significant digits in a double
	  ));
	/* This file is a slightly modified version of quadprog.js from Alberto Santini.
	 * It has been slightly modified by SÃ©bastien Loisel to make sure that it handles
	 * 0-based Arrays instead of 1-based Arrays.
	 * License is in resources/LICENSE.quadprog */
	(function(exports) {

	function base0to1(A) {
	    if(typeof A !== "object") { return A; }
	    var ret = [], i,n=A.length;
	    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);
	    return ret;
	}
	function base1to0(A) {
	    if(typeof A !== "object") { return A; }
	    var ret = [], i,n=A.length;
	    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);
	    return ret;
	}

	function dpori(a, lda, n) {
	    var i, j, k, kp1, t;

	    for (k = 1; k <= n; k = k + 1) {
	        a[k][k] = 1 / a[k][k];
	        t = -a[k][k];
	        //~ dscal(k - 1, t, a[1][k], 1);
	        for (i = 1; i < k; i = i + 1) {
	            a[i][k] = t * a[i][k];
	        }

	        kp1 = k + 1;
	        if (n < kp1) {
	            break;
	        }
	        for (j = kp1; j <= n; j = j + 1) {
	            t = a[k][j];
	            a[k][j] = 0;
	            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);
	            for (i = 1; i <= k; i = i + 1) {
	                a[i][j] = a[i][j] + (t * a[i][k]);
	            }
	        }
	    }

	}

	function dposl(a, lda, n, b) {
	    var i, k, kb, t;

	    for (k = 1; k <= n; k = k + 1) {
	        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
	        t = 0;
	        for (i = 1; i < k; i = i + 1) {
	            t = t + (a[i][k] * b[i]);
	        }

	        b[k] = (b[k] - t) / a[k][k];
	    }

	    for (kb = 1; kb <= n; kb = kb + 1) {
	        k = n + 1 - kb;
	        b[k] = b[k] / a[k][k];
	        t = -b[k];
	        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);
	        for (i = 1; i < k; i = i + 1) {
	            b[i] = b[i] + (t * a[i][k]);
	        }
	    }
	}

	function dpofa(a, lda, n, info) {
	    var i, j, jm1, k, t, s;

	    for (j = 1; j <= n; j = j + 1) {
	        info[1] = j;
	        s = 0;
	        jm1 = j - 1;
	        if (jm1 < 1) {
	            s = a[j][j] - s;
	            if (s <= 0) {
	                break;
	            }
	            a[j][j] = Math.sqrt(s);
	        } else {
	            for (k = 1; k <= jm1; k = k + 1) {
	                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
	                t = a[k][j];
	                for (i = 1; i < k; i = i + 1) {
	                    t = t - (a[i][j] * a[i][k]);
	                }
	                t = t / a[k][k];
	                a[k][j] = t;
	                s = s + t * t;
	            }
	            s = a[j][j] - s;
	            if (s <= 0) {
	                break;
	            }
	            a[j][j] = Math.sqrt(s);
	        }
	        info[1] = 0;
	    }
	}

	function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,
	    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {

	    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,
	        temp, sum, t1, tt, gc, gs, nu,
	        t1inf, t2min,
	        vsmall, tmpa, tmpb,
	        go;

	    r = Math.min(n, q);
	    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;

	    vsmall = 1.0e-60;
	    do {
	        vsmall = vsmall + vsmall;
	        tmpa = 1 + 0.1 * vsmall;
	        tmpb = 1 + 0.2 * vsmall;
	    } while (tmpa <= 1 || tmpb <= 1);

	    for (i = 1; i <= n; i = i + 1) {
	        work[i] = dvec[i];
	    }
	    for (i = n + 1; i <= l; i = i + 1) {
	        work[i] = 0;
	    }
	    for (i = 1; i <= q; i = i + 1) {
	        iact[i] = 0;
	    }

	    info = [];

	    if (ierr[1] === 0) {
	        dpofa(dmat, fddmat, n, info);
	        if (info[1] !== 0) {
	            ierr[1] = 2;
	            return;
	        }
	        dposl(dmat, fddmat, n, dvec);
	        dpori(dmat, fddmat, n);
	    } else {
	        for (j = 1; j <= n; j = j + 1) {
	            sol[j] = 0;
	            for (i = 1; i <= j; i = i + 1) {
	                sol[j] = sol[j] + dmat[i][j] * dvec[i];
	            }
	        }
	        for (j = 1; j <= n; j = j + 1) {
	            dvec[j] = 0;
	            for (i = j; i <= n; i = i + 1) {
	                dvec[j] = dvec[j] + dmat[j][i] * sol[i];
	            }
	        }
	    }

	    crval[1] = 0;
	    for (j = 1; j <= n; j = j + 1) {
	        sol[j] = dvec[j];
	        crval[1] = crval[1] + work[j] * sol[j];
	        work[j] = 0;
	        for (i = j + 1; i <= n; i = i + 1) {
	            dmat[i][j] = 0;
	        }
	    }
	    crval[1] = -crval[1] / 2;
	    ierr[1] = 0;

	    iwzv = n;
	    iwrv = iwzv + n;
	    iwuv = iwrv + r;
	    iwrm = iwuv + r + 1;
	    iwsv = iwrm + (r * (r + 1)) / 2;
	    iwnbv = iwsv + q;

	    for (i = 1; i <= q; i = i + 1) {
	        sum = 0;
	        for (j = 1; j <= n; j = j + 1) {
	            sum = sum + amat[j][i] * amat[j][i];
	        }
	        work[iwnbv + i] = Math.sqrt(sum);
	    }
	    nact = 0;
	    iter[1] = 0;
	    iter[2] = 0;

	    function fn_goto_50() {
	        iter[1] = iter[1] + 1;

	        l = iwsv;
	        for (i = 1; i <= q; i = i + 1) {
	            l = l + 1;
	            sum = -bvec[i];
	            for (j = 1; j <= n; j = j + 1) {
	                sum = sum + amat[j][i] * sol[j];
	            }
	            if (Math.abs(sum) < vsmall) {
	                sum = 0;
	            }
	            if (i > meq) {
	                work[l] = sum;
	            } else {
	                work[l] = -Math.abs(sum);
	                if (sum > 0) {
	                    for (j = 1; j <= n; j = j + 1) {
	                        amat[j][i] = -amat[j][i];
	                    }
	                    bvec[i] = -bvec[i];
	                }
	            }
	        }

	        for (i = 1; i <= nact; i = i + 1) {
	            work[iwsv + iact[i]] = 0;
	        }

	        nvl = 0;
	        temp = 0;
	        for (i = 1; i <= q; i = i + 1) {
	            if (work[iwsv + i] < temp * work[iwnbv + i]) {
	                nvl = i;
	                temp = work[iwsv + i] / work[iwnbv + i];
	            }
	        }
	        if (nvl === 0) {
	            return 999;
	        }

	        return 0;
	    }

	    function fn_goto_55() {
	        for (i = 1; i <= n; i = i + 1) {
	            sum = 0;
	            for (j = 1; j <= n; j = j + 1) {
	                sum = sum + dmat[j][i] * amat[j][nvl];
	            }
	            work[i] = sum;
	        }

	        l1 = iwzv;
	        for (i = 1; i <= n; i = i + 1) {
	            work[l1 + i] = 0;
	        }
	        for (j = nact + 1; j <= n; j = j + 1) {
	            for (i = 1; i <= n; i = i + 1) {
	                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
	            }
	        }

	        t1inf = true;
	        for (i = nact; i >= 1; i = i - 1) {
	            sum = work[i];
	            l = iwrm + (i * (i + 3)) / 2;
	            l1 = l - i;
	            for (j = i + 1; j <= nact; j = j + 1) {
	                sum = sum - work[l] * work[iwrv + j];
	                l = l + j;
	            }
	            sum = sum / work[l1];
	            work[iwrv + i] = sum;
	            if (iact[i] < meq) {
	                // continue;
	                break;
	            }
	            if (sum < 0) {
	                // continue;
	                break;
	            }
	            t1inf = false;
	            it1 = i;
	        }

	        if (!t1inf) {
	            t1 = work[iwuv + it1] / work[iwrv + it1];
	            for (i = 1; i <= nact; i = i + 1) {
	                if (iact[i] < meq) {
	                    // continue;
	                    break;
	                }
	                if (work[iwrv + i] < 0) {
	                    // continue;
	                    break;
	                }
	                temp = work[iwuv + i] / work[iwrv + i];
	                if (temp < t1) {
	                    t1 = temp;
	                    it1 = i;
	                }
	            }
	        }

	        sum = 0;
	        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
	            sum = sum + work[i] * work[i];
	        }
	        if (Math.abs(sum) <= vsmall) {
	            if (t1inf) {
	                ierr[1] = 1;
	                // GOTO 999
	                return 999;
	            } else {
	                for (i = 1; i <= nact; i = i + 1) {
	                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
	                }
	                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;
	                // GOTO 700
	                return 700;
	            }
	        } else {
	            sum = 0;
	            for (i = 1; i <= n; i = i + 1) {
	                sum = sum + work[iwzv + i] * amat[i][nvl];
	            }
	            tt = -work[iwsv + nvl] / sum;
	            t2min = true;
	            if (!t1inf) {
	                if (t1 < tt) {
	                    tt = t1;
	                    t2min = false;
	                }
	            }

	            for (i = 1; i <= n; i = i + 1) {
	                sol[i] = sol[i] + tt * work[iwzv + i];
	                if (Math.abs(sol[i]) < vsmall) {
	                    sol[i] = 0;
	                }
	            }

	            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);
	            for (i = 1; i <= nact; i = i + 1) {
	                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
	            }
	            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

	            if (t2min) {
	                nact = nact + 1;
	                iact[nact] = nvl;

	                l = iwrm + ((nact - 1) * nact) / 2 + 1;
	                for (i = 1; i <= nact - 1; i = i + 1) {
	                    work[l] = work[i];
	                    l = l + 1;
	                }

	                if (nact === n) {
	                    work[l] = work[n];
	                } else {
	                    for (i = n; i >= nact + 1; i = i - 1) {
	                        if (work[i] === 0) {
	                            // continue;
	                            break;
	                        }
	                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
	                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));
	                        if (work[i - 1] >= 0) {
	                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	                        } else {
	                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	                        }
	                        gc = work[i - 1] / temp;
	                        gs = work[i] / temp;

	                        if (gc === 1) {
	                            // continue;
	                            break;
	                        }
	                        if (gc === 0) {
	                            work[i - 1] = gs * temp;
	                            for (j = 1; j <= n; j = j + 1) {
	                                temp = dmat[j][i - 1];
	                                dmat[j][i - 1] = dmat[j][i];
	                                dmat[j][i] = temp;
	                            }
	                        } else {
	                            work[i - 1] = temp;
	                            nu = gs / (1 + gc);
	                            for (j = 1; j <= n; j = j + 1) {
	                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
	                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
	                                dmat[j][i - 1] = temp;

	                            }
	                        }
	                    }
	                    work[l] = work[nact];
	                }
	            } else {
	                sum = -bvec[nvl];
	                for (j = 1; j <= n; j = j + 1) {
	                    sum = sum + sol[j] * amat[j][nvl];
	                }
	                if (nvl > meq) {
	                    work[iwsv + nvl] = sum;
	                } else {
	                    work[iwsv + nvl] = -Math.abs(sum);
	                    if (sum > 0) {
	                        for (j = 1; j <= n; j = j + 1) {
	                            amat[j][nvl] = -amat[j][nvl];
	                        }
	                        bvec[nvl] = -bvec[nvl];
	                    }
	                }
	                // GOTO 700
	                return 700;
	            }
	        }

	        return 0;
	    }

	    function fn_goto_797() {
	        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;
	        l1 = l + it1;
	        if (work[l1] === 0) {
	            // GOTO 798
	            return 798;
	        }
	        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
	        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
	        if (work[l1 - 1] >= 0) {
	            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	        } else {
	            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	        }
	        gc = work[l1 - 1] / temp;
	        gs = work[l1] / temp;

	        if (gc === 1) {
	            // GOTO 798
	            return 798;
	        }
	        if (gc === 0) {
	            for (i = it1 + 1; i <= nact; i = i + 1) {
	                temp = work[l1 - 1];
	                work[l1 - 1] = work[l1];
	                work[l1] = temp;
	                l1 = l1 + i;
	            }
	            for (i = 1; i <= n; i = i + 1) {
	                temp = dmat[i][it1];
	                dmat[i][it1] = dmat[i][it1 + 1];
	                dmat[i][it1 + 1] = temp;
	            }
	        } else {
	            nu = gs / (1 + gc);
	            for (i = it1 + 1; i <= nact; i = i + 1) {
	                temp = gc * work[l1 - 1] + gs * work[l1];
	                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
	                work[l1 - 1] = temp;
	                l1 = l1 + i;
	            }
	            for (i = 1; i <= n; i = i + 1) {
	                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
	                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
	                dmat[i][it1] = temp;
	            }
	        }

	        return 0;
	    }

	    function fn_goto_798() {
	        l1 = l - it1;
	        for (i = 1; i <= it1; i = i + 1) {
	            work[l1] = work[l];
	            l = l + 1;
	            l1 = l1 + 1;
	        }

	        work[iwuv + it1] = work[iwuv + it1 + 1];
	        iact[it1] = iact[it1 + 1];
	        it1 = it1 + 1;
	        if (it1 < nact) {
	            // GOTO 797
	            return 797;
	        }

	        return 0;
	    }

	    function fn_goto_799() {
	        work[iwuv + nact] = work[iwuv + nact + 1];
	        work[iwuv + nact + 1] = 0;
	        iact[nact] = 0;
	        nact = nact - 1;
	        iter[2] = iter[2] + 1;

	        return 0;
	    }

	    go = 0;
	    while (true) {
	        go = fn_goto_50();
	        if (go === 999) {
	            return;
	        }
	        while (true) {
	            go = fn_goto_55();
	            if (go === 0) {
	                break;
	            }
	            if (go === 999) {
	                return;
	            }
	            if (go === 700) {
	                if (it1 === nact) {
	                    fn_goto_799();
	                } else {
	                    while (true) {
	                        fn_goto_797();
	                        go = fn_goto_798();
	                        if (go !== 797) {
	                            break;
	                        }
	                    }
	                    fn_goto_799();
	                }
	            }
	        }
	    }

	}

	function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
	    Dmat = base0to1(Dmat);
	    dvec = base0to1(dvec);
	    Amat = base0to1(Amat);
	    var i, n, q,
	        nact, r,
	        crval = [], iact = [], sol = [], work = [], iter = [],
	        message;

	    meq = meq || 0;
	    factorized = factorized ? base0to1(factorized) : [undefined, 0];
	    bvec = bvec ? base0to1(bvec) : [];

	    // In Fortran the array index starts from 1
	    n = Dmat.length - 1;
	    q = Amat[1].length - 1;

	    if (!bvec) {
	        for (i = 1; i <= q; i = i + 1) {
	            bvec[i] = 0;
	        }
	    }
	    for (i = 1; i <= q; i = i + 1) {
	        iact[i] = 0;
	    }
	    nact = 0;
	    r = Math.min(n, q);
	    for (i = 1; i <= n; i = i + 1) {
	        sol[i] = 0;
	    }
	    crval[1] = 0;
	    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {
	        work[i] = 0;
	    }
	    for (i = 1; i <= 2; i = i + 1) {
	        iter[i] = 0;
	    }

	    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,
	        bvec, n, q, meq, iact, nact, iter, work, factorized);

	    message = "";
	    if (factorized[1] === 1) {
	        message = "constraints are inconsistent, no solution!";
	    }
	    if (factorized[1] === 2) {
	        message = "matrix D in quadratic function is not positive definite!";
	    }

	    return {
	        solution: base1to0(sol),
	        value: base1to0(crval),
	        unconstrained_solution: base1to0(dvec),
	        iterations: base1to0(iter),
	        iact: base1to0(iact),
	        message: message
	    };
	}
	exports.solveQP = solveQP;
	}(numeric));
	/*
	Shanti Rao sent me this routine by private email. I had to modify it
	slightly to work on Arrays instead of using a Matrix object.
	It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
	*/

	numeric.svd= function svd(A) {
	    var temp;
	//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)
		var prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec
		var tolerance= 1.e-64/prec;
		var itmax= 50;
		var c=0;
		var i=0;
		var j=0;
		var k=0;
		var l=0;
		
		var u= numeric.clone(A);
		var m= u.length;
		
		var n= u[0].length;
		
		if (m < n) throw "Need more rows than columns"
		
		var e = new Array(n);
		var q = new Array(n);
		for (i=0; i<n; i++) e[i] = q[i] = 0.0;
		var v = numeric.rep([n,n],0);
	//	v.zero();
		
	 	function pythag(a,b)
	 	{
			a = Math.abs(a);
			b = Math.abs(b);
			if (a > b)
				return a*Math.sqrt(1.0+(b*b/a/a))
			else if (b == 0.0) 
				return a
			return b*Math.sqrt(1.0+(a*a/b/b))
		}

		//Householder's reduction to bidiagonal form

		var f= 0.0;
		var g= 0.0;
		var h= 0.0;
		var x= 0.0;
		var y= 0.0;
		var z= 0.0;
		var s= 0.0;
		
		for (i=0; i < n; i++)
		{	
			e[i]= g;
			s= 0.0;
			l= i+1;
			for (j=i; j < m; j++) 
				s += (u[j][i]*u[j][i]);
			if (s <= tolerance)
				g= 0.0;
			else
			{	
				f= u[i][i];
				g= Math.sqrt(s);
				if (f >= 0.0) g= -g;
				h= f*g-s;
				u[i][i]=f-g;
				for (j=l; j < n; j++)
				{
					s= 0.0;
					for (k=i; k < m; k++) 
						s += u[k][i]*u[k][j];
					f= s/h;
					for (k=i; k < m; k++) 
						u[k][j]+=f*u[k][i];
				}
			}
			q[i]= g;
			s= 0.0;
			for (j=l; j < n; j++) 
				s= s + u[i][j]*u[i][j];
			if (s <= tolerance)
				g= 0.0;
			else
			{	
				f= u[i][i+1];
				g= Math.sqrt(s);
				if (f >= 0.0) g= -g;
				h= f*g - s;
				u[i][i+1] = f-g;
				for (j=l; j < n; j++) e[j]= u[i][j]/h;
				for (j=l; j < m; j++)
				{	
					s=0.0;
					for (k=l; k < n; k++) 
						s += (u[j][k]*u[i][k]);
					for (k=l; k < n; k++) 
						u[j][k]+=s*e[k];
				}	
			}
			y= Math.abs(q[i])+Math.abs(e[i]);
			if (y>x) 
				x=y;
		}
		
		// accumulation of right hand gtransformations
		for (i=n-1; i != -1; i+= -1)
		{	
			if (g != 0.0)
			{
			 	h= g*u[i][i+1];
				for (j=l; j < n; j++) 
					v[j][i]=u[i][j]/h;
				for (j=l; j < n; j++)
				{	
					s=0.0;
					for (k=l; k < n; k++) 
						s += u[i][k]*v[k][j];
					for (k=l; k < n; k++) 
						v[k][j]+=(s*v[k][i]);
				}	
			}
			for (j=l; j < n; j++)
			{
				v[i][j] = 0;
				v[j][i] = 0;
			}
			v[i][i] = 1;
			g= e[i];
			l= i;
		}
		
		// accumulation of left hand transformations
		for (i=n-1; i != -1; i+= -1)
		{	
			l= i+1;
			g= q[i];
			for (j=l; j < n; j++) 
				u[i][j] = 0;
			if (g != 0.0)
			{
				h= u[i][i]*g;
				for (j=l; j < n; j++)
				{
					s=0.0;
					for (k=l; k < m; k++) s += u[k][i]*u[k][j];
					f= s/h;
					for (k=i; k < m; k++) u[k][j]+=f*u[k][i];
				}
				for (j=i; j < m; j++) u[j][i] = u[j][i]/g;
			}
			else
				for (j=i; j < m; j++) u[j][i] = 0;
			u[i][i] += 1;
		}
		
		// diagonalization of the bidiagonal form
		prec= prec*x;
		for (k=n-1; k != -1; k+= -1)
		{
			for (var iteration=0; iteration < itmax; iteration++)
			{	// test f splitting
				var test_convergence = false;
				for (l=k; l != -1; l+= -1)
				{	
					if (Math.abs(e[l]) <= prec)
					{	test_convergence= true;
						break 
					}
					if (Math.abs(q[l-1]) <= prec)
						break 
				}
				if (!test_convergence)
				{	// cancellation of e[l] if l>0
					c= 0.0;
					s= 1.0;
					var l1= l-1;
					for (i =l; i<k+1; i++)
					{	
						f= s*e[i];
						e[i]= c*e[i];
						if (Math.abs(f) <= prec)
							break
						g= q[i];
						h= pythag(f,g);
						q[i]= h;
						c= g/h;
						s= -f/h;
						for (j=0; j < m; j++)
						{	
							y= u[j][l1];
							z= u[j][i];
							u[j][l1] =  y*c+(z*s);
							u[j][i] = -y*s+(z*c);
						} 
					}	
				}
				// test f convergence
				z= q[k];
				if (l== k)
				{	//convergence
					if (z<0.0)
					{	//q[k] is made non-negative
						q[k]= -z;
						for (j=0; j < n; j++)
							v[j][k] = -v[j][k];
					}
					break  //break out of iteration loop and move on to next k value
				}
				if (iteration >= itmax-1)
					throw 'Error: no convergence.'
				// shift from bottom 2x2 minor
				x= q[l];
				y= q[k-1];
				g= e[k-1];
				h= e[k];
				f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y);
				g= pythag(f,1.0);
				if (f < 0.0)
					f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x;
				else
					f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x;
				// next QR transformation
				c= 1.0;
				s= 1.0;
				for (i=l+1; i< k+1; i++)
				{	
					g= e[i];
					y= q[i];
					h= s*g;
					g= c*g;
					z= pythag(f,h);
					e[i-1]= z;
					c= f/z;
					s= h/z;
					f= x*c+g*s;
					g= -x*s+g*c;
					h= y*s;
					y= y*c;
					for (j=0; j < n; j++)
					{	
						x= v[j][i-1];
						z= v[j][i];
						v[j][i-1] = x*c+z*s;
						v[j][i] = -x*s+z*c;
					}
					z= pythag(f,h);
					q[i-1]= z;
					c= f/z;
					s= h/z;
					f= c*g+s*y;
					x= -s*g+c*y;
					for (j=0; j < m; j++)
					{
						y= u[j][i-1];
						z= u[j][i];
						u[j][i-1] = y*c+z*s;
						u[j][i] = -y*s+z*c;
					}
				}
				e[l]= 0.0;
				e[k]= f;
				q[k]= x;
			} 
		}
			
		//vt= transpose(v)
		//return (u,q,vt)
		for (i=0;i<q.length; i++) 
		  if (q[i] < prec) q[i] = 0;
		  
		//sort eigenvalues	
		for (i=0; i< n; i++)
		{	 
		//writeln(q)
		 for (j=i-1; j >= 0; j--)
		 {
		  if (q[j] < q[i])
		  {
		//  writeln(i,'-',j)
		   c = q[j];
		   q[j] = q[i];
		   q[i] = c;
		   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }
		   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }
	//	   u.swapCols(i,j)
	//	   v.swapCols(i,j)
		   i = j;	   
		  }
		 }	
		}
		
		return {U:u,S:q,V:v}
	};
	});

	// shim for using process in browser
	if (typeof global.setTimeout === 'function') ;
	if (typeof global.clearTimeout === 'function') ;

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	var inherits;
	if (typeof Object.create === 'function'){
	  inherits = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$1 = inherits;

	// Copyright Joyent, Inc. and other Node contributors.
	var formatRegExp = /%[sdj%]/g;
	function format$a(f) {
	  if (!isString$5(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = 0;
	      debugs[set] = function() {
	        var msg = format$a.apply(null, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean$1(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString$5(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray$5(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString$5(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber$5(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean$1(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty$5(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty$5(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray$5(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean$1(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber$5(arg) {
	  return typeof arg === 'number';
	}

	function isString$5(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer(maybeBuf) {
	  return Buffer.isBuffer(maybeBuf);
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log$3() {
	  console.log('%s - %s', timestamp(), format$a.apply(null, arguments));
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty$5(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var util$1 = {
	  inherits: inherits$1,
	  _extend: _extend,
	  log: log$3,
	  isBuffer: isBuffer,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction,
	  isError: isError,
	  isDate: isDate,
	  isObject: isObject,
	  isRegExp: isRegExp,
	  isUndefined: isUndefined,
	  isSymbol: isSymbol,
	  isString: isString$5,
	  isNumber: isNumber$5,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean$1,
	  isArray: isArray$5,
	  inspect: inspect,
	  deprecate: deprecate,
	  format: format$a,
	  debuglog: debuglog
	};

	/* Random Consistency Index */
	const RI_MAP = {
	    2: 0,
	    3: 0.58,
	    4: 0.9,
	    5: 1.12,
	    6: 1.24,
	    7: 1.32,
	    8: 1.41,
	    9: 1.45,
	    10: 1.49
	};

	/* AHP Rank Scale Table */
	const AHP_RANK_SCALE_TABLE = [{
	        scale: 1,
	        definition: 'Equal importance',
	        explaination: 'Two factors contribute equally to the objective.'
	    },
	    /*{
	        scale: 2,
	        definition: 'Between scale 1 and 3',
	        explaination: 'Between scale 1 and 3'
	    },*/
	    {
	        scale: 3,
	        definition: 'Somewhat more importance',
	        explaination: 'Experience and judgement slightly favor one over the other.'
	    },
	    /*
	    {
	        scale: 4,
	        definition: 'Between scale 3 and 5',
	        explaination: 'Between scale 3 and 5'
	    },
	    */
	    {
	        scale: 5,
	        definition: 'Much more important',
	        explaination: 'Experience and judgment strongly favor one over the other.'
	    },
	    /*
	    {
	        scale: 6,
	        definition: 'Between scale 5 and 7',
	        explaination: 'Between scale 5 and 7'
	    },
	    */
	    {
	        scale: 7,
	        definition: 'Very much more important',
	        explaination: 'Experience and judgment very strongly favor one over the other. Its importance is demonstrated in practice.'
	    },
	    /*
	    {
	        scale: 8,
	        definition: 'Between scale 7 and 9',
	        explaination: 'Between scale 7 and 9'
	    },
	    */
	    {
	        scale: 9,
	        definition: 'Absolutely more important',
	        explaination: 'The evidence favoring one over the other is of the highest possible validity.'
	    }
	];



	/**
	 * Class AHP
	 * 
	 * @class AHP
	 */
	class AHP {

	    /**
	     * Creates an instance of AHP.
	     * 
	     * @memberOf AHP
	     */
	    constructor(context) {
	        this.items = [];
	        this.criteria = [];
	        this.criteriaItemRank = {}; //for each criteria, compare between items
	        this.criteriaRank = [];

	        if (context) {
	            this.import(context);
	        }
	    }

	    /**
	     * Import context
	     * 
	     * @param {object} context 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    import (context) {
	        let self = this;
	        if (context.items && context.items.length > 0) {
	            self.addItems(context.items);
	        }
	        if (context.criteria && context.criteria.length > 0) {
	            self.addCriteria(context.criteria);
	        }
	        if (context.criteriaItemRank) {
	            for (var criterion in context.criteriaItemRank) {
	                self.criteriaItemRank[criterion] = self.criteriaItemRank[criterion] || [];

	                let criterionItemRankContext = context.criteriaItemRank[criterion];

	                //1D array => input with ranking score
	                if (Array.isArray(criterionItemRankContext) && criterionItemRankContext[0] && !Array.isArray(criterionItemRankContext[0])) {
	                    let scoreVector = criterionItemRankContext;
	                    for (let i = 0; i < scoreVector.length; i++) {
	                        for (let j = 0; j < scoreVector.length; j++) {
	                            self.criteriaItemRank[criterion][i][j] = scoreVector[i] / scoreVector[j];
	                            if (isNaN(self.criteriaItemRank[criterion][i][j])) {
	                                self.criteriaItemRank[criterion][i][j] = null;
	                            }
	                        }
	                    }
	                } else if (Array.isArray(criterionItemRankContext) && criterionItemRankContext[0] && Array.isArray(criterionItemRankContext[0])) {
	                    for (var i = 0; i < criterionItemRankContext.length; i++) {
	                        self.criteriaItemRank[criterion][i] = criterionItemRankContext[i] || [];
	                        for (var j = 0; j < criterionItemRankContext[i].length; j++) {
	                            self.criteriaItemRank[criterion][i][j] = criterionItemRankContext[i][j];
	                            if (isNaN(self.criteriaItemRank[criterion][i][j])) {
	                                self.criteriaItemRank[criterion][i][j] = null;
	                            }
	                        }
	                    }
	                }

	            }
	        }

	        if (context.criteriaRank) {

	            let criteriaRankContext = context.criteriaRank;
	            //1D array => input with ranking score
	            if (Array.isArray(criteriaRankContext) && criteriaRankContext[0] && !Array.isArray(criteriaRankContext[0])) {
	                let scoreVector = criteriaRankContext;
	                for (let i = 0; i < scoreVector.length; i++) {
	                    for (let j = 0; j < scoreVector.length; j++) {
	                        self.criteriaRank[i][j] = scoreVector[i] / scoreVector[j];
	                        if (isNaN(self.criteriaRank[i][j])) {
	                            self.criteriaRank[i][j] = null;
	                        }
	                    }
	                }
	            } else if (Array.isArray(criteriaRankContext) && criteriaRankContext[0] && Array.isArray(criteriaRankContext[0])) {
	                for (var i = 0; i < criteriaRankContext.length; i++) {
	                    self.criteriaRank[i] = self.criteriaRank[i] || [];
	                    for (var j = 0; j < criteriaRankContext[i].length; j++) {
	                        self.criteriaRank[i][j] = criteriaRankContext[i][j];
	                        if (isNaN(self.criteriaRank[i][j])) {
	                            self.criteriaRank[i][j] = null;
	                        }
	                    }
	                }
	            }

	        }
	        return self;
	    }


	    /**
	     * Export context as Json
	     * 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    export () {
	        let self = this;
	        let json = {
	            items: [],
	            criteria: [],
	            criteriaItemRank: {},
	            criteriaRank: []
	        };
	        json.items.push.apply(json.items, self.items);
	        json.criteria.push.apply(json.criteria, self.criteria);
	        json.criteriaItemRank = JSON.parse(JSON.stringify(self.criteriaItemRank));
	        json.criteriaRank = JSON.parse(JSON.stringify(self.criteriaRank));
	        return json;
	    }

	    /**
	     * Add Items
	     * 
	     * @param {string[]} items 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    addItems(items) {
	        let self = this;
	        items = items.filter((item) => self.items.indexOf(item) === -1);

	        let originalLength = self.items.length;
	        self.items.push.apply(self.items, items);

	        for (let criterion of self.criteria) {
	            for (let row of self.criteriaItemRank[criterion]) {
	                row.push.apply(row, Array(items.length).fill(0));
	            }
	            items.forEach((item, i) => {
	                let newRow = Array(self.items.length).fill(0);
	                newRow[originalLength + i] = 1;
	                self.criteriaItemRank[criterion].push(newRow);
	            });
	        }

	        return self;
	    }


	    /**
	     * Add Item
	     * 
	     * @param {string} item 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    addItem(item) {
	        this.addItems([item]);
	        return this;
	    }


	    /**
	     * Remove Item
	     * 
	     * @param {string} item 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    removeItem(item) {
	        let self = this;
	        let index = self.items.indexOf(item);
	        if (index >= 0) {
	            self.items.splice(index, 1);

	            for (let criterion of self.criteria) {
	                self.criteriaItemRank[criterion].splice(index, 1);
	                for (let row of self.criteriaItemRank[criterion]) {
	                    row.splice(index, 1);
	                }
	            }
	        }
	        return self;
	    }

	    /**
	     * Remove Items
	     * 
	     * @param {string[]} items 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    removeItems(items) {
	        let self = this;
	        items.forEach(item => self.removeItem(item));
	        return self;
	    }


	    /**
	     * Add Criteria
	     * 
	     * @param {string[]} criteria 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    addCriteria(criteria) {
	        var self = this;
	        criteria = criteria.filter((criterion) => self.criteria.indexOf(criterion) === -1);

	        let originalLength = self.criteria.length;
	        self.criteria.push.apply(self.criteria, criteria);

	        for (let criterion of self.criteria) {
	            if (!self.criteriaItemRank[criterion]) {
	                self.criteriaItemRank[criterion] = numeric1_2_6.identity(self.items.length);
	            }
	        }

	        for (let row of self.criteriaRank) {
	            row.push.apply(row, Array(criteria.length).fill(0));
	        }
	        criteria.forEach((criterion, i) => {
	            let newRow = Array(self.criteria.length).fill(0);
	            newRow[originalLength + i] = 1;
	            self.criteriaRank.push(newRow);
	        });

	        return self;
	    }


	    /**
	     * Add Criterion
	     * 
	     * @param {string} criterion 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    addCriterion(criterion) {
	        return this.addCriteria([criterion]);
	    }


	    /**
	     * Remove Criterion
	     * 
	     * @param {string} criterion 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    removeCriterion(criterion) {
	        let self = this;
	        let index = self.criteria.indexOf(criterion);
	        if (index >= 0) {
	            self.criteria.splice(index, 1);

	            delete self.criteriaItemRank[criterion];

	            self.criteriaRank.splice(index, 1);
	            for (let row of self.criteriaRank) {
	                row.splice(index, 1);
	            }
	        }
	        return self;
	    }


	    /**
	     * Remove Criteria
	     * 
	     * @param {string[]} criteria 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    removeCriteria(criteria) {
	        let self = this;
	        criteria.forEach(criterion => self.removeCriterion(criterion));
	        return self;
	    }


	    /**
	     * Reset Criteria perspective Item Rank Matrix
	     * 
	     * @param {string[]} criteria 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    resetCriteriaItemRank(criteria) {
	        let self = this;
	        criteria.forEach(function (criterion) {
	            this.criteriaItemRank[criterion] = numeric1_2_6.identity(self.items.length);
	        }, this);
	        return self;
	    }

	    /**
	     * Reset Criteria Rank Matrix
	     * 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    resetCriteriaRank() {
	        let self = this;
	        this.criteriaRank = numeric1_2_6.identity(self.criteria.length);
	        return self;
	    }


	    /**
	     * Set Criteria perspective Item Rank By Given Scores
	     * 
	     * @param {string} criterion 
	     * @param {number[]} scoreVector 
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    setCriteriaItemRankByGivenScores(criterion, scoreVector) {
	        let self = this;
	        for (let i = 0; i < scoreVector.length; i++) {
	            for (let j = 0; j < scoreVector.length; j++) {
	                self.criteriaItemRank[criterion][i][j] = scoreVector[i] / scoreVector[j];
	            }
	        }
	        return self;
	    }


	    /**
	     * Rank Criteria perspective Item
	     * 
	     * @param {string} criterion 
	     * @param {{preferredItem:string, comparingItem:string, scale:number}[]|(string|number)[]} preferences - Array of Preference. The 'preferredItem' of preference object is the preferred item while 'comparingItem' is the comparing item. The 'scale' is the preferred rank scale. You can pass the 3 objects as an array of 3 objects as well.
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    rankCriteriaItem(criterion, preferences) {
	        let self = this;
	        if (self.criteria.indexOf(criterion) === -1) {
	            return self;
	        }

	        for (let prefer of preferences) {
	            let preferredItem, comparingItem, scale;
	            if (Array.isArray(prefer)) {
	                [preferredItem, comparingItem, scale] = prefer;
	            } else {
	                preferredItem = prefer.preferredItem;
	                comparingItem = prefer.comparingItem;
	                scale = prefer.scale;
	            }
	            let itemAIndex = self.items.indexOf(preferredItem);
	            let itemBIndex = self.items.indexOf(comparingItem);
	            if (itemAIndex >= 0 && itemBIndex >= 0) {
	                self.criteriaItemRank[criterion][itemAIndex][itemBIndex] = scale;
	                self.criteriaItemRank[criterion][itemBIndex][itemAIndex] = 1 / scale;
	            }
	        }
	        return self;
	    }

	    /**
	     * Set Criteria Rank By Given Scores
	     * 
	     * @param {string} criterion
	     * @param {number[]} scoreVector
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    setCriteriaRankByGivenScores(scoreVector) {
	        let self = this;
	        for (let i = 0; i < scoreVector.length; i++) {
	            for (let j = 0; j < scoreVector.length; j++) {
	                self.criteriaRank[i][j] = scoreVector[i] / scoreVector[j];
	            }
	        }
	        return self;
	    }

	    /**
	     * Rank Criteria
	     * 
	     * @param {string} criterion 
	     * @param {{preferredCriterion:string, comparingCriterion:string, scale:number}[]|(string|number)[]} preferences - Array of Preference. The 'preferredCriterion' of preference object is the preferred criterion while 'comparingCriterion' is the comparing criterion. The 'scale' is the preferred rank scale. You can pass the 3 objects as an array of 3 objects as well.
	     * @returns {AHP}
	     * 
	     * @memberOf AHP
	     */
	    rankCriteria(preferences) {
	        let self = this;

	        for (let prefer of preferences) {
	            let preferredCriterion, comparingCriterion, scale;
	            if (Array.isArray(prefer)) {
	                [preferredCriterion, comparingCriterion, scale] = prefer;
	            } else {
	                preferredCriterion = prefer.preferredCriterion;
	                comparingCriterion = prefer.comparingCriterion;
	                scale = prefer.scale;
	            }
	            let criterionAIndex = self.criteria.indexOf(preferredCriterion);
	            let criterionBIndex = self.criteria.indexOf(comparingCriterion);
	            if (criterionAIndex >= 0 && criterionBIndex >= 0) {
	                self.criteriaRank[criterionAIndex][criterionBIndex] = scale;
	                self.criteriaRank[criterionBIndex][criterionAIndex] = 1 / scale;
	            }
	        }
	        return self;
	    }

	    /**
	     * Find next Problem,
	     * 
	     * @returns {ContextError}
	     * 
	     * @memberOf AHP
	     */
	    findNextProblem() {
	        let self = this;

	        if (!self.items || self.items.length === 0) {
	            return new NoItem();
	        }

	        if (!self.criteria || self.criteria.length === 0) {
	            return new NoCriteria();
	        }

	        let [result, rowI, colI] = AHP.findRankMatrixIncompleteCell(self.criteriaRank);
	        if (result) {
	            return new MissingCriteriaRank({
	                criterionA: self.criteria[rowI],
	                criterionB: self.criteria[colI]
	            });
	        }

	        for (let crit in self.criteriaItemRank) {
	            let [result, rowI, colI] = AHP.findRankMatrixIncompleteCell(self.criteriaItemRank[crit]);
	            if (result) {
	                return new MissingCriteriaItemRank({
	                    criterion: crit,
	                    itemA: self.items[rowI],
	                    itemB: self.items[colI]
	                });
	            }
	        }

	        let {
	            ci,
	            ri,
	            cr,
	            weightedVector
	        } = AHP.calculateMatrixConsistency(self.criteriaRank);
	        if (cr > 0.1) {
	            return new CriteriaRankInsufficientConsistencyRatio({
	                cr: cr
	            });
	        }

	        for (let j = 0; j < self.criteria.length; j++) {
	            let crit = self.criteria[j];
	            let {
	                ci,
	                ri,
	                cr,
	                weightedVector
	            } = AHP.calculateMatrixConsistency(self.criteriaItemRank[crit]);
	            if (cr > 0.1) {
	                return new CriteriaItemRankInsufficientConsistencyRatio({
	                    criterion: crit,
	                    cr: cr
	                });
	            }
	        }

	        return null;
	    }

	    /**
	     * Debug Analytic Process
	     * @returns {error: ContextError, rankingMatrix: number[][], criteriaRankMetaMap:{{ci:number,ri:number,cr:number}}, critWeightVector, rankedScoreMap:{item:number}, rankedScores: number[], log:string }
	     * 
	     * @memberOf AHP
	     */
	    debug() {
	        let self = this;
	        let log = '';
	        let debugLog = function () {
	            for (let obj of arguments) {
	                if (typeof obj === 'object') {
	                    log += util$1.inspect(obj, false, null);
	                } else {
	                    log += obj;
	                }
	                log += '\n';
	            }
	        };

	        debugLog('==========================================');
	        debugLog('context:');
	        debugLog('items: ', self.items);
	        debugLog('criteria: ', self.criteria);
	        debugLog('criteriaItemRank: ', self.criteriaItemRank);
	        debugLog('criteriaRank: ', self.criteriaRank);
	        debugLog('__________________________________');

	        let problem = self.findNextProblem();
	        if (problem) {
	            debugLog(problem);
	        }

	        if (problem && (problem.type === AHP.contextErrorType.NoItem || problem.type === AHP.contextErrorType.NoCriteria
	                /* ||
	                                problem.type === AHP.contextErrorType.MissingCriteriaItemRank || problem.type === AHP.contextErrorType.MissingCriteriaRank*/
	            )) {
	            return {
	                error: problem,
	                rankingMatrix: null,
	                itemRankMetaMap: null,
	                criteriaRankMetaMap: null,
	                rankedScoreMap: null,
	                log: log
	            };
	        }
	        for (let crit in self.criteriaItemRank) {
	            let completed = AHP.checkRankMatrixCompleted(self.criteriaItemRank[crit]);

	            debugLog(`criteriaItemRank['${crit}']`);
	            if (!completed) {
	                debugLog('(Incomplete)');
	            }            debugLog(AHP.printMatrixAsStr(self.criteriaItemRank[crit], self.items, 10));

	            if (completed) {
	                let {
	                    ci,
	                    ri,
	                    cr
	                } = AHP.calculateMatrixConsistency(self.criteriaItemRank[crit]);
	                debugLog(`Consistentcy index: ${ci}`);
	                debugLog(`Random index: ${ri}`);
	                debugLog(`Consistentcy ratio: ${cr}`);
	                if (cr <= 0.1) {
	                    debugLog(`CR<=0.1 => sufficient consistency`);
	                } else {
	                    debugLog(`CR>0.1 => insufficient consistency`);
	                }
	            }
	            debugLog('__________________________________');
	        }

	        let maxCriteionLength = self.criteria.map(a => a.length).reduce((a, b) => Math.max(a.length, b.length), 5);
	        let critRankCompleted = self.criteriaRank.length > 0 && AHP.checkRankMatrixCompleted(self.criteriaRank);
	        debugLog(`criteriaRank:`);
	        if (!critRankCompleted) {
	            debugLog('(Incomplete)');
	        }        debugLog(AHP.printMatrixAsStr(self.criteriaRank, self.criteria, 5));

	        if (critRankCompleted) {
	            let {
	                ci,
	                ri,
	                cr,
	                weightedVector
	            } = AHP.calculateMatrixConsistency(self.criteriaRank);
	            debugLog(`Consistentcy index: ${ci}`);
	            debugLog(`Random index: ${ri}`);
	            debugLog(`Consistentcy ratio: ${cr}`);
	            if (cr > 0.1) {
	                critRankCompleted = false;
	                debugLog(`CR>0.1 => insufficient consistency`);
	            } else {
	                debugLog(`CR<=0.1 => sufficient consistency`);
	            }
	            debugLog(`Criteria Weight Vector: ${weightedVector}`);
	            debugLog('__________________________________\n');
	        }


	        let rankingMatrix = Array(self.items.length).fill(null).map(() => Array(self.criteria.length).fill(0));
	        let itemRankMetaMap = {};
	        for (let j = 0; j < self.criteria.length; j++) {
	            let crit = self.criteria[j];
	            let {
	                ci,
	                ri,
	                cr,
	                weightedVector
	            } = AHP.calculateMatrixConsistency(self.criteriaItemRank[crit]);
	            for (let i = 0; i < weightedVector.length; i++) {
	                rankingMatrix[i][j] = weightedVector[i];
	            }
	            itemRankMetaMap[crit] = {
	                ci,
	                ri,
	                cr
	            };
	        }
	        debugLog('rankingMatrix: (Higher score is better)');
	        debugLog(AHP.print2DMatrixAsStr(numeric1_2_6.transpose(rankingMatrix), self.items, self.criteria, 5));
	        debugLog('__________________________________');

	        let criteriaRankMetaMap = AHP.calculateMatrixConsistency(self.criteriaRank);
	        let critWeightVector = criteriaRankMetaMap.weightedVector;

	        let rankedScores = numeric1_2_6.dotMV(rankingMatrix, critWeightVector);
	        let rankedScoreMap = {};
	        self.items.forEach((item, i) => {
	            rankedScoreMap[item] = rankedScores[i];
	        });
	        debugLog('ranked item scores: (Higher score is better)');
	        debugLog(AHP.print2DMatrixAsStr(numeric1_2_6.transpose([rankedScores]), ['Score'], self.items, 5));
	        debugLog('==========================================');

	        return {
	            error: problem,
	            rankingMatrix,
	            itemRankMetaMap,
	            criteriaRankMetaMap,
	            rankedScoreMap,
	            rankedScores,
	            log
	        };
	    }

	    /**
	     * Debug Analytic Process
	     * @returns {error: ContextError, rankingMatrix: number[][], criteriaRankMetaMap:{{ci:number,ri:number,cr:number}}, critWeightVector, rankedScoreMap:{item:number}, rankedScores: number[] }
	     * 
	     * @memberOf AHP
	     */
	    run() {
	        let {
	            error,
	            rankingMatrix,
	            itemRankMetaMap,
	            criteriaRankMetaMap,
	            rankedScoreMap,
	            rankedScores
	        } = this.debug();
	        return {
	            error,
	            rankingMatrix,
	            itemRankMetaMap,
	            criteriaRankMetaMap,
	            rankedScoreMap,
	            rankedScores
	        }
	    }

	    /**
	     * Find Rank Matrix Incomplete Cell which is not defined or NaN.
	     * 
	     * @static
	     * @param {number[][]} matrix 
	     * @returns {(boolean|number)[]} - Array object. The inner array contains `find result` as the 1st object (boolean), and the row index and column index of incomplete cell as 2nd and 3rd object.
	     * 
	     * @memberOf AHP
	     */
	    static findRankMatrixIncompleteCell(matrix) {
	        for (let i = 0; i < matrix.length; i++) {
	            for (let j = 0; j < matrix.length; j++) {
	                if (isNaN(matrix[i][j]) || matrix[i][j] <= 0) {
	                    return [true, i, j];
	                }
	            }
	        }
	        return [false, -1, -1];
	    }

	    /**
	     * Check Rank Matrix Complated.
	     * @static
	     * @param {number[][]} matrix 
	     * @returns {boolean}
	     * 
	     * @memberOf AHP
	     */
	    static checkRankMatrixCompleted(matrix) {
	        for (let row of matrix) {
	            for (let cell of row) {
	                if (isNaN(cell) || cell <= 0) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }

	    /**
	     * static util function for printing matrix
	     * 
	     * @static
	     * @param {number[][]} matrix 
	     * @param {string[]} matrixHeaders 
	     * @param {number} minCellLength 
	     * @returns {string}
	     * 
	     * @memberOf AHP
	     */
	    static printMatrixAsStr(matrix, matrixHeaders, minCellLength) {
	        if (!matrix || !matrixHeaders || matrix.length !== matrixHeaders.length) {
	            return null;
	        }
	        let maxItemLength = matrixHeaders.map(a => a.length).reduce((a, b) => Math.max(a, b), minCellLength);
	        let str = '';
	        str += '-'.repeat(maxItemLength + (matrixHeaders.length) * (maxItemLength + 1) + 2) + '\n';
	        str += '|' + ' '.repeat(maxItemLength) + '|' + matrixHeaders.map(item => (' '.repeat(maxItemLength - item.length) + item)).join('|') + '|\n';
	        str += '|' + '-'.repeat(maxItemLength) + '|' + matrixHeaders.map(item => ('-'.repeat(maxItemLength))).join('|') + '|\n';
	        for (let i = 0; i < matrix.length; i++) {
	            let rowItem = matrixHeaders[i];
	            let row = matrix[i];
	            str += '|' + ' '.repeat(maxItemLength - rowItem.length) + rowItem + '|' +
	                row.map((datum) => {
	                    let rounded = Number(Math.round(datum + 'e3') + 'e-3').toFixed(3);
	                    let str = rounded.toString();
	                    if (str.length < maxItemLength) {
	                        str = ' '.repeat(maxItemLength - str.length) + str;
	                    }
	                    return str;
	                }).join('|') +
	                '|\n';
	        }        str += '-'.repeat(maxItemLength + (matrixHeaders.length) * (maxItemLength + 1) + 2) + '\n';
	        return str;
	    }

	    static print2DMatrixAsStr(matrix, matrixColHeaders, matrixRowItems, minCellLength) {
	        if (!matrix || !matrixColHeaders || !matrixRowItems || matrix.length !== matrixRowItems.length) {
	            return null;
	        }
	        let maxItemLength = matrixColHeaders.map(a => a.length).reduce((a, b) => Math.max(a, b), minCellLength);
	        let maxRowItemLength = matrixRowItems.map(a => a.length).reduce((a, b) => Math.max(a, b), minCellLength);
	        let str = '';
	        str += '-'.repeat(maxRowItemLength + (matrixColHeaders.length) * (maxItemLength + 1) + 2) + '\n';
	        str += '|' + ' '.repeat(maxRowItemLength) + '|' + matrixColHeaders.map(item => (' '.repeat(maxItemLength - item.length) + item)).join('|') + '|\n';
	        str += '|' + '-'.repeat(maxRowItemLength) + '|' + matrixColHeaders.map(item => ('-'.repeat(maxItemLength))).join('|') + '|\n';
	        for (let i = 0; i < matrix.length; i++) {
	            let rowItem = matrixRowItems[i];
	            let row = matrix[i];
	            str += '|' + ' '.repeat(maxRowItemLength - rowItem.length) + rowItem + '|' +
	                row.map((datum) => {
	                    let rounded = Number(Math.round(datum + 'e3') + 'e-3').toFixed(3);
	                    let str = rounded.toString();
	                    if (str.length < maxItemLength) {
	                        str = ' '.repeat(maxItemLength - str.length) + str;
	                    }
	                    return str;
	                }).join('|') +
	                '|\n';
	        }        str += '-'.repeat(maxRowItemLength + (matrixColHeaders.length) * (maxItemLength + 1) + 2) + '\n';
	        return str;
	    }

	    /**
	     * static util function for calculating matrix consistency
	     * 
	     * @static
	     * @param {number[][]} matrix 
	     * @returns {ci: number, ri: number, cr: number, weightedVector: number[]}
	     * 
	     * @memberOf AHP
	     */
	    static calculateMatrixConsistency(matrix) {
	        if (matrix.length === 0) {
	            return {
	                ci: null,
	                ri: null,
	                cr: null,
	                weightedVector: null
	            }
	        }

	        let weightedMatrix = [];

	        for (let i = 0; i < matrix.length; i++) {
	            let row = [];
	            for (let j = 0; j < matrix.length; j++) {
	                row.push(matrix[i][j]);
	            }
	            weightedMatrix.push(row);
	        }

	        for (let i = 0; i < matrix.length; i++) {
	            let colWeightFactor = 1 / mathjs.sum(matrix.map((row) => row[i]));
	            for (let j = 0; j < matrix.length; j++) {
	                weightedMatrix[j][i] = matrix[j][i] * colWeightFactor;
	            }
	        }

	        let weightedVector = weightedMatrix.map(row => mathjs.mean(row));
	        let consistentcyVector = numeric1_2_6.dotMV(matrix, weightedVector);
	        let consistentcyMeasures = [];
	        for (let i = 0; i < weightedVector.length; i++) {
	            consistentcyMeasures[i] = consistentcyVector[i] / weightedVector[i];
	        }
	        let avgConsistentcyMeasures = mathjs.mean(consistentcyMeasures);
	        let ci = (avgConsistentcyMeasures - matrix.length) / (matrix.length-1);
	        let ri = RI_MAP[matrix.length];
	        let cr = ri > 0 ? ci / ri : 0;
	        return {
	            ci,
	            ri,
	            cr,
	            weightedVector
	        };
	    }
	}


	/**
	 * Context Error
	 * 
	 * @class ContextError
	 */
	class ContextError {

	    /**
	     * Creates an instance of ContextError.
	     * 
	     * @memberOf ContextError
	     */
	    constructor() {
	        this.type = null;
	        this.context = {};
	    }

	    /**
	     * get description
	     * @returns {string}
	     * @memberOf ContextError
	     */
	    getDescription() {}
	}


	/**
	 * No Item Error
	 * 
	 * @class NoItem
	 * @extends {ContextError}
	 */
	class NoItem extends ContextError {

	    /**
	     * Creates an instance of NoItem.
	     * 
	     * @memberOf NoItem
	     */
	    constructor() {
	        super();
	        this.type = "NO_ITEM";
	    }

	    /**
	     * get description
	     * @returns {string}
	     * @memberOf NoItem
	     */
	    getDescription() {
	        return 'Missing comparison options information.';
	    }
	}


	/**
	 * No Criteria Error
	 * 
	 * @class NoCriteria
	 * @extends {ContextError}
	 */
	class NoCriteria extends ContextError {

	    /**
	     * Creates an instance of NoCriteria.
	     * 
	     * @memberOf NoCriteria
	     */
	    constructor() {
	        super();
	        this.type = "NO_CRITERIA";
	    }

	    /**
	     * get description
	     * @returns {string}
	     * @memberOf NoCriteria
	     */
	    getDescription() {
	        return 'Missing comparison criteria information.';
	    }
	}

	/**
	 * Missing Criteria Iteam Rank Error
	 * 
	 * @class MissingCriteriaItemRank
	 * @extends {ContextError}
	 */
	class MissingCriteriaItemRank extends ContextError {

	    /**
	     * Creates an instance of MissingCriteriaItemRank.
	     * @param {any} {
	     *         criterion,
	     *         itemA,
	     *         itemB
	     *     } 
	     * 
	     * @memberOf MissingCriteriaItemRank
	     */
	    constructor({
	        criterion,
	        itemA,
	        itemB
	    }) {
	        super();
	        this.type = 'MISSING_CRITERIA_ITEM_RANK';
	        this.context = {
	            criterion,
	            itemA,
	            itemB
	        };
	    }

	    /**
	     * get description
	     * @returns {string}
	     * @memberOf MissingCriteriaItemRank
	     */
	    getDescription() {
	        return `In terms of criterion "${this.context.criterion}", which option do you prefer more and what is the scale level do you prefer?\n` +
	            `Option (A): "${this.context.itemA}", Option (B): "${this.context.itemB}"\n\n` +
	            `Scale(1-9):\n` +
	            AHP_RANK_SCALE_TABLE.map(scaleItem => `${scaleItem.scale}: ${scaleItem.definition}`).join('\n') + '\n' +
	            '2,4,6,8: Intermediate values\n';
	    }
	}


	/**
	 * Missing Criteria Rank Error
	 * 
	 * @class MissingCriteriaRank
	 * @extends {ContextError}
	 */
	class MissingCriteriaRank extends ContextError {
	    /**
	     * Creates an instance of MissingCriteriaRank.
	     * @param {any} {
	     *         criterionA,
	     *         criterionB
	     *     } 
	     * 
	     * @memberOf MissingCriteriaRank
	     */
	    constructor({
	        criterionA,
	        criterionB
	    }) {
	        super();
	        this.type = 'MISSING_CRITERIA_RANK';
	        this.context = {
	            criterionA,
	            criterionB
	        };
	    }

	    /**
	     * get description
	     * @returns {string}
	     * @memberOf MissingCriteriaRank
	     */
	    getDescription() {
	        return `Which critetion do you prefer more and what is the scale level do you prefer?\n` +
	            `Option (A): "${this.context.criterionA}", Option (B): "${this.context.criterionB}"\n\n` +
	            `Scale(1-9):\n` +
	            AHP_RANK_SCALE_TABLE.map(scaleItem => `${scaleItem.scale}: ${scaleItem.definition}`).join('\n') + '\n' +
	            '2,4,6,8: Intermediate values\n';
	    }

	}

	/**
	 * Criteria Item Rank Insufficient Consistendy Ratio Error
	 * 
	 * @class CriteriaItemRankInsufficientConsistencyRatio
	 * @extends {ContextError}
	 */
	class CriteriaItemRankInsufficientConsistencyRatio extends ContextError {

	    /**
	     * Creates an instance of CriteriaItemRankInsufficientConsistencyRatio.
	     * @param {any} {
	     *         criterion,
	     *         cr
	     *     } 
	     * 
	     * @memberOf CriteriaItemRankInsufficientConsistencyRatio
	     */
	    constructor({
	        criterion,
	        cr
	    }) {
	        super();
	        this.type = 'CRITERIA_ITEM_RANK_INSUFFICIENT_CONSISTENCY_RATIO';
	        this.context = {
	            criterion,
	            cr
	        };
	    }

	    /**
	     * get description
	     * @returns {string}
	     * @memberOf CriteriaItemRankInsufficientConsistencyRatio
	     */
	    getDescription() {
	        return `In terms of criterion "${this.context.criterion}", criteria item rank matrix consistency ratio > 0.1`;
	    }
	}


	/**
	 * Criteria Tank Insufficiency Ratio
	 * 
	 * @class CriteriaRankInsufficientConsistencyRatio
	 * @extends {ContextError}
	 */
	class CriteriaRankInsufficientConsistencyRatio extends ContextError {

	    /**
	     * Creates an instance of CriteriaRankInsufficientConsistencyRatio.
	     * @param {any} {
	     *         cr
	     *     } 
	     * 
	     * @memberOf CriteriaRankInsufficientConsistencyRatio
	     */
	    constructor({
	        cr
	    }) {
	        super();
	        this.type = 'CRITERIA_RANK_INSUFFICIENT_CONSISTENCY_RATIO';
	        this.context = {
	            cr
	        };
	    }

	    /**
	     * get description
	     * @returns {string}
	     * @memberOf CriteriaRankInsufficientConsistencyRatio
	     */
	    getDescription() {
	        return `Criteria rank matrix consistency ratio > 0.1`;
	    }
	}

	AHP.AHP_RANK_SCALE_TABLE = AHP_RANK_SCALE_TABLE;
	AHP.contextErrorType = {
	    NoItem: 'NO_ITEM',
	    NoCriteria: 'NO_CRITERIA',
	    MissingCriteriaItemRank: 'MISSING_CRITERIA_ITEM_RANK',
	    MissingCriteriaRank: 'MISSING_CRITERIA_RANK',
	    CriteriaItemRankInsufficientConsistencyRatio: 'CRITERIA_ITEM_RANK_INSUFFICIENT_CONSISTENCY_RATIO',
	    CriteriaRankInsufficientConsistencyRatio: 'CRITERIA_RANK_INSUFFICIENT_CONSISTENCY_RATIO'
	};
	var ahp = AHP;

	var ahp$1 = ahp;

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity$2(value) {
	  return value;
	}

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Built-in value references. */
	var Symbol$1 = root.Symbol;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty$6.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString$1(value) {
	  return nativeObjectToString$1.call(value);
	}

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? getRawTag(value)
	    : objectToString$1(value);
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$1(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$1(value) {
	  if (!isObject$1(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto$1 = Function.prototype,
	    objectProto$2 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$7 = objectProto$2.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString$1.call(hasOwnProperty$7).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject$1(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity$2 : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity$2), func + '');
	}

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$1 = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
	}

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction$1(value);
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$1 = Math.max;

	/**
	 * This method is like `_.zip` except that it accepts an array of grouped
	 * elements and creates an array regrouping the elements to their pre-zip
	 * configuration.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.2.0
	 * @category Array
	 * @param {Array} array The array of grouped elements to process.
	 * @returns {Array} Returns the new array of regrouped elements.
	 * @example
	 *
	 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	 * // => [['a', 1, true], ['b', 2, false]]
	 *
	 * _.unzip(zipped);
	 * // => [['a', 'b'], [1, 2], [true, false]]
	 */
	function unzip(array) {
	  if (!(array && array.length)) {
	    return [];
	  }
	  var length = 0;
	  array = arrayFilter(array, function(group) {
	    if (isArrayLikeObject(group)) {
	      length = nativeMax$1(group.length, length);
	      return true;
	    }
	  });
	  return baseTimes(length, function(index) {
	    return arrayMap(array, baseProperty(index));
	  });
	}

	/**
	 * This method is like `_.unzip` except that it accepts `iteratee` to specify
	 * how regrouped values should be combined. The iteratee is invoked with the
	 * elements of each group: (...group).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.8.0
	 * @category Array
	 * @param {Array} array The array of grouped elements to process.
	 * @param {Function} [iteratee=_.identity] The function to combine
	 *  regrouped values.
	 * @returns {Array} Returns the new array of regrouped elements.
	 * @example
	 *
	 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	 * // => [[1, 10, 100], [2, 20, 200]]
	 *
	 * _.unzipWith(zipped, _.add);
	 * // => [3, 30, 300]
	 */
	function unzipWith(array, iteratee) {
	  if (!(array && array.length)) {
	    return [];
	  }
	  var result = unzip(array);
	  if (iteratee == null) {
	    return result;
	  }
	  return arrayMap(result, function(group) {
	    return apply(iteratee, undefined, group);
	  });
	}

	/**
	 * This method is like `_.zip` except that it accepts `iteratee` to specify
	 * how grouped values should be combined. The iteratee is invoked with the
	 * elements of each group: (...group).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.8.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to process.
	 * @param {Function} [iteratee=_.identity] The function to combine
	 *  grouped values.
	 * @returns {Array} Returns the new array of grouped elements.
	 * @example
	 *
	 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	 *   return a + b + c;
	 * });
	 * // => [111, 222]
	 */
	var zipWith = baseRest(function(arrays) {
	  var length = arrays.length,
	      iteratee = length > 1 ? arrays[length - 1] : undefined;

	  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	  return unzipWith(arrays, iteratee);
	});

	const inputsToAhpResults = function(myItems, myCriteria, myCriteriaItemRank, myCriteriaRank) {

	  const ahpContext = new ahp$1();

		ahpContext.import({
		  items: myItems,
			criteria: myCriteria,
			criteriaItemRank: myCriteriaItemRank,
			criteriaRank: myCriteriaRank,
		});

		const output = ahpContext.debug();

		const criteria = Object.keys(output.itemRankMetaMap);
		const criteriaWeights = output.criteriaRankMetaMap.weightedVector;
		const alternatives = Object.keys(output.rankedScoreMap);
		const alternativesTotalScores = output.rankedScores;

		// Score of each alternative ranking with respect to each criteria multiplied by the criteria's weight.
		// When you add up _these_ totals for each alternative, you end up with the same value as the alternative's total score.
		const alternativesPriorityMatrix = [];
		output.rankingMatrix.forEach((alternativeScores, alternativeIndex) => {
		  const scoresMultipliedByCriteriaWeight = [];
		  alternativeScores.forEach((alternativeCriteriaScore, criteriaIndex) => {
		    scoresMultipliedByCriteriaWeight[criteriaIndex] = alternativeCriteriaScore * criteriaWeights[criteriaIndex];
		  });
		  alternativesPriorityMatrix[alternativeIndex] = scoresMultipliedByCriteriaWeight.reverse();
		});

		const criteriasWithScores = zipWith(criteria, criteriaWeights, (criteria, score) => {
		  return `${criteria}: ${Number.parseFloat(score).toFixed(3)}`;
		});

		const alternativesWithScores = zipWith(alternatives, alternativesTotalScores, (alternative, score) => {
		  return `${alternative}: ${Number.parseFloat(score).toFixed(3)}`;
		});

		return {
			criteria: {
				labels: criteriasWithScores,
				series: [criteriaWeights],
			},
			rankings: {
				labels: alternativesWithScores,
				series: unzip(alternativesPriorityMatrix),
			},
		}
	};

	window.chartist = chartist;
	window.runCalculation = inputsToAhpResults;

}());
